//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MySqlParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

#region Copyright
/*
 * Copyright 2019 Igor Kazantsev
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 */
#endregion


using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class MySqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, ADD=5, 
		ALL=6, ALTER=7, ANALYZE=8, AND=9, AS=10, ASC=11, BEFORE=12, BETWEEN=13, 
		BOTH=14, BY=15, CALL=16, CASCADE=17, CASE=18, CAST=19, CHANGE=20, CHARACTER=21, 
		CHECK=22, COLLATE=23, COLUMN=24, CONDITION=25, CONSTRAINT=26, CONTINUE=27, 
		CONVERT=28, CREATE=29, CROSS=30, CURRENT_USER=31, CURSOR=32, DATABASE=33, 
		DATABASES=34, DECLARE=35, DEFAULT=36, DELAYED=37, DELETE=38, DESC=39, 
		DESCRIBE=40, DETERMINISTIC=41, DISTINCT=42, DISTINCTROW=43, DROP=44, EACH=45, 
		ELSE=46, ELSEIF=47, ENCLOSED=48, ESCAPED=49, EXISTS=50, EXIT=51, EXPLAIN=52, 
		FALSE=53, FETCH=54, FOR=55, FORCE=56, FOREIGN=57, FROM=58, FULLTEXT=59, 
		GRANT=60, GROUP=61, HAVING=62, HIGH_PRIORITY=63, IF=64, IGNORE=65, IN=66, 
		INDEX=67, INFILE=68, INNER=69, INOUT=70, INSERT=71, INTERVAL=72, INTO=73, 
		IS=74, ITERATE=75, JOIN=76, KEY=77, KEYS=78, KILL=79, LEADING=80, LEAVE=81, 
		LEFT=82, LIKE=83, LIMIT=84, LINEAR=85, LINES=86, LOAD=87, LOCK=88, LOOP=89, 
		LOW_PRIORITY=90, MASTER_BIND=91, MASTER_SSL_VERIFY_SERVER_CERT=92, MATCH=93, 
		MAXVALUE=94, MODIFIES=95, NATURAL=96, NOT=97, NO_WRITE_TO_BINLOG=98, NULL_LITERAL=99, 
		ON=100, OPTIMIZE=101, OPTION=102, OPTIONALLY=103, OR=104, ORDER=105, OUT=106, 
		OUTER=107, OUTFILE=108, PARTITION=109, PRIMARY=110, PROCEDURE=111, PURGE=112, 
		RANGE=113, READ=114, READS=115, REFERENCES=116, REGEXP=117, RELEASE=118, 
		RENAME=119, REPEAT=120, REPLACE=121, REQUIRE=122, RESTRICT=123, RETURN=124, 
		REVOKE=125, RIGHT=126, RLIKE=127, SCHEMA=128, SCHEMAS=129, SELECT=130, 
		SET=131, SEPARATOR=132, SHOW=133, SPATIAL=134, SQL=135, SQLEXCEPTION=136, 
		SQLSTATE=137, SQLWARNING=138, SQL_BIG_RESULT=139, SQL_CALC_FOUND_ROWS=140, 
		SQL_SMALL_RESULT=141, SSL=142, STARTING=143, STRAIGHT_JOIN=144, TABLE=145, 
		TERMINATED=146, THEN=147, TO=148, TRAILING=149, TRIGGER=150, TRUE=151, 
		UNDO=152, UNION=153, UNIQUE=154, UNLOCK=155, UNSIGNED=156, UPDATE=157, 
		USAGE=158, USE=159, USING=160, VALUES=161, WHEN=162, WHERE=163, WHILE=164, 
		WITH=165, WRITE=166, XOR=167, ZEROFILL=168, TINYINT=169, SMALLINT=170, 
		MEDIUMINT=171, INT=172, INTEGER=173, BIGINT=174, REAL=175, DOUBLE=176, 
		FLOAT=177, DECIMAL=178, NUMERIC=179, DATE=180, TIME=181, TIMESTAMP=182, 
		DATETIME=183, YEAR=184, CHAR=185, VARCHAR=186, BINARY=187, VARBINARY=188, 
		TINYBLOB=189, BLOB=190, MEDIUMBLOB=191, LONGBLOB=192, TINYTEXT=193, TEXT=194, 
		MEDIUMTEXT=195, LONGTEXT=196, ENUM=197, YEAR_MONTH=198, DAY_HOUR=199, 
		DAY_MINUTE=200, DAY_SECOND=201, HOUR_MINUTE=202, HOUR_SECOND=203, MINUTE_SECOND=204, 
		SECOND_MICROSECOND=205, MINUTE_MICROSECOND=206, HOUR_MICROSECOND=207, 
		DAY_MICROSECOND=208, AVG=209, BIT_AND=210, BIT_OR=211, BIT_XOR=212, COUNT=213, 
		GROUP_CONCAT=214, MAX=215, MIN=216, STD=217, STDDEV=218, STDDEV_POP=219, 
		STDDEV_SAMP=220, SUM=221, VAR_POP=222, VAR_SAMP=223, VARIANCE=224, CURRENT_DATE=225, 
		CURRENT_TIME=226, CURRENT_TIMESTAMP=227, LOCALTIME=228, CURDATE=229, CURTIME=230, 
		DATE_ADD=231, DATE_SUB=232, EXTRACT=233, LOCALTIMESTAMP=234, NOW=235, 
		POSITION=236, SUBSTR=237, SUBSTRING=238, SYSDATE=239, TRIM=240, UTC_DATE=241, 
		UTC_TIME=242, UTC_TIMESTAMP=243, ACCOUNT=244, ACTION=245, AFTER=246, AGGREGATE=247, 
		ALGORITHM=248, ANY=249, AT=250, AUTHORS=251, AUTOCOMMIT=252, AUTOEXTEND_SIZE=253, 
		AUTO_INCREMENT=254, AVG_ROW_LENGTH=255, BEGIN=256, BINLOG=257, BIT=258, 
		BLOCK=259, BOOL=260, BOOLEAN=261, BTREE=262, CACHE=263, CASCADED=264, 
		CHAIN=265, CHANGED=266, CHANNEL=267, CHECKSUM=268, CIPHER=269, CLIENT=270, 
		CLOSE=271, COALESCE=272, CODE=273, COLUMNS=274, COLUMN_FORMAT=275, COMMENT=276, 
		COMMIT=277, COMPACT=278, COMPLETION=279, COMPRESSED=280, COMPRESSION=281, 
		CONCURRENT=282, CONNECTION=283, CONSISTENT=284, CONTAINS=285, CONTEXT=286, 
		CONTRIBUTORS=287, COPY=288, CPU=289, DATA=290, DATAFILE=291, DEALLOCATE=292, 
		DEFAULT_AUTH=293, DEFINER=294, DELAY_KEY_WRITE=295, DES_KEY_FILE=296, 
		DIRECTORY=297, DISABLE=298, DISCARD=299, DISK=300, DO=301, DUMPFILE=302, 
		DUPLICATE=303, DYNAMIC=304, ENABLE=305, ENCRYPTION=306, END=307, ENDS=308, 
		ENGINE=309, ENGINES=310, ERROR=311, ERRORS=312, ESCAPE=313, EVEN=314, 
		EVENT=315, EVENTS=316, EVERY=317, EXCHANGE=318, EXCLUSIVE=319, EXPIRE=320, 
		EXPORT=321, EXTENDED=322, EXTENT_SIZE=323, FAST=324, FAULTS=325, FIELDS=326, 
		FILE_BLOCK_SIZE=327, FILTER=328, FIRST=329, FIXED=330, FLUSH=331, FOLLOWS=332, 
		FOUND=333, FULL=334, FUNCTION=335, GENERAL=336, GLOBAL=337, GRANTS=338, 
		GROUP_REPLICATION=339, HANDLER=340, HASH=341, HELP=342, HOST=343, HOSTS=344, 
		IDENTIFIED=345, IGNORE_SERVER_IDS=346, IMPORT=347, INDEXES=348, INITIAL_SIZE=349, 
		INPLACE=350, INSERT_METHOD=351, INSTALL=352, INSTANCE=353, INVOKER=354, 
		IO=355, IO_THREAD=356, IPC=357, ISOLATION=358, ISSUER=359, JSON=360, KEY_BLOCK_SIZE=361, 
		LANGUAGE=362, LAST=363, LEAVES=364, LESS=365, LEVEL=366, LIST=367, LOCAL=368, 
		LOGFILE=369, LOGS=370, MASTER=371, MASTER_AUTO_POSITION=372, MASTER_CONNECT_RETRY=373, 
		MASTER_DELAY=374, MASTER_HEARTBEAT_PERIOD=375, MASTER_HOST=376, MASTER_LOG_FILE=377, 
		MASTER_LOG_POS=378, MASTER_PASSWORD=379, MASTER_PORT=380, MASTER_RETRY_COUNT=381, 
		MASTER_SSL=382, MASTER_SSL_CA=383, MASTER_SSL_CAPATH=384, MASTER_SSL_CERT=385, 
		MASTER_SSL_CIPHER=386, MASTER_SSL_CRL=387, MASTER_SSL_CRLPATH=388, MASTER_SSL_KEY=389, 
		MASTER_TLS_VERSION=390, MASTER_USER=391, MAX_CONNECTIONS_PER_HOUR=392, 
		MAX_QUERIES_PER_HOUR=393, MAX_ROWS=394, MAX_SIZE=395, MAX_UPDATES_PER_HOUR=396, 
		MAX_USER_CONNECTIONS=397, MEDIUM=398, MERGE=399, MID=400, MIGRATE=401, 
		MIN_ROWS=402, MODE=403, MODIFY=404, MUTEX=405, MYSQL=406, NAME=407, NAMES=408, 
		NCHAR=409, NEVER=410, NEXT=411, NO=412, NODEGROUP=413, NONE=414, OFFLINE=415, 
		OFFSET=416, OJ=417, OLD_PASSWORD=418, ONE=419, ONLINE=420, ONLY=421, OPEN=422, 
		OPTIMIZER_COSTS=423, OPTIONS=424, OWNER=425, PACK_KEYS=426, PAGE=427, 
		PARSER=428, PARTIAL=429, PARTITIONING=430, PARTITIONS=431, PASSWORD=432, 
		PHASE=433, PLUGIN=434, PLUGIN_DIR=435, PLUGINS=436, PORT=437, PRECEDES=438, 
		PREPARE=439, PRESERVE=440, PREV=441, PROCESSLIST=442, PROFILE=443, PROFILES=444, 
		PROXY=445, QUERY=446, QUICK=447, REBUILD=448, RECOVER=449, REDO_BUFFER_SIZE=450, 
		REDUNDANT=451, RELAY=452, RELAY_LOG_FILE=453, RELAY_LOG_POS=454, RELAYLOG=455, 
		REMOVE=456, REORGANIZE=457, REPAIR=458, REPLICATE_DO_DB=459, REPLICATE_DO_TABLE=460, 
		REPLICATE_IGNORE_DB=461, REPLICATE_IGNORE_TABLE=462, REPLICATE_REWRITE_DB=463, 
		REPLICATE_WILD_DO_TABLE=464, REPLICATE_WILD_IGNORE_TABLE=465, REPLICATION=466, 
		RESET=467, RESUME=468, RETURNS=469, ROLLBACK=470, ROLLUP=471, ROTATE=472, 
		ROW=473, ROWS=474, ROW_FORMAT=475, SAVEPOINT=476, SCHEDULE=477, SECURITY=478, 
		SERVER=479, SESSION=480, SHARE=481, SHARED=482, SIGNED=483, SIMPLE=484, 
		SLAVE=485, SLOW=486, SNAPSHOT=487, SOCKET=488, SOME=489, SONAME=490, SOUNDS=491, 
		SOURCE=492, SQL_AFTER_GTIDS=493, SQL_AFTER_MTS_GAPS=494, SQL_BEFORE_GTIDS=495, 
		SQL_BUFFER_RESULT=496, SQL_CACHE=497, SQL_NO_CACHE=498, SQL_THREAD=499, 
		START=500, STARTS=501, STATS_AUTO_RECALC=502, STATS_PERSISTENT=503, STATS_SAMPLE_PAGES=504, 
		STATUS=505, STOP=506, STORAGE=507, STRING=508, SUBJECT=509, SUBPARTITION=510, 
		SUBPARTITIONS=511, SUSPEND=512, SWAPS=513, SWITCHES=514, TABLESPACE=515, 
		TEMPORARY=516, TEMPTABLE=517, THAN=518, TRADITIONAL=519, TRANSACTION=520, 
		TRIGGERS=521, TRUNCATE=522, UNDEFINED=523, UNDOFILE=524, UNDO_BUFFER_SIZE=525, 
		UNINSTALL=526, UNKNOWN=527, UNTIL=528, UPGRADE=529, USER=530, USE_FRM=531, 
		USER_RESOURCES=532, VALIDATION=533, VALUE=534, VARIABLES=535, VIEW=536, 
		WAIT=537, WARNINGS=538, WITHOUT=539, WORK=540, WRAPPER=541, X509=542, 
		XA=543, XML=544, EUR=545, USA=546, JIS=547, ISO=548, INTERNAL=549, QUARTER=550, 
		MONTH=551, DAY=552, HOUR=553, MINUTE=554, WEEK=555, SECOND=556, MICROSECOND=557, 
		TABLES=558, ROUTINE=559, EXECUTE=560, FILE=561, PROCESS=562, RELOAD=563, 
		SHUTDOWN=564, SUPER=565, PRIVILEGES=566, ARMSCII8=567, ASCII=568, BIG5=569, 
		CP1250=570, CP1251=571, CP1256=572, CP1257=573, CP850=574, CP852=575, 
		CP866=576, CP932=577, DEC8=578, EUCJPMS=579, EUCKR=580, GB2312=581, GBK=582, 
		GEOSTD8=583, GREEK=584, HEBREW=585, HP8=586, KEYBCS2=587, KOI8R=588, KOI8U=589, 
		LATIN1=590, LATIN2=591, LATIN5=592, LATIN7=593, MACCE=594, MACROMAN=595, 
		SJIS=596, SWE7=597, TIS620=598, UCS2=599, UJIS=600, UTF16=601, UTF16LE=602, 
		UTF32=603, UTF8=604, UTF8MB3=605, UTF8MB4=606, ARCHIVE=607, BLACKHOLE=608, 
		CSV=609, FEDERATED=610, INNODB=611, MEMORY=612, MRG_MYISAM=613, MYISAM=614, 
		NDB=615, NDBCLUSTER=616, PERFOMANCE_SCHEMA=617, REPEATABLE=618, COMMITTED=619, 
		UNCOMMITTED=620, SERIALIZABLE=621, GEOMETRYCOLLECTION=622, LINESTRING=623, 
		MULTILINESTRING=624, MULTIPOINT=625, MULTIPOLYGON=626, POINT=627, POLYGON=628, 
		ABS=629, ACOS=630, ADDDATE=631, ADDTIME=632, AES_DECRYPT=633, AES_ENCRYPT=634, 
		AREA=635, ASBINARY=636, ASIN=637, ASTEXT=638, ASWKB=639, ASWKT=640, ASYMMETRIC_DECRYPT=641, 
		ASYMMETRIC_DERIVE=642, ASYMMETRIC_ENCRYPT=643, ASYMMETRIC_SIGN=644, ASYMMETRIC_VERIFY=645, 
		ATAN=646, ATAN2=647, BENCHMARK=648, BIN=649, BIT_COUNT=650, BIT_LENGTH=651, 
		BUFFER=652, CEIL=653, CEILING=654, CENTROID=655, CHARACTER_LENGTH=656, 
		CHARSET=657, CHAR_LENGTH=658, COERCIBILITY=659, COLLATION=660, COMPRESS=661, 
		CONCAT=662, CONCAT_WS=663, CONNECTION_ID=664, CONV=665, CONVERT_TZ=666, 
		COS=667, COT=668, CRC32=669, CREATE_ASYMMETRIC_PRIV_KEY=670, CREATE_ASYMMETRIC_PUB_KEY=671, 
		CREATE_DH_PARAMETERS=672, CREATE_DIGEST=673, CROSSES=674, DATEDIFF=675, 
		DATE_FORMAT=676, DAYNAME=677, DAYOFMONTH=678, DAYOFWEEK=679, DAYOFYEAR=680, 
		DECODE=681, DEGREES=682, DES_DECRYPT=683, DES_ENCRYPT=684, DIMENSION=685, 
		DISJOINT=686, ELT=687, ENCODE=688, ENCRYPT=689, ENDPOINT=690, ENVELOPE=691, 
		EQUALS=692, EXP=693, EXPORT_SET=694, EXTERIORRING=695, EXTRACTVALUE=696, 
		FIELD=697, FIND_IN_SET=698, FLOOR=699, FORMAT=700, FOUND_ROWS=701, FROM_BASE64=702, 
		FROM_DAYS=703, FROM_UNIXTIME=704, GEOMCOLLFROMTEXT=705, GEOMCOLLFROMWKB=706, 
		GEOMETRYCOLLECTIONFROMTEXT=707, GEOMETRYCOLLECTIONFROMWKB=708, GEOMETRYFROMTEXT=709, 
		GEOMETRYFROMWKB=710, GEOMETRYN=711, GEOMETRYTYPE=712, GEOMFROMTEXT=713, 
		GEOMFROMWKB=714, GET_FORMAT=715, GET_LOCK=716, GLENGTH=717, GREATEST=718, 
		GTID_SUBSET=719, GTID_SUBTRACT=720, HEX=721, IFNULL=722, INET6_ATON=723, 
		INET6_NTOA=724, INET_ATON=725, INET_NTOA=726, INSTR=727, INTERIORRINGN=728, 
		INTERSECTS=729, ISCLOSED=730, ISEMPTY=731, ISNULL=732, ISSIMPLE=733, IS_FREE_LOCK=734, 
		IS_IPV4=735, IS_IPV4_COMPAT=736, IS_IPV4_MAPPED=737, IS_IPV6=738, IS_USED_LOCK=739, 
		LAST_INSERT_ID=740, LCASE=741, LEAST=742, LENGTH=743, LINEFROMTEXT=744, 
		LINEFROMWKB=745, LINESTRINGFROMTEXT=746, LINESTRINGFROMWKB=747, LN=748, 
		LOAD_FILE=749, LOCATE=750, LOG=751, LOG10=752, LOG2=753, LOWER=754, LPAD=755, 
		LTRIM=756, MAKEDATE=757, MAKETIME=758, MAKE_SET=759, MASTER_POS_WAIT=760, 
		MBRCONTAINS=761, MBRDISJOINT=762, MBREQUAL=763, MBRINTERSECTS=764, MBROVERLAPS=765, 
		MBRTOUCHES=766, MBRWITHIN=767, MD5=768, MLINEFROMTEXT=769, MLINEFROMWKB=770, 
		MONTHNAME=771, MPOINTFROMTEXT=772, MPOINTFROMWKB=773, MPOLYFROMTEXT=774, 
		MPOLYFROMWKB=775, MULTILINESTRINGFROMTEXT=776, MULTILINESTRINGFROMWKB=777, 
		MULTIPOINTFROMTEXT=778, MULTIPOINTFROMWKB=779, MULTIPOLYGONFROMTEXT=780, 
		MULTIPOLYGONFROMWKB=781, NAME_CONST=782, NULLIF=783, NUMGEOMETRIES=784, 
		NUMINTERIORRINGS=785, NUMPOINTS=786, OCT=787, OCTET_LENGTH=788, ORD=789, 
		OVERLAPS=790, PERIOD_ADD=791, PERIOD_DIFF=792, PI=793, POINTFROMTEXT=794, 
		POINTFROMWKB=795, POINTN=796, POLYFROMTEXT=797, POLYFROMWKB=798, POLYGONFROMTEXT=799, 
		POLYGONFROMWKB=800, POW=801, POWER=802, QUOTE=803, RADIANS=804, RAND=805, 
		RANDOM_BYTES=806, RELEASE_LOCK=807, REVERSE=808, ROUND=809, ROW_COUNT=810, 
		RPAD=811, RTRIM=812, SEC_TO_TIME=813, SESSION_USER=814, SHA=815, SHA1=816, 
		SHA2=817, SIGN=818, SIN=819, SLEEP=820, SOUNDEX=821, SQL_THREAD_WAIT_AFTER_GTIDS=822, 
		SQRT=823, SRID=824, STARTPOINT=825, STRCMP=826, STR_TO_DATE=827, ST_AREA=828, 
		ST_ASBINARY=829, ST_ASTEXT=830, ST_ASWKB=831, ST_ASWKT=832, ST_BUFFER=833, 
		ST_CENTROID=834, ST_CONTAINS=835, ST_CROSSES=836, ST_DIFFERENCE=837, ST_DIMENSION=838, 
		ST_DISJOINT=839, ST_DISTANCE=840, ST_ENDPOINT=841, ST_ENVELOPE=842, ST_EQUALS=843, 
		ST_EXTERIORRING=844, ST_GEOMCOLLFROMTEXT=845, ST_GEOMCOLLFROMTXT=846, 
		ST_GEOMCOLLFROMWKB=847, ST_GEOMETRYCOLLECTIONFROMTEXT=848, ST_GEOMETRYCOLLECTIONFROMWKB=849, 
		ST_GEOMETRYFROMTEXT=850, ST_GEOMETRYFROMWKB=851, ST_GEOMETRYN=852, ST_GEOMETRYTYPE=853, 
		ST_GEOMFROMTEXT=854, ST_GEOMFROMWKB=855, ST_INTERIORRINGN=856, ST_INTERSECTION=857, 
		ST_INTERSECTS=858, ST_ISCLOSED=859, ST_ISEMPTY=860, ST_ISSIMPLE=861, ST_LINEFROMTEXT=862, 
		ST_LINEFROMWKB=863, ST_LINESTRINGFROMTEXT=864, ST_LINESTRINGFROMWKB=865, 
		ST_NUMGEOMETRIES=866, ST_NUMINTERIORRING=867, ST_NUMINTERIORRINGS=868, 
		ST_NUMPOINTS=869, ST_OVERLAPS=870, ST_POINTFROMTEXT=871, ST_POINTFROMWKB=872, 
		ST_POINTN=873, ST_POLYFROMTEXT=874, ST_POLYFROMWKB=875, ST_POLYGONFROMTEXT=876, 
		ST_POLYGONFROMWKB=877, ST_SRID=878, ST_STARTPOINT=879, ST_SYMDIFFERENCE=880, 
		ST_TOUCHES=881, ST_UNION=882, ST_WITHIN=883, ST_X=884, ST_Y=885, SUBDATE=886, 
		SUBSTRING_INDEX=887, SUBTIME=888, SYSTEM_USER=889, TAN=890, TIMEDIFF=891, 
		TIMESTAMPADD=892, TIMESTAMPDIFF=893, TIME_FORMAT=894, TIME_TO_SEC=895, 
		TOUCHES=896, TO_BASE64=897, TO_DAYS=898, TO_SECONDS=899, UCASE=900, UNCOMPRESS=901, 
		UNCOMPRESSED_LENGTH=902, UNHEX=903, UNIX_TIMESTAMP=904, UPDATEXML=905, 
		UPPER=906, UUID=907, UUID_SHORT=908, VALIDATE_PASSWORD_STRENGTH=909, VERSION=910, 
		WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=911, WEEKDAY=912, WEEKOFYEAR=913, WEIGHT_STRING=914, 
		WITHIN=915, YEARWEEK=916, Y_FUNCTION=917, X_FUNCTION=918, VAR_ASSIGN=919, 
		PLUS_ASSIGN=920, MINUS_ASSIGN=921, MULT_ASSIGN=922, DIV_ASSIGN=923, MOD_ASSIGN=924, 
		AND_ASSIGN=925, XOR_ASSIGN=926, OR_ASSIGN=927, STAR=928, DIVIDE=929, MODULE=930, 
		PLUS=931, MINUSMINUS=932, MINUS=933, DIV=934, MOD=935, EQUAL_SYMBOL=936, 
		GREATER_SYMBOL=937, LESS_SYMBOL=938, EXCLAMATION_SYMBOL=939, BIT_NOT_OP=940, 
		BIT_OR_OP=941, BIT_AND_OP=942, BIT_XOR_OP=943, DOT=944, LR_BRACKET=945, 
		RR_BRACKET=946, COMMA=947, SEMI=948, AT_SIGN=949, ZERO_DECIMAL=950, ONE_DECIMAL=951, 
		TWO_DECIMAL=952, SINGLE_QUOTE_SYMB=953, DOUBLE_QUOTE_SYMB=954, REVERSE_QUOTE_SYMB=955, 
		COLON_SYMB=956, CHARSET_REVERSE_QOUTE_STRING=957, FILESIZE_LITERAL=958, 
		START_NATIONAL_STRING_LITERAL=959, STRING_LITERAL=960, DECIMAL_LITERAL=961, 
		HEXADECIMAL_LITERAL=962, REAL_LITERAL=963, NULL_SPEC_LITERAL=964, BIT_STRING=965, 
		STRING_CHARSET_NAME=966, DOT_ID=967, ID=968, REVERSE_QUOTE_ID=969, STRING_USER_NAME=970, 
		LOCAL_ID=971, GLOBAL_ID=972, ERROR_RECONGNIGION=973;
	public const int
		RULE_root = 0, RULE_sqlStatements = 1, RULE_sqlStatement = 2, RULE_emptyStatement = 3, 
		RULE_ddlStatement = 4, RULE_dmlStatement = 5, RULE_transactionStatement = 6, 
		RULE_replicationStatement = 7, RULE_preparedStatement = 8, RULE_compoundStatement = 9, 
		RULE_administrationStatement = 10, RULE_utilityStatement = 11, RULE_createDatabase = 12, 
		RULE_createEvent = 13, RULE_createIndex = 14, RULE_createLogfileGroup = 15, 
		RULE_createProcedure = 16, RULE_createFunction = 17, RULE_createServer = 18, 
		RULE_createTable = 19, RULE_createTablespaceInnodb = 20, RULE_createTablespaceNdb = 21, 
		RULE_createTrigger = 22, RULE_createView = 23, RULE_createDatabaseOption = 24, 
		RULE_ownerStatement = 25, RULE_scheduleExpression = 26, RULE_timestampValue = 27, 
		RULE_intervalExpr = 28, RULE_intervalType = 29, RULE_enableType = 30, 
		RULE_indexType = 31, RULE_indexOption = 32, RULE_procedureParameter = 33, 
		RULE_functionParameter = 34, RULE_routineOption = 35, RULE_serverOption = 36, 
		RULE_createDefinitions = 37, RULE_createDefinition = 38, RULE_columnDefinition = 39, 
		RULE_columnConstraint = 40, RULE_tableConstraint = 41, RULE_referenceDefinition = 42, 
		RULE_referenceAction = 43, RULE_referenceControlType = 44, RULE_indexColumnDefinition = 45, 
		RULE_tableOption = 46, RULE_tablespaceStorage = 47, RULE_partitionDefinitions = 48, 
		RULE_partitionFunctionDefinition = 49, RULE_subpartitionFunctionDefinition = 50, 
		RULE_partitionDefinition = 51, RULE_partitionDefinerAtom = 52, RULE_partitionDefinerVector = 53, 
		RULE_subpartitionDefinition = 54, RULE_partitionOption = 55, RULE_alterDatabase = 56, 
		RULE_alterEvent = 57, RULE_alterFunction = 58, RULE_alterInstance = 59, 
		RULE_alterLogfileGroup = 60, RULE_alterProcedure = 61, RULE_alterServer = 62, 
		RULE_alterTable = 63, RULE_alterTablespace = 64, RULE_alterView = 65, 
		RULE_alterSpecification = 66, RULE_dropDatabase = 67, RULE_dropEvent = 68, 
		RULE_dropIndex = 69, RULE_dropLogfileGroup = 70, RULE_dropProcedure = 71, 
		RULE_dropFunction = 72, RULE_dropServer = 73, RULE_dropTable = 74, RULE_dropTablespace = 75, 
		RULE_dropTrigger = 76, RULE_dropView = 77, RULE_renameTable = 78, RULE_renameTableClause = 79, 
		RULE_truncateTable = 80, RULE_callStatement = 81, RULE_deleteStatement = 82, 
		RULE_doStatement = 83, RULE_handlerStatement = 84, RULE_insertStatement = 85, 
		RULE_loadDataStatement = 86, RULE_loadXmlStatement = 87, RULE_replaceStatement = 88, 
		RULE_selectStatement = 89, RULE_updateStatement = 90, RULE_insertStatementValue = 91, 
		RULE_updatedElement = 92, RULE_assignmentField = 93, RULE_lockClause = 94, 
		RULE_singleDeleteStatement = 95, RULE_multipleDeleteStatement = 96, RULE_handlerOpenStatement = 97, 
		RULE_handlerReadIndexStatement = 98, RULE_handlerReadStatement = 99, RULE_handlerCloseStatement = 100, 
		RULE_singleUpdateStatement = 101, RULE_multipleUpdateStatement = 102, 
		RULE_orderByClause = 103, RULE_orderByExpression = 104, RULE_tableSources = 105, 
		RULE_tableSource = 106, RULE_tableSourceItem = 107, RULE_indexHint = 108, 
		RULE_indexHintType = 109, RULE_joinPart = 110, RULE_queryExpression = 111, 
		RULE_queryExpressionNointo = 112, RULE_querySpecification = 113, RULE_querySpecificationNointo = 114, 
		RULE_unionParenthesis = 115, RULE_unionStatement = 116, RULE_selectSpec = 117, 
		RULE_selectElements = 118, RULE_selectElement = 119, RULE_selectIntoExpression = 120, 
		RULE_selectFieldsInto = 121, RULE_selectLinesInto = 122, RULE_fromClause = 123, 
		RULE_groupByItem = 124, RULE_limitClause = 125, RULE_startTransaction = 126, 
		RULE_beginWork = 127, RULE_commitWork = 128, RULE_rollbackWork = 129, 
		RULE_savepointStatement = 130, RULE_rollbackStatement = 131, RULE_releaseStatement = 132, 
		RULE_lockTables = 133, RULE_unlockTables = 134, RULE_setAutocommitStatement = 135, 
		RULE_setTransactionStatement = 136, RULE_transactionMode = 137, RULE_lockTableElement = 138, 
		RULE_lockAction = 139, RULE_transactionOption = 140, RULE_transactionLevel = 141, 
		RULE_changeMaster = 142, RULE_changeReplicationFilter = 143, RULE_purgeBinaryLogs = 144, 
		RULE_resetMaster = 145, RULE_resetSlave = 146, RULE_startSlave = 147, 
		RULE_stopSlave = 148, RULE_startGroupReplication = 149, RULE_stopGroupReplication = 150, 
		RULE_masterOption = 151, RULE_stringMasterOption = 152, RULE_decimalMasterOption = 153, 
		RULE_boolMasterOption = 154, RULE_channelOption = 155, RULE_replicationFilter = 156, 
		RULE_tablePair = 157, RULE_threadType = 158, RULE_untilOption = 159, RULE_connectionOption = 160, 
		RULE_gtuidSet = 161, RULE_xaStartTransaction = 162, RULE_xaEndTransaction = 163, 
		RULE_xaPrepareStatement = 164, RULE_xaCommitWork = 165, RULE_xaRollbackWork = 166, 
		RULE_xaRecoverWork = 167, RULE_prepareStatement = 168, RULE_executeStatement = 169, 
		RULE_deallocatePrepare = 170, RULE_routineBody = 171, RULE_blockStatement = 172, 
		RULE_caseStatement = 173, RULE_ifStatement = 174, RULE_iterateStatement = 175, 
		RULE_leaveStatement = 176, RULE_loopStatement = 177, RULE_repeatStatement = 178, 
		RULE_returnStatement = 179, RULE_whileStatement = 180, RULE_cursorStatement = 181, 
		RULE_declareVariable = 182, RULE_declareCondition = 183, RULE_declareCursor = 184, 
		RULE_declareHandler = 185, RULE_handlerConditionValue = 186, RULE_procedureSqlStatement = 187, 
		RULE_caseAlternative = 188, RULE_elifAlternative = 189, RULE_alterUser = 190, 
		RULE_createUser = 191, RULE_dropUser = 192, RULE_grantStatement = 193, 
		RULE_grantProxy = 194, RULE_renameUser = 195, RULE_revokeStatement = 196, 
		RULE_revokeProxy = 197, RULE_setPasswordStatement = 198, RULE_userSpecification = 199, 
		RULE_userAuthOption = 200, RULE_tlsOption = 201, RULE_userResourceOption = 202, 
		RULE_userPasswordOption = 203, RULE_userLockOption = 204, RULE_privelegeClause = 205, 
		RULE_privilege = 206, RULE_privilegeLevel = 207, RULE_renameUserClause = 208, 
		RULE_analyzeTable = 209, RULE_checkTable = 210, RULE_checksumTable = 211, 
		RULE_optimizeTable = 212, RULE_repairTable = 213, RULE_checkTableOption = 214, 
		RULE_createUdfunction = 215, RULE_installPlugin = 216, RULE_uninstallPlugin = 217, 
		RULE_setStatement = 218, RULE_showStatement = 219, RULE_variableClause = 220, 
		RULE_showCommonEntity = 221, RULE_showFilter = 222, RULE_showGlobalInfoClause = 223, 
		RULE_showSchemaEntity = 224, RULE_showProfileType = 225, RULE_binlogStatement = 226, 
		RULE_cacheIndexStatement = 227, RULE_flushStatement = 228, RULE_killStatement = 229, 
		RULE_loadIndexIntoCache = 230, RULE_resetStatement = 231, RULE_shutdownStatement = 232, 
		RULE_tableIndexes = 233, RULE_flushOption = 234, RULE_flushTableOption = 235, 
		RULE_loadedTableIndexes = 236, RULE_simpleDescribeStatement = 237, RULE_fullDescribeStatement = 238, 
		RULE_helpStatement = 239, RULE_useStatement = 240, RULE_describeObjectClause = 241, 
		RULE_fullId = 242, RULE_tableName = 243, RULE_fullColumnName = 244, RULE_indexColumnName = 245, 
		RULE_userName = 246, RULE_mysqlVariable = 247, RULE_charsetName = 248, 
		RULE_collationName = 249, RULE_engineName = 250, RULE_uuidSet = 251, RULE_xid = 252, 
		RULE_xuidStringId = 253, RULE_authPlugin = 254, RULE_uid = 255, RULE_simpleId = 256, 
		RULE_dottedId = 257, RULE_decimalLiteral = 258, RULE_fileSizeLiteral = 259, 
		RULE_stringLiteral = 260, RULE_booleanLiteral = 261, RULE_hexadecimalLiteral = 262, 
		RULE_nullNotnull = 263, RULE_constant = 264, RULE_dataType = 265, RULE_convertedDataType = 266, 
		RULE_lengthOneDimension = 267, RULE_lengthTwoDimension = 268, RULE_lengthTwoOptionalDimension = 269, 
		RULE_uidList = 270, RULE_tables = 271, RULE_indexColumnNames = 272, RULE_expressions = 273, 
		RULE_expressionsWithDefaults = 274, RULE_constants = 275, RULE_simpleStrings = 276, 
		RULE_userVariables = 277, RULE_defaultValue = 278, RULE_currentTimestamp = 279, 
		RULE_expressionOrDefault = 280, RULE_ifExists = 281, RULE_ifNotExists = 282, 
		RULE_functionCall = 283, RULE_specificFunction = 284, RULE_caseFuncAlternative = 285, 
		RULE_levelsInWeightString = 286, RULE_levelInWeightListElement = 287, 
		RULE_aggregateWindowedFunction = 288, RULE_scalarFunctionName = 289, RULE_passwordFunctionClause = 290, 
		RULE_functionArgs = 291, RULE_functionArg = 292, RULE_expression = 293, 
		RULE_predicate = 294, RULE_expressionAtom = 295, RULE_unaryOperator = 296, 
		RULE_comparisonOperator = 297, RULE_logicalOperator = 298, RULE_bitOperator = 299, 
		RULE_mathOperator = 300, RULE_charsetNameBase = 301, RULE_transactionLevelBase = 302, 
		RULE_privilegesBase = 303, RULE_intervalTypeBase = 304, RULE_dataTypeBase = 305, 
		RULE_keywordsCanBeId = 306, RULE_functionNameBase = 307;
	public static readonly string[] ruleNames = {
		"root", "sqlStatements", "sqlStatement", "emptyStatement", "ddlStatement", 
		"dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement", 
		"compoundStatement", "administrationStatement", "utilityStatement", "createDatabase", 
		"createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
		"createFunction", "createServer", "createTable", "createTablespaceInnodb", 
		"createTablespaceNdb", "createTrigger", "createView", "createDatabaseOption", 
		"ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr", 
		"intervalType", "enableType", "indexType", "indexOption", "procedureParameter", 
		"functionParameter", "routineOption", "serverOption", "createDefinitions", 
		"createDefinition", "columnDefinition", "columnConstraint", "tableConstraint", 
		"referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition", 
		"tableOption", "tablespaceStorage", "partitionDefinitions", "partitionFunctionDefinition", 
		"subpartitionFunctionDefinition", "partitionDefinition", "partitionDefinerAtom", 
		"partitionDefinerVector", "subpartitionDefinition", "partitionOption", 
		"alterDatabase", "alterEvent", "alterFunction", "alterInstance", "alterLogfileGroup", 
		"alterProcedure", "alterServer", "alterTable", "alterTablespace", "alterView", 
		"alterSpecification", "dropDatabase", "dropEvent", "dropIndex", "dropLogfileGroup", 
		"dropProcedure", "dropFunction", "dropServer", "dropTable", "dropTablespace", 
		"dropTrigger", "dropView", "renameTable", "renameTableClause", "truncateTable", 
		"callStatement", "deleteStatement", "doStatement", "handlerStatement", 
		"insertStatement", "loadDataStatement", "loadXmlStatement", "replaceStatement", 
		"selectStatement", "updateStatement", "insertStatementValue", "updatedElement", 
		"assignmentField", "lockClause", "singleDeleteStatement", "multipleDeleteStatement", 
		"handlerOpenStatement", "handlerReadIndexStatement", "handlerReadStatement", 
		"handlerCloseStatement", "singleUpdateStatement", "multipleUpdateStatement", 
		"orderByClause", "orderByExpression", "tableSources", "tableSource", "tableSourceItem", 
		"indexHint", "indexHintType", "joinPart", "queryExpression", "queryExpressionNointo", 
		"querySpecification", "querySpecificationNointo", "unionParenthesis", 
		"unionStatement", "selectSpec", "selectElements", "selectElement", "selectIntoExpression", 
		"selectFieldsInto", "selectLinesInto", "fromClause", "groupByItem", "limitClause", 
		"startTransaction", "beginWork", "commitWork", "rollbackWork", "savepointStatement", 
		"rollbackStatement", "releaseStatement", "lockTables", "unlockTables", 
		"setAutocommitStatement", "setTransactionStatement", "transactionMode", 
		"lockTableElement", "lockAction", "transactionOption", "transactionLevel", 
		"changeMaster", "changeReplicationFilter", "purgeBinaryLogs", "resetMaster", 
		"resetSlave", "startSlave", "stopSlave", "startGroupReplication", "stopGroupReplication", 
		"masterOption", "stringMasterOption", "decimalMasterOption", "boolMasterOption", 
		"channelOption", "replicationFilter", "tablePair", "threadType", "untilOption", 
		"connectionOption", "gtuidSet", "xaStartTransaction", "xaEndTransaction", 
		"xaPrepareStatement", "xaCommitWork", "xaRollbackWork", "xaRecoverWork", 
		"prepareStatement", "executeStatement", "deallocatePrepare", "routineBody", 
		"blockStatement", "caseStatement", "ifStatement", "iterateStatement", 
		"leaveStatement", "loopStatement", "repeatStatement", "returnStatement", 
		"whileStatement", "cursorStatement", "declareVariable", "declareCondition", 
		"declareCursor", "declareHandler", "handlerConditionValue", "procedureSqlStatement", 
		"caseAlternative", "elifAlternative", "alterUser", "createUser", "dropUser", 
		"grantStatement", "grantProxy", "renameUser", "revokeStatement", "revokeProxy", 
		"setPasswordStatement", "userSpecification", "userAuthOption", "tlsOption", 
		"userResourceOption", "userPasswordOption", "userLockOption", "privelegeClause", 
		"privilege", "privilegeLevel", "renameUserClause", "analyzeTable", "checkTable", 
		"checksumTable", "optimizeTable", "repairTable", "checkTableOption", "createUdfunction", 
		"installPlugin", "uninstallPlugin", "setStatement", "showStatement", "variableClause", 
		"showCommonEntity", "showFilter", "showGlobalInfoClause", "showSchemaEntity", 
		"showProfileType", "binlogStatement", "cacheIndexStatement", "flushStatement", 
		"killStatement", "loadIndexIntoCache", "resetStatement", "shutdownStatement", 
		"tableIndexes", "flushOption", "flushTableOption", "loadedTableIndexes", 
		"simpleDescribeStatement", "fullDescribeStatement", "helpStatement", "useStatement", 
		"describeObjectClause", "fullId", "tableName", "fullColumnName", "indexColumnName", 
		"userName", "mysqlVariable", "charsetName", "collationName", "engineName", 
		"uuidSet", "xid", "xuidStringId", "authPlugin", "uid", "simpleId", "dottedId", 
		"decimalLiteral", "fileSizeLiteral", "stringLiteral", "booleanLiteral", 
		"hexadecimalLiteral", "nullNotnull", "constant", "dataType", "convertedDataType", 
		"lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension", 
		"uidList", "tables", "indexColumnNames", "expressions", "expressionsWithDefaults", 
		"constants", "simpleStrings", "userVariables", "defaultValue", "currentTimestamp", 
		"expressionOrDefault", "ifExists", "ifNotExists", "functionCall", "specificFunction", 
		"caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement", 
		"aggregateWindowedFunction", "scalarFunctionName", "passwordFunctionClause", 
		"functionArgs", "functionArg", "expression", "predicate", "expressionAtom", 
		"unaryOperator", "comparisonOperator", "logicalOperator", "bitOperator", 
		"mathOperator", "charsetNameBase", "transactionLevelBase", "privilegesBase", 
		"intervalTypeBase", "dataTypeBase", "keywordsCanBeId", "functionNameBase"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ANALYZE'", 
		"'AND'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", "'BOTH'", "'BY'", "'CALL'", 
		"'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", "'CHECK'", 
		"'COLLATE'", "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", 
		"'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT_USER'", "'CURSOR'", "'DATABASE'", 
		"'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", 
		"'DESCRIBE'", "'DETERMINISTIC'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", 
		"'EACH'", "'ELSE'", "'ELSEIF'", "'ENCLOSED'", "'ESCAPED'", "'EXISTS'", 
		"'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", 
		"'FROM'", "'FULLTEXT'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", 
		"'IF'", "'IGNORE'", "'IN'", "'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", 
		"'INSERT'", "'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", 
		"'KEYS'", "'KILL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", 
		"'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'", "'LOOP'", "'LOW_PRIORITY'", 
		"'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", 
		"'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", 
		"'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", 
		"'OUTER'", "'OUTFILE'", "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'", 
		"'RANGE'", "'READ'", "'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", 
		"'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESTRICT'", "'RETURN'", 
		"'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", 
		"'SET'", "'SEPARATOR'", "'SHOW'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", 
		"'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", 
		"'SQL_SMALL_RESULT'", "'SSL'", "'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'", 
		"'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", 
		"'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", 
		"'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", 
		"'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", 
		"'MEDIUMINT'", "'INT'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'", 
		"'FLOAT'", "'DECIMAL'", "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", 
		"'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", "'BINARY'", "'VARBINARY'", 
		"'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", 
		"'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'YEAR_MONTH'", "'DAY_HOUR'", 
		"'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", 
		"'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
		"'DAY_MICROSECOND'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", 
		"'GROUP_CONCAT'", "'MAX'", "'MIN'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
		"'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", 
		"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", "'CURTIME'", 
		"'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", 
		"'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'", 
		"'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", 
		"'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", 
		"'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", 
		"'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", 
		"'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'CIPHER'", "'CLIENT'", 
		"'CLOSE'", "'COALESCE'", "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", "'COMMENT'", 
		"'COMMIT'", "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'", 
		"'CONCURRENT'", "'CONNECTION'", "'CONSISTENT'", "'CONTAINS'", "'CONTEXT'", 
		"'CONTRIBUTORS'", "'COPY'", "'CPU'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", 
		"'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", 
		"'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", 
		"'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTION'", "'END'", "'ENDS'", 
		"'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", 
		"'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", "'EXPIRE'", 
		"'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", "'FAST'", "'FAULTS'", "'FIELDS'", 
		"'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWS'", 
		"'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", 
		"'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", "'HELP'", "'HOST'", "'HOSTS'", 
		"'IDENTIFIED'", "'IGNORE_SERVER_IDS'", "'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", 
		"'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INVOKER'", 
		"'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", 
		"'LANGUAGE'", "'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", 
		"'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", 
		"'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", 
		"'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
		"'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
		"'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", 
		"'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
		"'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
		"'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MERGE'", "'MID'", "'MIGRATE'", 
		"'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", "'NAME'", "'NAMES'", 
		"'NCHAR'", "'NEVER'", "'NEXT'", "'NO'", "'NODEGROUP'", "'NONE'", "'OFFLINE'", 
		"'OFFSET'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", 
		"'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", 
		"'PARSER'", "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", 
		"'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", 
		"'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", 
		"'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", "'REDO_BUFFER_SIZE'", 
		"'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", 
		"'REMOVE'", "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", 
		"'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", 
		"'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", 
		"'RESET'", "'RESUME'", "'RETURNS'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", 
		"'ROW'", "'ROWS'", "'ROW_FORMAT'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", 
		"'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", "'SIMPLE'", 
		"'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", 
		"'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", 
		"'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", 
		"'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", 
		"'STATUS'", "'STOP'", "'STORAGE'", "'STRING'", "'SUBJECT'", "'SUBPARTITION'", 
		"'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLESPACE'", 
		"'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", "'TRANSACTION'", 
		"'TRIGGERS'", "'TRUNCATE'", "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", 
		"'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", 
		"'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", "'VARIABLES'", "'VIEW'", 
		"'WAIT'", "'WARNINGS'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", 
		"'XA'", "'XML'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", 
		"'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", 
		"'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", 
		"'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", "'ARMSCII8'", "'ASCII'", "'BIG5'", 
		"'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", "'CP852'", 
		"'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", "'GB2312'", "'GBK'", 
		"'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", 
		"'LATIN1'", "'LATIN2'", "'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'", 
		"'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", 
		"'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", 
		"'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", 
		"'NDB'", "'NDBCLUSTER'", "'PERFOMANCE_SCHEMA'", "'REPEATABLE'", "'COMMITTED'", 
		"'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", "'LINESTRING'", 
		"'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", 
		"'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", 
		"'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
		"'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
		"'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", 
		"'BUFFER'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
		"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
		"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
		"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
		"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
		"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
		"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
		"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'", 
		"'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
		"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
		"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
		"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
		"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", 
		"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
		"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
		"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
		"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'", 
		"'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", "'IS_USED_LOCK'", 
		"'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", "'LENGTH'", "'LINEFROMTEXT'", 
		"'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", "'LN'", 
		"'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'", 
		"'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'", 
		"'MBRCONTAINS'", "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", 
		"'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", 
		"'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", 
		"'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", "'MULTILINESTRINGFROMWKB'", 
		"'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", 
		"'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'", 
		"'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'", 
		"'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
		"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
		"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
		"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
		"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'", 
		"'SHA2'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", 
		"'SQRT'", "'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", 
		"'ST_ASBINARY'", "'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", 
		"'ST_CENTROID'", "'ST_CONTAINS'", "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", 
		"'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", 
		"'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", 
		"'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
		"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
		"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
		"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", 
		"'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
		"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
		"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
		"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
		"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
		"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
		"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
		"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
		"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
		"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
		"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'", 
		"'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", 
		"'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'--'", 
		"'-'", "'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", 
		"'^'", "'.'", "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", 
		"'''", "'\"'", "'`'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
		"ADD", "ALL", "ALTER", "ANALYZE", "AND", "AS", "ASC", "BEFORE", "BETWEEN", 
		"BOTH", "BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", 
		"CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", 
		"CREATE", "CROSS", "CURRENT_USER", "CURSOR", "DATABASE", "DATABASES", 
		"DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", 
		"DISTINCT", "DISTINCTROW", "DROP", "EACH", "ELSE", "ELSEIF", "ENCLOSED", 
		"ESCAPED", "EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", 
		"FOREIGN", "FROM", "FULLTEXT", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
		"IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", "INOUT", "INSERT", "INTERVAL", 
		"INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", "LEADING", "LEAVE", 
		"LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", 
		"MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", "MODIFIES", 
		"NATURAL", "NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "ON", "OPTIMIZE", 
		"OPTION", "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", "OUTFILE", "PARTITION", 
		"PRIMARY", "PROCEDURE", "PURGE", "RANGE", "READ", "READS", "REFERENCES", 
		"REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESTRICT", 
		"RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", 
		"SEPARATOR", "SHOW", "SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", 
		"SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", "SSL", "STARTING", 
		"STRAIGHT_JOIN", "TABLE", "TERMINATED", "THEN", "TO", "TRAILING", "TRIGGER", 
		"TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", 
		"USE", "USING", "VALUES", "WHEN", "WHERE", "WHILE", "WITH", "WRITE", "XOR", 
		"ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT", "INT", "INTEGER", "BIGINT", 
		"REAL", "DOUBLE", "FLOAT", "DECIMAL", "NUMERIC", "DATE", "TIME", "TIMESTAMP", 
		"DATETIME", "YEAR", "CHAR", "VARCHAR", "BINARY", "VARBINARY", "TINYBLOB", 
		"BLOB", "MEDIUMBLOB", "LONGBLOB", "TINYTEXT", "TEXT", "MEDIUMTEXT", "LONGTEXT", 
		"ENUM", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", 
		"HOUR_SECOND", "MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", 
		"HOUR_MICROSECOND", "DAY_MICROSECOND", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", 
		"COUNT", "GROUP_CONCAT", "MAX", "MIN", "STD", "STDDEV", "STDDEV_POP", 
		"STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", "CURRENT_DATE", 
		"CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", "CURDATE", "CURTIME", 
		"DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", "NOW", "POSITION", 
		"SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", 
		"ACCOUNT", "ACTION", "AFTER", "AGGREGATE", "ALGORITHM", "ANY", "AT", "AUTHORS", 
		"AUTOCOMMIT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", 
		"BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", 
		"CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", "CIPHER", "CLIENT", "CLOSE", 
		"COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COMMENT", "COMMIT", "COMPACT", 
		"COMPLETION", "COMPRESSED", "COMPRESSION", "CONCURRENT", "CONNECTION", 
		"CONSISTENT", "CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", "DATA", 
		"DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE", 
		"DES_KEY_FILE", "DIRECTORY", "DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", 
		"DUPLICATE", "DYNAMIC", "ENABLE", "ENCRYPTION", "END", "ENDS", "ENGINE", 
		"ENGINES", "ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", 
		"EXCHANGE", "EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", 
		"FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", 
		"FLUSH", "FOLLOWS", "FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", 
		"GRANTS", "GROUP_REPLICATION", "HANDLER", "HASH", "HELP", "HOST", "HOSTS", 
		"IDENTIFIED", "IGNORE_SERVER_IDS", "IMPORT", "INDEXES", "INITIAL_SIZE", 
		"INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE", "INVOKER", "IO", "IO_THREAD", 
		"IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", 
		"LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", 
		"MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", 
		"MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", 
		"MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
		"MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", 
		"MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
		"MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
		"MAX_USER_CONNECTIONS", "MEDIUM", "MERGE", "MID", "MIGRATE", "MIN_ROWS", 
		"MODE", "MODIFY", "MUTEX", "MYSQL", "NAME", "NAMES", "NCHAR", "NEVER", 
		"NEXT", "NO", "NODEGROUP", "NONE", "OFFLINE", "OFFSET", "OJ", "OLD_PASSWORD", 
		"ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", 
		"PACK_KEYS", "PAGE", "PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", 
		"PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", 
		"PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", 
		"QUERY", "QUICK", "REBUILD", "RECOVER", "REDO_BUFFER_SIZE", "REDUNDANT", 
		"RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", 
		"REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", 
		"REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
		"REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", "RESUME", "RETURNS", 
		"ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", 
		"SCHEDULE", "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", 
		"SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", 
		"SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", 
		"SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
		"STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", 
		"STATUS", "STOP", "STORAGE", "STRING", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", 
		"SUSPEND", "SWAPS", "SWITCHES", "TABLESPACE", "TEMPORARY", "TEMPTABLE", 
		"THAN", "TRADITIONAL", "TRANSACTION", "TRIGGERS", "TRUNCATE", "UNDEFINED", 
		"UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", 
		"USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", "VALUE", "VARIABLES", 
		"VIEW", "WAIT", "WARNINGS", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", 
		"XML", "EUR", "USA", "JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", 
		"HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", "TABLES", "ROUTINE", 
		"EXECUTE", "FILE", "PROCESS", "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", 
		"ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", "CP850", 
		"CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB2312", "GBK", 
		"GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", 
		"LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", 
		"UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", 
		"ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", 
		"MYISAM", "NDB", "NDBCLUSTER", "PERFOMANCE_SCHEMA", "REPEATABLE", "COMMITTED", 
		"UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", "LINESTRING", "MULTILINESTRING", 
		"MULTIPOINT", "MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", 
		"ADDTIME", "AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", 
		"ASWKB", "ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
		"ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", 
		"BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CEIL", "CEILING", "CENTROID", 
		"CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATION", 
		"COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", 
		"COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
		"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
		"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
		"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
		"ENCRYPT", "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING", 
		"EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", 
		"FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
		"GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", 
		"GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", 
		"GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", 
		"HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", 
		"INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", 
		"ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
		"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
		"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
		"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
		"LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
		"MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
		"MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
		"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
		"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", 
		"MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", 
		"NUMPOINTS", "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
		"PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
		"POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
		"RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
		"RPAD", "RTRIM", "SEC_TO_TIME", "SESSION_USER", "SHA", "SHA1", "SHA2", 
		"SIGN", "SIN", "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", 
		"SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", 
		"ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", 
		"ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", 
		"ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", 
		"ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
		"ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", 
		"ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
		"ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
		"ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", 
		"ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
		"ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
		"ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", 
		"ST_POLYGONFROMWKB", "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", 
		"ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", 
		"SUBTIME", "SYSTEM_USER", "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", 
		"TIME_FORMAT", "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", 
		"UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", 
		"UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", 
		"VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
		"WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", 
		"PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
		"AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", "PLUS", 
		"MINUSMINUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", 
		"LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", 
		"BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", 
		"ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
		"REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
		"START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
		"HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
		"STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
		"LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MySqlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MySqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MySqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MySqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class RootContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MySqlParser.Eof, 0); }
		public SqlStatementsContext sqlStatements() {
			return GetRuleContext<SqlStatementsContext>(0);
		}
		public ITerminalNode MINUSMINUS() { return GetToken(MySqlParser.MINUSMINUS, 0); }
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << ANALYZE) | (1L << CALL) | (1L << CHANGE) | (1L << CHECK) | (1L << CREATE) | (1L << DELETE) | (1L << DESC) | (1L << DESCRIBE) | (1L << DROP) | (1L << EXPLAIN) | (1L << GRANT))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (KILL - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPLACE - 71)) | (1L << (REVOKE - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (UNLOCK - 155)) | (1L << (UPDATE - 155)) | (1L << (USE - 155)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (BEGIN - 256)) | (1L << (BINLOG - 256)) | (1L << (CACHE - 256)) | (1L << (CHECKSUM - 256)) | (1L << (COMMIT - 256)) | (1L << (DEALLOCATE - 256)) | (1L << (DO - 256)))) != 0) || ((((_la - 331)) & ~0x3f) == 0 && ((1L << (_la - 331)) & ((1L << (FLUSH - 331)) | (1L << (HANDLER - 331)) | (1L << (HELP - 331)) | (1L << (INSTALL - 331)))) != 0) || ((((_la - 439)) & ~0x3f) == 0 && ((1L << (_la - 439)) & ((1L << (PREPARE - 439)) | (1L << (REPAIR - 439)) | (1L << (RESET - 439)) | (1L << (ROLLBACK - 439)) | (1L << (SAVEPOINT - 439)) | (1L << (START - 439)))) != 0) || ((((_la - 506)) & ~0x3f) == 0 && ((1L << (_la - 506)) & ((1L << (STOP - 506)) | (1L << (TRUNCATE - 506)) | (1L << (UNINSTALL - 506)) | (1L << (XA - 506)) | (1L << (EXECUTE - 506)) | (1L << (SHUTDOWN - 506)))) != 0) || _la==LR_BRACKET || _la==SEMI) {
				{
				State = 616; sqlStatements();
				}
			}

			State = 620;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUSMINUS) {
				{
				State = 619; Match(MINUSMINUS);
				}
			}

			State = 622; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqlStatementsContext : ParserRuleContext {
		public SqlStatementContext[] sqlStatement() {
			return GetRuleContexts<SqlStatementContext>();
		}
		public SqlStatementContext sqlStatement(int i) {
			return GetRuleContext<SqlStatementContext>(i);
		}
		public EmptyStatementContext[] emptyStatement() {
			return GetRuleContexts<EmptyStatementContext>();
		}
		public EmptyStatementContext emptyStatement(int i) {
			return GetRuleContext<EmptyStatementContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(MySqlParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(MySqlParser.SEMI, i);
		}
		public ITerminalNode[] MINUSMINUS() { return GetTokens(MySqlParser.MINUSMINUS); }
		public ITerminalNode MINUSMINUS(int i) {
			return GetToken(MySqlParser.MINUSMINUS, i);
		}
		public SqlStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlStatements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSqlStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSqlStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqlStatementsContext sqlStatements() {
		SqlStatementsContext _localctx = new SqlStatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_sqlStatements);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 633;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 631;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ALTER:
					case ANALYZE:
					case CALL:
					case CHANGE:
					case CHECK:
					case CREATE:
					case DELETE:
					case DESC:
					case DESCRIBE:
					case DROP:
					case EXPLAIN:
					case GRANT:
					case INSERT:
					case KILL:
					case LOAD:
					case LOCK:
					case OPTIMIZE:
					case PURGE:
					case RELEASE:
					case RENAME:
					case REPLACE:
					case REVOKE:
					case SELECT:
					case SET:
					case SHOW:
					case UNLOCK:
					case UPDATE:
					case USE:
					case BEGIN:
					case BINLOG:
					case CACHE:
					case CHECKSUM:
					case COMMIT:
					case DEALLOCATE:
					case DO:
					case FLUSH:
					case HANDLER:
					case HELP:
					case INSTALL:
					case PREPARE:
					case REPAIR:
					case RESET:
					case ROLLBACK:
					case SAVEPOINT:
					case START:
					case STOP:
					case TRUNCATE:
					case UNINSTALL:
					case XA:
					case EXECUTE:
					case SHUTDOWN:
					case LR_BRACKET:
						{
						State = 624; sqlStatement();
						State = 626;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==MINUSMINUS) {
							{
							State = 625; Match(MINUSMINUS);
							}
						}

						State = 628; Match(SEMI);
						}
						break;
					case SEMI:
						{
						State = 630; emptyStatement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 635;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			State = 644;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case LR_BRACKET:
				{
				State = 636; sqlStatement();
				State = 641;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 638;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==MINUSMINUS) {
						{
						State = 637; Match(MINUSMINUS);
						}
					}

					State = 640; Match(SEMI);
					}
					break;
				}
				}
				break;
			case SEMI:
				{
				State = 643; emptyStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqlStatementContext : ParserRuleContext {
		public DdlStatementContext ddlStatement() {
			return GetRuleContext<DdlStatementContext>(0);
		}
		public DmlStatementContext dmlStatement() {
			return GetRuleContext<DmlStatementContext>(0);
		}
		public TransactionStatementContext transactionStatement() {
			return GetRuleContext<TransactionStatementContext>(0);
		}
		public ReplicationStatementContext replicationStatement() {
			return GetRuleContext<ReplicationStatementContext>(0);
		}
		public PreparedStatementContext preparedStatement() {
			return GetRuleContext<PreparedStatementContext>(0);
		}
		public AdministrationStatementContext administrationStatement() {
			return GetRuleContext<AdministrationStatementContext>(0);
		}
		public UtilityStatementContext utilityStatement() {
			return GetRuleContext<UtilityStatementContext>(0);
		}
		public SqlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSqlStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSqlStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqlStatementContext sqlStatement() {
		SqlStatementContext _localctx = new SqlStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_sqlStatement);
		try {
			State = 653;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 646; ddlStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 647; dmlStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 648; transactionStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 649; replicationStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 650; preparedStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 651; administrationStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 652; utilityStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		public ITerminalNode SEMI() { return GetToken(MySqlParser.SEMI, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 655; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DdlStatementContext : ParserRuleContext {
		public CreateDatabaseContext createDatabase() {
			return GetRuleContext<CreateDatabaseContext>(0);
		}
		public CreateEventContext createEvent() {
			return GetRuleContext<CreateEventContext>(0);
		}
		public CreateIndexContext createIndex() {
			return GetRuleContext<CreateIndexContext>(0);
		}
		public CreateLogfileGroupContext createLogfileGroup() {
			return GetRuleContext<CreateLogfileGroupContext>(0);
		}
		public CreateProcedureContext createProcedure() {
			return GetRuleContext<CreateProcedureContext>(0);
		}
		public CreateFunctionContext createFunction() {
			return GetRuleContext<CreateFunctionContext>(0);
		}
		public CreateServerContext createServer() {
			return GetRuleContext<CreateServerContext>(0);
		}
		public CreateTableContext createTable() {
			return GetRuleContext<CreateTableContext>(0);
		}
		public CreateTablespaceInnodbContext createTablespaceInnodb() {
			return GetRuleContext<CreateTablespaceInnodbContext>(0);
		}
		public CreateTablespaceNdbContext createTablespaceNdb() {
			return GetRuleContext<CreateTablespaceNdbContext>(0);
		}
		public CreateTriggerContext createTrigger() {
			return GetRuleContext<CreateTriggerContext>(0);
		}
		public CreateViewContext createView() {
			return GetRuleContext<CreateViewContext>(0);
		}
		public AlterDatabaseContext alterDatabase() {
			return GetRuleContext<AlterDatabaseContext>(0);
		}
		public AlterEventContext alterEvent() {
			return GetRuleContext<AlterEventContext>(0);
		}
		public AlterFunctionContext alterFunction() {
			return GetRuleContext<AlterFunctionContext>(0);
		}
		public AlterInstanceContext alterInstance() {
			return GetRuleContext<AlterInstanceContext>(0);
		}
		public AlterLogfileGroupContext alterLogfileGroup() {
			return GetRuleContext<AlterLogfileGroupContext>(0);
		}
		public AlterProcedureContext alterProcedure() {
			return GetRuleContext<AlterProcedureContext>(0);
		}
		public AlterServerContext alterServer() {
			return GetRuleContext<AlterServerContext>(0);
		}
		public AlterTableContext alterTable() {
			return GetRuleContext<AlterTableContext>(0);
		}
		public AlterTablespaceContext alterTablespace() {
			return GetRuleContext<AlterTablespaceContext>(0);
		}
		public AlterViewContext alterView() {
			return GetRuleContext<AlterViewContext>(0);
		}
		public DropDatabaseContext dropDatabase() {
			return GetRuleContext<DropDatabaseContext>(0);
		}
		public DropEventContext dropEvent() {
			return GetRuleContext<DropEventContext>(0);
		}
		public DropIndexContext dropIndex() {
			return GetRuleContext<DropIndexContext>(0);
		}
		public DropLogfileGroupContext dropLogfileGroup() {
			return GetRuleContext<DropLogfileGroupContext>(0);
		}
		public DropProcedureContext dropProcedure() {
			return GetRuleContext<DropProcedureContext>(0);
		}
		public DropFunctionContext dropFunction() {
			return GetRuleContext<DropFunctionContext>(0);
		}
		public DropServerContext dropServer() {
			return GetRuleContext<DropServerContext>(0);
		}
		public DropTableContext dropTable() {
			return GetRuleContext<DropTableContext>(0);
		}
		public DropTablespaceContext dropTablespace() {
			return GetRuleContext<DropTablespaceContext>(0);
		}
		public DropTriggerContext dropTrigger() {
			return GetRuleContext<DropTriggerContext>(0);
		}
		public DropViewContext dropView() {
			return GetRuleContext<DropViewContext>(0);
		}
		public RenameTableContext renameTable() {
			return GetRuleContext<RenameTableContext>(0);
		}
		public TruncateTableContext truncateTable() {
			return GetRuleContext<TruncateTableContext>(0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddlStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDdlStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDdlStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DdlStatementContext ddlStatement() {
		DdlStatementContext _localctx = new DdlStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_ddlStatement);
		try {
			State = 692;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 657; createDatabase();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 658; createEvent();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 659; createIndex();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 660; createLogfileGroup();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 661; createProcedure();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 662; createFunction();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 663; createServer();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 664; createTable();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 665; createTablespaceInnodb();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 666; createTablespaceNdb();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 667; createTrigger();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 668; createView();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 669; alterDatabase();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 670; alterEvent();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 671; alterFunction();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 672; alterInstance();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 673; alterLogfileGroup();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 674; alterProcedure();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 675; alterServer();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 676; alterTable();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 677; alterTablespace();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 678; alterView();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 679; dropDatabase();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 680; dropEvent();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 681; dropIndex();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 682; dropLogfileGroup();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 683; dropProcedure();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 684; dropFunction();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 685; dropServer();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 686; dropTable();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 687; dropTablespace();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 688; dropTrigger();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 689; dropView();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 690; renameTable();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 691; truncateTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DmlStatementContext : ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		public ReplaceStatementContext replaceStatement() {
			return GetRuleContext<ReplaceStatementContext>(0);
		}
		public CallStatementContext callStatement() {
			return GetRuleContext<CallStatementContext>(0);
		}
		public LoadDataStatementContext loadDataStatement() {
			return GetRuleContext<LoadDataStatementContext>(0);
		}
		public LoadXmlStatementContext loadXmlStatement() {
			return GetRuleContext<LoadXmlStatementContext>(0);
		}
		public DoStatementContext doStatement() {
			return GetRuleContext<DoStatementContext>(0);
		}
		public HandlerStatementContext handlerStatement() {
			return GetRuleContext<HandlerStatementContext>(0);
		}
		public DmlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dmlStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDmlStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDmlStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDmlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DmlStatementContext dmlStatement() {
		DmlStatementContext _localctx = new DmlStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_dmlStatement);
		try {
			State = 704;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 694; selectStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 695; insertStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 696; updateStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 697; deleteStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 698; replaceStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 699; callStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 700; loadDataStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 701; loadXmlStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 702; doStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 703; handlerStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionStatementContext : ParserRuleContext {
		public StartTransactionContext startTransaction() {
			return GetRuleContext<StartTransactionContext>(0);
		}
		public BeginWorkContext beginWork() {
			return GetRuleContext<BeginWorkContext>(0);
		}
		public CommitWorkContext commitWork() {
			return GetRuleContext<CommitWorkContext>(0);
		}
		public RollbackWorkContext rollbackWork() {
			return GetRuleContext<RollbackWorkContext>(0);
		}
		public SavepointStatementContext savepointStatement() {
			return GetRuleContext<SavepointStatementContext>(0);
		}
		public RollbackStatementContext rollbackStatement() {
			return GetRuleContext<RollbackStatementContext>(0);
		}
		public ReleaseStatementContext releaseStatement() {
			return GetRuleContext<ReleaseStatementContext>(0);
		}
		public LockTablesContext lockTables() {
			return GetRuleContext<LockTablesContext>(0);
		}
		public UnlockTablesContext unlockTables() {
			return GetRuleContext<UnlockTablesContext>(0);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionStatementContext transactionStatement() {
		TransactionStatementContext _localctx = new TransactionStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_transactionStatement);
		try {
			State = 715;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 706; startTransaction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 707; beginWork();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 708; commitWork();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 709; rollbackWork();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 710; savepointStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 711; rollbackStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 712; releaseStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 713; lockTables();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 714; unlockTables();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationStatementContext : ParserRuleContext {
		public ChangeMasterContext changeMaster() {
			return GetRuleContext<ChangeMasterContext>(0);
		}
		public ChangeReplicationFilterContext changeReplicationFilter() {
			return GetRuleContext<ChangeReplicationFilterContext>(0);
		}
		public PurgeBinaryLogsContext purgeBinaryLogs() {
			return GetRuleContext<PurgeBinaryLogsContext>(0);
		}
		public ResetMasterContext resetMaster() {
			return GetRuleContext<ResetMasterContext>(0);
		}
		public ResetSlaveContext resetSlave() {
			return GetRuleContext<ResetSlaveContext>(0);
		}
		public StartSlaveContext startSlave() {
			return GetRuleContext<StartSlaveContext>(0);
		}
		public StopSlaveContext stopSlave() {
			return GetRuleContext<StopSlaveContext>(0);
		}
		public StartGroupReplicationContext startGroupReplication() {
			return GetRuleContext<StartGroupReplicationContext>(0);
		}
		public StopGroupReplicationContext stopGroupReplication() {
			return GetRuleContext<StopGroupReplicationContext>(0);
		}
		public XaStartTransactionContext xaStartTransaction() {
			return GetRuleContext<XaStartTransactionContext>(0);
		}
		public XaEndTransactionContext xaEndTransaction() {
			return GetRuleContext<XaEndTransactionContext>(0);
		}
		public XaPrepareStatementContext xaPrepareStatement() {
			return GetRuleContext<XaPrepareStatementContext>(0);
		}
		public XaCommitWorkContext xaCommitWork() {
			return GetRuleContext<XaCommitWorkContext>(0);
		}
		public XaRollbackWorkContext xaRollbackWork() {
			return GetRuleContext<XaRollbackWorkContext>(0);
		}
		public XaRecoverWorkContext xaRecoverWork() {
			return GetRuleContext<XaRecoverWorkContext>(0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReplicationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReplicationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplicationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationStatementContext replicationStatement() {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_replicationStatement);
		try {
			State = 732;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 717; changeMaster();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 718; changeReplicationFilter();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 719; purgeBinaryLogs();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 720; resetMaster();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 721; resetSlave();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 722; startSlave();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 723; stopSlave();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 724; startGroupReplication();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 725; stopGroupReplication();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 726; xaStartTransaction();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 727; xaEndTransaction();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 728; xaPrepareStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 729; xaCommitWork();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 730; xaRollbackWork();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 731; xaRecoverWork();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreparedStatementContext : ParserRuleContext {
		public PrepareStatementContext prepareStatement() {
			return GetRuleContext<PrepareStatementContext>(0);
		}
		public ExecuteStatementContext executeStatement() {
			return GetRuleContext<ExecuteStatementContext>(0);
		}
		public DeallocatePrepareContext deallocatePrepare() {
			return GetRuleContext<DeallocatePrepareContext>(0);
		}
		public PreparedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preparedStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPreparedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPreparedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreparedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreparedStatementContext preparedStatement() {
		PreparedStatementContext _localctx = new PreparedStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_preparedStatement);
		try {
			State = 737;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PREPARE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 734; prepareStatement();
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 735; executeStatement();
				}
				break;
			case DROP:
			case DEALLOCATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 736; deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public LeaveStatementContext leaveStatement() {
			return GetRuleContext<LeaveStatementContext>(0);
		}
		public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public IterateStatementContext iterateStatement() {
			return GetRuleContext<IterateStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public CursorStatementContext cursorStatement() {
			return GetRuleContext<CursorStatementContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_compoundStatement);
		try {
			State = 749;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 739; blockStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 740; caseStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 741; ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 742; leaveStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 743; loopStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 744; repeatStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 745; whileStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 746; iterateStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 747; returnStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 748; cursorStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdministrationStatementContext : ParserRuleContext {
		public AlterUserContext alterUser() {
			return GetRuleContext<AlterUserContext>(0);
		}
		public CreateUserContext createUser() {
			return GetRuleContext<CreateUserContext>(0);
		}
		public DropUserContext dropUser() {
			return GetRuleContext<DropUserContext>(0);
		}
		public GrantStatementContext grantStatement() {
			return GetRuleContext<GrantStatementContext>(0);
		}
		public GrantProxyContext grantProxy() {
			return GetRuleContext<GrantProxyContext>(0);
		}
		public RenameUserContext renameUser() {
			return GetRuleContext<RenameUserContext>(0);
		}
		public RevokeStatementContext revokeStatement() {
			return GetRuleContext<RevokeStatementContext>(0);
		}
		public RevokeProxyContext revokeProxy() {
			return GetRuleContext<RevokeProxyContext>(0);
		}
		public AnalyzeTableContext analyzeTable() {
			return GetRuleContext<AnalyzeTableContext>(0);
		}
		public CheckTableContext checkTable() {
			return GetRuleContext<CheckTableContext>(0);
		}
		public ChecksumTableContext checksumTable() {
			return GetRuleContext<ChecksumTableContext>(0);
		}
		public OptimizeTableContext optimizeTable() {
			return GetRuleContext<OptimizeTableContext>(0);
		}
		public RepairTableContext repairTable() {
			return GetRuleContext<RepairTableContext>(0);
		}
		public CreateUdfunctionContext createUdfunction() {
			return GetRuleContext<CreateUdfunctionContext>(0);
		}
		public InstallPluginContext installPlugin() {
			return GetRuleContext<InstallPluginContext>(0);
		}
		public UninstallPluginContext uninstallPlugin() {
			return GetRuleContext<UninstallPluginContext>(0);
		}
		public SetStatementContext setStatement() {
			return GetRuleContext<SetStatementContext>(0);
		}
		public ShowStatementContext showStatement() {
			return GetRuleContext<ShowStatementContext>(0);
		}
		public BinlogStatementContext binlogStatement() {
			return GetRuleContext<BinlogStatementContext>(0);
		}
		public CacheIndexStatementContext cacheIndexStatement() {
			return GetRuleContext<CacheIndexStatementContext>(0);
		}
		public FlushStatementContext flushStatement() {
			return GetRuleContext<FlushStatementContext>(0);
		}
		public KillStatementContext killStatement() {
			return GetRuleContext<KillStatementContext>(0);
		}
		public LoadIndexIntoCacheContext loadIndexIntoCache() {
			return GetRuleContext<LoadIndexIntoCacheContext>(0);
		}
		public ResetStatementContext resetStatement() {
			return GetRuleContext<ResetStatementContext>(0);
		}
		public ShutdownStatementContext shutdownStatement() {
			return GetRuleContext<ShutdownStatementContext>(0);
		}
		public AdministrationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_administrationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAdministrationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAdministrationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdministrationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdministrationStatementContext administrationStatement() {
		AdministrationStatementContext _localctx = new AdministrationStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_administrationStatement);
		try {
			State = 776;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 751; alterUser();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 752; createUser();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 753; dropUser();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 754; grantStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 755; grantProxy();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 756; renameUser();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 757; revokeStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 758; revokeProxy();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 759; analyzeTable();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 760; checkTable();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 761; checksumTable();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 762; optimizeTable();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 763; repairTable();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 764; createUdfunction();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 765; installPlugin();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 766; uninstallPlugin();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 767; setStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 768; showStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 769; binlogStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 770; cacheIndexStatement();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 771; flushStatement();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 772; killStatement();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 773; loadIndexIntoCache();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 774; resetStatement();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 775; shutdownStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UtilityStatementContext : ParserRuleContext {
		public SimpleDescribeStatementContext simpleDescribeStatement() {
			return GetRuleContext<SimpleDescribeStatementContext>(0);
		}
		public FullDescribeStatementContext fullDescribeStatement() {
			return GetRuleContext<FullDescribeStatementContext>(0);
		}
		public HelpStatementContext helpStatement() {
			return GetRuleContext<HelpStatementContext>(0);
		}
		public UseStatementContext useStatement() {
			return GetRuleContext<UseStatementContext>(0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_utilityStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUtilityStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUtilityStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUtilityStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UtilityStatementContext utilityStatement() {
		UtilityStatementContext _localctx = new UtilityStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_utilityStatement);
		try {
			State = 782;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 778; simpleDescribeStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 779; fullDescribeStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 780; helpStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 781; useStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseContext : ParserRuleContext {
		public IToken dbFormat;
		public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateDatabaseOptionContext[] createDatabaseOption() {
			return GetRuleContexts<CreateDatabaseOptionContext>();
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return GetRuleContext<CreateDatabaseOptionContext>(i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateDatabase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateDatabase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseContext createDatabase() {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(Context, State);
		EnterRule(_localctx, 24, RULE_createDatabase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784; Match(CREATE);
			State = 785;
			_localctx.dbFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				_localctx.dbFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 787;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 786; ifNotExists();
				}
			}

			State = 789; uid();
			State = 793;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==CHARSET) {
				{
				{
				State = 790; createDatabaseOption();
				}
				}
				State = 795;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateEventContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		public ITerminalNode SCHEDULE() { return GetToken(MySqlParser.SCHEDULE, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return GetRuleContext<ScheduleExpressionContext>(0);
		}
		public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public ITerminalNode COMPLETION() { return GetToken(MySqlParser.COMPLETION, 0); }
		public ITerminalNode PRESERVE() { return GetToken(MySqlParser.PRESERVE, 0); }
		public EnableTypeContext enableType() {
			return GetRuleContext<EnableTypeContext>(0);
		}
		public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createEvent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateEvent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateEvent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateEventContext createEvent() {
		CreateEventContext _localctx = new CreateEventContext(Context, State);
		EnterRule(_localctx, 26, RULE_createEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 796; Match(CREATE);
			State = 798;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 797; ownerStatement();
				}
			}

			State = 800; Match(EVENT);
			State = 802;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 801; ifNotExists();
				}
			}

			State = 804; fullId();
			State = 805; Match(ON);
			State = 806; Match(SCHEDULE);
			State = 807; scheduleExpression();
			State = 814;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 808; Match(ON);
				State = 809; Match(COMPLETION);
				State = 811;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 810; Match(NOT);
					}
				}

				State = 813; Match(PRESERVE);
				}
			}

			State = 817;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				State = 816; enableType();
				}
			}

			State = 821;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 819; Match(COMMENT);
				State = 820; Match(STRING_LITERAL);
				}
			}

			State = 823; Match(DO);
			State = 824; routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexContext : ParserRuleContext {
		public IToken intimeAction;
		public IToken indexCategory;
		public IToken algType;
		public IToken lockType;
		public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
		public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
		public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
		public ITerminalNode FULLTEXT() { return GetToken(MySqlParser.FULLTEXT, 0); }
		public ITerminalNode SPATIAL() { return GetToken(MySqlParser.SPATIAL, 0); }
		public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public ITerminalNode INPLACE() { return GetToken(MySqlParser.INPLACE, 0); }
		public ITerminalNode COPY() { return GetToken(MySqlParser.COPY, 0); }
		public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		public ITerminalNode SHARED() { return GetToken(MySqlParser.SHARED, 0); }
		public ITerminalNode EXCLUSIVE() { return GetToken(MySqlParser.EXCLUSIVE, 0); }
		public CreateIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexContext createIndex() {
		CreateIndexContext _localctx = new CreateIndexContext(Context, State);
		EnterRule(_localctx, 28, RULE_createIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 826; Match(CREATE);
			State = 828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				State = 827;
				_localctx.intimeAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					_localctx.intimeAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 831;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				State = 830;
				_localctx.indexCategory = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
					_localctx.indexCategory = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 833; Match(INDEX);
			State = 834; uid();
			State = 836;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 835; indexType();
				}
			}

			State = 838; Match(ON);
			State = 839; tableName();
			State = 840; indexColumnNames();
			State = 844;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
				{
				{
				State = 841; indexOption();
				}
				}
				State = 846;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 857;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALGORITHM:
				{
				State = 847; Match(ALGORITHM);
				State = 849;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 848; Match(EQUAL_SYMBOL);
					}
				}

				State = 851;
				_localctx.algType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
					_localctx.algType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case LOCK:
				{
				State = 852; Match(LOCK);
				State = 854;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 853; Match(EQUAL_SYMBOL);
					}
				}

				State = 856;
				_localctx.lockType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					_localctx.lockType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case Eof:
			case MINUSMINUS:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateLogfileGroupContext : ParserRuleContext {
		public IToken undoFile;
		public FileSizeLiteralContext initSize;
		public FileSizeLiteralContext undoSize;
		public FileSizeLiteralContext redoSize;
		public IToken comment;
		public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		public ITerminalNode UNDOFILE() { return GetToken(MySqlParser.UNDOFILE, 0); }
		public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		public ITerminalNode UNDO_BUFFER_SIZE() { return GetToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		public ITerminalNode REDO_BUFFER_SIZE() { return GetToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
		public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		public FileSizeLiteralContext[] fileSizeLiteral() {
			return GetRuleContexts<FileSizeLiteralContext>();
		}
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return GetRuleContext<FileSizeLiteralContext>(i);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createLogfileGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateLogfileGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateLogfileGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateLogfileGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateLogfileGroupContext createLogfileGroup() {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(Context, State);
		EnterRule(_localctx, 30, RULE_createLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 859; Match(CREATE);
			State = 860; Match(LOGFILE);
			State = 861; Match(GROUP);
			State = 862; uid();
			State = 863; Match(ADD);
			State = 864; Match(UNDOFILE);
			State = 865; _localctx.undoFile = Match(STRING_LITERAL);
			State = 871;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 866; Match(INITIAL_SIZE);
				State = 868;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 867; Match(EQUAL_SYMBOL);
					}
				}

				State = 870; _localctx.initSize = fileSizeLiteral();
				}
			}

			State = 878;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNDO_BUFFER_SIZE) {
				{
				State = 873; Match(UNDO_BUFFER_SIZE);
				State = 875;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 874; Match(EQUAL_SYMBOL);
					}
				}

				State = 877; _localctx.undoSize = fileSizeLiteral();
				}
			}

			State = 885;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REDO_BUFFER_SIZE) {
				{
				State = 880; Match(REDO_BUFFER_SIZE);
				State = 882;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 881; Match(EQUAL_SYMBOL);
					}
				}

				State = 884; _localctx.redoSize = fileSizeLiteral();
				}
			}

			State = 892;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NODEGROUP) {
				{
				State = 887; Match(NODEGROUP);
				State = 889;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 888; Match(EQUAL_SYMBOL);
					}
				}

				State = 891; uid();
				}
			}

			State = 895;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 894; Match(WAIT);
				}
			}

			State = 902;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 897; Match(COMMENT);
				State = 899;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 898; Match(EQUAL_SYMBOL);
					}
				}

				State = 901; _localctx.comment = Match(STRING_LITERAL);
				}
			}

			State = 904; Match(ENGINE);
			State = 906;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 905; Match(EQUAL_SYMBOL);
				}
			}

			State = 908; engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateProcedureContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		public ProcedureParameterContext[] procedureParameter() {
			return GetRuleContexts<ProcedureParameterContext>();
		}
		public ProcedureParameterContext procedureParameter(int i) {
			return GetRuleContext<ProcedureParameterContext>(i);
		}
		public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createProcedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateProcedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateProcedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateProcedureContext createProcedure() {
		CreateProcedureContext _localctx = new CreateProcedureContext(Context, State);
		EnterRule(_localctx, 32, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 910; Match(CREATE);
			State = 912;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 911; ownerStatement();
				}
			}

			State = 914; Match(PROCEDURE);
			State = 915; fullId();
			State = 916; Match(LR_BRACKET);
			State = 918;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (IN - 66)) | (1L << (INOUT - 66)) | (1L << (OUT - 66)))) != 0)) {
				{
				State = 917; procedureParameter();
				}
			}

			State = 924;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 920; Match(COMMA);
				State = 921; procedureParameter();
				}
				}
				State = 926;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 927; Match(RR_BRACKET);
			State = 931;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 928; routineOption();
					}
					} 
				}
				State = 933;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			State = 934; routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateFunctionContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public ITerminalNode RETURNS() { return GetToken(MySqlParser.RETURNS, 0); }
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateFunctionContext createFunction() {
		CreateFunctionContext _localctx = new CreateFunctionContext(Context, State);
		EnterRule(_localctx, 34, RULE_createFunction);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 936; Match(CREATE);
			State = 938;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 937; ownerStatement();
				}
			}

			State = 940; Match(FUNCTION);
			State = 941; fullId();
			State = 942; Match(LR_BRACKET);
			State = 944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
				{
				State = 943; functionParameter();
				}
			}

			State = 950;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 946; Match(COMMA);
				State = 947; functionParameter();
				}
				}
				State = 952;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 953; Match(RR_BRACKET);
			State = 954; Match(RETURNS);
			State = 955; dataType();
			State = 959;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 956; routineOption();
					}
					} 
				}
				State = 961;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			State = 962; routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateServerContext : ParserRuleContext {
		public IToken wrapperName;
		public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
		public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		public ITerminalNode WRAPPER() { return GetToken(MySqlParser.WRAPPER, 0); }
		public ITerminalNode OPTIONS() { return GetToken(MySqlParser.OPTIONS, 0); }
		public ServerOptionContext[] serverOption() {
			return GetRuleContexts<ServerOptionContext>();
		}
		public ServerOptionContext serverOption(int i) {
			return GetRuleContext<ServerOptionContext>(i);
		}
		public ITerminalNode MYSQL() { return GetToken(MySqlParser.MYSQL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public CreateServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createServer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateServer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateServer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateServerContext createServer() {
		CreateServerContext _localctx = new CreateServerContext(Context, State);
		EnterRule(_localctx, 36, RULE_createServer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 964; Match(CREATE);
			State = 965; Match(SERVER);
			State = 966; uid();
			State = 967; Match(FOREIGN);
			State = 968; Match(DATA);
			State = 969; Match(WRAPPER);
			State = 970;
			_localctx.wrapperName = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==MYSQL || _la==STRING_LITERAL) ) {
				_localctx.wrapperName = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 971; Match(OPTIONS);
			State = 972; Match(LR_BRACKET);
			State = 973; serverOption();
			State = 978;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 974; Match(COMMA);
				State = 975; serverOption();
				}
				}
				State = 980;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 981; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableContext : ParserRuleContext {
		public CreateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTable; } }
	 
		public CreateTableContext() { }
		public virtual void CopyFrom(CreateTableContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CopyCreateTableContext : CreateTableContext {
		public TableNameContext parenthesisTable;
		public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
		public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CopyCreateTableContext(CreateTableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCopyCreateTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCopyCreateTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ColumnCreateTableContext : CreateTableContext {
		public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return GetRuleContext<CreateDefinitionsContext>(0);
		}
		public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public TableOptionContext[] tableOption() {
			return GetRuleContexts<TableOptionContext>();
		}
		public TableOptionContext tableOption(int i) {
			return GetRuleContext<TableOptionContext>(i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		public ColumnCreateTableContext(CreateTableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnCreateTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnCreateTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QueryCreateTableContext : CreateTableContext {
		public IToken keyViolate;
		public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return GetRuleContext<CreateDefinitionsContext>(0);
		}
		public TableOptionContext[] tableOption() {
			return GetRuleContexts<TableOptionContext>();
		}
		public TableOptionContext tableOption(int i) {
			return GetRuleContext<TableOptionContext>(i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		public QueryCreateTableContext(CreateTableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQueryCreateTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQueryCreateTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableContext createTable() {
		CreateTableContext _localctx = new CreateTableContext(Context, State);
		EnterRule(_localctx, 38, RULE_createTable);
		int _la;
		try {
			State = 1061;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				_localctx = new CopyCreateTableContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 983; Match(CREATE);
				State = 985;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEMPORARY) {
					{
					State = 984; Match(TEMPORARY);
					}
				}

				State = 987; Match(TABLE);
				State = 989;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 988; ifNotExists();
					}
				}

				State = 991; tableName();
				State = 999;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LIKE:
					{
					State = 992; Match(LIKE);
					State = 993; tableName();
					}
					break;
				case LR_BRACKET:
					{
					State = 994; Match(LR_BRACKET);
					State = 995; Match(LIKE);
					State = 996; ((CopyCreateTableContext)_localctx).parenthesisTable = tableName();
					State = 997; Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new QueryCreateTableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1001; Match(CREATE);
				State = 1003;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEMPORARY) {
					{
					State = 1002; Match(TEMPORARY);
					}
				}

				State = 1005; Match(TABLE);
				State = 1007;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 1006; ifNotExists();
					}
				}

				State = 1009; tableName();
				State = 1011;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 1010; createDefinitions();
					}
					break;
				}
				State = 1023;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (CHARACTER - 21)) | (1L << (COLLATE - 21)) | (1L << (DEFAULT - 21)) | (1L << (INDEX - 21)))) != 0) || _la==UNION || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (AUTO_INCREMENT - 254)) | (1L << (AVG_ROW_LENGTH - 254)) | (1L << (CHECKSUM - 254)) | (1L << (COMMENT - 254)) | (1L << (COMPRESSION - 254)) | (1L << (CONNECTION - 254)) | (1L << (DATA - 254)) | (1L << (DELAY_KEY_WRITE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENGINE - 254)))) != 0) || ((((_la - 351)) & ~0x3f) == 0 && ((1L << (_la - 351)) & ((1L << (INSERT_METHOD - 351)) | (1L << (KEY_BLOCK_SIZE - 351)) | (1L << (MAX_ROWS - 351)) | (1L << (MIN_ROWS - 351)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (PACK_KEYS - 426)) | (1L << (PASSWORD - 426)) | (1L << (ROW_FORMAT - 426)))) != 0) || ((((_la - 502)) & ~0x3f) == 0 && ((1L << (_la - 502)) & ((1L << (STATS_AUTO_RECALC - 502)) | (1L << (STATS_PERSISTENT - 502)) | (1L << (STATS_SAMPLE_PAGES - 502)) | (1L << (TABLESPACE - 502)))) != 0) || _la==CHARSET) {
					{
					State = 1013; tableOption();
					State = 1020;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (CHARACTER - 21)) | (1L << (COLLATE - 21)) | (1L << (DEFAULT - 21)) | (1L << (INDEX - 21)))) != 0) || _la==UNION || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (AUTO_INCREMENT - 254)) | (1L << (AVG_ROW_LENGTH - 254)) | (1L << (CHECKSUM - 254)) | (1L << (COMMENT - 254)) | (1L << (COMPRESSION - 254)) | (1L << (CONNECTION - 254)) | (1L << (DATA - 254)) | (1L << (DELAY_KEY_WRITE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENGINE - 254)))) != 0) || ((((_la - 351)) & ~0x3f) == 0 && ((1L << (_la - 351)) & ((1L << (INSERT_METHOD - 351)) | (1L << (KEY_BLOCK_SIZE - 351)) | (1L << (MAX_ROWS - 351)) | (1L << (MIN_ROWS - 351)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (PACK_KEYS - 426)) | (1L << (PASSWORD - 426)) | (1L << (ROW_FORMAT - 426)))) != 0) || ((((_la - 502)) & ~0x3f) == 0 && ((1L << (_la - 502)) & ((1L << (STATS_AUTO_RECALC - 502)) | (1L << (STATS_PERSISTENT - 502)) | (1L << (STATS_SAMPLE_PAGES - 502)) | (1L << (TABLESPACE - 502)))) != 0) || _la==CHARSET || _la==COMMA) {
						{
						{
						State = 1015;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 1014; Match(COMMA);
							}
						}

						State = 1017; tableOption();
						}
						}
						State = 1022;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1026;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1025; partitionDefinitions();
					}
				}

				State = 1029;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE || _la==REPLACE) {
					{
					State = 1028;
					((QueryCreateTableContext)_localctx).keyViolate = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==IGNORE || _la==REPLACE) ) {
						((QueryCreateTableContext)_localctx).keyViolate = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1032;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 1031; Match(AS);
					}
				}

				State = 1034; selectStatement();
				}
				break;
			case 3:
				_localctx = new ColumnCreateTableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1036; Match(CREATE);
				State = 1038;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEMPORARY) {
					{
					State = 1037; Match(TEMPORARY);
					}
				}

				State = 1040; Match(TABLE);
				State = 1042;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 1041; ifNotExists();
					}
				}

				State = 1044; tableName();
				State = 1045; createDefinitions();
				State = 1056;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (CHARACTER - 21)) | (1L << (COLLATE - 21)) | (1L << (DEFAULT - 21)) | (1L << (INDEX - 21)))) != 0) || _la==UNION || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (AUTO_INCREMENT - 254)) | (1L << (AVG_ROW_LENGTH - 254)) | (1L << (CHECKSUM - 254)) | (1L << (COMMENT - 254)) | (1L << (COMPRESSION - 254)) | (1L << (CONNECTION - 254)) | (1L << (DATA - 254)) | (1L << (DELAY_KEY_WRITE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENGINE - 254)))) != 0) || ((((_la - 351)) & ~0x3f) == 0 && ((1L << (_la - 351)) & ((1L << (INSERT_METHOD - 351)) | (1L << (KEY_BLOCK_SIZE - 351)) | (1L << (MAX_ROWS - 351)) | (1L << (MIN_ROWS - 351)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (PACK_KEYS - 426)) | (1L << (PASSWORD - 426)) | (1L << (ROW_FORMAT - 426)))) != 0) || ((((_la - 502)) & ~0x3f) == 0 && ((1L << (_la - 502)) & ((1L << (STATS_AUTO_RECALC - 502)) | (1L << (STATS_PERSISTENT - 502)) | (1L << (STATS_SAMPLE_PAGES - 502)) | (1L << (TABLESPACE - 502)))) != 0) || _la==CHARSET) {
					{
					State = 1046; tableOption();
					State = 1053;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (CHARACTER - 21)) | (1L << (COLLATE - 21)) | (1L << (DEFAULT - 21)) | (1L << (INDEX - 21)))) != 0) || _la==UNION || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (AUTO_INCREMENT - 254)) | (1L << (AVG_ROW_LENGTH - 254)) | (1L << (CHECKSUM - 254)) | (1L << (COMMENT - 254)) | (1L << (COMPRESSION - 254)) | (1L << (CONNECTION - 254)) | (1L << (DATA - 254)) | (1L << (DELAY_KEY_WRITE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENGINE - 254)))) != 0) || ((((_la - 351)) & ~0x3f) == 0 && ((1L << (_la - 351)) & ((1L << (INSERT_METHOD - 351)) | (1L << (KEY_BLOCK_SIZE - 351)) | (1L << (MAX_ROWS - 351)) | (1L << (MIN_ROWS - 351)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (PACK_KEYS - 426)) | (1L << (PASSWORD - 426)) | (1L << (ROW_FORMAT - 426)))) != 0) || ((((_la - 502)) & ~0x3f) == 0 && ((1L << (_la - 502)) & ((1L << (STATS_AUTO_RECALC - 502)) | (1L << (STATS_PERSISTENT - 502)) | (1L << (STATS_SAMPLE_PAGES - 502)) | (1L << (TABLESPACE - 502)))) != 0) || _la==CHARSET || _la==COMMA) {
						{
						{
						State = 1048;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 1047; Match(COMMA);
							}
						}

						State = 1050; tableOption();
						}
						}
						State = 1055;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1059;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1058; partitionDefinitions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTablespaceInnodbContext : ParserRuleContext {
		public IToken datafile;
		public FileSizeLiteralContext fileBlockSize;
		public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ITerminalNode FILE_BLOCK_SIZE() { return GetToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		public CreateTablespaceInnodbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTablespaceInnodb; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateTablespaceInnodb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateTablespaceInnodb(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTablespaceInnodb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTablespaceInnodbContext createTablespaceInnodb() {
		CreateTablespaceInnodbContext _localctx = new CreateTablespaceInnodbContext(Context, State);
		EnterRule(_localctx, 40, RULE_createTablespaceInnodb);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1063; Match(CREATE);
			State = 1064; Match(TABLESPACE);
			State = 1065; uid();
			State = 1066; Match(ADD);
			State = 1067; Match(DATAFILE);
			State = 1068; _localctx.datafile = Match(STRING_LITERAL);
			State = 1072;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FILE_BLOCK_SIZE) {
				{
				State = 1069; Match(FILE_BLOCK_SIZE);
				State = 1070; Match(EQUAL_SYMBOL);
				State = 1071; _localctx.fileBlockSize = fileSizeLiteral();
				}
			}

			State = 1079;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE) {
				{
				State = 1074; Match(ENGINE);
				State = 1076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1075; Match(EQUAL_SYMBOL);
					}
				}

				State = 1078; engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTablespaceNdbContext : ParserRuleContext {
		public IToken datafile;
		public FileSizeLiteralContext extentSize;
		public FileSizeLiteralContext initialSize;
		public FileSizeLiteralContext autoextendSize;
		public FileSizeLiteralContext maxSize;
		public IToken comment;
		public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
		public ITerminalNode USE() { return GetToken(MySqlParser.USE, 0); }
		public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		public ITerminalNode EXTENT_SIZE() { return GetToken(MySqlParser.EXTENT_SIZE, 0); }
		public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		public ITerminalNode AUTOEXTEND_SIZE() { return GetToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public ITerminalNode MAX_SIZE() { return GetToken(MySqlParser.MAX_SIZE, 0); }
		public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
		public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		public FileSizeLiteralContext[] fileSizeLiteral() {
			return GetRuleContexts<FileSizeLiteralContext>();
		}
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return GetRuleContext<FileSizeLiteralContext>(i);
		}
		public CreateTablespaceNdbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTablespaceNdb; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateTablespaceNdb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateTablespaceNdb(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTablespaceNdb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTablespaceNdbContext createTablespaceNdb() {
		CreateTablespaceNdbContext _localctx = new CreateTablespaceNdbContext(Context, State);
		EnterRule(_localctx, 42, RULE_createTablespaceNdb);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1081; Match(CREATE);
			State = 1082; Match(TABLESPACE);
			State = 1083; uid();
			State = 1084; Match(ADD);
			State = 1085; Match(DATAFILE);
			State = 1086; _localctx.datafile = Match(STRING_LITERAL);
			State = 1087; Match(USE);
			State = 1088; Match(LOGFILE);
			State = 1089; Match(GROUP);
			State = 1090; uid();
			State = 1096;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENT_SIZE) {
				{
				State = 1091; Match(EXTENT_SIZE);
				State = 1093;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1092; Match(EQUAL_SYMBOL);
					}
				}

				State = 1095; _localctx.extentSize = fileSizeLiteral();
				}
			}

			State = 1103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 1098; Match(INITIAL_SIZE);
				State = 1100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1099; Match(EQUAL_SYMBOL);
					}
				}

				State = 1102; _localctx.initialSize = fileSizeLiteral();
				}
			}

			State = 1110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTOEXTEND_SIZE) {
				{
				State = 1105; Match(AUTOEXTEND_SIZE);
				State = 1107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1106; Match(EQUAL_SYMBOL);
					}
				}

				State = 1109; _localctx.autoextendSize = fileSizeLiteral();
				}
			}

			State = 1117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MAX_SIZE) {
				{
				State = 1112; Match(MAX_SIZE);
				State = 1114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1113; Match(EQUAL_SYMBOL);
					}
				}

				State = 1116; _localctx.maxSize = fileSizeLiteral();
				}
			}

			State = 1124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NODEGROUP) {
				{
				State = 1119; Match(NODEGROUP);
				State = 1121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1120; Match(EQUAL_SYMBOL);
					}
				}

				State = 1123; uid();
				}
			}

			State = 1127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 1126; Match(WAIT);
				}
			}

			State = 1134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 1129; Match(COMMENT);
				State = 1131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1130; Match(EQUAL_SYMBOL);
					}
				}

				State = 1133; _localctx.comment = Match(STRING_LITERAL);
				}
			}

			State = 1136; Match(ENGINE);
			State = 1138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 1137; Match(EQUAL_SYMBOL);
				}
			}

			State = 1140; engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTriggerContext : ParserRuleContext {
		public FullIdContext thisTrigger;
		public IToken triggerTime;
		public IToken triggerEvent;
		public IToken triggerPlace;
		public FullIdContext otherTrigger;
		public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
		public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		public ITerminalNode EACH() { return GetToken(MySqlParser.EACH, 0); }
		public ITerminalNode ROW() { return GetToken(MySqlParser.ROW, 0); }
		public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		public ITerminalNode BEFORE() { return GetToken(MySqlParser.BEFORE, 0); }
		public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
		public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		public ITerminalNode FOLLOWS() { return GetToken(MySqlParser.FOLLOWS, 0); }
		public ITerminalNode PRECEDES() { return GetToken(MySqlParser.PRECEDES, 0); }
		public CreateTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTrigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateTrigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateTrigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTriggerContext createTrigger() {
		CreateTriggerContext _localctx = new CreateTriggerContext(Context, State);
		EnterRule(_localctx, 44, RULE_createTrigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1142; Match(CREATE);
			State = 1144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 1143; ownerStatement();
				}
			}

			State = 1146; Match(TRIGGER);
			State = 1147; _localctx.thisTrigger = fullId();
			State = 1148;
			_localctx.triggerTime = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BEFORE || _la==AFTER) ) {
				_localctx.triggerTime = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1149;
			_localctx.triggerEvent = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
				_localctx.triggerEvent = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1150; Match(ON);
			State = 1151; tableName();
			State = 1152; Match(FOR);
			State = 1153; Match(EACH);
			State = 1154; Match(ROW);
			State = 1157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 1155;
				_localctx.triggerPlace = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWS || _la==PRECEDES) ) {
					_localctx.triggerPlace = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1156; _localctx.otherTrigger = fullId();
				}
				break;
			}
			State = 1159; routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateViewContext : ParserRuleContext {
		public IToken algType;
		public IToken secContext;
		public IToken checkOption;
		public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		public ITerminalNode UNDEFINED() { return GetToken(MySqlParser.UNDEFINED, 0); }
		public ITerminalNode MERGE() { return GetToken(MySqlParser.MERGE, 0); }
		public ITerminalNode TEMPTABLE() { return GetToken(MySqlParser.TEMPTABLE, 0); }
		public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
		public ITerminalNode CASCADED() { return GetToken(MySqlParser.CASCADED, 0); }
		public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public CreateViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createView; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateView(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateView(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateView(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateViewContext createView() {
		CreateViewContext _localctx = new CreateViewContext(Context, State);
		EnterRule(_localctx, 46, RULE_createView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1161; Match(CREATE);
			State = 1164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1162; Match(OR);
				State = 1163; Match(REPLACE);
				}
			}

			State = 1169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM) {
				{
				State = 1166; Match(ALGORITHM);
				State = 1167; Match(EQUAL_SYMBOL);
				State = 1168;
				_localctx.algType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					_localctx.algType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 1171; ownerStatement();
				}
			}

			State = 1177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQL) {
				{
				State = 1174; Match(SQL);
				State = 1175; Match(SECURITY);
				State = 1176;
				_localctx.secContext = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					_localctx.secContext = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1179; Match(VIEW);
			State = 1180; fullId();
			State = 1185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 1181; Match(LR_BRACKET);
				State = 1182; uidList();
				State = 1183; Match(RR_BRACKET);
				}
			}

			State = 1187; Match(AS);
			State = 1188; selectStatement();
			State = 1195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1189; Match(WITH);
				State = 1191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					State = 1190;
					_localctx.checkOption = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						_localctx.checkOption = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1193; Match(CHECK);
				State = 1194; Match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseOptionContext : ParserRuleContext {
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
		public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabaseOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateDatabaseOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateDatabaseOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatabaseOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseOptionContext createDatabaseOption() {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(Context, State);
		EnterRule(_localctx, 48, RULE_createDatabaseOption);
		int _la;
		try {
			State = 1217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1197; Match(DEFAULT);
					}
				}

				State = 1203;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CHARACTER:
					{
					State = 1200; Match(CHARACTER);
					State = 1201; Match(SET);
					}
					break;
				case CHARSET:
					{
					State = 1202; Match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1205; Match(EQUAL_SYMBOL);
					}
				}

				State = 1208; charsetName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1209; Match(DEFAULT);
					}
				}

				State = 1212; Match(COLLATE);
				State = 1214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1213; Match(EQUAL_SYMBOL);
					}
				}

				State = 1216; collationName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerStatementContext : ParserRuleContext {
		public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public ITerminalNode CURRENT_USER() { return GetToken(MySqlParser.CURRENT_USER, 0); }
		public OwnerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ownerStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOwnerStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOwnerStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnerStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OwnerStatementContext ownerStatement() {
		OwnerStatementContext _localctx = new OwnerStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_ownerStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1219; Match(DEFINER);
			State = 1220; Match(EQUAL_SYMBOL);
			State = 1227;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
			case STRING_USER_NAME:
				{
				State = 1221; userName();
				}
				break;
			case CURRENT_USER:
				{
				State = 1222; Match(CURRENT_USER);
				State = 1225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 1223; Match(LR_BRACKET);
					State = 1224; Match(RR_BRACKET);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScheduleExpressionContext : ParserRuleContext {
		public ScheduleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scheduleExpression; } }
	 
		public ScheduleExpressionContext() { }
		public virtual void CopyFrom(ScheduleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreciseScheduleContext : ScheduleExpressionContext {
		public ITerminalNode AT() { return GetToken(MySqlParser.AT, 0); }
		public TimestampValueContext timestampValue() {
			return GetRuleContext<TimestampValueContext>(0);
		}
		public IntervalExprContext[] intervalExpr() {
			return GetRuleContexts<IntervalExprContext>();
		}
		public IntervalExprContext intervalExpr(int i) {
			return GetRuleContext<IntervalExprContext>(i);
		}
		public PreciseScheduleContext(ScheduleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPreciseSchedule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPreciseSchedule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreciseSchedule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntervalScheduleContext : ScheduleExpressionContext {
		public TimestampValueContext start;
		public IntervalExprContext _intervalExpr;
		public IList<IntervalExprContext> _startIntervals = new List<IntervalExprContext>();
		public TimestampValueContext end;
		public IList<IntervalExprContext> _endIntervals = new List<IntervalExprContext>();
		public ITerminalNode EVERY() { return GetToken(MySqlParser.EVERY, 0); }
		public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode STARTS() { return GetToken(MySqlParser.STARTS, 0); }
		public ITerminalNode ENDS() { return GetToken(MySqlParser.ENDS, 0); }
		public TimestampValueContext[] timestampValue() {
			return GetRuleContexts<TimestampValueContext>();
		}
		public TimestampValueContext timestampValue(int i) {
			return GetRuleContext<TimestampValueContext>(i);
		}
		public IntervalExprContext[] intervalExpr() {
			return GetRuleContexts<IntervalExprContext>();
		}
		public IntervalExprContext intervalExpr(int i) {
			return GetRuleContext<IntervalExprContext>(i);
		}
		public IntervalScheduleContext(ScheduleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIntervalSchedule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIntervalSchedule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalSchedule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScheduleExpressionContext scheduleExpression() {
		ScheduleExpressionContext _localctx = new ScheduleExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_scheduleExpression);
		int _la;
		try {
			State = 1263;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				_localctx = new PreciseScheduleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1229; Match(AT);
				State = 1230; timestampValue();
				State = 1234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==PLUS) {
					{
					{
					State = 1231; intervalExpr();
					}
					}
					State = 1236;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1237; Match(EVERY);
				State = 1240;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
				case 1:
					{
					State = 1238; decimalLiteral();
					}
					break;
				case 2:
					{
					State = 1239; expression(0);
					}
					break;
				}
				State = 1242; intervalType();
				State = 1251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STARTS) {
					{
					State = 1243; Match(STARTS);
					State = 1244; ((IntervalScheduleContext)_localctx).start = timestampValue();
					State = 1248;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==PLUS) {
						{
						{
						State = 1245; ((IntervalScheduleContext)_localctx)._intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx)._startIntervals.Add(((IntervalScheduleContext)_localctx)._intervalExpr);
						}
						}
						State = 1250;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ENDS) {
					{
					State = 1253; Match(ENDS);
					State = 1254; ((IntervalScheduleContext)_localctx).end = timestampValue();
					State = 1258;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==PLUS) {
						{
						{
						State = 1255; ((IntervalScheduleContext)_localctx)._intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx)._endIntervals.Add(((IntervalScheduleContext)_localctx)._intervalExpr);
						}
						}
						State = 1260;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimestampValueContext : ParserRuleContext {
		public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TimestampValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timestampValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTimestampValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTimestampValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimestampValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimestampValueContext timestampValue() {
		TimestampValueContext _localctx = new TimestampValueContext(Context, State);
		EnterRule(_localctx, 54, RULE_timestampValue);
		try {
			State = 1269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1265; Match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1266; stringLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1267; decimalLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1268; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalExprContext : ParserRuleContext {
		public ITerminalNode INTERVAL() { return GetToken(MySqlParser.INTERVAL, 0); }
		public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IntervalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIntervalExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIntervalExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalExprContext intervalExpr() {
		IntervalExprContext _localctx = new IntervalExprContext(Context, State);
		EnterRule(_localctx, 56, RULE_intervalExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1271; Match(PLUS);
			State = 1272; Match(INTERVAL);
			State = 1275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				{
				State = 1273; decimalLiteral();
				}
				break;
			case 2:
				{
				State = 1274; expression(0);
				}
				break;
			}
			State = 1277; intervalType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalTypeContext : ParserRuleContext {
		public IntervalTypeBaseContext intervalTypeBase() {
			return GetRuleContext<IntervalTypeBaseContext>(0);
		}
		public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
		public ITerminalNode YEAR_MONTH() { return GetToken(MySqlParser.YEAR_MONTH, 0); }
		public ITerminalNode DAY_HOUR() { return GetToken(MySqlParser.DAY_HOUR, 0); }
		public ITerminalNode DAY_MINUTE() { return GetToken(MySqlParser.DAY_MINUTE, 0); }
		public ITerminalNode DAY_SECOND() { return GetToken(MySqlParser.DAY_SECOND, 0); }
		public ITerminalNode HOUR_MINUTE() { return GetToken(MySqlParser.HOUR_MINUTE, 0); }
		public ITerminalNode HOUR_SECOND() { return GetToken(MySqlParser.HOUR_SECOND, 0); }
		public ITerminalNode MINUTE_SECOND() { return GetToken(MySqlParser.MINUTE_SECOND, 0); }
		public ITerminalNode SECOND_MICROSECOND() { return GetToken(MySqlParser.SECOND_MICROSECOND, 0); }
		public ITerminalNode MINUTE_MICROSECOND() { return GetToken(MySqlParser.MINUTE_MICROSECOND, 0); }
		public ITerminalNode HOUR_MICROSECOND() { return GetToken(MySqlParser.HOUR_MICROSECOND, 0); }
		public ITerminalNode DAY_MICROSECOND() { return GetToken(MySqlParser.DAY_MICROSECOND, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIntervalType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIntervalType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalTypeContext intervalType() {
		IntervalTypeContext _localctx = new IntervalTypeContext(Context, State);
		EnterRule(_localctx, 58, RULE_intervalType);
		try {
			State = 1292;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1279; intervalTypeBase();
				}
				break;
			case YEAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1280; Match(YEAR);
				}
				break;
			case YEAR_MONTH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1281; Match(YEAR_MONTH);
				}
				break;
			case DAY_HOUR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1282; Match(DAY_HOUR);
				}
				break;
			case DAY_MINUTE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1283; Match(DAY_MINUTE);
				}
				break;
			case DAY_SECOND:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1284; Match(DAY_SECOND);
				}
				break;
			case HOUR_MINUTE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1285; Match(HOUR_MINUTE);
				}
				break;
			case HOUR_SECOND:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1286; Match(HOUR_SECOND);
				}
				break;
			case MINUTE_SECOND:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1287; Match(MINUTE_SECOND);
				}
				break;
			case SECOND_MICROSECOND:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1288; Match(SECOND_MICROSECOND);
				}
				break;
			case MINUTE_MICROSECOND:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1289; Match(MINUTE_MICROSECOND);
				}
				break;
			case HOUR_MICROSECOND:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1290; Match(HOUR_MICROSECOND);
				}
				break;
			case DAY_MICROSECOND:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1291; Match(DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnableTypeContext : ParserRuleContext {
		public ITerminalNode ENABLE() { return GetToken(MySqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(MySqlParser.DISABLE, 0); }
		public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		public EnableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterEnableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitEnableType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnableTypeContext enableType() {
		EnableTypeContext _localctx = new EnableTypeContext(Context, State);
		EnterRule(_localctx, 60, RULE_enableType);
		try {
			State = 1299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1294; Match(ENABLE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1295; Match(DISABLE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1296; Match(DISABLE);
				State = 1297; Match(ON);
				State = 1298; Match(SLAVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexTypeContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		public ITerminalNode BTREE() { return GetToken(MySqlParser.BTREE, 0); }
		public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexTypeContext indexType() {
		IndexTypeContext _localctx = new IndexTypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_indexType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1301; Match(USING);
			State = 1302;
			_la = TokenStream.LA(1);
			if ( !(_la==BTREE || _la==HASH) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexOptionContext : ParserRuleContext {
		public ITerminalNode KEY_BLOCK_SIZE() { return GetToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		public ITerminalNode PARSER() { return GetToken(MySqlParser.PARSER, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public IndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexOptionContext indexOption() {
		IndexOptionContext _localctx = new IndexOptionContext(Context, State);
		EnterRule(_localctx, 64, RULE_indexOption);
		int _la;
		try {
			State = 1315;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEY_BLOCK_SIZE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1304; Match(KEY_BLOCK_SIZE);
				State = 1306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1305; Match(EQUAL_SYMBOL);
					}
				}

				State = 1308; fileSizeLiteral();
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1309; indexType();
				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1310; Match(WITH);
				State = 1311; Match(PARSER);
				State = 1312; uid();
				}
				break;
			case COMMENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1313; Match(COMMENT);
				State = 1314; Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterContext : ParserRuleContext {
		public IToken direction;
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(MySqlParser.OUT, 0); }
		public ITerminalNode INOUT() { return GetToken(MySqlParser.INOUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterProcedureParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitProcedureParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterContext procedureParameter() {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(Context, State);
		EnterRule(_localctx, 66, RULE_procedureParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1317;
			_localctx.direction = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (IN - 66)) | (1L << (INOUT - 66)) | (1L << (OUT - 66)))) != 0)) ) {
				_localctx.direction = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1318; uid();
			State = 1319; dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 68, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1321; uid();
			State = 1322; dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineOptionContext : ParserRuleContext {
		public RoutineOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineOption; } }
	 
		public RoutineOptionContext() { }
		public virtual void CopyFrom(RoutineOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RoutineBehaviorContext : RoutineOptionContext {
		public ITerminalNode DETERMINISTIC() { return GetToken(MySqlParser.DETERMINISTIC, 0); }
		public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public RoutineBehaviorContext(RoutineOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineBehavior(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineBehavior(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineBehavior(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoutineLanguageContext : RoutineOptionContext {
		public ITerminalNode LANGUAGE() { return GetToken(MySqlParser.LANGUAGE, 0); }
		public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		public RoutineLanguageContext(RoutineOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineLanguage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineLanguage(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineLanguage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoutineCommentContext : RoutineOptionContext {
		public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public RoutineCommentContext(RoutineOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoutineSecurityContext : RoutineOptionContext {
		public IToken context;
		public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
		public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
		public RoutineSecurityContext(RoutineOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineSecurity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineSecurity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineSecurity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoutineDataContext : RoutineOptionContext {
		public ITerminalNode CONTAINS() { return GetToken(MySqlParser.CONTAINS, 0); }
		public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		public ITerminalNode READS() { return GetToken(MySqlParser.READS, 0); }
		public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		public ITerminalNode MODIFIES() { return GetToken(MySqlParser.MODIFIES, 0); }
		public RoutineDataContext(RoutineOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineData(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineData(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineOptionContext routineOption() {
		RoutineOptionContext _localctx = new RoutineOptionContext(Context, State);
		EnterRule(_localctx, 70, RULE_routineOption);
		int _la;
		try {
			State = 1347;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1324; Match(COMMENT);
				State = 1325; Match(STRING_LITERAL);
				}
				break;
			case LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1326; Match(LANGUAGE);
				State = 1327; Match(SQL);
				}
				break;
			case DETERMINISTIC:
			case NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1328; Match(NOT);
					}
				}

				State = 1331; Match(DETERMINISTIC);
				}
				break;
			case MODIFIES:
			case READS:
			case CONTAINS:
			case NO:
				_localctx = new RoutineDataContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1342;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CONTAINS:
					{
					State = 1332; Match(CONTAINS);
					State = 1333; Match(SQL);
					}
					break;
				case NO:
					{
					State = 1334; Match(NO);
					State = 1335; Match(SQL);
					}
					break;
				case READS:
					{
					State = 1336; Match(READS);
					State = 1337; Match(SQL);
					State = 1338; Match(DATA);
					}
					break;
				case MODIFIES:
					{
					State = 1339; Match(MODIFIES);
					State = 1340; Match(SQL);
					State = 1341; Match(DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1344; Match(SQL);
				State = 1345; Match(SECURITY);
				State = 1346;
				((RoutineSecurityContext)_localctx).context = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((RoutineSecurityContext)_localctx).context = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerOptionContext : ParserRuleContext {
		public ITerminalNode HOST() { return GetToken(MySqlParser.HOST, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		public ITerminalNode SOCKET() { return GetToken(MySqlParser.SOCKET, 0); }
		public ITerminalNode OWNER() { return GetToken(MySqlParser.OWNER, 0); }
		public ITerminalNode PORT() { return GetToken(MySqlParser.PORT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ServerOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterServerOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitServerOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServerOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServerOptionContext serverOption() {
		ServerOptionContext _localctx = new ServerOptionContext(Context, State);
		EnterRule(_localctx, 72, RULE_serverOption);
		try {
			State = 1363;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HOST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1349; Match(HOST);
				State = 1350; Match(STRING_LITERAL);
				}
				break;
			case DATABASE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1351; Match(DATABASE);
				State = 1352; Match(STRING_LITERAL);
				}
				break;
			case USER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1353; Match(USER);
				State = 1354; Match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1355; Match(PASSWORD);
				State = 1356; Match(STRING_LITERAL);
				}
				break;
			case SOCKET:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1357; Match(SOCKET);
				State = 1358; Match(STRING_LITERAL);
				}
				break;
			case OWNER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1359; Match(OWNER);
				State = 1360; Match(STRING_LITERAL);
				}
				break;
			case PORT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1361; Match(PORT);
				State = 1362; decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDefinitionsContext : ParserRuleContext {
		public CreateDefinitionContext[] createDefinition() {
			return GetRuleContexts<CreateDefinitionContext>();
		}
		public CreateDefinitionContext createDefinition(int i) {
			return GetRuleContext<CreateDefinitionContext>(i);
		}
		public CreateDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDefinitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateDefinitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateDefinitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDefinitionsContext createDefinitions() {
		CreateDefinitionsContext _localctx = new CreateDefinitionsContext(Context, State);
		EnterRule(_localctx, 74, RULE_createDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1365; Match(LR_BRACKET);
			State = 1366; createDefinition();
			State = 1371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1367; Match(COMMA);
				State = 1368; createDefinition();
				}
				}
				State = 1373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1374; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDefinitionContext : ParserRuleContext {
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDefinition; } }
	 
		public CreateDefinitionContext() { }
		public virtual void CopyFrom(CreateDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ColumnDeclarationContext : CreateDefinitionContext {
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		public ColumnDeclarationContext(CreateDefinitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstraintDeclarationContext : CreateDefinitionContext {
		public TableConstraintContext tableConstraint() {
			return GetRuleContext<TableConstraintContext>(0);
		}
		public ConstraintDeclarationContext(CreateDefinitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConstraintDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConstraintDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraintDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexDeclarationContext : CreateDefinitionContext {
		public IndexColumnDefinitionContext indexColumnDefinition() {
			return GetRuleContext<IndexColumnDefinitionContext>(0);
		}
		public IndexDeclarationContext(CreateDefinitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDefinitionContext createDefinition() {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(Context, State);
		EnterRule(_localctx, 76, RULE_createDefinition);
		try {
			State = 1381;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new ColumnDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1376; uid();
				State = 1377; columnDefinition();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				_localctx = new ConstraintDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1379; tableConstraint();
				}
				break;
			case FULLTEXT:
			case INDEX:
			case KEY:
			case SPATIAL:
				_localctx = new IndexDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1380; indexColumnDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefinitionContext : ParserRuleContext {
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ColumnConstraintContext[] columnConstraint() {
			return GetRuleContexts<ColumnConstraintContext>();
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return GetRuleContext<ColumnConstraintContext>(i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefinitionContext columnDefinition() {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(Context, State);
		EnterRule(_localctx, 78, RULE_columnDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1383; dataType();
			State = 1387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (DEFAULT - 36)) | (1L << (KEY - 36)) | (1L << (NOT - 36)) | (1L << (NULL_LITERAL - 36)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (PRIMARY - 110)) | (1L << (REFERENCES - 110)) | (1L << (UNIQUE - 110)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (AUTO_INCREMENT - 254)) | (1L << (COLUMN_FORMAT - 254)) | (1L << (COMMENT - 254)))) != 0) || _la==STORAGE || _la==NULL_SPEC_LITERAL) {
				{
				{
				State = 1384; columnConstraint();
				}
				}
				State = 1389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnConstraintContext : ParserRuleContext {
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnConstraint; } }
	 
		public ColumnConstraintContext() { }
		public virtual void CopyFrom(ColumnConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StorageColumnConstraintContext : ColumnConstraintContext {
		public IToken storageval;
		public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		public ITerminalNode DISK() { return GetToken(MySqlParser.DISK, 0); }
		public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public StorageColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStorageColumnConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStorageColumnConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorageColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FormatColumnConstraintContext : ColumnConstraintContext {
		public IToken colformat;
		public ITerminalNode COLUMN_FORMAT() { return GetToken(MySqlParser.COLUMN_FORMAT, 0); }
		public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(MySqlParser.DYNAMIC, 0); }
		public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public FormatColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFormatColumnConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFormatColumnConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormatColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AutoIncrementColumnConstraintContext : ColumnConstraintContext {
		public ITerminalNode AUTO_INCREMENT() { return GetToken(MySqlParser.AUTO_INCREMENT, 0); }
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAutoIncrementColumnConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAutoIncrementColumnConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAutoIncrementColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CommentColumnConstraintContext : ColumnConstraintContext {
		public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public CommentColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCommentColumnConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCommentColumnConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryKeyColumnConstraintContext : ColumnConstraintContext {
		public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrimaryKeyColumnConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrimaryKeyColumnConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryKeyColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UniqueKeyColumnConstraintContext : ColumnConstraintContext {
		public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
		public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public UniqueKeyColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUniqueKeyColumnConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUniqueKeyColumnConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniqueKeyColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullColumnConstraintContext : ColumnConstraintContext {
		public NullNotnullContext nullNotnull() {
			return GetRuleContext<NullNotnullContext>(0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNullColumnConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNullColumnConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultColumnConstraintContext : ColumnConstraintContext {
		public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public DefaultColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefaultColumnConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefaultColumnConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReferenceColumnConstraintContext : ColumnConstraintContext {
		public ReferenceDefinitionContext referenceDefinition() {
			return GetRuleContext<ReferenceDefinitionContext>(0);
		}
		public ReferenceColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReferenceColumnConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReferenceColumnConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnConstraintContext columnConstraint() {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(Context, State);
		EnterRule(_localctx, 80, RULE_columnConstraint);
		int _la;
		try {
			State = 1409;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1390; nullNotnull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1391; Match(DEFAULT);
				State = 1392; defaultValue();
				}
				break;
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1393; Match(AUTO_INCREMENT);
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIMARY) {
					{
					State = 1394; Match(PRIMARY);
					}
				}

				State = 1397; Match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1398; Match(UNIQUE);
				State = 1400;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
				case 1:
					{
					State = 1399; Match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1402; Match(COMMENT);
				State = 1403; Match(STRING_LITERAL);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1404; Match(COLUMN_FORMAT);
				State = 1405;
				((FormatColumnConstraintContext)_localctx).colformat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((FormatColumnConstraintContext)_localctx).colformat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1406; Match(STORAGE);
				State = 1407;
				((StorageColumnConstraintContext)_localctx).storageval = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((StorageColumnConstraintContext)_localctx).storageval = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1408; referenceDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableConstraintContext : ParserRuleContext {
		public TableConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableConstraint; } }
	 
		public TableConstraintContext() { }
		public virtual void CopyFrom(TableConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UniqueKeyTableConstraintContext : TableConstraintContext {
		public UidContext name;
		public IToken indexFormat;
		public UidContext index;
		public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public UniqueKeyTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUniqueKeyTableConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUniqueKeyTableConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniqueKeyTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CheckTableConstraintContext : TableConstraintContext {
		public UidContext name;
		public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CheckTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCheckTableConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCheckTableConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryKeyTableConstraintContext : TableConstraintContext {
		public UidContext name;
		public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrimaryKeyTableConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrimaryKeyTableConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryKeyTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeignKeyTableConstraintContext : TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
		public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return GetRuleContext<ReferenceDefinitionContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterForeignKeyTableConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitForeignKeyTableConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeignKeyTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableConstraintContext tableConstraint() {
		TableConstraintContext _localctx = new TableConstraintContext(Context, State);
		EnterRule(_localctx, 82, RULE_tableConstraint);
		int _la;
		try {
			State = 1477;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1411; Match(CONSTRAINT);
					State = 1413;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
						{
						State = 1412; ((PrimaryKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1417; Match(PRIMARY);
				State = 1418; Match(KEY);
				State = 1420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 1419; indexType();
					}
				}

				State = 1422; indexColumnNames();
				State = 1426;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					State = 1423; indexOption();
					}
					}
					State = 1428;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1429; Match(CONSTRAINT);
					State = 1431;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
						{
						State = 1430; ((UniqueKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1435; Match(UNIQUE);
				State = 1437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 1436;
					((UniqueKeyTableConstraintContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((UniqueKeyTableConstraintContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1440;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
					{
					State = 1439; ((UniqueKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				State = 1443;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 1442; indexType();
					}
				}

				State = 1445; indexColumnNames();
				State = 1449;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					State = 1446; indexOption();
					}
					}
					State = 1451;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1456;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1452; Match(CONSTRAINT);
					State = 1454;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
						{
						State = 1453; ((ForeignKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1458; Match(FOREIGN);
				State = 1459; Match(KEY);
				State = 1461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
					{
					State = 1460; ((ForeignKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				State = 1463; indexColumnNames();
				State = 1464; referenceDefinition();
				}
				break;
			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1470;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1466; Match(CONSTRAINT);
					State = 1468;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
						{
						State = 1467; ((CheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1472; Match(CHECK);
				State = 1473; Match(LR_BRACKET);
				State = 1474; expression(0);
				State = 1475; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceDefinitionContext : ParserRuleContext {
		public IToken matchType;
		public ITerminalNode REFERENCES() { return GetToken(MySqlParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		public ITerminalNode MATCH() { return GetToken(MySqlParser.MATCH, 0); }
		public ReferenceActionContext referenceAction() {
			return GetRuleContext<ReferenceActionContext>(0);
		}
		public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		public ITerminalNode PARTIAL() { return GetToken(MySqlParser.PARTIAL, 0); }
		public ITerminalNode SIMPLE() { return GetToken(MySqlParser.SIMPLE, 0); }
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReferenceDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReferenceDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceDefinitionContext referenceDefinition() {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(Context, State);
		EnterRule(_localctx, 84, RULE_referenceDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1479; Match(REFERENCES);
			State = 1480; tableName();
			State = 1481; indexColumnNames();
			State = 1484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MATCH) {
				{
				State = 1482; Match(MATCH);
				State = 1483;
				_localctx.matchType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
					_localctx.matchType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1487;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 1486; referenceAction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceActionContext : ParserRuleContext {
		public ReferenceControlTypeContext onDelete;
		public ReferenceControlTypeContext onUpdate;
		public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		public ReferenceControlTypeContext[] referenceControlType() {
			return GetRuleContexts<ReferenceControlTypeContext>();
		}
		public ReferenceControlTypeContext referenceControlType(int i) {
			return GetRuleContext<ReferenceControlTypeContext>(i);
		}
		public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		public ReferenceActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReferenceAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReferenceAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceActionContext referenceAction() {
		ReferenceActionContext _localctx = new ReferenceActionContext(Context, State);
		EnterRule(_localctx, 86, RULE_referenceAction);
		int _la;
		try {
			State = 1505;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1489; Match(ON);
				State = 1490; Match(DELETE);
				State = 1491; _localctx.onDelete = referenceControlType();
				State = 1495;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 1492; Match(ON);
					State = 1493; Match(UPDATE);
					State = 1494; _localctx.onUpdate = referenceControlType();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1497; Match(ON);
				State = 1498; Match(UPDATE);
				State = 1499; _localctx.onUpdate = referenceControlType();
				State = 1503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 1500; Match(ON);
					State = 1501; Match(DELETE);
					State = 1502; _localctx.onDelete = referenceControlType();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceControlTypeContext : ParserRuleContext {
		public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
		public ITerminalNode CASCADE() { return GetToken(MySqlParser.CASCADE, 0); }
		public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
		public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		public ITerminalNode ACTION() { return GetToken(MySqlParser.ACTION, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceControlType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReferenceControlType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReferenceControlType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceControlType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceControlTypeContext referenceControlType() {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(Context, State);
		EnterRule(_localctx, 88, RULE_referenceControlType);
		try {
			State = 1513;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RESTRICT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1507; Match(RESTRICT);
				}
				break;
			case CASCADE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1508; Match(CASCADE);
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1509; Match(SET);
				State = 1510; Match(NULL_LITERAL);
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1511; Match(NO);
				State = 1512; Match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexColumnDefinitionContext : ParserRuleContext {
		public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexColumnDefinition; } }
	 
		public IndexColumnDefinitionContext() { }
		public virtual void CopyFrom(IndexColumnDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SpecialIndexDeclarationContext : IndexColumnDefinitionContext {
		public IToken indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		public ITerminalNode FULLTEXT() { return GetToken(MySqlParser.FULLTEXT, 0); }
		public ITerminalNode SPATIAL() { return GetToken(MySqlParser.SPATIAL, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public SpecialIndexDeclarationContext(IndexColumnDefinitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSpecialIndexDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSpecialIndexDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialIndexDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleIndexDeclarationContext : IndexColumnDefinitionContext {
		public IToken indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public SimpleIndexDeclarationContext(IndexColumnDefinitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleIndexDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleIndexDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleIndexDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexColumnDefinitionContext indexColumnDefinition() {
		IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(Context, State);
		EnterRule(_localctx, 90, RULE_indexColumnDefinition);
		int _la;
		try {
			State = 1543;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEX:
			case KEY:
				_localctx = new SimpleIndexDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1515;
				((SimpleIndexDeclarationContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((SimpleIndexDeclarationContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1517;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
					{
					State = 1516; uid();
					}
				}

				State = 1520;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 1519; indexType();
					}
				}

				State = 1522; indexColumnNames();
				State = 1526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					State = 1523; indexOption();
					}
					}
					State = 1528;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				_localctx = new SpecialIndexDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1529;
				_la = TokenStream.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1531;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 1530;
					((SpecialIndexDeclarationContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((SpecialIndexDeclarationContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1534;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
					{
					State = 1533; uid();
					}
				}

				State = 1536; indexColumnNames();
				State = 1540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					State = 1537; indexOption();
					}
					}
					State = 1542;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableOptionContext : ParserRuleContext {
		public TableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableOption; } }
	 
		public TableOptionContext() { }
		public virtual void CopyFrom(TableOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TableOptionEngineContext : TableOptionContext {
		public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		public TableOptionEngineContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionEngine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionEngine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionEngine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionMaxRowsContext : TableOptionContext {
		public ITerminalNode MAX_ROWS() { return GetToken(MySqlParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public TableOptionMaxRowsContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionMaxRows(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionMaxRows(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionMaxRows(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionCollateContext : TableOptionContext {
		public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public TableOptionCollateContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionCollate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionCollate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionCollate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionPersistentContext : TableOptionContext {
		public IToken extBoolValue;
		public ITerminalNode STATS_PERSISTENT() { return GetToken(MySqlParser.STATS_PERSISTENT, 0); }
		public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public TableOptionPersistentContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionPersistent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionPersistent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionPersistent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionTablespaceContext : TableOptionContext {
		public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public TablespaceStorageContext tablespaceStorage() {
			return GetRuleContext<TablespaceStorageContext>(0);
		}
		public TableOptionTablespaceContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionTablespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionTablespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionPackKeysContext : TableOptionContext {
		public IToken extBoolValue;
		public ITerminalNode PACK_KEYS() { return GetToken(MySqlParser.PACK_KEYS, 0); }
		public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public TableOptionPackKeysContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionPackKeys(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionPackKeys(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionPackKeys(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionPasswordContext : TableOptionContext {
		public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public TableOptionPasswordContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionPassword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionPassword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionPassword(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionUnionContext : TableOptionContext {
		public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		public TableOptionUnionContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionUnion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionUnion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionUnion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionSamplePageContext : TableOptionContext {
		public ITerminalNode STATS_SAMPLE_PAGES() { return GetToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public TableOptionSamplePageContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionSamplePage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionSamplePage(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionSamplePage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionCharsetContext : TableOptionContext {
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
		public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public TableOptionCharsetContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionCharset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionCharset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionCharset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionIndexDirectoryContext : TableOptionContext {
		public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public TableOptionIndexDirectoryContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionIndexDirectory(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionIndexDirectory(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionIndexDirectory(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionKeyBlockSizeContext : TableOptionContext {
		public ITerminalNode KEY_BLOCK_SIZE() { return GetToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		public TableOptionKeyBlockSizeContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionKeyBlockSize(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionKeyBlockSize(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionKeyBlockSize(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionEncryptionContext : TableOptionContext {
		public ITerminalNode ENCRYPTION() { return GetToken(MySqlParser.ENCRYPTION, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public TableOptionEncryptionContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionEncryption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionEncryption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionEncryption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionDataDirectoryContext : TableOptionContext {
		public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public TableOptionDataDirectoryContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionDataDirectory(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionDataDirectory(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionDataDirectory(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionRecalculationContext : TableOptionContext {
		public IToken extBoolValue;
		public ITerminalNode STATS_AUTO_RECALC() { return GetToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public TableOptionRecalculationContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionRecalculation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionRecalculation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionRecalculation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionAutoIncrementContext : TableOptionContext {
		public ITerminalNode AUTO_INCREMENT() { return GetToken(MySqlParser.AUTO_INCREMENT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public TableOptionAutoIncrementContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionAutoIncrement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionAutoIncrement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionAutoIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionChecksumContext : TableOptionContext {
		public IToken boolValue;
		public ITerminalNode CHECKSUM() { return GetToken(MySqlParser.CHECKSUM, 0); }
		public TableOptionChecksumContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionChecksum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionChecksum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionChecksum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionDelayContext : TableOptionContext {
		public IToken boolValue;
		public ITerminalNode DELAY_KEY_WRITE() { return GetToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		public TableOptionDelayContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionDelay(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionDelay(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionDelay(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionConnectionContext : TableOptionContext {
		public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public TableOptionConnectionContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionConnection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionConnection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionConnection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionCommentContext : TableOptionContext {
		public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public TableOptionCommentContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionAverageContext : TableOptionContext {
		public ITerminalNode AVG_ROW_LENGTH() { return GetToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public TableOptionAverageContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionAverage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionAverage(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionAverage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionRowFormatContext : TableOptionContext {
		public IToken rowFormat;
		public ITerminalNode ROW_FORMAT() { return GetToken(MySqlParser.ROW_FORMAT, 0); }
		public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(MySqlParser.DYNAMIC, 0); }
		public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
		public ITerminalNode COMPRESSED() { return GetToken(MySqlParser.COMPRESSED, 0); }
		public ITerminalNode REDUNDANT() { return GetToken(MySqlParser.REDUNDANT, 0); }
		public ITerminalNode COMPACT() { return GetToken(MySqlParser.COMPACT, 0); }
		public TableOptionRowFormatContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionRowFormat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionRowFormat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionRowFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionCompressionContext : TableOptionContext {
		public ITerminalNode COMPRESSION() { return GetToken(MySqlParser.COMPRESSION, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public TableOptionCompressionContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionCompression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionCompression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionCompression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionInsertMethodContext : TableOptionContext {
		public IToken insertMethod;
		public ITerminalNode INSERT_METHOD() { return GetToken(MySqlParser.INSERT_METHOD, 0); }
		public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(MySqlParser.LAST, 0); }
		public TableOptionInsertMethodContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionInsertMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionInsertMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionInsertMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionMinRowsContext : TableOptionContext {
		public ITerminalNode MIN_ROWS() { return GetToken(MySqlParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public TableOptionMinRowsContext(TableOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionMinRows(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionMinRows(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionMinRows(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableOptionContext tableOption() {
		TableOptionContext _localctx = new TableOptionContext(Context, State);
		EnterRule(_localctx, 92, RULE_tableOption);
		int _la;
		try {
			State = 1685;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,186,Context) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1545; Match(ENGINE);
				State = 1547;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1546; Match(EQUAL_SYMBOL);
					}
				}

				State = 1549; engineName();
				}
				break;
			case 2:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1550; Match(AUTO_INCREMENT);
				State = 1552;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1551; Match(EQUAL_SYMBOL);
					}
				}

				State = 1554; decimalLiteral();
				}
				break;
			case 3:
				_localctx = new TableOptionAverageContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1555; Match(AVG_ROW_LENGTH);
				State = 1557;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1556; Match(EQUAL_SYMBOL);
					}
				}

				State = 1559; decimalLiteral();
				}
				break;
			case 4:
				_localctx = new TableOptionCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1561;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1560; Match(DEFAULT);
					}
				}

				State = 1566;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CHARACTER:
					{
					State = 1563; Match(CHARACTER);
					State = 1564; Match(SET);
					}
					break;
				case CHARSET:
					{
					State = 1565; Match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1568; Match(EQUAL_SYMBOL);
					}
				}

				State = 1571; charsetName();
				}
				break;
			case 5:
				_localctx = new TableOptionChecksumContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1572; Match(CHECKSUM);
				State = 1574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1573; Match(EQUAL_SYMBOL);
					}
				}

				State = 1576;
				((TableOptionChecksumContext)_localctx).boolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionChecksumContext)_localctx).boolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 6:
				_localctx = new TableOptionCollateContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1578;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1577; Match(DEFAULT);
					}
				}

				State = 1580; Match(COLLATE);
				State = 1582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1581; Match(EQUAL_SYMBOL);
					}
				}

				State = 1584; collationName();
				}
				break;
			case 7:
				_localctx = new TableOptionCommentContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1585; Match(COMMENT);
				State = 1587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1586; Match(EQUAL_SYMBOL);
					}
				}

				State = 1589; Match(STRING_LITERAL);
				}
				break;
			case 8:
				_localctx = new TableOptionCompressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1590; Match(COMPRESSION);
				State = 1592;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1591; Match(EQUAL_SYMBOL);
					}
				}

				State = 1594; Match(STRING_LITERAL);
				}
				break;
			case 9:
				_localctx = new TableOptionConnectionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1595; Match(CONNECTION);
				State = 1597;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1596; Match(EQUAL_SYMBOL);
					}
				}

				State = 1599; Match(STRING_LITERAL);
				}
				break;
			case 10:
				_localctx = new TableOptionDataDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1600; Match(DATA);
				State = 1601; Match(DIRECTORY);
				State = 1603;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1602; Match(EQUAL_SYMBOL);
					}
				}

				State = 1605; Match(STRING_LITERAL);
				}
				break;
			case 11:
				_localctx = new TableOptionDelayContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1606; Match(DELAY_KEY_WRITE);
				State = 1608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1607; Match(EQUAL_SYMBOL);
					}
				}

				State = 1610;
				((TableOptionDelayContext)_localctx).boolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionDelayContext)_localctx).boolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 12:
				_localctx = new TableOptionEncryptionContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1611; Match(ENCRYPTION);
				State = 1613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1612; Match(EQUAL_SYMBOL);
					}
				}

				State = 1615; Match(STRING_LITERAL);
				}
				break;
			case 13:
				_localctx = new TableOptionIndexDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1616; Match(INDEX);
				State = 1617; Match(DIRECTORY);
				State = 1619;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1618; Match(EQUAL_SYMBOL);
					}
				}

				State = 1621; Match(STRING_LITERAL);
				}
				break;
			case 14:
				_localctx = new TableOptionInsertMethodContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1622; Match(INSERT_METHOD);
				State = 1624;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1623; Match(EQUAL_SYMBOL);
					}
				}

				State = 1626;
				((TableOptionInsertMethodContext)_localctx).insertMethod = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NO) ) {
					((TableOptionInsertMethodContext)_localctx).insertMethod = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 15:
				_localctx = new TableOptionKeyBlockSizeContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1627; Match(KEY_BLOCK_SIZE);
				State = 1629;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1628; Match(EQUAL_SYMBOL);
					}
				}

				State = 1631; fileSizeLiteral();
				}
				break;
			case 16:
				_localctx = new TableOptionMaxRowsContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1632; Match(MAX_ROWS);
				State = 1634;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1633; Match(EQUAL_SYMBOL);
					}
				}

				State = 1636; decimalLiteral();
				}
				break;
			case 17:
				_localctx = new TableOptionMinRowsContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 1637; Match(MIN_ROWS);
				State = 1639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1638; Match(EQUAL_SYMBOL);
					}
				}

				State = 1641; decimalLiteral();
				}
				break;
			case 18:
				_localctx = new TableOptionPackKeysContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 1642; Match(PACK_KEYS);
				State = 1644;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1643; Match(EQUAL_SYMBOL);
					}
				}

				State = 1646;
				((TableOptionPackKeysContext)_localctx).extBoolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPackKeysContext)_localctx).extBoolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 19:
				_localctx = new TableOptionPasswordContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 1647; Match(PASSWORD);
				State = 1649;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1648; Match(EQUAL_SYMBOL);
					}
				}

				State = 1651; Match(STRING_LITERAL);
				}
				break;
			case 20:
				_localctx = new TableOptionRowFormatContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 1652; Match(ROW_FORMAT);
				State = 1654;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1653; Match(EQUAL_SYMBOL);
					}
				}

				State = 1656;
				((TableOptionRowFormatContext)_localctx).rowFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (COMPACT - 278)) | (1L << (COMPRESSED - 278)) | (1L << (DYNAMIC - 278)) | (1L << (FIXED - 278)))) != 0) || _la==REDUNDANT) ) {
					((TableOptionRowFormatContext)_localctx).rowFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 21:
				_localctx = new TableOptionRecalculationContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 1657; Match(STATS_AUTO_RECALC);
				State = 1659;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1658; Match(EQUAL_SYMBOL);
					}
				}

				State = 1661;
				((TableOptionRecalculationContext)_localctx).extBoolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionRecalculationContext)_localctx).extBoolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 22:
				_localctx = new TableOptionPersistentContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 1662; Match(STATS_PERSISTENT);
				State = 1664;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1663; Match(EQUAL_SYMBOL);
					}
				}

				State = 1666;
				((TableOptionPersistentContext)_localctx).extBoolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPersistentContext)_localctx).extBoolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 23:
				_localctx = new TableOptionSamplePageContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 1667; Match(STATS_SAMPLE_PAGES);
				State = 1669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1668; Match(EQUAL_SYMBOL);
					}
				}

				State = 1671; decimalLiteral();
				}
				break;
			case 24:
				_localctx = new TableOptionTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 1672; Match(TABLESPACE);
				State = 1673; uid();
				State = 1675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORAGE) {
					{
					State = 1674; tablespaceStorage();
					}
				}

				}
				break;
			case 25:
				_localctx = new TableOptionUnionContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 1677; Match(UNION);
				State = 1679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1678; Match(EQUAL_SYMBOL);
					}
				}

				State = 1681; Match(LR_BRACKET);
				State = 1682; tables();
				State = 1683; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceStorageContext : ParserRuleContext {
		public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		public ITerminalNode DISK() { return GetToken(MySqlParser.DISK, 0); }
		public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public TablespaceStorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceStorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTablespaceStorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTablespaceStorage(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespaceStorage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceStorageContext tablespaceStorage() {
		TablespaceStorageContext _localctx = new TablespaceStorageContext(Context, State);
		EnterRule(_localctx, 94, RULE_tablespaceStorage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1687; Match(STORAGE);
			State = 1688;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinitionsContext : ParserRuleContext {
		public DecimalLiteralContext count;
		public DecimalLiteralContext subCount;
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public ITerminalNode[] BY() { return GetTokens(MySqlParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(MySqlParser.BY, i);
		}
		public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
			return GetRuleContext<PartitionFunctionDefinitionContext>(0);
		}
		public ITerminalNode PARTITIONS() { return GetToken(MySqlParser.PARTITIONS, 0); }
		public ITerminalNode SUBPARTITION() { return GetToken(MySqlParser.SUBPARTITION, 0); }
		public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
			return GetRuleContext<SubpartitionFunctionDefinitionContext>(0);
		}
		public PartitionDefinitionContext[] partitionDefinition() {
			return GetRuleContexts<PartitionDefinitionContext>();
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return GetRuleContext<PartitionDefinitionContext>(i);
		}
		public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		public ITerminalNode SUBPARTITIONS() { return GetToken(MySqlParser.SUBPARTITIONS, 0); }
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefinitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefinitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinitionsContext partitionDefinitions() {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(Context, State);
		EnterRule(_localctx, 96, RULE_partitionDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1690; Match(PARTITION);
			State = 1691; Match(BY);
			State = 1692; partitionFunctionDefinition();
			State = 1695;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITIONS) {
				{
				State = 1693; Match(PARTITIONS);
				State = 1694; _localctx.count = decimalLiteral();
				}
			}

			State = 1704;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUBPARTITION) {
				{
				State = 1697; Match(SUBPARTITION);
				State = 1698; Match(BY);
				State = 1699; subpartitionFunctionDefinition();
				State = 1702;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SUBPARTITIONS) {
					{
					State = 1700; Match(SUBPARTITIONS);
					State = 1701; _localctx.subCount = decimalLiteral();
					}
				}

				}
			}

			State = 1717;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
			case 1:
				{
				State = 1706; Match(LR_BRACKET);
				State = 1707; partitionDefinition();
				State = 1712;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1708; Match(COMMA);
					State = 1709; partitionDefinition();
					}
					}
					State = 1714;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1715; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionFunctionDefinitionContext : ParserRuleContext {
		public PartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionFunctionDefinition; } }
	 
		public PartitionFunctionDefinitionContext() { }
		public virtual void CopyFrom(PartitionFunctionDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionFunctionKeyContext : PartitionFunctionDefinitionContext {
		public IToken algType;
		public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		public PartitionFunctionKeyContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionFunctionKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionFunctionKey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionFunctionKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionFunctionHashContext : PartitionFunctionDefinitionContext {
		public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
		public PartitionFunctionHashContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionFunctionHash(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionFunctionHash(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionFunctionHash(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionFunctionListContext : PartitionFunctionDefinitionContext {
		public ITerminalNode LIST() { return GetToken(MySqlParser.LIST, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public PartitionFunctionListContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionFunctionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionFunctionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionFunctionList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionFunctionRangeContext : PartitionFunctionDefinitionContext {
		public ITerminalNode RANGE() { return GetToken(MySqlParser.RANGE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public PartitionFunctionRangeContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionFunctionRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionFunctionRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionFunctionRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
		PartitionFunctionDefinitionContext _localctx = new PartitionFunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 98, RULE_partitionFunctionDefinition);
		int _la;
		try {
			State = 1764;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
			case 1:
				_localctx = new PartitionFunctionHashContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1720;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 1719; Match(LINEAR);
					}
				}

				State = 1722; Match(HASH);
				State = 1723; Match(LR_BRACKET);
				State = 1724; expression(0);
				State = 1725; Match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new PartitionFunctionKeyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1728;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 1727; Match(LINEAR);
					}
				}

				State = 1730; Match(KEY);
				State = 1734;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM) {
					{
					State = 1731; Match(ALGORITHM);
					State = 1732; Match(EQUAL_SYMBOL);
					State = 1733;
					((PartitionFunctionKeyContext)_localctx).algType = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((PartitionFunctionKeyContext)_localctx).algType = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1736; Match(LR_BRACKET);
				State = 1737; uidList();
				State = 1738; Match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new PartitionFunctionRangeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1740; Match(RANGE);
				State = 1750;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LR_BRACKET:
					{
					State = 1741; Match(LR_BRACKET);
					State = 1742; expression(0);
					State = 1743; Match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					State = 1745; Match(COLUMNS);
					State = 1746; Match(LR_BRACKET);
					State = 1747; uidList();
					State = 1748; Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new PartitionFunctionListContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1752; Match(LIST);
				State = 1762;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LR_BRACKET:
					{
					State = 1753; Match(LR_BRACKET);
					State = 1754; expression(0);
					State = 1755; Match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					State = 1757; Match(COLUMNS);
					State = 1758; Match(LR_BRACKET);
					State = 1759; uidList();
					State = 1760; Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubpartitionFunctionDefinitionContext : ParserRuleContext {
		public SubpartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpartitionFunctionDefinition; } }
	 
		public SubpartitionFunctionDefinitionContext() { }
		public virtual void CopyFrom(SubpartitionFunctionDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubPartitionFunctionHashContext : SubpartitionFunctionDefinitionContext {
		public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
		public SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubPartitionFunctionHash(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubPartitionFunctionHash(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubPartitionFunctionHash(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubPartitionFunctionKeyContext : SubpartitionFunctionDefinitionContext {
		public IToken algType;
		public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		public SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubPartitionFunctionKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubPartitionFunctionKey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubPartitionFunctionKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
		SubpartitionFunctionDefinitionContext _localctx = new SubpartitionFunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 100, RULE_subpartitionFunctionDefinition);
		int _la;
		try {
			State = 1787;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
			case 1:
				_localctx = new SubPartitionFunctionHashContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1767;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 1766; Match(LINEAR);
					}
				}

				State = 1769; Match(HASH);
				State = 1770; Match(LR_BRACKET);
				State = 1771; expression(0);
				State = 1772; Match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new SubPartitionFunctionKeyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1775;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 1774; Match(LINEAR);
					}
				}

				State = 1777; Match(KEY);
				State = 1781;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM) {
					{
					State = 1778; Match(ALGORITHM);
					State = 1779; Match(EQUAL_SYMBOL);
					State = 1780;
					((SubPartitionFunctionKeyContext)_localctx).algType = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((SubPartitionFunctionKeyContext)_localctx).algType = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1783; Match(LR_BRACKET);
				State = 1784; uidList();
				State = 1785; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinitionContext : ParserRuleContext {
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinition; } }
	 
		public PartitionDefinitionContext() { }
		public virtual void CopyFrom(PartitionDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionComparisionContext : PartitionDefinitionContext {
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		public ITerminalNode LESS() { return GetToken(MySqlParser.LESS, 0); }
		public ITerminalNode THAN() { return GetToken(MySqlParser.THAN, 0); }
		public PartitionDefinerAtomContext[] partitionDefinerAtom() {
			return GetRuleContexts<PartitionDefinerAtomContext>();
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return GetRuleContext<PartitionDefinerAtomContext>(i);
		}
		public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		public PartitionComparisionContext(PartitionDefinitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionComparision(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionComparision(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionComparision(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionListAtomContext : PartitionDefinitionContext {
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		public PartitionDefinerAtomContext[] partitionDefinerAtom() {
			return GetRuleContexts<PartitionDefinerAtomContext>();
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return GetRuleContext<PartitionDefinerAtomContext>(i);
		}
		public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		public PartitionListAtomContext(PartitionDefinitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionListAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionListAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionListAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionListVectorContext : PartitionDefinitionContext {
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		public PartitionDefinerVectorContext[] partitionDefinerVector() {
			return GetRuleContexts<PartitionDefinerVectorContext>();
		}
		public PartitionDefinerVectorContext partitionDefinerVector(int i) {
			return GetRuleContext<PartitionDefinerVectorContext>(i);
		}
		public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		public PartitionListVectorContext(PartitionDefinitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionListVector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionListVector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionListVector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionSimpleContext : PartitionDefinitionContext {
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		public PartitionSimpleContext(PartitionDefinitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionSimple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionSimple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionSimple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinitionContext partitionDefinition() {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(Context, State);
		EnterRule(_localctx, 102, RULE_partitionDefinition);
		int _la;
		try {
			int _alt;
			State = 1898;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,217,Context) ) {
			case 1:
				_localctx = new PartitionComparisionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1789; Match(PARTITION);
				State = 1790; uid();
				State = 1791; Match(VALUES);
				State = 1792; Match(LESS);
				State = 1793; Match(THAN);
				State = 1794; Match(LR_BRACKET);
				State = 1795; partitionDefinerAtom();
				State = 1800;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1796; Match(COMMA);
					State = 1797; partitionDefinerAtom();
					}
					}
					State = 1802;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1803; Match(RR_BRACKET);
				State = 1807;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==INDEX || ((((_la - 276)) & ~0x3f) == 0 && ((1L << (_la - 276)) & ((1L << (COMMENT - 276)) | (1L << (DATA - 276)) | (1L << (ENGINE - 276)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (MAX_ROWS - 394)) | (1L << (MIN_ROWS - 394)) | (1L << (NODEGROUP - 394)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 1804; partitionOption();
					}
					}
					State = 1809;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1818;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SUBPARTITION) {
					{
					State = 1810; subpartitionDefinition();
					State = 1815;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,204,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1811; Match(COMMA);
							State = 1812; subpartitionDefinition();
							}
							} 
						}
						State = 1817;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,204,Context);
					}
					}
				}

				}
				break;
			case 2:
				_localctx = new PartitionListAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1820; Match(PARTITION);
				State = 1821; uid();
				State = 1822; Match(VALUES);
				State = 1823; Match(IN);
				State = 1824; Match(LR_BRACKET);
				State = 1825; partitionDefinerAtom();
				State = 1830;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1826; Match(COMMA);
					State = 1827; partitionDefinerAtom();
					}
					}
					State = 1832;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1833; Match(RR_BRACKET);
				State = 1837;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==INDEX || ((((_la - 276)) & ~0x3f) == 0 && ((1L << (_la - 276)) & ((1L << (COMMENT - 276)) | (1L << (DATA - 276)) | (1L << (ENGINE - 276)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (MAX_ROWS - 394)) | (1L << (MIN_ROWS - 394)) | (1L << (NODEGROUP - 394)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 1834; partitionOption();
					}
					}
					State = 1839;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1848;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SUBPARTITION) {
					{
					State = 1840; subpartitionDefinition();
					State = 1845;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,208,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1841; Match(COMMA);
							State = 1842; subpartitionDefinition();
							}
							} 
						}
						State = 1847;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,208,Context);
					}
					}
				}

				}
				break;
			case 3:
				_localctx = new PartitionListVectorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1850; Match(PARTITION);
				State = 1851; uid();
				State = 1852; Match(VALUES);
				State = 1853; Match(IN);
				State = 1854; Match(LR_BRACKET);
				State = 1855; partitionDefinerVector();
				State = 1860;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1856; Match(COMMA);
					State = 1857; partitionDefinerVector();
					}
					}
					State = 1862;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1863; Match(RR_BRACKET);
				State = 1867;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==INDEX || ((((_la - 276)) & ~0x3f) == 0 && ((1L << (_la - 276)) & ((1L << (COMMENT - 276)) | (1L << (DATA - 276)) | (1L << (ENGINE - 276)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (MAX_ROWS - 394)) | (1L << (MIN_ROWS - 394)) | (1L << (NODEGROUP - 394)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 1864; partitionOption();
					}
					}
					State = 1869;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1878;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SUBPARTITION) {
					{
					State = 1870; subpartitionDefinition();
					State = 1875;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1871; Match(COMMA);
							State = 1872; subpartitionDefinition();
							}
							} 
						}
						State = 1877;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
					}
					}
				}

				}
				break;
			case 4:
				_localctx = new PartitionSimpleContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1880; Match(PARTITION);
				State = 1881; uid();
				State = 1885;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==INDEX || ((((_la - 276)) & ~0x3f) == 0 && ((1L << (_la - 276)) & ((1L << (COMMENT - 276)) | (1L << (DATA - 276)) | (1L << (ENGINE - 276)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (MAX_ROWS - 394)) | (1L << (MIN_ROWS - 394)) | (1L << (NODEGROUP - 394)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 1882; partitionOption();
					}
					}
					State = 1887;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1896;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SUBPARTITION) {
					{
					State = 1888; subpartitionDefinition();
					State = 1893;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,215,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1889; Match(COMMA);
							State = 1890; subpartitionDefinition();
							}
							} 
						}
						State = 1895;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,215,Context);
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinerAtomContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode MAXVALUE() { return GetToken(MySqlParser.MAXVALUE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PartitionDefinerAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinerAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefinerAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefinerAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefinerAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinerAtomContext partitionDefinerAtom() {
		PartitionDefinerAtomContext _localctx = new PartitionDefinerAtomContext(Context, State);
		EnterRule(_localctx, 104, RULE_partitionDefinerAtom);
		try {
			State = 1903;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,218,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1900; constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1901; Match(MAXVALUE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1902; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinerVectorContext : ParserRuleContext {
		public PartitionDefinerAtomContext[] partitionDefinerAtom() {
			return GetRuleContexts<PartitionDefinerAtomContext>();
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return GetRuleContext<PartitionDefinerAtomContext>(i);
		}
		public PartitionDefinerVectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinerVector; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefinerVector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefinerVector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefinerVector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinerVectorContext partitionDefinerVector() {
		PartitionDefinerVectorContext _localctx = new PartitionDefinerVectorContext(Context, State);
		EnterRule(_localctx, 106, RULE_partitionDefinerVector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1905; Match(LR_BRACKET);
			State = 1906; partitionDefinerAtom();
			State = 1909;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1907; Match(COMMA);
				State = 1908; partitionDefinerAtom();
				}
				}
				State = 1911;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 1913; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubpartitionDefinitionContext : ParserRuleContext {
		public ITerminalNode SUBPARTITION() { return GetToken(MySqlParser.SUBPARTITION, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpartitionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubpartitionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubpartitionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubpartitionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubpartitionDefinitionContext subpartitionDefinition() {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(Context, State);
		EnterRule(_localctx, 108, RULE_subpartitionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1915; Match(SUBPARTITION);
			State = 1916; uid();
			State = 1920;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INDEX || ((((_la - 276)) & ~0x3f) == 0 && ((1L << (_la - 276)) & ((1L << (COMMENT - 276)) | (1L << (DATA - 276)) | (1L << (ENGINE - 276)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (MAX_ROWS - 394)) | (1L << (MIN_ROWS - 394)) | (1L << (NODEGROUP - 394)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
				{
				{
				State = 1917; partitionOption();
				}
				}
				State = 1922;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionOptionContext : ParserRuleContext {
		public PartitionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionOption; } }
	 
		public PartitionOptionContext() { }
		public virtual void CopyFrom(PartitionOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionOptionCommentContext : PartitionOptionContext {
		public IToken comment;
		public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public PartitionOptionCommentContext(PartitionOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionNodeGroupContext : PartitionOptionContext {
		public UidContext nodegroup;
		public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public PartitionOptionNodeGroupContext(PartitionOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionNodeGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionNodeGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionNodeGroup(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionIndexDirectoryContext : PartitionOptionContext {
		public IToken indexDirectory;
		public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public PartitionOptionIndexDirectoryContext(PartitionOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionIndexDirectory(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionIndexDirectory(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionIndexDirectory(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionMaxRowsContext : PartitionOptionContext {
		public DecimalLiteralContext maxRows;
		public ITerminalNode MAX_ROWS() { return GetToken(MySqlParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public PartitionOptionMaxRowsContext(PartitionOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionMaxRows(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionMaxRows(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionMaxRows(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionTablespaceContext : PartitionOptionContext {
		public UidContext tablespace;
		public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public PartitionOptionTablespaceContext(PartitionOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionTablespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionTablespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionEngineContext : PartitionOptionContext {
		public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		public PartitionOptionEngineContext(PartitionOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionEngine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionEngine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionEngine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionMinRowsContext : PartitionOptionContext {
		public DecimalLiteralContext minRows;
		public ITerminalNode MIN_ROWS() { return GetToken(MySqlParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public PartitionOptionMinRowsContext(PartitionOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionMinRows(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionMinRows(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionMinRows(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionDataDirectoryContext : PartitionOptionContext {
		public IToken dataDirectory;
		public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public PartitionOptionDataDirectoryContext(PartitionOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionDataDirectory(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionDataDirectory(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionDataDirectory(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionOptionContext partitionOption() {
		PartitionOptionContext _localctx = new PartitionOptionContext(Context, State);
		EnterRule(_localctx, 110, RULE_partitionOption);
		int _la;
		try {
			State = 1968;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENGINE:
			case STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1924;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORAGE) {
					{
					State = 1923; Match(STORAGE);
					}
				}

				State = 1926; Match(ENGINE);
				State = 1928;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1927; Match(EQUAL_SYMBOL);
					}
				}

				State = 1930; engineName();
				}
				break;
			case COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1931; Match(COMMENT);
				State = 1933;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1932; Match(EQUAL_SYMBOL);
					}
				}

				State = 1935; ((PartitionOptionCommentContext)_localctx).comment = Match(STRING_LITERAL);
				}
				break;
			case DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1936; Match(DATA);
				State = 1937; Match(DIRECTORY);
				State = 1939;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1938; Match(EQUAL_SYMBOL);
					}
				}

				State = 1941; ((PartitionOptionDataDirectoryContext)_localctx).dataDirectory = Match(STRING_LITERAL);
				}
				break;
			case INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1942; Match(INDEX);
				State = 1943; Match(DIRECTORY);
				State = 1945;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1944; Match(EQUAL_SYMBOL);
					}
				}

				State = 1947; ((PartitionOptionIndexDirectoryContext)_localctx).indexDirectory = Match(STRING_LITERAL);
				}
				break;
			case MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1948; Match(MAX_ROWS);
				State = 1950;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1949; Match(EQUAL_SYMBOL);
					}
				}

				State = 1952; ((PartitionOptionMaxRowsContext)_localctx).maxRows = decimalLiteral();
				}
				break;
			case MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1953; Match(MIN_ROWS);
				State = 1955;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1954; Match(EQUAL_SYMBOL);
					}
				}

				State = 1957; ((PartitionOptionMinRowsContext)_localctx).minRows = decimalLiteral();
				}
				break;
			case TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1958; Match(TABLESPACE);
				State = 1960;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1959; Match(EQUAL_SYMBOL);
					}
				}

				State = 1962; ((PartitionOptionTablespaceContext)_localctx).tablespace = uid();
				}
				break;
			case NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1963; Match(NODEGROUP);
				State = 1965;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1964; Match(EQUAL_SYMBOL);
					}
				}

				State = 1967; ((PartitionOptionNodeGroupContext)_localctx).nodegroup = uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterDatabaseContext : ParserRuleContext {
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterDatabase; } }
	 
		public AlterDatabaseContext() { }
		public virtual void CopyFrom(AlterDatabaseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlterUpgradeNameContext : AlterDatabaseContext {
		public IToken dbFormat;
		public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
		public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		public ITerminalNode NAME() { return GetToken(MySqlParser.NAME, 0); }
		public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		public AlterUpgradeNameContext(AlterDatabaseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterUpgradeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterUpgradeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUpgradeName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterSimpleDatabaseContext : AlterDatabaseContext {
		public IToken dbFormat;
		public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CreateDatabaseOptionContext[] createDatabaseOption() {
			return GetRuleContexts<CreateDatabaseOptionContext>();
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return GetRuleContext<CreateDatabaseOptionContext>(i);
		}
		public AlterSimpleDatabaseContext(AlterDatabaseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterSimpleDatabase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterSimpleDatabase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterSimpleDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterDatabaseContext alterDatabase() {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(Context, State);
		EnterRule(_localctx, 112, RULE_alterDatabase);
		int _la;
		try {
			State = 1988;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
			case 1:
				_localctx = new AlterSimpleDatabaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1970; Match(ALTER);
				State = 1971;
				((AlterSimpleDatabaseContext)_localctx).dbFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterSimpleDatabaseContext)_localctx).dbFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1973;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,231,Context) ) {
				case 1:
					{
					State = 1972; uid();
					}
					break;
				}
				State = 1976;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1975; createDatabaseOption();
					}
					}
					State = 1978;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==CHARSET );
				}
				break;
			case 2:
				_localctx = new AlterUpgradeNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1980; Match(ALTER);
				State = 1981;
				((AlterUpgradeNameContext)_localctx).dbFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterUpgradeNameContext)_localctx).dbFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1982; uid();
				State = 1983; Match(UPGRADE);
				State = 1984; Match(DATA);
				State = 1985; Match(DIRECTORY);
				State = 1986; Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterEventContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		public ITerminalNode SCHEDULE() { return GetToken(MySqlParser.SCHEDULE, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return GetRuleContext<ScheduleExpressionContext>(0);
		}
		public ITerminalNode COMPLETION() { return GetToken(MySqlParser.COMPLETION, 0); }
		public ITerminalNode PRESERVE() { return GetToken(MySqlParser.PRESERVE, 0); }
		public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		public EnableTypeContext enableType() {
			return GetRuleContext<EnableTypeContext>(0);
		}
		public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterEvent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterEvent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterEvent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterEventContext alterEvent() {
		AlterEventContext _localctx = new AlterEventContext(Context, State);
		EnterRule(_localctx, 114, RULE_alterEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1990; Match(ALTER);
			State = 1992;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 1991; ownerStatement();
				}
			}

			State = 1994; Match(EVENT);
			State = 1995; fullId();
			State = 1999;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,235,Context) ) {
			case 1:
				{
				State = 1996; Match(ON);
				State = 1997; Match(SCHEDULE);
				State = 1998; scheduleExpression();
				}
				break;
			}
			State = 2007;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 2001; Match(ON);
				State = 2002; Match(COMPLETION);
				State = 2004;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 2003; Match(NOT);
					}
				}

				State = 2006; Match(PRESERVE);
				}
			}

			State = 2012;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RENAME) {
				{
				State = 2009; Match(RENAME);
				State = 2010; Match(TO);
				State = 2011; fullId();
				}
			}

			State = 2015;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				State = 2014; enableType();
				}
			}

			State = 2019;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 2017; Match(COMMENT);
				State = 2018; Match(STRING_LITERAL);
				}
			}

			State = 2023;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DO) {
				{
				State = 2021; Match(DO);
				State = 2022; routineBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterFunctionContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterFunctionContext alterFunction() {
		AlterFunctionContext _localctx = new AlterFunctionContext(Context, State);
		EnterRule(_localctx, 116, RULE_alterFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2025; Match(ALTER);
			State = 2026; Match(FUNCTION);
			State = 2027; fullId();
			State = 2031;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (MODIFIES - 95)) | (1L << (NOT - 95)) | (1L << (READS - 95)) | (1L << (SQL - 95)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				State = 2028; routineOption();
				}
				}
				State = 2033;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterInstanceContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		public ITerminalNode INSTANCE() { return GetToken(MySqlParser.INSTANCE, 0); }
		public ITerminalNode ROTATE() { return GetToken(MySqlParser.ROTATE, 0); }
		public ITerminalNode INNODB() { return GetToken(MySqlParser.INNODB, 0); }
		public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterInstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterInstance; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterInstance(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterInstance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterInstanceContext alterInstance() {
		AlterInstanceContext _localctx = new AlterInstanceContext(Context, State);
		EnterRule(_localctx, 118, RULE_alterInstance);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2034; Match(ALTER);
			State = 2035; Match(INSTANCE);
			State = 2036; Match(ROTATE);
			State = 2037; Match(INNODB);
			State = 2038; Match(MASTER);
			State = 2039; Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLogfileGroupContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		public ITerminalNode UNDOFILE() { return GetToken(MySqlParser.UNDOFILE, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLogfileGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterLogfileGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterLogfileGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterLogfileGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterLogfileGroupContext alterLogfileGroup() {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(Context, State);
		EnterRule(_localctx, 120, RULE_alterLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2041; Match(ALTER);
			State = 2042; Match(LOGFILE);
			State = 2043; Match(GROUP);
			State = 2044; uid();
			State = 2045; Match(ADD);
			State = 2046; Match(UNDOFILE);
			State = 2047; Match(STRING_LITERAL);
			State = 2053;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 2048; Match(INITIAL_SIZE);
				State = 2050;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2049; Match(EQUAL_SYMBOL);
					}
				}

				State = 2052; fileSizeLiteral();
				}
			}

			State = 2056;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 2055; Match(WAIT);
				}
			}

			State = 2058; Match(ENGINE);
			State = 2060;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 2059; Match(EQUAL_SYMBOL);
				}
			}

			State = 2062; engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterProcedureContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public AlterProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterProcedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterProcedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterProcedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterProcedureContext alterProcedure() {
		AlterProcedureContext _localctx = new AlterProcedureContext(Context, State);
		EnterRule(_localctx, 122, RULE_alterProcedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2064; Match(ALTER);
			State = 2065; Match(PROCEDURE);
			State = 2066; fullId();
			State = 2070;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (MODIFIES - 95)) | (1L << (NOT - 95)) | (1L << (READS - 95)) | (1L << (SQL - 95)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				State = 2067; routineOption();
				}
				}
				State = 2072;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterServerContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode OPTIONS() { return GetToken(MySqlParser.OPTIONS, 0); }
		public ServerOptionContext[] serverOption() {
			return GetRuleContexts<ServerOptionContext>();
		}
		public ServerOptionContext serverOption(int i) {
			return GetRuleContext<ServerOptionContext>(i);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterServer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterServer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterServer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterServerContext alterServer() {
		AlterServerContext _localctx = new AlterServerContext(Context, State);
		EnterRule(_localctx, 124, RULE_alterServer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2073; Match(ALTER);
			State = 2074; Match(SERVER);
			State = 2075; uid();
			State = 2076; Match(OPTIONS);
			State = 2077; Match(LR_BRACKET);
			State = 2078; serverOption();
			State = 2083;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2079; Match(COMMA);
				State = 2080; serverOption();
				}
				}
				State = 2085;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2086; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableContext : ParserRuleContext {
		public IToken intimeAction;
		public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public AlterSpecificationContext[] alterSpecification() {
			return GetRuleContexts<AlterSpecificationContext>();
		}
		public AlterSpecificationContext alterSpecification(int i) {
			return GetRuleContext<AlterSpecificationContext>(i);
		}
		public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
		public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
		public AlterTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableContext alterTable() {
		AlterTableContext _localctx = new AlterTableContext(Context, State);
		EnterRule(_localctx, 126, RULE_alterTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2088; Match(ALTER);
			State = 2090;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				State = 2089;
				_localctx.intimeAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					_localctx.intimeAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2093;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 2092; Match(IGNORE);
				}
			}

			State = 2095; Match(TABLE);
			State = 2096; tableName();
			State = 2097; alterSpecification();
			State = 2102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2098; Match(COMMA);
				State = 2099; alterSpecification();
				}
				}
				State = 2104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2105; partitionDefinitions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTablespaceContext : ParserRuleContext {
		public IToken objectAction;
		public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTablespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterTablespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterTablespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTablespaceContext alterTablespace() {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(Context, State);
		EnterRule(_localctx, 128, RULE_alterTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2108; Match(ALTER);
			State = 2109; Match(TABLESPACE);
			State = 2110; uid();
			State = 2111;
			_localctx.objectAction = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
				_localctx.objectAction = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2112; Match(DATAFILE);
			State = 2113; Match(STRING_LITERAL);
			State = 2117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 2114; Match(INITIAL_SIZE);
				State = 2115; Match(EQUAL_SYMBOL);
				State = 2116; fileSizeLiteral();
				}
			}

			State = 2120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 2119; Match(WAIT);
				}
			}

			State = 2122; Match(ENGINE);
			State = 2124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 2123; Match(EQUAL_SYMBOL);
				}
			}

			State = 2126; engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterViewContext : ParserRuleContext {
		public IToken algType;
		public IToken secContext;
		public IToken checkOpt;
		public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		public ITerminalNode UNDEFINED() { return GetToken(MySqlParser.UNDEFINED, 0); }
		public ITerminalNode MERGE() { return GetToken(MySqlParser.MERGE, 0); }
		public ITerminalNode TEMPTABLE() { return GetToken(MySqlParser.TEMPTABLE, 0); }
		public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
		public ITerminalNode CASCADED() { return GetToken(MySqlParser.CASCADED, 0); }
		public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public AlterViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterView; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterView(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterView(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterView(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterViewContext alterView() {
		AlterViewContext _localctx = new AlterViewContext(Context, State);
		EnterRule(_localctx, 130, RULE_alterView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2128; Match(ALTER);
			State = 2132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM) {
				{
				State = 2129; Match(ALGORITHM);
				State = 2130; Match(EQUAL_SYMBOL);
				State = 2131;
				_localctx.algType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					_localctx.algType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 2134; ownerStatement();
				}
			}

			State = 2140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQL) {
				{
				State = 2137; Match(SQL);
				State = 2138; Match(SECURITY);
				State = 2139;
				_localctx.secContext = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					_localctx.secContext = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2142; Match(VIEW);
			State = 2143; fullId();
			State = 2148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 2144; Match(LR_BRACKET);
				State = 2145; uidList();
				State = 2146; Match(RR_BRACKET);
				}
			}

			State = 2150; Match(AS);
			State = 2151; selectStatement();
			State = 2158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2152; Match(WITH);
				State = 2154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					State = 2153;
					_localctx.checkOpt = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						_localctx.checkOpt = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2156; Match(CHECK);
				State = 2157; Match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterSpecificationContext : ParserRuleContext {
		public AlterSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterSpecification; } }
	 
		public AlterSpecificationContext() { }
		public virtual void CopyFrom(AlterSpecificationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlterByDisableKeysContext : AlterSpecificationContext {
		public ITerminalNode DISABLE() { return GetToken(MySqlParser.DISABLE, 0); }
		public ITerminalNode KEYS() { return GetToken(MySqlParser.KEYS, 0); }
		public AlterByDisableKeysContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDisableKeys(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDisableKeys(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDisableKeys(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDefaultCharsetContext : AlterSpecificationContext {
		public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public AlterByDefaultCharsetContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDefaultCharset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDefaultCharset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDefaultCharset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByConvertCharsetContext : AlterSpecificationContext {
		public ITerminalNode CONVERT() { return GetToken(MySqlParser.CONVERT, 0); }
		public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public AlterByConvertCharsetContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByConvertCharset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByConvertCharset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByConvertCharset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddPartitionContext : AlterSpecificationContext {
		public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public PartitionDefinitionContext partitionDefinition() {
			return GetRuleContext<PartitionDefinitionContext>(0);
		}
		public AlterByAddPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddPartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddPartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAnalyzePartitiionContext : AlterSpecificationContext {
		public ITerminalNode ANALYZE() { return GetToken(MySqlParser.ANALYZE, 0); }
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByAnalyzePartitiionContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAnalyzePartitiion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAnalyzePartitiion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAnalyzePartitiion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddForeignKeyContext : AlterSpecificationContext {
		public UidContext name;
		public UidContext indexName;
		public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
		public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return GetRuleContext<ReferenceDefinitionContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public AlterByAddForeignKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddForeignKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddForeignKey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddForeignKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRemovePartitioningContext : AlterSpecificationContext {
		public ITerminalNode REMOVE() { return GetToken(MySqlParser.REMOVE, 0); }
		public ITerminalNode PARTITIONING() { return GetToken(MySqlParser.PARTITIONING, 0); }
		public AlterByRemovePartitioningContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByRemovePartitioning(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByRemovePartitioning(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRemovePartitioning(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRenameContext : AlterSpecificationContext {
		public IToken renameFormat;
		public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public AlterByRenameContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByRename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByRename(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRename(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByOptimizePartitionContext : AlterSpecificationContext {
		public ITerminalNode OPTIMIZE() { return GetToken(MySqlParser.OPTIMIZE, 0); }
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByOptimizePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByOptimizePartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByOptimizePartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByOptimizePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByImportTablespaceContext : AlterSpecificationContext {
		public ITerminalNode IMPORT() { return GetToken(MySqlParser.IMPORT, 0); }
		public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		public AlterByImportTablespaceContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByImportTablespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByImportTablespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByImportTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByCoalescePartitionContext : AlterSpecificationContext {
		public ITerminalNode COALESCE() { return GetToken(MySqlParser.COALESCE, 0); }
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public AlterByCoalescePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByCoalescePartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByCoalescePartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByCoalescePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddColumnsContext : AlterSpecificationContext {
		public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public ColumnDefinitionContext[] columnDefinition() {
			return GetRuleContexts<ColumnDefinitionContext>();
		}
		public ColumnDefinitionContext columnDefinition(int i) {
			return GetRuleContext<ColumnDefinitionContext>(i);
		}
		public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		public AlterByAddColumnsContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddColumns(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddColumns(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddColumns(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropForeignKeyContext : AlterSpecificationContext {
		public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
		public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public AlterByDropForeignKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropForeignKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropForeignKey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropForeignKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddCheckTableConstraintContext : AlterSpecificationContext {
		public UidContext name;
		public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public AlterByAddCheckTableConstraintContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddCheckTableConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddCheckTableConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddCheckTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRebuildPartitionContext : AlterSpecificationContext {
		public ITerminalNode REBUILD() { return GetToken(MySqlParser.REBUILD, 0); }
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByRebuildPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByRebuildPartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByRebuildPartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRebuildPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByUpgradePartitioningContext : AlterSpecificationContext {
		public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
		public ITerminalNode PARTITIONING() { return GetToken(MySqlParser.PARTITIONING, 0); }
		public AlterByUpgradePartitioningContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByUpgradePartitioning(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByUpgradePartitioning(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByUpgradePartitioning(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRepairPartitionContext : AlterSpecificationContext {
		public ITerminalNode REPAIR() { return GetToken(MySqlParser.REPAIR, 0); }
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByRepairPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByRepairPartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByRepairPartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRepairPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByExchangePartitionContext : AlterSpecificationContext {
		public IToken validationFormat;
		public ITerminalNode EXCHANGE() { return GetToken(MySqlParser.EXCHANGE, 0); }
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode[] WITH() { return GetTokens(MySqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(MySqlParser.WITH, i);
		}
		public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode VALIDATION() { return GetToken(MySqlParser.VALIDATION, 0); }
		public ITerminalNode WITHOUT() { return GetToken(MySqlParser.WITHOUT, 0); }
		public AlterByExchangePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByExchangePartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByExchangePartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByExchangePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddIndexContext : AlterSpecificationContext {
		public IToken indexFormat;
		public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public AlterByAddIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropColumnContext : AlterSpecificationContext {
		public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		public AlterByDropColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropColumn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropColumn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByImportPartitionContext : AlterSpecificationContext {
		public ITerminalNode IMPORT() { return GetToken(MySqlParser.IMPORT, 0); }
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByImportPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByImportPartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByImportPartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByImportPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByChangeDefaultContext : AlterSpecificationContext {
		public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		public AlterByChangeDefaultContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByChangeDefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByChangeDefault(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByChangeDefault(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByForceContext : AlterSpecificationContext {
		public ITerminalNode FORCE() { return GetToken(MySqlParser.FORCE, 0); }
		public AlterByForceContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByForce(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByForce(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByForce(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropPartitionContext : AlterSpecificationContext {
		public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public AlterByDropPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropPartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropPartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddSpecialIndexContext : AlterSpecificationContext {
		public IToken keyType;
		public IToken indexFormat;
		public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		public ITerminalNode FULLTEXT() { return GetToken(MySqlParser.FULLTEXT, 0); }
		public ITerminalNode SPATIAL() { return GetToken(MySqlParser.SPATIAL, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterByAddSpecialIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddSpecialIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddSpecialIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddSpecialIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByModifyColumnContext : AlterSpecificationContext {
		public ITerminalNode MODIFY() { return GetToken(MySqlParser.MODIFY, 0); }
		public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		public AlterByModifyColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByModifyColumn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByModifyColumn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByModifyColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByTableOptionContext : AlterSpecificationContext {
		public TableOptionContext tableOption() {
			return GetRuleContext<TableOptionContext>(0);
		}
		public AlterByTableOptionContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByTableOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByTableOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByTableOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropPrimaryKeyContext : AlterSpecificationContext {
		public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterByDropPrimaryKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropPrimaryKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropPrimaryKey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropPrimaryKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByLockContext : AlterSpecificationContext {
		public IToken lockType;
		public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		public ITerminalNode SHARED() { return GetToken(MySqlParser.SHARED, 0); }
		public ITerminalNode EXCLUSIVE() { return GetToken(MySqlParser.EXCLUSIVE, 0); }
		public AlterByLockContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByLock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByLock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByLock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDiscardPartitionContext : AlterSpecificationContext {
		public ITerminalNode DISCARD() { return GetToken(MySqlParser.DISCARD, 0); }
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByDiscardPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDiscardPartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDiscardPartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDiscardPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDiscardTablespaceContext : AlterSpecificationContext {
		public ITerminalNode DISCARD() { return GetToken(MySqlParser.DISCARD, 0); }
		public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		public AlterByDiscardTablespaceContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDiscardTablespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDiscardTablespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDiscardTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByValidateContext : AlterSpecificationContext {
		public IToken validationFormat;
		public ITerminalNode VALIDATION() { return GetToken(MySqlParser.VALIDATION, 0); }
		public ITerminalNode WITHOUT() { return GetToken(MySqlParser.WITHOUT, 0); }
		public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		public AlterByValidateContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByValidate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByValidate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByValidate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddPrimaryKeyContext : AlterSpecificationContext {
		public UidContext name;
		public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public AlterByAddPrimaryKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddPrimaryKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddPrimaryKey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddPrimaryKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByCheckPartitionContext : AlterSpecificationContext {
		public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByCheckPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByCheckPartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByCheckPartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByCheckPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByEnableKeysContext : AlterSpecificationContext {
		public ITerminalNode ENABLE() { return GetToken(MySqlParser.ENABLE, 0); }
		public ITerminalNode KEYS() { return GetToken(MySqlParser.KEYS, 0); }
		public AlterByEnableKeysContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByEnableKeys(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByEnableKeys(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByEnableKeys(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByReorganizePartitionContext : AlterSpecificationContext {
		public ITerminalNode REORGANIZE() { return GetToken(MySqlParser.REORGANIZE, 0); }
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		public PartitionDefinitionContext[] partitionDefinition() {
			return GetRuleContexts<PartitionDefinitionContext>();
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return GetRuleContext<PartitionDefinitionContext>(i);
		}
		public AlterByReorganizePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByReorganizePartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByReorganizePartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByReorganizePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterBySetAlgorithmContext : AlterSpecificationContext {
		public IToken algType;
		public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public ITerminalNode INPLACE() { return GetToken(MySqlParser.INPLACE, 0); }
		public ITerminalNode COPY() { return GetToken(MySqlParser.COPY, 0); }
		public AlterBySetAlgorithmContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterBySetAlgorithm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterBySetAlgorithm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterBySetAlgorithm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByChangeColumnContext : AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public UidContext afterColumn;
		public ITerminalNode CHANGE() { return GetToken(MySqlParser.CHANGE, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		public AlterByChangeColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByChangeColumn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByChangeColumn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByChangeColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddUniqueKeyContext : AlterSpecificationContext {
		public UidContext name;
		public IToken indexFormat;
		public UidContext indexName;
		public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterByAddUniqueKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddUniqueKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddUniqueKey(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddUniqueKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByTruncatePartitionContext : AlterSpecificationContext {
		public ITerminalNode TRUNCATE() { return GetToken(MySqlParser.TRUNCATE, 0); }
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByTruncatePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByTruncatePartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByTruncatePartition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByTruncatePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropIndexContext : AlterSpecificationContext {
		public IToken indexFormat;
		public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterByDropIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddColumnContext : AlterSpecificationContext {
		public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		public AlterByAddColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddColumn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddColumn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByOrderContext : AlterSpecificationContext {
		public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public AlterByOrderContext(AlterSpecificationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByOrder(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByOrder(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByOrder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterSpecificationContext alterSpecification() {
		AlterSpecificationContext _localctx = new AlterSpecificationContext(Context, State);
		EnterRule(_localctx, 132, RULE_alterSpecification);
		int _la;
		try {
			State = 2478;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,310,Context) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2160; tableOption();
				}
				break;
			case 2:
				_localctx = new AlterByAddColumnContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2161; Match(ADD);
				State = 2163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2162; Match(COLUMN);
					}
				}

				State = 2165; uid();
				State = 2166; columnDefinition();
				State = 2170;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST:
					{
					State = 2167; Match(FIRST);
					}
					break;
				case AFTER:
					{
					State = 2168; Match(AFTER);
					State = 2169; uid();
					}
					break;
				case Eof:
				case PARTITION:
				case MINUSMINUS:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				_localctx = new AlterByAddColumnsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2172; Match(ADD);
				State = 2174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2173; Match(COLUMN);
					}
				}

				State = 2176; Match(LR_BRACKET);
				State = 2177; uid();
				State = 2178; columnDefinition();
				State = 2185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2179; Match(COMMA);
					State = 2180; uid();
					State = 2181; columnDefinition();
					}
					}
					State = 2187;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2188; Match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new AlterByAddIndexContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2190; Match(ADD);
				State = 2191;
				((AlterByAddIndexContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByAddIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
					{
					State = 2192; uid();
					}
				}

				State = 2196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2195; indexType();
					}
				}

				State = 2198; indexColumnNames();
				State = 2202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					State = 2199; indexOption();
					}
					}
					State = 2204;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 5:
				_localctx = new AlterByAddPrimaryKeyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2205; Match(ADD);
				State = 2210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2206; Match(CONSTRAINT);
					State = 2208;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
						{
						State = 2207; ((AlterByAddPrimaryKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 2212; Match(PRIMARY);
				State = 2213; Match(KEY);
				State = 2215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2214; indexType();
					}
				}

				State = 2217; indexColumnNames();
				State = 2221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					State = 2218; indexOption();
					}
					}
					State = 2223;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 6:
				_localctx = new AlterByAddUniqueKeyContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2224; Match(ADD);
				State = 2229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2225; Match(CONSTRAINT);
					State = 2227;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
						{
						State = 2226; ((AlterByAddUniqueKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 2231; Match(UNIQUE);
				State = 2233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 2232;
					((AlterByAddUniqueKeyContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddUniqueKeyContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
					{
					State = 2235; ((AlterByAddUniqueKeyContext)_localctx).indexName = uid();
					}
				}

				State = 2239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2238; indexType();
					}
				}

				State = 2241; indexColumnNames();
				State = 2245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					State = 2242; indexOption();
					}
					}
					State = 2247;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 7:
				_localctx = new AlterByAddSpecialIndexContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2248; Match(ADD);
				State = 2249;
				((AlterByAddSpecialIndexContext)_localctx).keyType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
					((AlterByAddSpecialIndexContext)_localctx).keyType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 2250;
					((AlterByAddSpecialIndexContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddSpecialIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
					{
					State = 2253; uid();
					}
				}

				State = 2256; indexColumnNames();
				State = 2260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					State = 2257; indexOption();
					}
					}
					State = 2262;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new AlterByAddForeignKeyContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2263; Match(ADD);
				State = 2268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2264; Match(CONSTRAINT);
					State = 2266;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
						{
						State = 2265; ((AlterByAddForeignKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 2270; Match(FOREIGN);
				State = 2271; Match(KEY);
				State = 2273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
					{
					State = 2272; ((AlterByAddForeignKeyContext)_localctx).indexName = uid();
					}
				}

				State = 2275; indexColumnNames();
				State = 2276; referenceDefinition();
				}
				break;
			case 9:
				_localctx = new AlterByAddCheckTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 2278; Match(ADD);
				State = 2283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2279; Match(CONSTRAINT);
					State = 2281;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
						{
						State = 2280; ((AlterByAddCheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 2285; Match(CHECK);
				State = 2286; Match(LR_BRACKET);
				State = 2287; expression(0);
				State = 2288; Match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new AlterBySetAlgorithmContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 2290; Match(ALGORITHM);
				State = 2292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2291; Match(EQUAL_SYMBOL);
					}
				}

				State = 2294;
				((AlterBySetAlgorithmContext)_localctx).algType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
					((AlterBySetAlgorithmContext)_localctx).algType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 11:
				_localctx = new AlterByChangeDefaultContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 2295; Match(ALTER);
				State = 2297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2296; Match(COLUMN);
					}
				}

				State = 2299; uid();
				State = 2305;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SET:
					{
					State = 2300; Match(SET);
					State = 2301; Match(DEFAULT);
					State = 2302; defaultValue();
					}
					break;
				case DROP:
					{
					State = 2303; Match(DROP);
					State = 2304; Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 12:
				_localctx = new AlterByChangeColumnContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 2307; Match(CHANGE);
				State = 2309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2308; Match(COLUMN);
					}
				}

				State = 2311; ((AlterByChangeColumnContext)_localctx).oldColumn = uid();
				State = 2312; ((AlterByChangeColumnContext)_localctx).newColumn = uid();
				State = 2313; columnDefinition();
				State = 2317;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST:
					{
					State = 2314; Match(FIRST);
					}
					break;
				case AFTER:
					{
					State = 2315; Match(AFTER);
					State = 2316; ((AlterByChangeColumnContext)_localctx).afterColumn = uid();
					}
					break;
				case Eof:
				case PARTITION:
				case MINUSMINUS:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 13:
				_localctx = new AlterByLockContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 2319; Match(LOCK);
				State = 2321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2320; Match(EQUAL_SYMBOL);
					}
				}

				State = 2323;
				((AlterByLockContext)_localctx).lockType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((AlterByLockContext)_localctx).lockType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 14:
				_localctx = new AlterByModifyColumnContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 2324; Match(MODIFY);
				State = 2326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2325; Match(COLUMN);
					}
				}

				State = 2328; uid();
				State = 2329; columnDefinition();
				State = 2333;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST:
					{
					State = 2330; Match(FIRST);
					}
					break;
				case AFTER:
					{
					State = 2331; Match(AFTER);
					State = 2332; uid();
					}
					break;
				case Eof:
				case PARTITION:
				case MINUSMINUS:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 15:
				_localctx = new AlterByDropColumnContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 2335; Match(DROP);
				State = 2337;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2336; Match(COLUMN);
					}
				}

				State = 2339; uid();
				}
				break;
			case 16:
				_localctx = new AlterByDropPrimaryKeyContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 2340; Match(DROP);
				State = 2341; Match(PRIMARY);
				State = 2342; Match(KEY);
				}
				break;
			case 17:
				_localctx = new AlterByDropIndexContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 2343; Match(DROP);
				State = 2344;
				((AlterByDropIndexContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByDropIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2345; uid();
				}
				break;
			case 18:
				_localctx = new AlterByDropForeignKeyContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 2346; Match(DROP);
				State = 2347; Match(FOREIGN);
				State = 2348; Match(KEY);
				State = 2349; uid();
				}
				break;
			case 19:
				_localctx = new AlterByDisableKeysContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 2350; Match(DISABLE);
				State = 2351; Match(KEYS);
				}
				break;
			case 20:
				_localctx = new AlterByEnableKeysContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 2352; Match(ENABLE);
				State = 2353; Match(KEYS);
				}
				break;
			case 21:
				_localctx = new AlterByRenameContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 2354; Match(RENAME);
				State = 2356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS || _la==TO) {
					{
					State = 2355;
					((AlterByRenameContext)_localctx).renameFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==AS || _la==TO) ) {
						((AlterByRenameContext)_localctx).renameFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2358; uid();
				}
				break;
			case 22:
				_localctx = new AlterByOrderContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 2359; Match(ORDER);
				State = 2360; Match(BY);
				State = 2361; uidList();
				}
				break;
			case 23:
				_localctx = new AlterByConvertCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 2362; Match(CONVERT);
				State = 2363; Match(TO);
				State = 2364; Match(CHARACTER);
				State = 2365; Match(SET);
				State = 2366; charsetName();
				State = 2369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE) {
					{
					State = 2367; Match(COLLATE);
					State = 2368; collationName();
					}
				}

				}
				break;
			case 24:
				_localctx = new AlterByDefaultCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 2372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 2371; Match(DEFAULT);
					}
				}

				State = 2374; Match(CHARACTER);
				State = 2375; Match(SET);
				State = 2376; Match(EQUAL_SYMBOL);
				State = 2377; charsetName();
				State = 2381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE) {
					{
					State = 2378; Match(COLLATE);
					State = 2379; Match(EQUAL_SYMBOL);
					State = 2380; collationName();
					}
				}

				}
				break;
			case 25:
				_localctx = new AlterByDiscardTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 2383; Match(DISCARD);
				State = 2384; Match(TABLESPACE);
				}
				break;
			case 26:
				_localctx = new AlterByImportTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 2385; Match(IMPORT);
				State = 2386; Match(TABLESPACE);
				}
				break;
			case 27:
				_localctx = new AlterByForceContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 2387; Match(FORCE);
				}
				break;
			case 28:
				_localctx = new AlterByValidateContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 2388;
				((AlterByValidateContext)_localctx).validationFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
					((AlterByValidateContext)_localctx).validationFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2389; Match(VALIDATION);
				}
				break;
			case 29:
				_localctx = new AlterByAddPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 2390; Match(ADD);
				State = 2391; Match(PARTITION);
				State = 2392; partitionDefinition();
				}
				break;
			case 30:
				_localctx = new AlterByDropPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 2393; Match(DROP);
				State = 2394; Match(PARTITION);
				State = 2395; uidList();
				}
				break;
			case 31:
				_localctx = new AlterByDiscardPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 2396; Match(DISCARD);
				State = 2397; Match(PARTITION);
				State = 2400;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DATABASE:
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHANNEL:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FOLLOWS:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2398; uidList();
					}
					break;
				case ALL:
					{
					State = 2399; Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2402; Match(TABLESPACE);
				}
				break;
			case 32:
				_localctx = new AlterByImportPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 2403; Match(IMPORT);
				State = 2404; Match(PARTITION);
				State = 2407;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DATABASE:
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHANNEL:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FOLLOWS:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2405; uidList();
					}
					break;
				case ALL:
					{
					State = 2406; Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2409; Match(TABLESPACE);
				}
				break;
			case 33:
				_localctx = new AlterByTruncatePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 2410; Match(TRUNCATE);
				State = 2411; Match(PARTITION);
				State = 2414;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DATABASE:
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHANNEL:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FOLLOWS:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2412; uidList();
					}
					break;
				case ALL:
					{
					State = 2413; Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 34:
				_localctx = new AlterByCoalescePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 2416; Match(COALESCE);
				State = 2417; Match(PARTITION);
				State = 2418; decimalLiteral();
				}
				break;
			case 35:
				_localctx = new AlterByReorganizePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 35);
				{
				State = 2419; Match(REORGANIZE);
				State = 2420; Match(PARTITION);
				State = 2421; uidList();
				State = 2422; Match(INTO);
				State = 2423; Match(LR_BRACKET);
				State = 2424; partitionDefinition();
				State = 2429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2425; Match(COMMA);
					State = 2426; partitionDefinition();
					}
					}
					State = 2431;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2432; Match(RR_BRACKET);
				}
				break;
			case 36:
				_localctx = new AlterByExchangePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 36);
				{
				State = 2434; Match(EXCHANGE);
				State = 2435; Match(PARTITION);
				State = 2436; uid();
				State = 2437; Match(WITH);
				State = 2438; Match(TABLE);
				State = 2439; tableName();
				State = 2442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					State = 2440;
					((AlterByExchangePartitionContext)_localctx).validationFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
						((AlterByExchangePartitionContext)_localctx).validationFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 2441; Match(VALIDATION);
					}
				}

				}
				break;
			case 37:
				_localctx = new AlterByAnalyzePartitiionContext(_localctx);
				EnterOuterAlt(_localctx, 37);
				{
				State = 2444; Match(ANALYZE);
				State = 2445; Match(PARTITION);
				State = 2448;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DATABASE:
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHANNEL:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FOLLOWS:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2446; uidList();
					}
					break;
				case ALL:
					{
					State = 2447; Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 38:
				_localctx = new AlterByCheckPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 38);
				{
				State = 2450; Match(CHECK);
				State = 2451; Match(PARTITION);
				State = 2454;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DATABASE:
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHANNEL:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FOLLOWS:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2452; uidList();
					}
					break;
				case ALL:
					{
					State = 2453; Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 39:
				_localctx = new AlterByOptimizePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 39);
				{
				State = 2456; Match(OPTIMIZE);
				State = 2457; Match(PARTITION);
				State = 2460;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DATABASE:
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHANNEL:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FOLLOWS:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2458; uidList();
					}
					break;
				case ALL:
					{
					State = 2459; Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 40:
				_localctx = new AlterByRebuildPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 40);
				{
				State = 2462; Match(REBUILD);
				State = 2463; Match(PARTITION);
				State = 2466;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DATABASE:
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHANNEL:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FOLLOWS:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2464; uidList();
					}
					break;
				case ALL:
					{
					State = 2465; Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 41:
				_localctx = new AlterByRepairPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 41);
				{
				State = 2468; Match(REPAIR);
				State = 2469; Match(PARTITION);
				State = 2472;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DATABASE:
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHANNEL:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FOLLOWS:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2470; uidList();
					}
					break;
				case ALL:
					{
					State = 2471; Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 42:
				_localctx = new AlterByRemovePartitioningContext(_localctx);
				EnterOuterAlt(_localctx, 42);
				{
				State = 2474; Match(REMOVE);
				State = 2475; Match(PARTITIONING);
				}
				break;
			case 43:
				_localctx = new AlterByUpgradePartitioningContext(_localctx);
				EnterOuterAlt(_localctx, 43);
				{
				State = 2476; Match(UPGRADE);
				State = 2477; Match(PARTITIONING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropDatabaseContext : ParserRuleContext {
		public IToken dbFormat;
		public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropDatabase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropDatabase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropDatabase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropDatabaseContext dropDatabase() {
		DropDatabaseContext _localctx = new DropDatabaseContext(Context, State);
		EnterRule(_localctx, 134, RULE_dropDatabase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2480; Match(DROP);
			State = 2481;
			_localctx.dbFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				_localctx.dbFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2482; ifExists();
				}
			}

			State = 2485; uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropEventContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropEvent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropEvent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropEvent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropEventContext dropEvent() {
		DropEventContext _localctx = new DropEventContext(Context, State);
		EnterRule(_localctx, 136, RULE_dropEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2487; Match(DROP);
			State = 2488; Match(EVENT);
			State = 2490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2489; ifExists();
				}
			}

			State = 2492; fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropIndexContext : ParserRuleContext {
		public IToken intimeAction;
		public IToken algType;
		public IToken lockType;
		public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
		public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
		public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(MySqlParser.DEFAULT, i);
		}
		public ITerminalNode INPLACE() { return GetToken(MySqlParser.INPLACE, 0); }
		public ITerminalNode COPY() { return GetToken(MySqlParser.COPY, 0); }
		public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		public ITerminalNode SHARED() { return GetToken(MySqlParser.SHARED, 0); }
		public ITerminalNode EXCLUSIVE() { return GetToken(MySqlParser.EXCLUSIVE, 0); }
		public DropIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropIndexContext dropIndex() {
		DropIndexContext _localctx = new DropIndexContext(Context, State);
		EnterRule(_localctx, 138, RULE_dropIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2494; Match(DROP);
			State = 2495; Match(INDEX);
			State = 2497;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,313,Context) ) {
			case 1:
				{
				State = 2496;
				_localctx.intimeAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					_localctx.intimeAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 2499; uid();
			State = 2500; Match(ON);
			State = 2501; tableName();
			State = 2507;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM) {
				{
				State = 2502; Match(ALGORITHM);
				State = 2504;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2503; Match(EQUAL_SYMBOL);
					}
				}

				State = 2506;
				_localctx.algType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
					_localctx.algType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCK) {
				{
				State = 2509; Match(LOCK);
				State = 2511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2510; Match(EQUAL_SYMBOL);
					}
				}

				State = 2513;
				_localctx.lockType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					_localctx.lockType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropLogfileGroupContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropLogfileGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropLogfileGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropLogfileGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropLogfileGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropLogfileGroupContext dropLogfileGroup() {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(Context, State);
		EnterRule(_localctx, 140, RULE_dropLogfileGroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2516; Match(DROP);
			State = 2517; Match(LOGFILE);
			State = 2518; Match(GROUP);
			State = 2519; uid();
			State = 2520; Match(ENGINE);
			State = 2521; Match(EQUAL_SYMBOL);
			State = 2522; engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropProcedureContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropProcedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropProcedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropProcedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropProcedureContext dropProcedure() {
		DropProcedureContext _localctx = new DropProcedureContext(Context, State);
		EnterRule(_localctx, 142, RULE_dropProcedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2524; Match(DROP);
			State = 2525; Match(PROCEDURE);
			State = 2527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2526; ifExists();
				}
			}

			State = 2529; fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropFunctionContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropFunctionContext dropFunction() {
		DropFunctionContext _localctx = new DropFunctionContext(Context, State);
		EnterRule(_localctx, 144, RULE_dropFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2531; Match(DROP);
			State = 2532; Match(FUNCTION);
			State = 2534;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2533; ifExists();
				}
			}

			State = 2536; fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropServerContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropServer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropServer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropServer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropServerContext dropServer() {
		DropServerContext _localctx = new DropServerContext(Context, State);
		EnterRule(_localctx, 146, RULE_dropServer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2538; Match(DROP);
			State = 2539; Match(SERVER);
			State = 2541;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2540; ifExists();
				}
			}

			State = 2543; uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTableContext : ParserRuleContext {
		public IToken dropType;
		public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
		public ITerminalNode CASCADE() { return GetToken(MySqlParser.CASCADE, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTableContext dropTable() {
		DropTableContext _localctx = new DropTableContext(Context, State);
		EnterRule(_localctx, 148, RULE_dropTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2545; Match(DROP);
			State = 2547;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPORARY) {
				{
				State = 2546; Match(TEMPORARY);
				}
			}

			State = 2549; Match(TABLE);
			State = 2551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2550; ifExists();
				}
			}

			State = 2553; tables();
			State = 2555;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				State = 2554;
				_localctx.dropType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_localctx.dropType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTablespaceContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		public DropTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTablespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropTablespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropTablespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTablespaceContext dropTablespace() {
		DropTablespaceContext _localctx = new DropTablespaceContext(Context, State);
		EnterRule(_localctx, 150, RULE_dropTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2557; Match(DROP);
			State = 2558; Match(TABLESPACE);
			State = 2559; uid();
			State = 2565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE) {
				{
				State = 2560; Match(ENGINE);
				State = 2562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2561; Match(EQUAL_SYMBOL);
					}
				}

				State = 2564; engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTriggerContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
		public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTrigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropTrigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropTrigger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTriggerContext dropTrigger() {
		DropTriggerContext _localctx = new DropTriggerContext(Context, State);
		EnterRule(_localctx, 152, RULE_dropTrigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2567; Match(DROP);
			State = 2568; Match(TRIGGER);
			State = 2570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2569; ifExists();
				}
			}

			State = 2572; fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropViewContext : ParserRuleContext {
		public IToken dropType;
		public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
		public ITerminalNode CASCADE() { return GetToken(MySqlParser.CASCADE, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropView; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropView(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropView(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropView(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropViewContext dropView() {
		DropViewContext _localctx = new DropViewContext(Context, State);
		EnterRule(_localctx, 154, RULE_dropView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2574; Match(DROP);
			State = 2575; Match(VIEW);
			State = 2577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2576; ifExists();
				}
			}

			State = 2579; fullId();
			State = 2584;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2580; Match(COMMA);
				State = 2581; fullId();
				}
				}
				State = 2586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2588;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				State = 2587;
				_localctx.dropType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_localctx.dropType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameTableContext : ParserRuleContext {
		public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		public RenameTableClauseContext[] renameTableClause() {
			return GetRuleContexts<RenameTableClauseContext>();
		}
		public RenameTableClauseContext renameTableClause(int i) {
			return GetRuleContext<RenameTableClauseContext>(i);
		}
		public RenameTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRenameTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRenameTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameTableContext renameTable() {
		RenameTableContext _localctx = new RenameTableContext(Context, State);
		EnterRule(_localctx, 156, RULE_renameTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2590; Match(RENAME);
			State = 2591; Match(TABLE);
			State = 2592; renameTableClause();
			State = 2597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2593; Match(COMMA);
				State = 2594; renameTableClause();
				}
				}
				State = 2599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameTableClauseContext : ParserRuleContext {
		public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		public RenameTableClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameTableClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRenameTableClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRenameTableClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameTableClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameTableClauseContext renameTableClause() {
		RenameTableClauseContext _localctx = new RenameTableClauseContext(Context, State);
		EnterRule(_localctx, 158, RULE_renameTableClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2600; tableName();
			State = 2601; Match(TO);
			State = 2602; tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruncateTableContext : ParserRuleContext {
		public ITerminalNode TRUNCATE() { return GetToken(MySqlParser.TRUNCATE, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		public TruncateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncateTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTruncateTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTruncateTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruncateTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TruncateTableContext truncateTable() {
		TruncateTableContext _localctx = new TruncateTableContext(Context, State);
		EnterRule(_localctx, 160, RULE_truncateTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2604; Match(TRUNCATE);
			State = 2606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TABLE) {
				{
				State = 2605; Match(TABLE);
				}
			}

			State = 2608; tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		public ITerminalNode CALL() { return GetToken(MySqlParser.CALL, 0); }
		public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public ConstantsContext constants() {
			return GetRuleContext<ConstantsContext>(0);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCallStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCallStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 162, RULE_callStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2610; Match(CALL);
			State = 2611; fullId();
			State = 2618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 2612; Match(LR_BRACKET);
				State = 2615;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,332,Context) ) {
				case 1:
					{
					State = 2613; constants();
					}
					break;
				case 2:
					{
					State = 2614; expressions();
					}
					break;
				}
				State = 2617; Match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		public SingleDeleteStatementContext singleDeleteStatement() {
			return GetRuleContext<SingleDeleteStatementContext>(0);
		}
		public MultipleDeleteStatementContext multipleDeleteStatement() {
			return GetRuleContext<MultipleDeleteStatementContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 164, RULE_deleteStatement);
		try {
			State = 2622;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,334,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2620; singleDeleteStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2621; multipleDeleteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoStatementContext : ParserRuleContext {
		public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoStatementContext doStatement() {
		DoStatementContext _localctx = new DoStatementContext(Context, State);
		EnterRule(_localctx, 166, RULE_doStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2624; Match(DO);
			State = 2625; expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerStatementContext : ParserRuleContext {
		public HandlerOpenStatementContext handlerOpenStatement() {
			return GetRuleContext<HandlerOpenStatementContext>(0);
		}
		public HandlerReadIndexStatementContext handlerReadIndexStatement() {
			return GetRuleContext<HandlerReadIndexStatementContext>(0);
		}
		public HandlerReadStatementContext handlerReadStatement() {
			return GetRuleContext<HandlerReadStatementContext>(0);
		}
		public HandlerCloseStatementContext handlerCloseStatement() {
			return GetRuleContext<HandlerCloseStatementContext>(0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerStatementContext handlerStatement() {
		HandlerStatementContext _localctx = new HandlerStatementContext(Context, State);
		EnterRule(_localctx, 168, RULE_handlerStatement);
		try {
			State = 2631;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,335,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2627; handlerOpenStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2628; handlerReadIndexStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2629; handlerReadStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2630; handlerCloseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementContext : ParserRuleContext {
		public IToken priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext _updatedElement;
		public IList<UpdatedElementContext> _setElements = new List<UpdatedElementContext>();
		public UpdatedElementContext duplicatedFirst;
		public IList<UpdatedElementContext> _duplicatedElements = new List<UpdatedElementContext>();
		public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return GetRuleContext<InsertStatementValueContext>(0);
		}
		public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		public ITerminalNode DUPLICATE() { return GetToken(MySqlParser.DUPLICATE, 0); }
		public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		public UidListContext[] uidList() {
			return GetRuleContexts<UidListContext>();
		}
		public UidListContext uidList(int i) {
			return GetRuleContext<UidListContext>(i);
		}
		public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		public ITerminalNode DELAYED() { return GetToken(MySqlParser.DELAYED, 0); }
		public ITerminalNode HIGH_PRIORITY() { return GetToken(MySqlParser.HIGH_PRIORITY, 0); }
		public InsertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInsertStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInsertStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementContext insertStatement() {
		InsertStatementContext _localctx = new InsertStatementContext(Context, State);
		EnterRule(_localctx, 170, RULE_insertStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2633; Match(INSERT);
			State = 2635;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 37)) & ~0x3f) == 0 && ((1L << (_la - 37)) & ((1L << (DELAYED - 37)) | (1L << (HIGH_PRIORITY - 37)) | (1L << (LOW_PRIORITY - 37)))) != 0)) {
				{
				State = 2634;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 37)) & ~0x3f) == 0 && ((1L << (_la - 37)) & ((1L << (DELAYED - 37)) | (1L << (HIGH_PRIORITY - 37)) | (1L << (LOW_PRIORITY - 37)))) != 0)) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2638;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 2637; Match(IGNORE);
				}
			}

			State = 2641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 2640; Match(INTO);
				}
			}

			State = 2643; tableName();
			State = 2649;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2644; Match(PARTITION);
				State = 2645; Match(LR_BRACKET);
				State = 2646; _localctx.partitions = uidList();
				State = 2647; Match(RR_BRACKET);
				}
			}

			State = 2667;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				State = 2655;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,340,Context) ) {
				case 1:
					{
					State = 2651; Match(LR_BRACKET);
					State = 2652; _localctx.columns = uidList();
					State = 2653; Match(RR_BRACKET);
					}
					break;
				}
				State = 2657; insertStatementValue();
				}
				break;
			case SET:
				{
				State = 2658; Match(SET);
				State = 2659; _localctx.setFirst = updatedElement();
				State = 2664;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2660; Match(COMMA);
					State = 2661; _localctx._updatedElement = updatedElement();
					_localctx._setElements.Add(_localctx._updatedElement);
					}
					}
					State = 2666;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2681;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 2669; Match(ON);
				State = 2670; Match(DUPLICATE);
				State = 2671; Match(KEY);
				State = 2672; Match(UPDATE);
				State = 2673; _localctx.duplicatedFirst = updatedElement();
				State = 2678;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2674; Match(COMMA);
					State = 2675; _localctx._updatedElement = updatedElement();
					_localctx._duplicatedElements.Add(_localctx._updatedElement);
					}
					}
					State = 2680;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadDataStatementContext : ParserRuleContext {
		public IToken priority;
		public IToken filename;
		public IToken violation;
		public CharsetNameContext charset;
		public IToken fieldsFormat;
		public IToken linesFormat;
		public ITerminalNode LOAD() { return GetToken(MySqlParser.LOAD, 0); }
		public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		public ITerminalNode INFILE() { return GetToken(MySqlParser.INFILE, 0); }
		public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		public ITerminalNode[] SET() { return GetTokens(MySqlParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(MySqlParser.SET, i);
		}
		public ITerminalNode[] LINES() { return GetTokens(MySqlParser.LINES); }
		public ITerminalNode LINES(int i) {
			return GetToken(MySqlParser.LINES, i);
		}
		public ITerminalNode[] IGNORE() { return GetTokens(MySqlParser.IGNORE); }
		public ITerminalNode IGNORE(int i) {
			return GetToken(MySqlParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public AssignmentFieldContext[] assignmentField() {
			return GetRuleContexts<AssignmentFieldContext>();
		}
		public AssignmentFieldContext assignmentField(int i) {
			return GetRuleContext<AssignmentFieldContext>(i);
		}
		public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		public ITerminalNode CONCURRENT() { return GetToken(MySqlParser.CONCURRENT, 0); }
		public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
		public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		public ITerminalNode ROWS() { return GetToken(MySqlParser.ROWS, 0); }
		public SelectFieldsIntoContext[] selectFieldsInto() {
			return GetRuleContexts<SelectFieldsIntoContext>();
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return GetRuleContext<SelectFieldsIntoContext>(i);
		}
		public SelectLinesIntoContext[] selectLinesInto() {
			return GetRuleContexts<SelectLinesIntoContext>();
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return GetRuleContext<SelectLinesIntoContext>(i);
		}
		public LoadDataStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadDataStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadDataStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadDataStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadDataStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadDataStatementContext loadDataStatement() {
		LoadDataStatementContext _localctx = new LoadDataStatementContext(Context, State);
		EnterRule(_localctx, 172, RULE_loadDataStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2683; Match(LOAD);
			State = 2684; Match(DATA);
			State = 2686;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				State = 2685;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2689;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL) {
				{
				State = 2688; Match(LOCAL);
				}
			}

			State = 2691; Match(INFILE);
			State = 2692; _localctx.filename = Match(STRING_LITERAL);
			State = 2694;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				State = 2693;
				_localctx.violation = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					_localctx.violation = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2696; Match(INTO);
			State = 2697; Match(TABLE);
			State = 2698; tableName();
			State = 2704;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2699; Match(PARTITION);
				State = 2700; Match(LR_BRACKET);
				State = 2701; uidList();
				State = 2702; Match(RR_BRACKET);
				}
			}

			State = 2709;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHARACTER) {
				{
				State = 2706; Match(CHARACTER);
				State = 2707; Match(SET);
				State = 2708; _localctx.charset = charsetName();
				}
			}

			State = 2717;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLUMNS || _la==FIELDS) {
				{
				State = 2711;
				_localctx.fieldsFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					_localctx.fieldsFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2713;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2712; selectFieldsInto();
					}
					}
					State = 2715;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
				}
			}

			State = 2725;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LINES) {
				{
				State = 2719; Match(LINES);
				State = 2721;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2720; selectLinesInto();
					}
					}
					State = 2723;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==STARTING || _la==TERMINATED );
				}
			}

			State = 2731;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 2727; Match(IGNORE);
				State = 2728; decimalLiteral();
				State = 2729;
				_localctx.linesFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					_localctx.linesFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2744;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 2733; Match(LR_BRACKET);
				State = 2734; assignmentField();
				State = 2739;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2735; Match(COMMA);
					State = 2736; assignmentField();
					}
					}
					State = 2741;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2742; Match(RR_BRACKET);
				}
			}

			State = 2755;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET) {
				{
				State = 2746; Match(SET);
				State = 2747; updatedElement();
				State = 2752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2748; Match(COMMA);
					State = 2749; updatedElement();
					}
					}
					State = 2754;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadXmlStatementContext : ParserRuleContext {
		public IToken priority;
		public IToken filename;
		public IToken violation;
		public CharsetNameContext charset;
		public IToken tag;
		public IToken linesFormat;
		public ITerminalNode LOAD() { return GetToken(MySqlParser.LOAD, 0); }
		public ITerminalNode XML() { return GetToken(MySqlParser.XML, 0); }
		public ITerminalNode INFILE() { return GetToken(MySqlParser.INFILE, 0); }
		public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		public ITerminalNode[] SET() { return GetTokens(MySqlParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(MySqlParser.SET, i);
		}
		public ITerminalNode[] ROWS() { return GetTokens(MySqlParser.ROWS); }
		public ITerminalNode ROWS(int i) {
			return GetToken(MySqlParser.ROWS, i);
		}
		public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		public ITerminalNode[] IGNORE() { return GetTokens(MySqlParser.IGNORE); }
		public ITerminalNode IGNORE(int i) {
			return GetToken(MySqlParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public AssignmentFieldContext[] assignmentField() {
			return GetRuleContexts<AssignmentFieldContext>();
		}
		public AssignmentFieldContext assignmentField(int i) {
			return GetRuleContext<AssignmentFieldContext>(i);
		}
		public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		public ITerminalNode CONCURRENT() { return GetToken(MySqlParser.CONCURRENT, 0); }
		public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		public ITerminalNode LINES() { return GetToken(MySqlParser.LINES, 0); }
		public LoadXmlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadXmlStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadXmlStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadXmlStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadXmlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadXmlStatementContext loadXmlStatement() {
		LoadXmlStatementContext _localctx = new LoadXmlStatementContext(Context, State);
		EnterRule(_localctx, 174, RULE_loadXmlStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2757; Match(LOAD);
			State = 2758; Match(XML);
			State = 2760;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				State = 2759;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2763;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL) {
				{
				State = 2762; Match(LOCAL);
				}
			}

			State = 2765; Match(INFILE);
			State = 2766; _localctx.filename = Match(STRING_LITERAL);
			State = 2768;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				State = 2767;
				_localctx.violation = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					_localctx.violation = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2770; Match(INTO);
			State = 2771; Match(TABLE);
			State = 2772; tableName();
			State = 2776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHARACTER) {
				{
				State = 2773; Match(CHARACTER);
				State = 2774; Match(SET);
				State = 2775; _localctx.charset = charsetName();
				}
			}

			State = 2784;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROWS) {
				{
				State = 2778; Match(ROWS);
				State = 2779; Match(IDENTIFIED);
				State = 2780; Match(BY);
				State = 2781; Match(LESS_SYMBOL);
				State = 2782; _localctx.tag = Match(STRING_LITERAL);
				State = 2783; Match(GREATER_SYMBOL);
				}
			}

			State = 2790;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 2786; Match(IGNORE);
				State = 2787; decimalLiteral();
				State = 2788;
				_localctx.linesFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					_localctx.linesFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2803;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 2792; Match(LR_BRACKET);
				State = 2793; assignmentField();
				State = 2798;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2794; Match(COMMA);
					State = 2795; assignmentField();
					}
					}
					State = 2800;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2801; Match(RR_BRACKET);
				}
			}

			State = 2814;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET) {
				{
				State = 2805; Match(SET);
				State = 2806; updatedElement();
				State = 2811;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2807; Match(COMMA);
					State = 2808; updatedElement();
					}
					}
					State = 2813;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplaceStatementContext : ParserRuleContext {
		public IToken priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext _updatedElement;
		public IList<UpdatedElementContext> _setElements = new List<UpdatedElementContext>();
		public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return GetRuleContext<InsertStatementValueContext>(0);
		}
		public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		public UidListContext[] uidList() {
			return GetRuleContexts<UidListContext>();
		}
		public UidListContext uidList(int i) {
			return GetRuleContext<UidListContext>(i);
		}
		public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		public ITerminalNode DELAYED() { return GetToken(MySqlParser.DELAYED, 0); }
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replaceStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReplaceStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReplaceStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplaceStatementContext replaceStatement() {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(Context, State);
		EnterRule(_localctx, 176, RULE_replaceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2816; Match(REPLACE);
			State = 2818;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DELAYED || _la==LOW_PRIORITY) {
				{
				State = 2817;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DELAYED || _la==LOW_PRIORITY) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2821;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 2820; Match(INTO);
				}
			}

			State = 2823; tableName();
			State = 2829;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2824; Match(PARTITION);
				State = 2825; Match(LR_BRACKET);
				State = 2826; _localctx.partitions = uidList();
				State = 2827; Match(RR_BRACKET);
				}
			}

			State = 2847;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				State = 2835;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,372,Context) ) {
				case 1:
					{
					State = 2831; Match(LR_BRACKET);
					State = 2832; _localctx.columns = uidList();
					State = 2833; Match(RR_BRACKET);
					}
					break;
				}
				State = 2837; insertStatementValue();
				}
				break;
			case SET:
				{
				State = 2838; Match(SET);
				State = 2839; _localctx.setFirst = updatedElement();
				State = 2844;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2840; Match(COMMA);
					State = 2841; _localctx._updatedElement = updatedElement();
					_localctx._setElements.Add(_localctx._updatedElement);
					}
					}
					State = 2846;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
	 
		public SelectStatementContext() { }
		public virtual void CopyFrom(SelectStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnionSelectContext : SelectStatementContext {
		public IToken unionType;
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return GetRuleContext<QuerySpecificationNointoContext>(0);
		}
		public UnionStatementContext[] unionStatement() {
			return GetRuleContexts<UnionStatementContext>();
		}
		public UnionStatementContext unionStatement(int i) {
			return GetRuleContext<UnionStatementContext>(i);
		}
		public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		public UnionSelectContext(SelectStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnionSelect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnionSelect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnionParenthesisSelectContext : SelectStatementContext {
		public IToken unionType;
		public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		public UnionParenthesisContext[] unionParenthesis() {
			return GetRuleContexts<UnionParenthesisContext>();
		}
		public UnionParenthesisContext unionParenthesis(int i) {
			return GetRuleContext<UnionParenthesisContext>(i);
		}
		public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisSelectContext(SelectStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnionParenthesisSelect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnionParenthesisSelect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionParenthesisSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleSelectContext : SelectStatementContext {
		public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		public SimpleSelectContext(SelectStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleSelect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleSelect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisSelectContext : SelectStatementContext {
		public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		public ParenthesisSelectContext(SelectStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterParenthesisSelect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitParenthesisSelect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 178, RULE_selectStatement);
		int _la;
		try {
			int _alt;
			State = 2904;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,390,Context) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2849; querySpecification();
				State = 2851;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR || _la==LOCK) {
					{
					State = 2850; lockClause();
					}
				}

				}
				break;
			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2853; queryExpression();
				State = 2855;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR || _la==LOCK) {
					{
					State = 2854; lockClause();
					}
				}

				}
				break;
			case 3:
				_localctx = new UnionSelectContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2857; querySpecificationNointo();
				State = 2859;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2858; unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2861;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,377,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 2871;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNION) {
					{
					State = 2863; Match(UNION);
					State = 2865;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						State = 2864;
						((UnionSelectContext)_localctx).unionType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionSelectContext)_localctx).unionType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 2869;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SELECT:
						{
						State = 2867; querySpecification();
						}
						break;
					case LR_BRACKET:
						{
						State = 2868; queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 2874;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 2873; orderByClause();
					}
				}

				State = 2877;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 2876; limitClause();
					}
				}

				State = 2880;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR || _la==LOCK) {
					{
					State = 2879; lockClause();
					}
				}

				}
				break;
			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2882; queryExpressionNointo();
				State = 2884;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2883; unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2886;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,384,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 2893;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNION) {
					{
					State = 2888; Match(UNION);
					State = 2890;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						State = 2889;
						((UnionParenthesisSelectContext)_localctx).unionType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionParenthesisSelectContext)_localctx).unionType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 2892; queryExpression();
					}
				}

				State = 2896;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 2895; orderByClause();
					}
				}

				State = 2899;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 2898; limitClause();
					}
				}

				State = 2902;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR || _la==LOCK) {
					{
					State = 2901; lockClause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementContext : ParserRuleContext {
		public SingleUpdateStatementContext singleUpdateStatement() {
			return GetRuleContext<SingleUpdateStatementContext>(0);
		}
		public MultipleUpdateStatementContext multipleUpdateStatement() {
			return GetRuleContext<MultipleUpdateStatementContext>(0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUpdateStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUpdateStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementContext updateStatement() {
		UpdateStatementContext _localctx = new UpdateStatementContext(Context, State);
		EnterRule(_localctx, 180, RULE_updateStatement);
		try {
			State = 2908;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,391,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2906; singleUpdateStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2907; multipleUpdateStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementValueContext : ParserRuleContext {
		public IToken insertFormat;
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public ExpressionsWithDefaultsContext[] expressionsWithDefaults() {
			return GetRuleContexts<ExpressionsWithDefaultsContext>();
		}
		public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return GetRuleContext<ExpressionsWithDefaultsContext>(i);
		}
		public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public InsertStatementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatementValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInsertStatementValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInsertStatementValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertStatementValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementValueContext insertStatementValue() {
		InsertStatementValueContext _localctx = new InsertStatementValueContext(Context, State);
		EnterRule(_localctx, 182, RULE_insertStatementValue);
		int _la;
		try {
			State = 2925;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2910; selectStatement();
				}
				break;
			case VALUES:
			case VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2911;
				_localctx.insertFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==VALUES || _la==VALUE) ) {
					_localctx.insertFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2912; Match(LR_BRACKET);
				State = 2913; expressionsWithDefaults();
				State = 2914; Match(RR_BRACKET);
				State = 2922;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2915; Match(COMMA);
					State = 2916; Match(LR_BRACKET);
					State = 2917; expressionsWithDefaults();
					State = 2918; Match(RR_BRACKET);
					}
					}
					State = 2924;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdatedElementContext : ParserRuleContext {
		public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public UpdatedElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updatedElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUpdatedElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUpdatedElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdatedElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdatedElementContext updatedElement() {
		UpdatedElementContext _localctx = new UpdatedElementContext(Context, State);
		EnterRule(_localctx, 184, RULE_updatedElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2927; fullColumnName();
			State = 2928; Match(EQUAL_SYMBOL);
			State = 2931;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT_USER:
			case DATABASE:
			case EXISTS:
			case FALSE:
			case IF:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case NOT:
			case NULL_LITERAL:
			case REPLACE:
			case RIGHT:
			case TRUE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case PLUS:
			case MINUS:
			case EXCLAMATION_SYMBOL:
			case BIT_NOT_OP:
			case LR_BRACKET:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case CHARSET_REVERSE_QOUTE_STRING:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case NULL_SPEC_LITERAL:
			case BIT_STRING:
			case STRING_CHARSET_NAME:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				{
				State = 2929; expression(0);
				}
				break;
			case DEFAULT:
				{
				State = 2930; Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentFieldContext : ParserRuleContext {
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		public AssignmentFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAssignmentField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAssignmentField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentFieldContext assignmentField() {
		AssignmentFieldContext _localctx = new AssignmentFieldContext(Context, State);
		EnterRule(_localctx, 186, RULE_assignmentField);
		try {
			State = 2935;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2933; uid();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2934; Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockClauseContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		public ITerminalNode SHARE() { return GetToken(MySqlParser.SHARE, 0); }
		public ITerminalNode MODE() { return GetToken(MySqlParser.MODE, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockClauseContext lockClause() {
		LockClauseContext _localctx = new LockClauseContext(Context, State);
		EnterRule(_localctx, 188, RULE_lockClause);
		try {
			State = 2943;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2937; Match(FOR);
				State = 2938; Match(UPDATE);
				}
				break;
			case LOCK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2939; Match(LOCK);
				State = 2940; Match(IN);
				State = 2941; Match(SHARE);
				State = 2942; Match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleDeleteStatementContext : ParserRuleContext {
		public IToken priority;
		public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		public SingleDeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleDeleteStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSingleDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSingleDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleDeleteStatementContext singleDeleteStatement() {
		SingleDeleteStatementContext _localctx = new SingleDeleteStatementContext(Context, State);
		EnterRule(_localctx, 190, RULE_singleDeleteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2945; Match(DELETE);
			State = 2947;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 2946; _localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 2950;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUICK) {
				{
				State = 2949; Match(QUICK);
				}
			}

			State = 2953;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 2952; Match(IGNORE);
				}
			}

			State = 2955; Match(FROM);
			State = 2956; tableName();
			State = 2962;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2957; Match(PARTITION);
				State = 2958; Match(LR_BRACKET);
				State = 2959; uidList();
				State = 2960; Match(RR_BRACKET);
				}
			}

			State = 2966;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2964; Match(WHERE);
				State = 2965; expression(0);
				}
			}

			State = 2969;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 2968; orderByClause();
				}
			}

			State = 2973;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 2971; Match(LIMIT);
				State = 2972; decimalLiteral();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultipleDeleteStatementContext : ParserRuleContext {
		public IToken priority;
		public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		public MultipleDeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multipleDeleteStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMultipleDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMultipleDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultipleDeleteStatementContext multipleDeleteStatement() {
		MultipleDeleteStatementContext _localctx = new MultipleDeleteStatementContext(Context, State);
		EnterRule(_localctx, 192, RULE_multipleDeleteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2975; Match(DELETE);
			State = 2977;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 2976; _localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 2980;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,405,Context) ) {
			case 1:
				{
				State = 2979; Match(QUICK);
				}
				break;
			}
			State = 2983;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 2982; Match(IGNORE);
				}
			}

			State = 3024;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				State = 2985; tableName();
				State = 2988;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 2986; Match(DOT);
					State = 2987; Match(STAR);
					}
				}

				State = 2998;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2990; Match(COMMA);
					State = 2991; tableName();
					State = 2994;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT) {
						{
						State = 2992; Match(DOT);
						State = 2993; Match(STAR);
						}
					}

					}
					}
					State = 3000;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3001; Match(FROM);
				State = 3002; tableSources();
				}
				break;
			case FROM:
				{
				State = 3004; Match(FROM);
				State = 3005; tableName();
				State = 3008;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 3006; Match(DOT);
					State = 3007; Match(STAR);
					}
				}

				State = 3018;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3010; Match(COMMA);
					State = 3011; tableName();
					State = 3014;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT) {
						{
						State = 3012; Match(DOT);
						State = 3013; Match(STAR);
						}
					}

					}
					}
					State = 3020;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3021; Match(USING);
				State = 3022; tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3028;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3026; Match(WHERE);
				State = 3027; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerOpenStatementContext : ParserRuleContext {
		public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerOpenStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerOpenStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerOpenStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerOpenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerOpenStatementContext handlerOpenStatement() {
		HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(Context, State);
		EnterRule(_localctx, 194, RULE_handlerOpenStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3030; Match(HANDLER);
			State = 3031; tableName();
			State = 3032; Match(OPEN);
			State = 3037;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || _la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
				{
				State = 3034;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3033; Match(AS);
					}
				}

				State = 3036; uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerReadIndexStatementContext : ParserRuleContext {
		public UidContext index;
		public IToken moveOrder;
		public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public ConstantsContext constants() {
			return GetRuleContext<ConstantsContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
		public ITerminalNode PREV() { return GetToken(MySqlParser.PREV, 0); }
		public ITerminalNode LAST() { return GetToken(MySqlParser.LAST, 0); }
		public HandlerReadIndexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerReadIndexStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerReadIndexStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerReadIndexStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerReadIndexStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerReadIndexStatementContext handlerReadIndexStatement() {
		HandlerReadIndexStatementContext _localctx = new HandlerReadIndexStatementContext(Context, State);
		EnterRule(_localctx, 196, RULE_handlerReadIndexStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3039; Match(HANDLER);
			State = 3040; tableName();
			State = 3041; Match(READ);
			State = 3042; _localctx.index = uid();
			State = 3049;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL_SYMBOL:
			case GREATER_SYMBOL:
			case LESS_SYMBOL:
			case EXCLAMATION_SYMBOL:
				{
				State = 3043; comparisonOperator();
				State = 3044; Match(LR_BRACKET);
				State = 3045; constants();
				State = 3046; Match(RR_BRACKET);
				}
				break;
			case FIRST:
			case LAST:
			case NEXT:
			case PREV:
				{
				State = 3048;
				_localctx.moveOrder = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NEXT || _la==PREV) ) {
					_localctx.moveOrder = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3053;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3051; Match(WHERE);
				State = 3052; expression(0);
				}
			}

			State = 3057;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3055; Match(LIMIT);
				State = 3056; decimalLiteral();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerReadStatementContext : ParserRuleContext {
		public IToken moveOrder;
		public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
		public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public HandlerReadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerReadStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerReadStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerReadStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerReadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerReadStatementContext handlerReadStatement() {
		HandlerReadStatementContext _localctx = new HandlerReadStatementContext(Context, State);
		EnterRule(_localctx, 198, RULE_handlerReadStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3059; Match(HANDLER);
			State = 3060; tableName();
			State = 3061; Match(READ);
			State = 3062;
			_localctx.moveOrder = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
				_localctx.moveOrder = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3065;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3063; Match(WHERE);
				State = 3064; expression(0);
				}
			}

			State = 3069;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3067; Match(LIMIT);
				State = 3068; decimalLiteral();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerCloseStatementContext : ParserRuleContext {
		public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(MySqlParser.CLOSE, 0); }
		public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerCloseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerCloseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerCloseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerCloseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerCloseStatementContext handlerCloseStatement() {
		HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(Context, State);
		EnterRule(_localctx, 200, RULE_handlerCloseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3071; Match(HANDLER);
			State = 3072; tableName();
			State = 3073; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleUpdateStatementContext : ParserRuleContext {
		public IToken priority;
		public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SingleUpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleUpdateStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSingleUpdateStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSingleUpdateStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleUpdateStatementContext singleUpdateStatement() {
		SingleUpdateStatementContext _localctx = new SingleUpdateStatementContext(Context, State);
		EnterRule(_localctx, 202, RULE_singleUpdateStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3075; Match(UPDATE);
			State = 3077;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 3076; _localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 3080;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3079; Match(IGNORE);
				}
			}

			State = 3082; tableName();
			State = 3087;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || _la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
				{
				State = 3084;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3083; Match(AS);
					}
				}

				State = 3086; uid();
				}
			}

			State = 3089; Match(SET);
			State = 3090; updatedElement();
			State = 3095;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3091; Match(COMMA);
				State = 3092; updatedElement();
				}
				}
				State = 3097;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3098; Match(WHERE);
				State = 3099; expression(0);
				}
			}

			State = 3103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 3102; orderByClause();
				}
			}

			State = 3106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3105; limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultipleUpdateStatementContext : ParserRuleContext {
		public IToken priority;
		public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		public MultipleUpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multipleUpdateStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMultipleUpdateStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMultipleUpdateStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultipleUpdateStatementContext multipleUpdateStatement() {
		MultipleUpdateStatementContext _localctx = new MultipleUpdateStatementContext(Context, State);
		EnterRule(_localctx, 204, RULE_multipleUpdateStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3108; Match(UPDATE);
			State = 3110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 3109; _localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 3113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3112; Match(IGNORE);
				}
			}

			State = 3115; tableSources();
			State = 3116; Match(SET);
			State = 3117; updatedElement();
			State = 3122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3118; Match(COMMA);
				State = 3119; updatedElement();
				}
				}
				State = 3124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3125; Match(WHERE);
				State = 3126; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByClauseContext : ParserRuleContext {
		public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		public OrderByExpressionContext[] orderByExpression() {
			return GetRuleContexts<OrderByExpressionContext>();
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return GetRuleContext<OrderByExpressionContext>(i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOrderByClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOrderByClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByClauseContext orderByClause() {
		OrderByClauseContext _localctx = new OrderByClauseContext(Context, State);
		EnterRule(_localctx, 206, RULE_orderByClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3129; Match(ORDER);
			State = 3130; Match(BY);
			State = 3131; orderByExpression();
			State = 3136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3132; Match(COMMA);
				State = 3133; orderByExpression();
				}
				}
				State = 3138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByExpressionContext : ParserRuleContext {
		public IToken order;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOrderByExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOrderByExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByExpressionContext orderByExpression() {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(Context, State);
		EnterRule(_localctx, 208, RULE_orderByExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3139; expression(0);
			State = 3141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 3140;
				_localctx.order = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					_localctx.order = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourcesContext : ParserRuleContext {
		public TableSourceContext[] tableSource() {
			return GetRuleContexts<TableSourceContext>();
		}
		public TableSourceContext tableSource(int i) {
			return GetRuleContext<TableSourceContext>(i);
		}
		public TableSourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSources; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableSources(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableSources(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSources(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourcesContext tableSources() {
		TableSourcesContext _localctx = new TableSourcesContext(Context, State);
		EnterRule(_localctx, 210, RULE_tableSources);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3143; tableSource();
			State = 3148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3144; Match(COMMA);
				State = 3145; tableSource();
				}
				}
				State = 3150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceContext : ParserRuleContext {
		public TableSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSource; } }
	 
		public TableSourceContext() { }
		public virtual void CopyFrom(TableSourceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TableSourceNestedContext : TableSourceContext {
		public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		public JoinPartContext[] joinPart() {
			return GetRuleContexts<JoinPartContext>();
		}
		public JoinPartContext joinPart(int i) {
			return GetRuleContext<JoinPartContext>(i);
		}
		public TableSourceNestedContext(TableSourceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableSourceNested(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableSourceNested(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourceNested(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableSourceBaseContext : TableSourceContext {
		public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		public JoinPartContext[] joinPart() {
			return GetRuleContexts<JoinPartContext>();
		}
		public JoinPartContext joinPart(int i) {
			return GetRuleContext<JoinPartContext>(i);
		}
		public TableSourceBaseContext(TableSourceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableSourceBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableSourceBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourceBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceContext tableSource() {
		TableSourceContext _localctx = new TableSourceContext(Context, State);
		EnterRule(_localctx, 212, RULE_tableSource);
		int _la;
		try {
			int _alt;
			State = 3168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,439,Context) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3151; tableSourceItem();
				State = 3155;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,437,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3152; joinPart();
						}
						} 
					}
					State = 3157;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,437,Context);
				}
				}
				break;
			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3158; Match(LR_BRACKET);
				State = 3159; tableSourceItem();
				State = 3163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (CROSS - 30)) | (1L << (INNER - 30)) | (1L << (JOIN - 30)) | (1L << (LEFT - 30)))) != 0) || ((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & ((1L << (NATURAL - 96)) | (1L << (RIGHT - 96)) | (1L << (STRAIGHT_JOIN - 96)))) != 0)) {
					{
					{
					State = 3160; joinPart();
					}
					}
					State = 3165;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3166; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceItemContext : ParserRuleContext {
		public TableSourceItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSourceItem; } }
	 
		public TableSourceItemContext() { }
		public virtual void CopyFrom(TableSourceItemContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubqueryTableItemContext : TableSourceItemContext {
		public SelectStatementContext parenthesisSubquery;
		public UidContext alias;
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SubqueryTableItemContext(TableSourceItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubqueryTableItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubqueryTableItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryTableItem(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomTableItemContext : TableSourceItemContext {
		public UidContext alias;
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public IndexHintContext[] indexHint() {
			return GetRuleContexts<IndexHintContext>();
		}
		public IndexHintContext indexHint(int i) {
			return GetRuleContext<IndexHintContext>(i);
		}
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public AtomTableItemContext(TableSourceItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAtomTableItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAtomTableItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomTableItem(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableSourcesItemContext : TableSourceItemContext {
		public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		public TableSourcesItemContext(TableSourceItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableSourcesItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableSourcesItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourcesItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceItemContext tableSourceItem() {
		TableSourceItemContext _localctx = new TableSourceItemContext(Context, State);
		EnterRule(_localctx, 214, RULE_tableSourceItem);
		int _la;
		try {
			int _alt;
			State = 3210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,447,Context) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3170; tableName();
				State = 3176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 3171; Match(PARTITION);
					State = 3172; Match(LR_BRACKET);
					State = 3173; uidList();
					State = 3174; Match(RR_BRACKET);
					}
				}

				State = 3182;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,442,Context) ) {
				case 1:
					{
					State = 3179;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 3178; Match(AS);
						}
					}

					State = 3181; ((AtomTableItemContext)_localctx).alias = uid();
					}
					break;
				}
				State = 3192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORCE || _la==IGNORE || _la==USE) {
					{
					State = 3184; indexHint();
					State = 3189;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,443,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 3185; Match(COMMA);
							State = 3186; indexHint();
							}
							} 
						}
						State = 3191;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,443,Context);
					}
					}
				}

				}
				break;
			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3199;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,445,Context) ) {
				case 1:
					{
					State = 3194; selectStatement();
					}
					break;
				case 2:
					{
					State = 3195; Match(LR_BRACKET);
					State = 3196; ((SubqueryTableItemContext)_localctx).parenthesisSubquery = selectStatement();
					State = 3197; Match(RR_BRACKET);
					}
					break;
				}
				State = 3202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3201; Match(AS);
					}
				}

				State = 3204; ((SubqueryTableItemContext)_localctx).alias = uid();
				}
				break;
			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3206; Match(LR_BRACKET);
				State = 3207; tableSources();
				State = 3208; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintContext : ParserRuleContext {
		public IToken indexHintAction;
		public IToken keyFormat;
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public ITerminalNode USE() { return GetToken(MySqlParser.USE, 0); }
		public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		public ITerminalNode FORCE() { return GetToken(MySqlParser.FORCE, 0); }
		public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return GetRuleContext<IndexHintTypeContext>(0);
		}
		public IndexHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintContext indexHint() {
		IndexHintContext _localctx = new IndexHintContext(Context, State);
		EnterRule(_localctx, 216, RULE_indexHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3212;
			_localctx.indexHintAction = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
				_localctx.indexHintAction = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3213;
			_localctx.keyFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
				_localctx.keyFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 3214; Match(FOR);
				State = 3215; indexHintType();
				}
			}

			State = 3218; Match(LR_BRACKET);
			State = 3219; uidList();
			State = 3220; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintTypeContext : ParserRuleContext {
		public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHintType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexHintType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexHintType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexHintType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintTypeContext indexHintType() {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(Context, State);
		EnterRule(_localctx, 218, RULE_indexHintType);
		try {
			State = 3227;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JOIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3222; Match(JOIN);
				}
				break;
			case ORDER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3223; Match(ORDER);
				State = 3224; Match(BY);
				}
				break;
			case GROUP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3225; Match(GROUP);
				State = 3226; Match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinPartContext : ParserRuleContext {
		public JoinPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinPart; } }
	 
		public JoinPartContext() { }
		public virtual void CopyFrom(JoinPartContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InnerJoinContext : JoinPartContext {
		public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public ITerminalNode INNER() { return GetToken(MySqlParser.INNER, 0); }
		public ITerminalNode CROSS() { return GetToken(MySqlParser.CROSS, 0); }
		public InnerJoinContext(JoinPartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInnerJoin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInnerJoin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInnerJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NaturalJoinContext : JoinPartContext {
		public ITerminalNode NATURAL() { return GetToken(MySqlParser.NATURAL, 0); }
		public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		public ITerminalNode LEFT() { return GetToken(MySqlParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(MySqlParser.RIGHT, 0); }
		public ITerminalNode OUTER() { return GetToken(MySqlParser.OUTER, 0); }
		public NaturalJoinContext(JoinPartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNaturalJoin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNaturalJoin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNaturalJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OuterJoinContext : JoinPartContext {
		public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		public ITerminalNode LEFT() { return GetToken(MySqlParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(MySqlParser.RIGHT, 0); }
		public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public ITerminalNode OUTER() { return GetToken(MySqlParser.OUTER, 0); }
		public OuterJoinContext(JoinPartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOuterJoin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOuterJoin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOuterJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StraightJoinContext : JoinPartContext {
		public ITerminalNode STRAIGHT_JOIN() { return GetToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StraightJoinContext(JoinPartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStraightJoin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStraightJoin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStraightJoin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinPartContext joinPart() {
		JoinPartContext _localctx = new JoinPartContext(Context, State);
		EnterRule(_localctx, 220, RULE_joinPart);
		int _la;
		try {
			State = 3273;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CROSS:
			case INNER:
			case JOIN:
				_localctx = new InnerJoinContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CROSS || _la==INNER) {
					{
					State = 3229;
					_la = TokenStream.LA(1);
					if ( !(_la==CROSS || _la==INNER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 3232; Match(JOIN);
				State = 3233; tableSourceItem();
				State = 3241;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,451,Context) ) {
				case 1:
					{
					State = 3234; Match(ON);
					State = 3235; expression(0);
					}
					break;
				case 2:
					{
					State = 3236; Match(USING);
					State = 3237; Match(LR_BRACKET);
					State = 3238; uidList();
					State = 3239; Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3243; Match(STRAIGHT_JOIN);
				State = 3244; tableSourceItem();
				State = 3247;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,452,Context) ) {
				case 1:
					{
					State = 3245; Match(ON);
					State = 3246; expression(0);
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3249;
				_la = TokenStream.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 3250; Match(OUTER);
					}
				}

				State = 3253; Match(JOIN);
				State = 3254; tableSourceItem();
				State = 3262;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON:
					{
					State = 3255; Match(ON);
					State = 3256; expression(0);
					}
					break;
				case USING:
					{
					State = 3257; Match(USING);
					State = 3258; Match(LR_BRACKET);
					State = 3259; uidList();
					State = 3260; Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3264; Match(NATURAL);
				State = 3269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					State = 3265;
					_la = TokenStream.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 3267;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OUTER) {
						{
						State = 3266; Match(OUTER);
						}
					}

					}
				}

				State = 3271; Match(JOIN);
				State = 3272; tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionContext : ParserRuleContext {
		public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQueryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQueryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionContext queryExpression() {
		QueryExpressionContext _localctx = new QueryExpressionContext(Context, State);
		EnterRule(_localctx, 222, RULE_queryExpression);
		try {
			State = 3283;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,458,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3275; Match(LR_BRACKET);
				State = 3276; querySpecification();
				State = 3277; Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3279; Match(LR_BRACKET);
				State = 3280; queryExpression();
				State = 3281; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionNointoContext : ParserRuleContext {
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return GetRuleContext<QuerySpecificationNointoContext>(0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionNointo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQueryExpressionNointo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQueryExpressionNointo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryExpressionNointo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionNointoContext queryExpressionNointo() {
		QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(Context, State);
		EnterRule(_localctx, 224, RULE_queryExpressionNointo);
		try {
			State = 3293;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,459,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3285; Match(LR_BRACKET);
				State = 3286; querySpecificationNointo();
				State = 3287; Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3289; Match(LR_BRACKET);
				State = 3290; queryExpressionNointo();
				State = 3291; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecificationContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(MySqlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return GetRuleContext<SelectElementsContext>(0);
		}
		public SelectSpecContext[] selectSpec() {
			return GetRuleContexts<SelectSpecContext>();
		}
		public SelectSpecContext selectSpec(int i) {
			return GetRuleContext<SelectSpecContext>(i);
		}
		public SelectIntoExpressionContext selectIntoExpression() {
			return GetRuleContext<SelectIntoExpressionContext>(0);
		}
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQuerySpecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQuerySpecification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecificationContext querySpecification() {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(Context, State);
		EnterRule(_localctx, 226, RULE_querySpecification);
		int _la;
		try {
			int _alt;
			State = 3335;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,470,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3295; Match(SELECT);
				State = 3299;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,460,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3296; selectSpec();
						}
						} 
					}
					State = 3301;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,460,Context);
				}
				State = 3302; selectElements();
				State = 3304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTO) {
					{
					State = 3303; selectIntoExpression();
					}
				}

				State = 3307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 3306; fromClause();
					}
				}

				State = 3310;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,463,Context) ) {
				case 1:
					{
					State = 3309; orderByClause();
					}
					break;
				}
				State = 3313;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,464,Context) ) {
				case 1:
					{
					State = 3312; limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3315; Match(SELECT);
				State = 3319;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,465,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3316; selectSpec();
						}
						} 
					}
					State = 3321;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,465,Context);
				}
				State = 3322; selectElements();
				State = 3324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 3323; fromClause();
					}
				}

				State = 3327;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,467,Context) ) {
				case 1:
					{
					State = 3326; orderByClause();
					}
					break;
				}
				State = 3330;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,468,Context) ) {
				case 1:
					{
					State = 3329; limitClause();
					}
					break;
				}
				State = 3333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTO) {
					{
					State = 3332; selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecificationNointoContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(MySqlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return GetRuleContext<SelectElementsContext>(0);
		}
		public SelectSpecContext[] selectSpec() {
			return GetRuleContexts<SelectSpecContext>();
		}
		public SelectSpecContext selectSpec(int i) {
			return GetRuleContext<SelectSpecContext>(i);
		}
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecificationNointo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQuerySpecificationNointo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQuerySpecificationNointo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySpecificationNointo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecificationNointoContext querySpecificationNointo() {
		QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(Context, State);
		EnterRule(_localctx, 228, RULE_querySpecificationNointo);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3337; Match(SELECT);
			State = 3341;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,471,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3338; selectSpec();
					}
					} 
				}
				State = 3343;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,471,Context);
			}
			State = 3344; selectElements();
			State = 3346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 3345; fromClause();
				}
			}

			State = 3349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,473,Context) ) {
			case 1:
				{
				State = 3348; orderByClause();
				}
				break;
			}
			State = 3352;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,474,Context) ) {
			case 1:
				{
				State = 3351; limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionParenthesisContext : ParserRuleContext {
		public IToken unionType;
		public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionParenthesis; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnionParenthesis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnionParenthesis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionParenthesisContext unionParenthesis() {
		UnionParenthesisContext _localctx = new UnionParenthesisContext(Context, State);
		EnterRule(_localctx, 230, RULE_unionParenthesis);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3354; Match(UNION);
			State = 3356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 3355;
				_localctx.unionType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					_localctx.unionType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3358; queryExpressionNointo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionStatementContext : ParserRuleContext {
		public IToken unionType;
		public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return GetRuleContext<QuerySpecificationNointoContext>(0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		public UnionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionStatementContext unionStatement() {
		UnionStatementContext _localctx = new UnionStatementContext(Context, State);
		EnterRule(_localctx, 232, RULE_unionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3360; Match(UNION);
			State = 3362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 3361;
				_localctx.unionType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					_localctx.unionType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3366;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				{
				State = 3364; querySpecificationNointo();
				}
				break;
			case LR_BRACKET:
				{
				State = 3365; queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSpecContext : ParserRuleContext {
		public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		public ITerminalNode DISTINCTROW() { return GetToken(MySqlParser.DISTINCTROW, 0); }
		public ITerminalNode HIGH_PRIORITY() { return GetToken(MySqlParser.HIGH_PRIORITY, 0); }
		public ITerminalNode STRAIGHT_JOIN() { return GetToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public ITerminalNode SQL_SMALL_RESULT() { return GetToken(MySqlParser.SQL_SMALL_RESULT, 0); }
		public ITerminalNode SQL_BIG_RESULT() { return GetToken(MySqlParser.SQL_BIG_RESULT, 0); }
		public ITerminalNode SQL_BUFFER_RESULT() { return GetToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public ITerminalNode SQL_CACHE() { return GetToken(MySqlParser.SQL_CACHE, 0); }
		public ITerminalNode SQL_NO_CACHE() { return GetToken(MySqlParser.SQL_NO_CACHE, 0); }
		public ITerminalNode SQL_CALC_FOUND_ROWS() { return GetToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSpecContext selectSpec() {
		SelectSpecContext _localctx = new SelectSpecContext(Context, State);
		EnterRule(_localctx, 234, RULE_selectSpec);
		int _la;
		try {
			State = 3376;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3368;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case HIGH_PRIORITY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3369; Match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3370; Match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3371; Match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3372; Match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3373; Match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3374;
				_la = TokenStream.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3375; Match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectElementsContext : ParserRuleContext {
		public IToken star;
		public SelectElementContext[] selectElement() {
			return GetRuleContexts<SelectElementContext>();
		}
		public SelectElementContext selectElement(int i) {
			return GetRuleContext<SelectElementContext>(i);
		}
		public SelectElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectElementsContext selectElements() {
		SelectElementsContext _localctx = new SelectElementsContext(Context, State);
		EnterRule(_localctx, 236, RULE_selectElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3380;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				{
				State = 3378; _localctx.star = Match(STAR);
				}
				break;
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT_USER:
			case DATABASE:
			case EXISTS:
			case FALSE:
			case IF:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case NOT:
			case NULL_LITERAL:
			case REPLACE:
			case RIGHT:
			case TRUE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case PLUS:
			case MINUS:
			case EXCLAMATION_SYMBOL:
			case BIT_NOT_OP:
			case LR_BRACKET:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case CHARSET_REVERSE_QOUTE_STRING:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case NULL_SPEC_LITERAL:
			case BIT_STRING:
			case STRING_CHARSET_NAME:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				{
				State = 3379; selectElement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3382; Match(COMMA);
				State = 3383; selectElement();
				}
				}
				State = 3388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectElementContext : ParserRuleContext {
		public SelectElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectElement; } }
	 
		public SelectElementContext() { }
		public virtual void CopyFrom(SelectElementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectExpressionElementContext : SelectElementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		public ITerminalNode VAR_ASSIGN() { return GetToken(MySqlParser.VAR_ASSIGN, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SelectExpressionElementContext(SelectElementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectExpressionElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectExpressionElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectExpressionElement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectFunctionElementContext : SelectElementContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SelectFunctionElementContext(SelectElementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectFunctionElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectFunctionElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFunctionElement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectStarElementContext : SelectElementContext {
		public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public SelectStarElementContext(SelectElementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectStarElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectStarElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStarElement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectColumnElementContext : SelectElementContext {
		public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SelectColumnElementContext(SelectElementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectColumnElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectColumnElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectColumnElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectElementContext selectElement() {
		SelectElementContext _localctx = new SelectElementContext(Context, State);
		EnterRule(_localctx, 238, RULE_selectElement);
		int _la;
		try {
			State = 3418;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,488,Context) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3389; fullId();
				State = 3390; Match(DOT);
				State = 3391; Match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3393; fullColumnName();
				State = 3398;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,482,Context) ) {
				case 1:
					{
					State = 3395;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 3394; Match(AS);
						}
					}

					State = 3397; uid();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3400; functionCall();
				State = 3405;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,484,Context) ) {
				case 1:
					{
					State = 3402;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 3401; Match(AS);
						}
					}

					State = 3404; uid();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3409;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,485,Context) ) {
				case 1:
					{
					State = 3407; Match(LOCAL_ID);
					State = 3408; Match(VAR_ASSIGN);
					}
					break;
				}
				State = 3411; expression(0);
				State = 3416;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,487,Context) ) {
				case 1:
					{
					State = 3413;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 3412; Match(AS);
						}
					}

					State = 3415; uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectIntoExpressionContext : ParserRuleContext {
		public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectIntoExpression; } }
	 
		public SelectIntoExpressionContext() { }
		public virtual void CopyFrom(SelectIntoExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectIntoVariablesContext : SelectIntoExpressionContext {
		public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		public AssignmentFieldContext[] assignmentField() {
			return GetRuleContexts<AssignmentFieldContext>();
		}
		public AssignmentFieldContext assignmentField(int i) {
			return GetRuleContext<AssignmentFieldContext>(i);
		}
		public SelectIntoVariablesContext(SelectIntoExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectIntoVariables(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectIntoVariables(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectIntoVariables(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectIntoTextFileContext : SelectIntoExpressionContext {
		public IToken filename;
		public CharsetNameContext charset;
		public IToken fieldsFormat;
		public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		public ITerminalNode OUTFILE() { return GetToken(MySqlParser.OUTFILE, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		public ITerminalNode LINES() { return GetToken(MySqlParser.LINES, 0); }
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
		public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		public SelectFieldsIntoContext[] selectFieldsInto() {
			return GetRuleContexts<SelectFieldsIntoContext>();
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return GetRuleContext<SelectFieldsIntoContext>(i);
		}
		public SelectLinesIntoContext[] selectLinesInto() {
			return GetRuleContexts<SelectLinesIntoContext>();
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return GetRuleContext<SelectLinesIntoContext>(i);
		}
		public SelectIntoTextFileContext(SelectIntoExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectIntoTextFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectIntoTextFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectIntoTextFile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectIntoDumpFileContext : SelectIntoExpressionContext {
		public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		public ITerminalNode DUMPFILE() { return GetToken(MySqlParser.DUMPFILE, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public SelectIntoDumpFileContext(SelectIntoExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectIntoDumpFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectIntoDumpFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectIntoDumpFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectIntoExpressionContext selectIntoExpression() {
		SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(Context, State);
		EnterRule(_localctx, 240, RULE_selectIntoExpression);
		int _la;
		try {
			State = 3456;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,495,Context) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3420; Match(INTO);
				State = 3421; assignmentField();
				State = 3426;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3422; Match(COMMA);
					State = 3423; assignmentField();
					}
					}
					State = 3428;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3429; Match(INTO);
				State = 3430; Match(DUMPFILE);
				State = 3431; Match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 3432; Match(INTO);
				State = 3433; Match(OUTFILE);
				State = 3434; ((SelectIntoTextFileContext)_localctx).filename = Match(STRING_LITERAL);
				State = 3438;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CHARACTER) {
					{
					State = 3435; Match(CHARACTER);
					State = 3436; Match(SET);
					State = 3437; ((SelectIntoTextFileContext)_localctx).charset = charsetName();
					}
				}

				State = 3446;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,492,Context) ) {
				case 1:
					{
					State = 3440;
					((SelectIntoTextFileContext)_localctx).fieldsFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 3442;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 3441; selectFieldsInto();
						}
						}
						State = 3444;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
					}
					break;
				}
				State = 3454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINES) {
					{
					State = 3448; Match(LINES);
					State = 3450;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 3449; selectLinesInto();
						}
						}
						State = 3452;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFieldsIntoContext : ParserRuleContext {
		public IToken terminationField;
		public IToken enclosion;
		public IToken escaping;
		public ITerminalNode TERMINATED() { return GetToken(MySqlParser.TERMINATED, 0); }
		public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ITerminalNode ENCLOSED() { return GetToken(MySqlParser.ENCLOSED, 0); }
		public ITerminalNode OPTIONALLY() { return GetToken(MySqlParser.OPTIONALLY, 0); }
		public ITerminalNode ESCAPED() { return GetToken(MySqlParser.ESCAPED, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFieldsInto; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectFieldsInto(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectFieldsInto(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFieldsInto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFieldsIntoContext selectFieldsInto() {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(Context, State);
		EnterRule(_localctx, 242, RULE_selectFieldsInto);
		int _la;
		try {
			State = 3470;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TERMINATED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3458; Match(TERMINATED);
				State = 3459; Match(BY);
				State = 3460; _localctx.terminationField = Match(STRING_LITERAL);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONALLY) {
					{
					State = 3461; Match(OPTIONALLY);
					}
				}

				State = 3464; Match(ENCLOSED);
				State = 3465; Match(BY);
				State = 3466; _localctx.enclosion = Match(STRING_LITERAL);
				}
				break;
			case ESCAPED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3467; Match(ESCAPED);
				State = 3468; Match(BY);
				State = 3469; _localctx.escaping = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectLinesIntoContext : ParserRuleContext {
		public IToken starting;
		public IToken terminationLine;
		public ITerminalNode STARTING() { return GetToken(MySqlParser.STARTING, 0); }
		public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ITerminalNode TERMINATED() { return GetToken(MySqlParser.TERMINATED, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectLinesInto; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectLinesInto(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectLinesInto(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectLinesInto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectLinesIntoContext selectLinesInto() {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(Context, State);
		EnterRule(_localctx, 244, RULE_selectLinesInto);
		try {
			State = 3478;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STARTING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3472; Match(STARTING);
				State = 3473; Match(BY);
				State = 3474; _localctx.starting = Match(STRING_LITERAL);
				}
				break;
			case TERMINATED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3475; Match(TERMINATED);
				State = 3476; Match(BY);
				State = 3477; _localctx.terminationLine = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : ParserRuleContext {
		public ExpressionContext whereExpr;
		public ExpressionContext havingExpr;
		public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		public GroupByItemContext[] groupByItem() {
			return GetRuleContexts<GroupByItemContext>();
		}
		public GroupByItemContext groupByItem(int i) {
			return GetRuleContext<GroupByItemContext>(i);
		}
		public ITerminalNode HAVING() { return GetToken(MySqlParser.HAVING, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		public ITerminalNode ROLLUP() { return GetToken(MySqlParser.ROLLUP, 0); }
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(Context, State);
		EnterRule(_localctx, 246, RULE_fromClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3480; Match(FROM);
			State = 3481; tableSources();
			State = 3484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3482; Match(WHERE);
				State = 3483; _localctx.whereExpr = expression(0);
				}
			}

			State = 3500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GROUP) {
				{
				State = 3486; Match(GROUP);
				State = 3487; Match(BY);
				State = 3488; groupByItem();
				State = 3493;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3489; Match(COMMA);
					State = 3490; groupByItem();
					}
					}
					State = 3495;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3498;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,501,Context) ) {
				case 1:
					{
					State = 3496; Match(WITH);
					State = 3497; Match(ROLLUP);
					}
					break;
				}
				}
			}

			State = 3504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAVING) {
				{
				State = 3502; Match(HAVING);
				State = 3503; _localctx.havingExpr = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByItemContext : ParserRuleContext {
		public IToken order;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		public GroupByItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGroupByItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGroupByItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByItemContext groupByItem() {
		GroupByItemContext _localctx = new GroupByItemContext(Context, State);
		EnterRule(_localctx, 248, RULE_groupByItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3506; expression(0);
			State = 3508;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 3507;
				_localctx.order = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					_localctx.order = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseContext : ParserRuleContext {
		public DecimalLiteralContext offset;
		public DecimalLiteralContext limit;
		public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		public ITerminalNode OFFSET() { return GetToken(MySqlParser.OFFSET, 0); }
		public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		public LimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLimitClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLimitClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitClauseContext limitClause() {
		LimitClauseContext _localctx = new LimitClauseContext(Context, State);
		EnterRule(_localctx, 250, RULE_limitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3510; Match(LIMIT);
			State = 3521;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,506,Context) ) {
			case 1:
				{
				State = 3514;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,505,Context) ) {
				case 1:
					{
					State = 3511; _localctx.offset = decimalLiteral();
					State = 3512; Match(COMMA);
					}
					break;
				}
				State = 3516; _localctx.limit = decimalLiteral();
				}
				break;
			case 2:
				{
				State = 3517; _localctx.limit = decimalLiteral();
				State = 3518; Match(OFFSET);
				State = 3519; _localctx.offset = decimalLiteral();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartTransactionContext : ParserRuleContext {
		public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(MySqlParser.TRANSACTION, 0); }
		public TransactionModeContext[] transactionMode() {
			return GetRuleContexts<TransactionModeContext>();
		}
		public TransactionModeContext transactionMode(int i) {
			return GetRuleContext<TransactionModeContext>(i);
		}
		public StartTransactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startTransaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStartTransaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStartTransaction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartTransactionContext startTransaction() {
		StartTransactionContext _localctx = new StartTransactionContext(Context, State);
		EnterRule(_localctx, 252, RULE_startTransaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3523; Match(START);
			State = 3524; Match(TRANSACTION);
			State = 3533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==READ || _la==WITH) {
				{
				State = 3525; transactionMode();
				State = 3530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3526; Match(COMMA);
					State = 3527; transactionMode();
					}
					}
					State = 3532;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeginWorkContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
		public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beginWork; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBeginWork(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBeginWork(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeginWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeginWorkContext beginWork() {
		BeginWorkContext _localctx = new BeginWorkContext(Context, State);
		EnterRule(_localctx, 254, RULE_beginWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3535; Match(BEGIN);
			State = 3537;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 3536; Match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommitWorkContext : ParserRuleContext {
		public IToken nochain;
		public IToken norelease;
		public ITerminalNode COMMIT() { return GetToken(MySqlParser.COMMIT, 0); }
		public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		public ITerminalNode CHAIN() { return GetToken(MySqlParser.CHAIN, 0); }
		public ITerminalNode RELEASE() { return GetToken(MySqlParser.RELEASE, 0); }
		public ITerminalNode[] NO() { return GetTokens(MySqlParser.NO); }
		public ITerminalNode NO(int i) {
			return GetToken(MySqlParser.NO, i);
		}
		public CommitWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commitWork; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCommitWork(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCommitWork(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommitWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommitWorkContext commitWork() {
		CommitWorkContext _localctx = new CommitWorkContext(Context, State);
		EnterRule(_localctx, 256, RULE_commitWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3539; Match(COMMIT);
			State = 3541;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 3540; Match(WORK);
				}
			}

			State = 3548;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 3543; Match(AND);
				State = 3545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 3544; _localctx.nochain = Match(NO);
					}
				}

				State = 3547; Match(CHAIN);
				}
			}

			State = 3554;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RELEASE || _la==NO) {
				{
				State = 3551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 3550; _localctx.norelease = Match(NO);
					}
				}

				State = 3553; Match(RELEASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RollbackWorkContext : ParserRuleContext {
		public IToken nochain;
		public IToken norelease;
		public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
		public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		public ITerminalNode CHAIN() { return GetToken(MySqlParser.CHAIN, 0); }
		public ITerminalNode RELEASE() { return GetToken(MySqlParser.RELEASE, 0); }
		public ITerminalNode[] NO() { return GetTokens(MySqlParser.NO); }
		public ITerminalNode NO(int i) {
			return GetToken(MySqlParser.NO, i);
		}
		public RollbackWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollbackWork; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRollbackWork(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRollbackWork(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollbackWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RollbackWorkContext rollbackWork() {
		RollbackWorkContext _localctx = new RollbackWorkContext(Context, State);
		EnterRule(_localctx, 258, RULE_rollbackWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3556; Match(ROLLBACK);
			State = 3558;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 3557; Match(WORK);
				}
			}

			State = 3565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 3560; Match(AND);
				State = 3562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 3561; _localctx.nochain = Match(NO);
					}
				}

				State = 3564; Match(CHAIN);
				}
			}

			State = 3571;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RELEASE || _la==NO) {
				{
				State = 3568;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 3567; _localctx.norelease = Match(NO);
					}
				}

				State = 3570; Match(RELEASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepointStatementContext : ParserRuleContext {
		public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepointStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSavepointStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSavepointStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepointStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavepointStatementContext savepointStatement() {
		SavepointStatementContext _localctx = new SavepointStatementContext(Context, State);
		EnterRule(_localctx, 260, RULE_savepointStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3573; Match(SAVEPOINT);
			State = 3574; uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RollbackStatementContext : ParserRuleContext {
		public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
		public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
		public RollbackStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollbackStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRollbackStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRollbackStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollbackStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RollbackStatementContext rollbackStatement() {
		RollbackStatementContext _localctx = new RollbackStatementContext(Context, State);
		EnterRule(_localctx, 262, RULE_rollbackStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3576; Match(ROLLBACK);
			State = 3578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 3577; Match(WORK);
				}
			}

			State = 3580; Match(TO);
			State = 3582;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,521,Context) ) {
			case 1:
				{
				State = 3581; Match(SAVEPOINT);
				}
				break;
			}
			State = 3584; uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReleaseStatementContext : ParserRuleContext {
		public ITerminalNode RELEASE() { return GetToken(MySqlParser.RELEASE, 0); }
		public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ReleaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_releaseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReleaseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReleaseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReleaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReleaseStatementContext releaseStatement() {
		ReleaseStatementContext _localctx = new ReleaseStatementContext(Context, State);
		EnterRule(_localctx, 264, RULE_releaseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3586; Match(RELEASE);
			State = 3587; Match(SAVEPOINT);
			State = 3588; uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockTablesContext : ParserRuleContext {
		public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		public LockTableElementContext[] lockTableElement() {
			return GetRuleContexts<LockTableElementContext>();
		}
		public LockTableElementContext lockTableElement(int i) {
			return GetRuleContext<LockTableElementContext>(i);
		}
		public LockTablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockTables; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockTables(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockTables(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockTables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockTablesContext lockTables() {
		LockTablesContext _localctx = new LockTablesContext(Context, State);
		EnterRule(_localctx, 266, RULE_lockTables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3590; Match(LOCK);
			State = 3591; Match(TABLES);
			State = 3592; lockTableElement();
			State = 3597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3593; Match(COMMA);
				State = 3594; lockTableElement();
				}
				}
				State = 3599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockTablesContext : ParserRuleContext {
		public ITerminalNode UNLOCK() { return GetToken(MySqlParser.UNLOCK, 0); }
		public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		public UnlockTablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockTables; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnlockTables(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnlockTables(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockTables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockTablesContext unlockTables() {
		UnlockTablesContext _localctx = new UnlockTablesContext(Context, State);
		EnterRule(_localctx, 268, RULE_unlockTables);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3600; Match(UNLOCK);
			State = 3601; Match(TABLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetAutocommitStatementContext : ParserRuleContext {
		public IToken autocommitValue;
		public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		public ITerminalNode AUTOCOMMIT() { return GetToken(MySqlParser.AUTOCOMMIT, 0); }
		public SetAutocommitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setAutocommitStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetAutocommitStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetAutocommitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetAutocommitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetAutocommitStatementContext setAutocommitStatement() {
		SetAutocommitStatementContext _localctx = new SetAutocommitStatementContext(Context, State);
		EnterRule(_localctx, 270, RULE_setAutocommitStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3603; Match(SET);
			State = 3604; Match(AUTOCOMMIT);
			State = 3605; Match(EQUAL_SYMBOL);
			State = 3606;
			_localctx.autocommitValue = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				_localctx.autocommitValue = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetTransactionStatementContext : ParserRuleContext {
		public IToken transactionContext;
		public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(MySqlParser.TRANSACTION, 0); }
		public TransactionOptionContext[] transactionOption() {
			return GetRuleContexts<TransactionOptionContext>();
		}
		public TransactionOptionContext transactionOption(int i) {
			return GetRuleContext<TransactionOptionContext>(i);
		}
		public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
		public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
		public SetTransactionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setTransactionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetTransactionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetTransactionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetTransactionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetTransactionStatementContext setTransactionStatement() {
		SetTransactionStatementContext _localctx = new SetTransactionStatementContext(Context, State);
		EnterRule(_localctx, 272, RULE_setTransactionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3608; Match(SET);
			State = 3610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL || _la==SESSION) {
				{
				State = 3609;
				_localctx.transactionContext = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
					_localctx.transactionContext = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3612; Match(TRANSACTION);
			State = 3613; transactionOption();
			State = 3618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3614; Match(COMMA);
				State = 3615; transactionOption();
				}
				}
				State = 3620;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionModeContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		public ITerminalNode CONSISTENT() { return GetToken(MySqlParser.CONSISTENT, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(MySqlParser.SNAPSHOT, 0); }
		public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(MySqlParser.WRITE, 0); }
		public ITerminalNode ONLY() { return GetToken(MySqlParser.ONLY, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionMode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionMode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionMode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionModeContext transactionMode() {
		TransactionModeContext _localctx = new TransactionModeContext(Context, State);
		EnterRule(_localctx, 274, RULE_transactionMode);
		try {
			State = 3628;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,525,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3621; Match(WITH);
				State = 3622; Match(CONSISTENT);
				State = 3623; Match(SNAPSHOT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3624; Match(READ);
				State = 3625; Match(WRITE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3626; Match(READ);
				State = 3627; Match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockTableElementContext : ParserRuleContext {
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public LockActionContext lockAction() {
			return GetRuleContext<LockActionContext>(0);
		}
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public LockTableElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockTableElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockTableElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockTableElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockTableElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockTableElementContext lockTableElement() {
		LockTableElementContext _localctx = new LockTableElementContext(Context, State);
		EnterRule(_localctx, 276, RULE_lockTableElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3630; tableName();
			State = 3635;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || _la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
				{
				State = 3632;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3631; Match(AS);
					}
				}

				State = 3634; uid();
				}
			}

			State = 3637; lockAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockActionContext : ParserRuleContext {
		public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public ITerminalNode WRITE() { return GetToken(MySqlParser.WRITE, 0); }
		public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		public LockActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockActionContext lockAction() {
		LockActionContext _localctx = new LockActionContext(Context, State);
		EnterRule(_localctx, 278, RULE_lockAction);
		int _la;
		try {
			State = 3647;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3639; Match(READ);
				State = 3641;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL) {
					{
					State = 3640; Match(LOCAL);
					}
				}

				}
				break;
			case LOW_PRIORITY:
			case WRITE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3644;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOW_PRIORITY) {
					{
					State = 3643; Match(LOW_PRIORITY);
					}
				}

				State = 3646; Match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionOptionContext : ParserRuleContext {
		public ITerminalNode ISOLATION() { return GetToken(MySqlParser.ISOLATION, 0); }
		public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
		public TransactionLevelContext transactionLevel() {
			return GetRuleContext<TransactionLevelContext>(0);
		}
		public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(MySqlParser.WRITE, 0); }
		public ITerminalNode ONLY() { return GetToken(MySqlParser.ONLY, 0); }
		public TransactionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionOptionContext transactionOption() {
		TransactionOptionContext _localctx = new TransactionOptionContext(Context, State);
		EnterRule(_localctx, 280, RULE_transactionOption);
		try {
			State = 3656;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,531,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3649; Match(ISOLATION);
				State = 3650; Match(LEVEL);
				State = 3651; transactionLevel();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3652; Match(READ);
				State = 3653; Match(WRITE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3654; Match(READ);
				State = 3655; Match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionLevelContext : ParserRuleContext {
		public ITerminalNode REPEATABLE() { return GetToken(MySqlParser.REPEATABLE, 0); }
		public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		public ITerminalNode COMMITTED() { return GetToken(MySqlParser.COMMITTED, 0); }
		public ITerminalNode UNCOMMITTED() { return GetToken(MySqlParser.UNCOMMITTED, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionLevel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionLevel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionLevel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionLevelContext transactionLevel() {
		TransactionLevelContext _localctx = new TransactionLevelContext(Context, State);
		EnterRule(_localctx, 282, RULE_transactionLevel);
		try {
			State = 3665;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,532,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3658; Match(REPEATABLE);
				State = 3659; Match(READ);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3660; Match(READ);
				State = 3661; Match(COMMITTED);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3662; Match(READ);
				State = 3663; Match(UNCOMMITTED);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3664; Match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeMasterContext : ParserRuleContext {
		public ITerminalNode CHANGE() { return GetToken(MySqlParser.CHANGE, 0); }
		public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		public MasterOptionContext[] masterOption() {
			return GetRuleContexts<MasterOptionContext>();
		}
		public MasterOptionContext masterOption(int i) {
			return GetRuleContext<MasterOptionContext>(i);
		}
		public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeMaster; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeMaster(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeMaster(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeMaster(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeMasterContext changeMaster() {
		ChangeMasterContext _localctx = new ChangeMasterContext(Context, State);
		EnterRule(_localctx, 284, RULE_changeMaster);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3667; Match(CHANGE);
			State = 3668; Match(MASTER);
			State = 3669; Match(TO);
			State = 3670; masterOption();
			State = 3675;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3671; Match(COMMA);
				State = 3672; masterOption();
				}
				}
				State = 3677;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3679;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 3678; channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationFilterContext : ParserRuleContext {
		public ITerminalNode CHANGE() { return GetToken(MySqlParser.CHANGE, 0); }
		public ITerminalNode REPLICATION() { return GetToken(MySqlParser.REPLICATION, 0); }
		public ITerminalNode FILTER() { return GetToken(MySqlParser.FILTER, 0); }
		public ReplicationFilterContext[] replicationFilter() {
			return GetRuleContexts<ReplicationFilterContext>();
		}
		public ReplicationFilterContext replicationFilter(int i) {
			return GetRuleContext<ReplicationFilterContext>(i);
		}
		public ChangeReplicationFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationFilter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationFilter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationFilter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeReplicationFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationFilterContext changeReplicationFilter() {
		ChangeReplicationFilterContext _localctx = new ChangeReplicationFilterContext(Context, State);
		EnterRule(_localctx, 286, RULE_changeReplicationFilter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3681; Match(CHANGE);
			State = 3682; Match(REPLICATION);
			State = 3683; Match(FILTER);
			State = 3684; replicationFilter();
			State = 3689;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3685; Match(COMMA);
				State = 3686; replicationFilter();
				}
				}
				State = 3691;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PurgeBinaryLogsContext : ParserRuleContext {
		public IToken purgeFormat;
		public IToken fileName;
		public IToken timeValue;
		public ITerminalNode PURGE() { return GetToken(MySqlParser.PURGE, 0); }
		public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		public ITerminalNode BEFORE() { return GetToken(MySqlParser.BEFORE, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public PurgeBinaryLogsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_purgeBinaryLogs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPurgeBinaryLogs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPurgeBinaryLogs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPurgeBinaryLogs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PurgeBinaryLogsContext purgeBinaryLogs() {
		PurgeBinaryLogsContext _localctx = new PurgeBinaryLogsContext(Context, State);
		EnterRule(_localctx, 288, RULE_purgeBinaryLogs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3692; Match(PURGE);
			State = 3693;
			_localctx.purgeFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BINARY || _la==MASTER) ) {
				_localctx.purgeFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3694; Match(LOGS);
			State = 3699;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TO:
				{
				State = 3695; Match(TO);
				State = 3696; _localctx.fileName = Match(STRING_LITERAL);
				}
				break;
			case BEFORE:
				{
				State = 3697; Match(BEFORE);
				State = 3698; _localctx.timeValue = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetMasterContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
		public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		public ResetMasterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetMaster; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResetMaster(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResetMaster(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetMaster(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetMasterContext resetMaster() {
		ResetMasterContext _localctx = new ResetMasterContext(Context, State);
		EnterRule(_localctx, 290, RULE_resetMaster);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3701; Match(RESET);
			State = 3702; Match(MASTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetSlaveContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
		public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		public ResetSlaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetSlave; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResetSlave(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResetSlave(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetSlave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetSlaveContext resetSlave() {
		ResetSlaveContext _localctx = new ResetSlaveContext(Context, State);
		EnterRule(_localctx, 292, RULE_resetSlave);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3704; Match(RESET);
			State = 3705; Match(SLAVE);
			State = 3707;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL) {
				{
				State = 3706; Match(ALL);
				}
			}

			State = 3710;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 3709; channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartSlaveContext : ParserRuleContext {
		public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		public ThreadTypeContext[] threadType() {
			return GetRuleContexts<ThreadTypeContext>();
		}
		public ThreadTypeContext threadType(int i) {
			return GetRuleContext<ThreadTypeContext>(i);
		}
		public ITerminalNode UNTIL() { return GetToken(MySqlParser.UNTIL, 0); }
		public UntilOptionContext untilOption() {
			return GetRuleContext<UntilOptionContext>(0);
		}
		public ConnectionOptionContext[] connectionOption() {
			return GetRuleContexts<ConnectionOptionContext>();
		}
		public ConnectionOptionContext connectionOption(int i) {
			return GetRuleContext<ConnectionOptionContext>(i);
		}
		public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		public StartSlaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startSlave; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStartSlave(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStartSlave(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartSlave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartSlaveContext startSlave() {
		StartSlaveContext _localctx = new StartSlaveContext(Context, State);
		EnterRule(_localctx, 294, RULE_startSlave);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3712; Match(START);
			State = 3713; Match(SLAVE);
			State = 3722;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				State = 3714; threadType();
				State = 3719;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3715; Match(COMMA);
					State = 3716; threadType();
					}
					}
					State = 3721;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 3726;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNTIL) {
				{
				State = 3724; Match(UNTIL);
				State = 3725; untilOption();
				}
			}

			State = 3731;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT_AUTH || _la==PASSWORD || _la==PLUGIN_DIR || _la==USER) {
				{
				{
				State = 3728; connectionOption();
				}
				}
				State = 3733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3735;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 3734; channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopSlaveContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(MySqlParser.STOP, 0); }
		public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		public ThreadTypeContext[] threadType() {
			return GetRuleContexts<ThreadTypeContext>();
		}
		public ThreadTypeContext threadType(int i) {
			return GetRuleContext<ThreadTypeContext>(i);
		}
		public StopSlaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopSlave; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStopSlave(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStopSlave(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopSlave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopSlaveContext stopSlave() {
		StopSlaveContext _localctx = new StopSlaveContext(Context, State);
		EnterRule(_localctx, 296, RULE_stopSlave);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3737; Match(STOP);
			State = 3738; Match(SLAVE);
			State = 3747;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				State = 3739; threadType();
				State = 3744;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3740; Match(COMMA);
					State = 3741; threadType();
					}
					}
					State = 3746;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartGroupReplicationContext : ParserRuleContext {
		public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		public ITerminalNode GROUP_REPLICATION() { return GetToken(MySqlParser.GROUP_REPLICATION, 0); }
		public StartGroupReplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startGroupReplication; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStartGroupReplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStartGroupReplication(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartGroupReplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartGroupReplicationContext startGroupReplication() {
		StartGroupReplicationContext _localctx = new StartGroupReplicationContext(Context, State);
		EnterRule(_localctx, 298, RULE_startGroupReplication);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3749; Match(START);
			State = 3750; Match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopGroupReplicationContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(MySqlParser.STOP, 0); }
		public ITerminalNode GROUP_REPLICATION() { return GetToken(MySqlParser.GROUP_REPLICATION, 0); }
		public StopGroupReplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopGroupReplication; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStopGroupReplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStopGroupReplication(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopGroupReplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopGroupReplicationContext stopGroupReplication() {
		StopGroupReplicationContext _localctx = new StopGroupReplicationContext(Context, State);
		EnterRule(_localctx, 300, RULE_stopGroupReplication);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3752; Match(STOP);
			State = 3753; Match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MasterOptionContext : ParserRuleContext {
		public MasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_masterOption; } }
	 
		public MasterOptionContext() { }
		public virtual void CopyFrom(MasterOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MasterStringOptionContext : MasterOptionContext {
		public StringMasterOptionContext stringMasterOption() {
			return GetRuleContext<StringMasterOptionContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public MasterStringOptionContext(MasterOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterStringOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterStringOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterStringOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterRealOptionContext : MasterOptionContext {
		public ITerminalNode MASTER_HEARTBEAT_PERIOD() { return GetToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public ITerminalNode REAL_LITERAL() { return GetToken(MySqlParser.REAL_LITERAL, 0); }
		public MasterRealOptionContext(MasterOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterRealOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterRealOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterRealOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterBoolOptionContext : MasterOptionContext {
		public IToken boolVal;
		public BoolMasterOptionContext boolMasterOption() {
			return GetRuleContext<BoolMasterOptionContext>(0);
		}
		public MasterBoolOptionContext(MasterOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterBoolOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterBoolOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterBoolOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterUidListOptionContext : MasterOptionContext {
		public ITerminalNode IGNORE_SERVER_IDS() { return GetToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public MasterUidListOptionContext(MasterOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterUidListOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterUidListOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterUidListOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterDecimalOptionContext : MasterOptionContext {
		public DecimalMasterOptionContext decimalMasterOption() {
			return GetRuleContext<DecimalMasterOptionContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public MasterDecimalOptionContext(MasterOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterDecimalOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterDecimalOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterDecimalOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MasterOptionContext masterOption() {
		MasterOptionContext _localctx = new MasterOptionContext(Context, State);
		EnterRule(_localctx, 302, RULE_masterOption);
		int _la;
		try {
			State = 3784;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MASTER_BIND:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_PASSWORD:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case RELAY_LOG_FILE:
				_localctx = new MasterStringOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3755; stringMasterOption();
				State = 3756; Match(EQUAL_SYMBOL);
				State = 3757; Match(STRING_LITERAL);
				}
				break;
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_LOG_POS:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case RELAY_LOG_POS:
				_localctx = new MasterDecimalOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3759; decimalMasterOption();
				State = 3760; Match(EQUAL_SYMBOL);
				State = 3761; decimalLiteral();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MASTER_AUTO_POSITION:
			case MASTER_SSL:
				_localctx = new MasterBoolOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3763; boolMasterOption();
				State = 3764; Match(EQUAL_SYMBOL);
				State = 3765;
				((MasterBoolOptionContext)_localctx).boolVal = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((MasterBoolOptionContext)_localctx).boolVal = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterRealOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3767; Match(MASTER_HEARTBEAT_PERIOD);
				State = 3768; Match(EQUAL_SYMBOL);
				State = 3769; Match(REAL_LITERAL);
				}
				break;
			case IGNORE_SERVER_IDS:
				_localctx = new MasterUidListOptionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3770; Match(IGNORE_SERVER_IDS);
				State = 3771; Match(EQUAL_SYMBOL);
				State = 3772; Match(LR_BRACKET);
				State = 3781;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
					{
					State = 3773; uid();
					State = 3778;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 3774; Match(COMMA);
						State = 3775; uid();
						}
						}
						State = 3780;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 3783; Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringMasterOptionContext : ParserRuleContext {
		public ITerminalNode MASTER_BIND() { return GetToken(MySqlParser.MASTER_BIND, 0); }
		public ITerminalNode MASTER_HOST() { return GetToken(MySqlParser.MASTER_HOST, 0); }
		public ITerminalNode MASTER_USER() { return GetToken(MySqlParser.MASTER_USER, 0); }
		public ITerminalNode MASTER_PASSWORD() { return GetToken(MySqlParser.MASTER_PASSWORD, 0); }
		public ITerminalNode MASTER_LOG_FILE() { return GetToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public ITerminalNode RELAY_LOG_FILE() { return GetToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public ITerminalNode MASTER_SSL_CA() { return GetToken(MySqlParser.MASTER_SSL_CA, 0); }
		public ITerminalNode MASTER_SSL_CAPATH() { return GetToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		public ITerminalNode MASTER_SSL_CERT() { return GetToken(MySqlParser.MASTER_SSL_CERT, 0); }
		public ITerminalNode MASTER_SSL_CRL() { return GetToken(MySqlParser.MASTER_SSL_CRL, 0); }
		public ITerminalNode MASTER_SSL_CRLPATH() { return GetToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		public ITerminalNode MASTER_SSL_KEY() { return GetToken(MySqlParser.MASTER_SSL_KEY, 0); }
		public ITerminalNode MASTER_SSL_CIPHER() { return GetToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		public ITerminalNode MASTER_TLS_VERSION() { return GetToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public StringMasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringMasterOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStringMasterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStringMasterOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringMasterOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringMasterOptionContext stringMasterOption() {
		StringMasterOptionContext _localctx = new StringMasterOptionContext(Context, State);
		EnterRule(_localctx, 304, RULE_stringMasterOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3786;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_BIND || ((((_la - 376)) & ~0x3f) == 0 && ((1L << (_la - 376)) & ((1L << (MASTER_HOST - 376)) | (1L << (MASTER_LOG_FILE - 376)) | (1L << (MASTER_PASSWORD - 376)) | (1L << (MASTER_SSL_CA - 376)) | (1L << (MASTER_SSL_CAPATH - 376)) | (1L << (MASTER_SSL_CERT - 376)) | (1L << (MASTER_SSL_CIPHER - 376)) | (1L << (MASTER_SSL_CRL - 376)) | (1L << (MASTER_SSL_CRLPATH - 376)) | (1L << (MASTER_SSL_KEY - 376)) | (1L << (MASTER_TLS_VERSION - 376)) | (1L << (MASTER_USER - 376)))) != 0) || _la==RELAY_LOG_FILE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalMasterOptionContext : ParserRuleContext {
		public ITerminalNode MASTER_PORT() { return GetToken(MySqlParser.MASTER_PORT, 0); }
		public ITerminalNode MASTER_CONNECT_RETRY() { return GetToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		public ITerminalNode MASTER_RETRY_COUNT() { return GetToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		public ITerminalNode MASTER_DELAY() { return GetToken(MySqlParser.MASTER_DELAY, 0); }
		public ITerminalNode MASTER_LOG_POS() { return GetToken(MySqlParser.MASTER_LOG_POS, 0); }
		public ITerminalNode RELAY_LOG_POS() { return GetToken(MySqlParser.RELAY_LOG_POS, 0); }
		public DecimalMasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalMasterOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDecimalMasterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDecimalMasterOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalMasterOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalMasterOptionContext decimalMasterOption() {
		DecimalMasterOptionContext _localctx = new DecimalMasterOptionContext(Context, State);
		EnterRule(_localctx, 306, RULE_decimalMasterOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3788;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & ((1L << (MASTER_CONNECT_RETRY - 373)) | (1L << (MASTER_DELAY - 373)) | (1L << (MASTER_LOG_POS - 373)) | (1L << (MASTER_PORT - 373)) | (1L << (MASTER_RETRY_COUNT - 373)))) != 0) || _la==RELAY_LOG_POS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolMasterOptionContext : ParserRuleContext {
		public ITerminalNode MASTER_AUTO_POSITION() { return GetToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		public ITerminalNode MASTER_SSL() { return GetToken(MySqlParser.MASTER_SSL, 0); }
		public ITerminalNode MASTER_SSL_VERIFY_SERVER_CERT() { return GetToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
		public BoolMasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolMasterOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBoolMasterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBoolMasterOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolMasterOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolMasterOptionContext boolMasterOption() {
		BoolMasterOptionContext _localctx = new BoolMasterOptionContext(Context, State);
		EnterRule(_localctx, 308, RULE_boolMasterOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3790;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT || _la==MASTER_AUTO_POSITION || _la==MASTER_SSL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelOptionContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		public ITerminalNode CHANNEL() { return GetToken(MySqlParser.CHANNEL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ChannelOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channelOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChannelOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChannelOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChannelOptionContext channelOption() {
		ChannelOptionContext _localctx = new ChannelOptionContext(Context, State);
		EnterRule(_localctx, 310, RULE_channelOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3792; Match(FOR);
			State = 3793; Match(CHANNEL);
			State = 3794; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationFilterContext : ParserRuleContext {
		public ReplicationFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationFilter; } }
	 
		public ReplicationFilterContext() { }
		public virtual void CopyFrom(ReplicationFilterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WildIgnoreTableReplicationContext : ReplicationFilterContext {
		public ITerminalNode REPLICATE_WILD_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public SimpleStringsContext simpleStrings() {
			return GetRuleContext<SimpleStringsContext>(0);
		}
		public WildIgnoreTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWildIgnoreTableReplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWildIgnoreTableReplication(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildIgnoreTableReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoTableReplicationContext : ReplicationFilterContext {
		public ITerminalNode REPLICATE_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		public DoTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDoTableReplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDoTableReplication(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoTableReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IgnoreTableReplicationContext : ReplicationFilterContext {
		public ITerminalNode REPLICATE_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		public IgnoreTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIgnoreTableReplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIgnoreTableReplication(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIgnoreTableReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RewriteDbReplicationContext : ReplicationFilterContext {
		public ITerminalNode REPLICATE_REWRITE_DB() { return GetToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		public TablePairContext[] tablePair() {
			return GetRuleContexts<TablePairContext>();
		}
		public TablePairContext tablePair(int i) {
			return GetRuleContext<TablePairContext>(i);
		}
		public RewriteDbReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRewriteDbReplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRewriteDbReplication(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRewriteDbReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoDbReplicationContext : ReplicationFilterContext {
		public ITerminalNode REPLICATE_DO_DB() { return GetToken(MySqlParser.REPLICATE_DO_DB, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public DoDbReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDoDbReplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDoDbReplication(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoDbReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IgnoreDbReplicationContext : ReplicationFilterContext {
		public ITerminalNode REPLICATE_IGNORE_DB() { return GetToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public IgnoreDbReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIgnoreDbReplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIgnoreDbReplication(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIgnoreDbReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WildDoTableReplicationContext : ReplicationFilterContext {
		public ITerminalNode REPLICATE_WILD_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public SimpleStringsContext simpleStrings() {
			return GetRuleContext<SimpleStringsContext>(0);
		}
		public WildDoTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWildDoTableReplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWildDoTableReplication(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildDoTableReplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationFilterContext replicationFilter() {
		ReplicationFilterContext _localctx = new ReplicationFilterContext(Context, State);
		EnterRule(_localctx, 312, RULE_replicationFilter);
		int _la;
		try {
			State = 3845;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPLICATE_DO_DB:
				_localctx = new DoDbReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3796; Match(REPLICATE_DO_DB);
				State = 3797; Match(EQUAL_SYMBOL);
				State = 3798; Match(LR_BRACKET);
				State = 3799; uidList();
				State = 3800; Match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_DB:
				_localctx = new IgnoreDbReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3802; Match(REPLICATE_IGNORE_DB);
				State = 3803; Match(EQUAL_SYMBOL);
				State = 3804; Match(LR_BRACKET);
				State = 3805; uidList();
				State = 3806; Match(RR_BRACKET);
				}
				break;
			case REPLICATE_DO_TABLE:
				_localctx = new DoTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3808; Match(REPLICATE_DO_TABLE);
				State = 3809; Match(EQUAL_SYMBOL);
				State = 3810; Match(LR_BRACKET);
				State = 3811; tables();
				State = 3812; Match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_TABLE:
				_localctx = new IgnoreTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3814; Match(REPLICATE_IGNORE_TABLE);
				State = 3815; Match(EQUAL_SYMBOL);
				State = 3816; Match(LR_BRACKET);
				State = 3817; tables();
				State = 3818; Match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_DO_TABLE:
				_localctx = new WildDoTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3820; Match(REPLICATE_WILD_DO_TABLE);
				State = 3821; Match(EQUAL_SYMBOL);
				State = 3822; Match(LR_BRACKET);
				State = 3823; simpleStrings();
				State = 3824; Match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new WildIgnoreTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 3826; Match(REPLICATE_WILD_IGNORE_TABLE);
				State = 3827; Match(EQUAL_SYMBOL);
				State = 3828; Match(LR_BRACKET);
				State = 3829; simpleStrings();
				State = 3830; Match(RR_BRACKET);
				}
				break;
			case REPLICATE_REWRITE_DB:
				_localctx = new RewriteDbReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 3832; Match(REPLICATE_REWRITE_DB);
				State = 3833; Match(EQUAL_SYMBOL);
				State = 3834; Match(LR_BRACKET);
				State = 3835; tablePair();
				State = 3840;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3836; Match(COMMA);
					State = 3837; tablePair();
					}
					}
					State = 3842;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3843; Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablePairContext : ParserRuleContext {
		public TableNameContext firstTable;
		public TableNameContext secondTable;
		public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		public TablePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablePair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTablePair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTablePair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablePairContext tablePair() {
		TablePairContext _localctx = new TablePairContext(Context, State);
		EnterRule(_localctx, 314, RULE_tablePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3847; Match(LR_BRACKET);
			State = 3848; _localctx.firstTable = tableName();
			State = 3849; Match(COMMA);
			State = 3850; _localctx.secondTable = tableName();
			State = 3851; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThreadTypeContext : ParserRuleContext {
		public ITerminalNode IO_THREAD() { return GetToken(MySqlParser.IO_THREAD, 0); }
		public ITerminalNode SQL_THREAD() { return GetToken(MySqlParser.SQL_THREAD, 0); }
		public ThreadTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_threadType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterThreadType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitThreadType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThreadType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThreadTypeContext threadType() {
		ThreadTypeContext _localctx = new ThreadTypeContext(Context, State);
		EnterRule(_localctx, 316, RULE_threadType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3853;
			_la = TokenStream.LA(1);
			if ( !(_la==IO_THREAD || _la==SQL_THREAD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilOptionContext : ParserRuleContext {
		public UntilOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilOption; } }
	 
		public UntilOptionContext() { }
		public virtual void CopyFrom(UntilOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GtidsUntilOptionContext : UntilOptionContext {
		public IToken gtids;
		public GtuidSetContext gtuidSet() {
			return GetRuleContext<GtuidSetContext>(0);
		}
		public ITerminalNode SQL_BEFORE_GTIDS() { return GetToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		public ITerminalNode SQL_AFTER_GTIDS() { return GetToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public GtidsUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGtidsUntilOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGtidsUntilOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGtidsUntilOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SqlGapsUntilOptionContext : UntilOptionContext {
		public ITerminalNode SQL_AFTER_MTS_GAPS() { return GetToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public SqlGapsUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSqlGapsUntilOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSqlGapsUntilOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlGapsUntilOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterLogUntilOptionContext : UntilOptionContext {
		public ITerminalNode MASTER_LOG_FILE() { return GetToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ITerminalNode MASTER_LOG_POS() { return GetToken(MySqlParser.MASTER_LOG_POS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public MasterLogUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterLogUntilOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterLogUntilOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterLogUntilOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelayLogUntilOptionContext : UntilOptionContext {
		public ITerminalNode RELAY_LOG_FILE() { return GetToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ITerminalNode RELAY_LOG_POS() { return GetToken(MySqlParser.RELAY_LOG_POS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public RelayLogUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRelayLogUntilOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRelayLogUntilOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelayLogUntilOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntilOptionContext untilOption() {
		UntilOptionContext _localctx = new UntilOptionContext(Context, State);
		EnterRule(_localctx, 318, RULE_untilOption);
		int _la;
		try {
			State = 3873;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SQL_AFTER_GTIDS:
			case SQL_BEFORE_GTIDS:
				_localctx = new GtidsUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3855;
				((GtidsUntilOptionContext)_localctx).gtids = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS || _la==SQL_BEFORE_GTIDS) ) {
					((GtidsUntilOptionContext)_localctx).gtids = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3856; Match(EQUAL_SYMBOL);
				State = 3857; gtuidSet();
				}
				break;
			case MASTER_LOG_FILE:
				_localctx = new MasterLogUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3858; Match(MASTER_LOG_FILE);
				State = 3859; Match(EQUAL_SYMBOL);
				State = 3860; Match(STRING_LITERAL);
				State = 3861; Match(COMMA);
				State = 3862; Match(MASTER_LOG_POS);
				State = 3863; Match(EQUAL_SYMBOL);
				State = 3864; decimalLiteral();
				}
				break;
			case RELAY_LOG_FILE:
				_localctx = new RelayLogUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3865; Match(RELAY_LOG_FILE);
				State = 3866; Match(EQUAL_SYMBOL);
				State = 3867; Match(STRING_LITERAL);
				State = 3868; Match(COMMA);
				State = 3869; Match(RELAY_LOG_POS);
				State = 3870; Match(EQUAL_SYMBOL);
				State = 3871; decimalLiteral();
				}
				break;
			case SQL_AFTER_MTS_GAPS:
				_localctx = new SqlGapsUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3872; Match(SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectionOptionContext : ParserRuleContext {
		public ConnectionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connectionOption; } }
	 
		public ConnectionOptionContext() { }
		public virtual void CopyFrom(ConnectionOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PluginDirConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptPluginDir;
		public ITerminalNode PLUGIN_DIR() { return GetToken(MySqlParser.PLUGIN_DIR, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public PluginDirConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPluginDirConnectionOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPluginDirConnectionOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPluginDirConnectionOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UserConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptUser;
		public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public UserConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserConnectionOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserConnectionOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserConnectionOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultAuthConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptDefAuth;
		public ITerminalNode DEFAULT_AUTH() { return GetToken(MySqlParser.DEFAULT_AUTH, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public DefaultAuthConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefaultAuthConnectionOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefaultAuthConnectionOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultAuthConnectionOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PasswordConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptPassword;
		public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public PasswordConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPasswordConnectionOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPasswordConnectionOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPasswordConnectionOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConnectionOptionContext connectionOption() {
		ConnectionOptionContext _localctx = new ConnectionOptionContext(Context, State);
		EnterRule(_localctx, 320, RULE_connectionOption);
		try {
			State = 3887;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USER:
				_localctx = new UserConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3875; Match(USER);
				State = 3876; Match(EQUAL_SYMBOL);
				State = 3877; ((UserConnectionOptionContext)_localctx).conOptUser = Match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				_localctx = new PasswordConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3878; Match(PASSWORD);
				State = 3879; Match(EQUAL_SYMBOL);
				State = 3880; ((PasswordConnectionOptionContext)_localctx).conOptPassword = Match(STRING_LITERAL);
				}
				break;
			case DEFAULT_AUTH:
				_localctx = new DefaultAuthConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3881; Match(DEFAULT_AUTH);
				State = 3882; Match(EQUAL_SYMBOL);
				State = 3883; ((DefaultAuthConnectionOptionContext)_localctx).conOptDefAuth = Match(STRING_LITERAL);
				}
				break;
			case PLUGIN_DIR:
				_localctx = new PluginDirConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3884; Match(PLUGIN_DIR);
				State = 3885; Match(EQUAL_SYMBOL);
				State = 3886; ((PluginDirConnectionOptionContext)_localctx).conOptPluginDir = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GtuidSetContext : ParserRuleContext {
		public UuidSetContext[] uuidSet() {
			return GetRuleContexts<UuidSetContext>();
		}
		public UuidSetContext uuidSet(int i) {
			return GetRuleContext<UuidSetContext>(i);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public GtuidSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gtuidSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGtuidSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGtuidSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGtuidSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GtuidSetContext gtuidSet() {
		GtuidSetContext _localctx = new GtuidSetContext(Context, State);
		EnterRule(_localctx, 322, RULE_gtuidSet);
		int _la;
		try {
			State = 3898;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3889; uuidSet();
				State = 3894;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3890; Match(COMMA);
					State = 3891; uuidSet();
					}
					}
					State = 3896;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3897; Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaStartTransactionContext : ParserRuleContext {
		public IToken xaStart;
		public IToken xaAction;
		public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
		public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		public ITerminalNode RESUME() { return GetToken(MySqlParser.RESUME, 0); }
		public XaStartTransactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaStartTransaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXaStartTransaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXaStartTransaction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaStartTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaStartTransactionContext xaStartTransaction() {
		XaStartTransactionContext _localctx = new XaStartTransactionContext(Context, State);
		EnterRule(_localctx, 324, RULE_xaStartTransaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3900; Match(XA);
			State = 3901;
			_localctx.xaStart = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BEGIN || _la==START) ) {
				_localctx.xaStart = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3902; xid();
			State = 3904;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==JOIN || _la==RESUME) {
				{
				State = 3903;
				_localctx.xaAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==JOIN || _la==RESUME) ) {
					_localctx.xaAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaEndTransactionContext : ParserRuleContext {
		public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public ITerminalNode SUSPEND() { return GetToken(MySqlParser.SUSPEND, 0); }
		public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		public ITerminalNode MIGRATE() { return GetToken(MySqlParser.MIGRATE, 0); }
		public XaEndTransactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaEndTransaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXaEndTransaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXaEndTransaction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaEndTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaEndTransactionContext xaEndTransaction() {
		XaEndTransactionContext _localctx = new XaEndTransactionContext(Context, State);
		EnterRule(_localctx, 326, RULE_xaEndTransaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3906; Match(XA);
			State = 3907; Match(END);
			State = 3908; xid();
			State = 3914;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUSPEND) {
				{
				State = 3909; Match(SUSPEND);
				State = 3912;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 3910; Match(FOR);
					State = 3911; Match(MIGRATE);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaPrepareStatementContext : ParserRuleContext {
		public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
		public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public XaPrepareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaPrepareStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXaPrepareStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXaPrepareStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaPrepareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaPrepareStatementContext xaPrepareStatement() {
		XaPrepareStatementContext _localctx = new XaPrepareStatementContext(Context, State);
		EnterRule(_localctx, 328, RULE_xaPrepareStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3916; Match(XA);
			State = 3917; Match(PREPARE);
			State = 3918; xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaCommitWorkContext : ParserRuleContext {
		public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		public ITerminalNode COMMIT() { return GetToken(MySqlParser.COMMIT, 0); }
		public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public ITerminalNode ONE() { return GetToken(MySqlParser.ONE, 0); }
		public ITerminalNode PHASE() { return GetToken(MySqlParser.PHASE, 0); }
		public XaCommitWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaCommitWork; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXaCommitWork(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXaCommitWork(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaCommitWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaCommitWorkContext xaCommitWork() {
		XaCommitWorkContext _localctx = new XaCommitWorkContext(Context, State);
		EnterRule(_localctx, 330, RULE_xaCommitWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3920; Match(XA);
			State = 3921; Match(COMMIT);
			State = 3922; xid();
			State = 3925;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ONE) {
				{
				State = 3923; Match(ONE);
				State = 3924; Match(PHASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaRollbackWorkContext : ParserRuleContext {
		public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
		public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public XaRollbackWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaRollbackWork; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXaRollbackWork(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXaRollbackWork(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaRollbackWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaRollbackWorkContext xaRollbackWork() {
		XaRollbackWorkContext _localctx = new XaRollbackWorkContext(Context, State);
		EnterRule(_localctx, 332, RULE_xaRollbackWork);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3927; Match(XA);
			State = 3928; Match(ROLLBACK);
			State = 3929; xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaRecoverWorkContext : ParserRuleContext {
		public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		public ITerminalNode RECOVER() { return GetToken(MySqlParser.RECOVER, 0); }
		public ITerminalNode CONVERT() { return GetToken(MySqlParser.CONVERT, 0); }
		public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public XaRecoverWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaRecoverWork; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXaRecoverWork(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXaRecoverWork(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaRecoverWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaRecoverWorkContext xaRecoverWork() {
		XaRecoverWorkContext _localctx = new XaRecoverWorkContext(Context, State);
		EnterRule(_localctx, 334, RULE_xaRecoverWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3931; Match(XA);
			State = 3932; Match(RECOVER);
			State = 3935;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONVERT) {
				{
				State = 3933; Match(CONVERT);
				State = 3934; xid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrepareStatementContext : ParserRuleContext {
		public IToken query;
		public IToken variable;
		public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		public PrepareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prepareStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrepareStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrepareStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrepareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrepareStatementContext prepareStatement() {
		PrepareStatementContext _localctx = new PrepareStatementContext(Context, State);
		EnterRule(_localctx, 336, RULE_prepareStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3937; Match(PREPARE);
			State = 3938; uid();
			State = 3939; Match(FROM);
			State = 3942;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
				{
				State = 3940; _localctx.query = Match(STRING_LITERAL);
				}
				break;
			case LOCAL_ID:
				{
				State = 3941; _localctx.variable = Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteStatementContext : ParserRuleContext {
		public ITerminalNode EXECUTE() { return GetToken(MySqlParser.EXECUTE, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		public UserVariablesContext userVariables() {
			return GetRuleContext<UserVariablesContext>(0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExecuteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExecuteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecuteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteStatementContext executeStatement() {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(Context, State);
		EnterRule(_localctx, 338, RULE_executeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3944; Match(EXECUTE);
			State = 3945; uid();
			State = 3948;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 3946; Match(USING);
				State = 3947; userVariables();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeallocatePrepareContext : ParserRuleContext {
		public IToken dropFormat;
		public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode DEALLOCATE() { return GetToken(MySqlParser.DEALLOCATE, 0); }
		public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public DeallocatePrepareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deallocatePrepare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeallocatePrepare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeallocatePrepare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeallocatePrepare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeallocatePrepareContext deallocatePrepare() {
		DeallocatePrepareContext _localctx = new DeallocatePrepareContext(Context, State);
		EnterRule(_localctx, 340, RULE_deallocatePrepare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3950;
			_localctx.dropFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DROP || _la==DEALLOCATE) ) {
				_localctx.dropFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3951; Match(PREPARE);
			State = 3952; uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineBodyContext : ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public SqlStatementContext sqlStatement() {
			return GetRuleContext<SqlStatementContext>(0);
		}
		public RoutineBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineBodyContext routineBody() {
		RoutineBodyContext _localctx = new RoutineBodyContext(Context, State);
		EnterRule(_localctx, 342, RULE_routineBody);
		try {
			State = 3956;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,562,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3954; blockStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3955; sqlStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public DeclareVariableContext[] declareVariable() {
			return GetRuleContexts<DeclareVariableContext>();
		}
		public DeclareVariableContext declareVariable(int i) {
			return GetRuleContext<DeclareVariableContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(MySqlParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(MySqlParser.SEMI, i);
		}
		public DeclareConditionContext[] declareCondition() {
			return GetRuleContexts<DeclareConditionContext>();
		}
		public DeclareConditionContext declareCondition(int i) {
			return GetRuleContext<DeclareConditionContext>(i);
		}
		public DeclareCursorContext[] declareCursor() {
			return GetRuleContexts<DeclareCursorContext>();
		}
		public DeclareCursorContext declareCursor(int i) {
			return GetRuleContext<DeclareCursorContext>(i);
		}
		public DeclareHandlerContext[] declareHandler() {
			return GetRuleContexts<DeclareHandlerContext>();
		}
		public DeclareHandlerContext declareHandler(int i) {
			return GetRuleContext<DeclareHandlerContext>(i);
		}
		public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 344, RULE_blockStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3961;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,563,Context) ) {
			case 1:
				{
				State = 3958; uid();
				State = 3959; Match(COLON_SYMB);
				}
				break;
			}
			State = 3963; Match(BEGIN);
			State = 4001;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DATABASE - 7)) | (1L << (DECLARE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (UNLOCK - 155)) | (1L << (UPDATE - 155)) | (1L << (USE - 155)) | (1L << (WHILE - 155)) | (1L << (DATE - 155)) | (1L << (TIME - 155)) | (1L << (TIMESTAMP - 155)) | (1L << (DATETIME - 155)) | (1L << (YEAR - 155)) | (1L << (TEXT - 155)) | (1L << (ENUM - 155)) | (1L << (COUNT - 155)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (POSITION - 236)) | (1L << (ACCOUNT - 236)) | (1L << (ACTION - 236)) | (1L << (AFTER - 236)) | (1L << (AGGREGATE - 236)) | (1L << (ALGORITHM - 236)) | (1L << (ANY - 236)) | (1L << (AT - 236)) | (1L << (AUTHORS - 236)) | (1L << (AUTOCOMMIT - 236)) | (1L << (AUTOEXTEND_SIZE - 236)) | (1L << (AUTO_INCREMENT - 236)) | (1L << (AVG_ROW_LENGTH - 236)) | (1L << (BEGIN - 236)) | (1L << (BINLOG - 236)) | (1L << (BIT - 236)) | (1L << (BLOCK - 236)) | (1L << (BOOL - 236)) | (1L << (BOOLEAN - 236)) | (1L << (BTREE - 236)) | (1L << (CACHE - 236)) | (1L << (CASCADED - 236)) | (1L << (CHAIN - 236)) | (1L << (CHANNEL - 236)) | (1L << (CHECKSUM - 236)) | (1L << (CIPHER - 236)) | (1L << (CLIENT - 236)) | (1L << (CLOSE - 236)) | (1L << (COALESCE - 236)) | (1L << (CODE - 236)) | (1L << (COLUMNS - 236)) | (1L << (COLUMN_FORMAT - 236)) | (1L << (COMMENT - 236)) | (1L << (COMMIT - 236)) | (1L << (COMPACT - 236)) | (1L << (COMPLETION - 236)) | (1L << (COMPRESSED - 236)) | (1L << (COMPRESSION - 236)) | (1L << (CONCURRENT - 236)) | (1L << (CONNECTION - 236)) | (1L << (CONSISTENT - 236)) | (1L << (CONTAINS - 236)) | (1L << (CONTEXT - 236)) | (1L << (CONTRIBUTORS - 236)) | (1L << (COPY - 236)) | (1L << (CPU - 236)) | (1L << (DATA - 236)) | (1L << (DATAFILE - 236)) | (1L << (DEALLOCATE - 236)) | (1L << (DEFAULT_AUTH - 236)) | (1L << (DEFINER - 236)) | (1L << (DELAY_KEY_WRITE - 236)) | (1L << (DIRECTORY - 236)) | (1L << (DISABLE - 236)) | (1L << (DISCARD - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DISK - 300)) | (1L << (DO - 300)) | (1L << (DUMPFILE - 300)) | (1L << (DUPLICATE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENABLE - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (ENDS - 300)) | (1L << (ENGINE - 300)) | (1L << (ENGINES - 300)) | (1L << (ERROR - 300)) | (1L << (ERRORS - 300)) | (1L << (ESCAPE - 300)) | (1L << (EVEN - 300)) | (1L << (EVENT - 300)) | (1L << (EVENTS - 300)) | (1L << (EVERY - 300)) | (1L << (EXCHANGE - 300)) | (1L << (EXCLUSIVE - 300)) | (1L << (EXPIRE - 300)) | (1L << (EXTENT_SIZE - 300)) | (1L << (FAULTS - 300)) | (1L << (FIELDS - 300)) | (1L << (FILE_BLOCK_SIZE - 300)) | (1L << (FILTER - 300)) | (1L << (FIRST - 300)) | (1L << (FIXED - 300)) | (1L << (FLUSH - 300)) | (1L << (FOLLOWS - 300)) | (1L << (FULL - 300)) | (1L << (FUNCTION - 300)) | (1L << (GLOBAL - 300)) | (1L << (GRANTS - 300)) | (1L << (GROUP_REPLICATION - 300)) | (1L << (HANDLER - 300)) | (1L << (HASH - 300)) | (1L << (HELP - 300)) | (1L << (HOST - 300)) | (1L << (IDENTIFIED - 300)) | (1L << (IGNORE_SERVER_IDS - 300)) | (1L << (IMPORT - 300)) | (1L << (INDEXES - 300)) | (1L << (INITIAL_SIZE - 300)) | (1L << (INPLACE - 300)) | (1L << (INSERT_METHOD - 300)) | (1L << (INSTALL - 300)) | (1L << (INSTANCE - 300)) | (1L << (INVOKER - 300)) | (1L << (IO - 300)) | (1L << (IO_THREAD - 300)) | (1L << (IPC - 300)) | (1L << (ISOLATION - 300)) | (1L << (ISSUER - 300)) | (1L << (KEY_BLOCK_SIZE - 300)) | (1L << (LANGUAGE - 300)) | (1L << (LAST - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (LEAVES - 364)) | (1L << (LESS - 364)) | (1L << (LEVEL - 364)) | (1L << (LIST - 364)) | (1L << (LOCAL - 364)) | (1L << (LOGFILE - 364)) | (1L << (LOGS - 364)) | (1L << (MASTER - 364)) | (1L << (MASTER_AUTO_POSITION - 364)) | (1L << (MASTER_CONNECT_RETRY - 364)) | (1L << (MASTER_DELAY - 364)) | (1L << (MASTER_HEARTBEAT_PERIOD - 364)) | (1L << (MASTER_HOST - 364)) | (1L << (MASTER_LOG_FILE - 364)) | (1L << (MASTER_LOG_POS - 364)) | (1L << (MASTER_PASSWORD - 364)) | (1L << (MASTER_PORT - 364)) | (1L << (MASTER_RETRY_COUNT - 364)) | (1L << (MASTER_SSL - 364)) | (1L << (MASTER_SSL_CA - 364)) | (1L << (MASTER_SSL_CAPATH - 364)) | (1L << (MASTER_SSL_CERT - 364)) | (1L << (MASTER_SSL_CIPHER - 364)) | (1L << (MASTER_SSL_CRL - 364)) | (1L << (MASTER_SSL_CRLPATH - 364)) | (1L << (MASTER_SSL_KEY - 364)) | (1L << (MASTER_TLS_VERSION - 364)) | (1L << (MASTER_USER - 364)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 364)) | (1L << (MAX_QUERIES_PER_HOUR - 364)) | (1L << (MAX_ROWS - 364)) | (1L << (MAX_SIZE - 364)) | (1L << (MAX_UPDATES_PER_HOUR - 364)) | (1L << (MAX_USER_CONNECTIONS - 364)) | (1L << (MERGE - 364)) | (1L << (MID - 364)) | (1L << (MIGRATE - 364)) | (1L << (MIN_ROWS - 364)) | (1L << (MODIFY - 364)) | (1L << (MUTEX - 364)) | (1L << (MYSQL - 364)) | (1L << (NAME - 364)) | (1L << (NAMES - 364)) | (1L << (NCHAR - 364)) | (1L << (NEVER - 364)) | (1L << (NO - 364)) | (1L << (NODEGROUP - 364)) | (1L << (NONE - 364)) | (1L << (OFFLINE - 364)) | (1L << (OFFSET - 364)) | (1L << (OJ - 364)) | (1L << (OLD_PASSWORD - 364)) | (1L << (ONE - 364)) | (1L << (ONLINE - 364)) | (1L << (ONLY - 364)) | (1L << (OPEN - 364)) | (1L << (OPTIMIZER_COSTS - 364)) | (1L << (OPTIONS - 364)) | (1L << (OWNER - 364)) | (1L << (PACK_KEYS - 364)) | (1L << (PAGE - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (PARSER - 428)) | (1L << (PARTIAL - 428)) | (1L << (PARTITIONING - 428)) | (1L << (PARTITIONS - 428)) | (1L << (PASSWORD - 428)) | (1L << (PHASE - 428)) | (1L << (PLUGIN_DIR - 428)) | (1L << (PLUGINS - 428)) | (1L << (PORT - 428)) | (1L << (PRECEDES - 428)) | (1L << (PREPARE - 428)) | (1L << (PRESERVE - 428)) | (1L << (PREV - 428)) | (1L << (PROCESSLIST - 428)) | (1L << (PROFILE - 428)) | (1L << (PROFILES - 428)) | (1L << (PROXY - 428)) | (1L << (QUERY - 428)) | (1L << (QUICK - 428)) | (1L << (REBUILD - 428)) | (1L << (RECOVER - 428)) | (1L << (REDO_BUFFER_SIZE - 428)) | (1L << (REDUNDANT - 428)) | (1L << (RELAY_LOG_FILE - 428)) | (1L << (RELAY_LOG_POS - 428)) | (1L << (RELAYLOG - 428)) | (1L << (REMOVE - 428)) | (1L << (REORGANIZE - 428)) | (1L << (REPAIR - 428)) | (1L << (REPLICATE_DO_DB - 428)) | (1L << (REPLICATE_DO_TABLE - 428)) | (1L << (REPLICATE_IGNORE_DB - 428)) | (1L << (REPLICATE_IGNORE_TABLE - 428)) | (1L << (REPLICATE_REWRITE_DB - 428)) | (1L << (REPLICATE_WILD_DO_TABLE - 428)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 428)) | (1L << (REPLICATION - 428)) | (1L << (RESET - 428)) | (1L << (RESUME - 428)) | (1L << (RETURNS - 428)) | (1L << (ROLLBACK - 428)) | (1L << (ROLLUP - 428)) | (1L << (ROTATE - 428)) | (1L << (ROW - 428)) | (1L << (ROWS - 428)) | (1L << (ROW_FORMAT - 428)) | (1L << (SAVEPOINT - 428)) | (1L << (SCHEDULE - 428)) | (1L << (SECURITY - 428)) | (1L << (SERVER - 428)) | (1L << (SESSION - 428)) | (1L << (SHARE - 428)) | (1L << (SHARED - 428)) | (1L << (SIGNED - 428)) | (1L << (SIMPLE - 428)) | (1L << (SLAVE - 428)) | (1L << (SNAPSHOT - 428)) | (1L << (SOCKET - 428)) | (1L << (SOME - 428)) | (1L << (SOUNDS - 428)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (SOURCE - 492)) | (1L << (SQL_AFTER_GTIDS - 492)) | (1L << (SQL_AFTER_MTS_GAPS - 492)) | (1L << (SQL_BEFORE_GTIDS - 492)) | (1L << (SQL_BUFFER_RESULT - 492)) | (1L << (SQL_CACHE - 492)) | (1L << (SQL_NO_CACHE - 492)) | (1L << (SQL_THREAD - 492)) | (1L << (START - 492)) | (1L << (STARTS - 492)) | (1L << (STATS_AUTO_RECALC - 492)) | (1L << (STATS_PERSISTENT - 492)) | (1L << (STATS_SAMPLE_PAGES - 492)) | (1L << (STATUS - 492)) | (1L << (STOP - 492)) | (1L << (STORAGE - 492)) | (1L << (STRING - 492)) | (1L << (SUBJECT - 492)) | (1L << (SUBPARTITION - 492)) | (1L << (SUBPARTITIONS - 492)) | (1L << (SUSPEND - 492)) | (1L << (SWAPS - 492)) | (1L << (SWITCHES - 492)) | (1L << (TABLESPACE - 492)) | (1L << (TEMPORARY - 492)) | (1L << (TEMPTABLE - 492)) | (1L << (THAN - 492)) | (1L << (TRANSACTION - 492)) | (1L << (TRUNCATE - 492)) | (1L << (UNDEFINED - 492)) | (1L << (UNDOFILE - 492)) | (1L << (UNDO_BUFFER_SIZE - 492)) | (1L << (UNINSTALL - 492)) | (1L << (UNKNOWN - 492)) | (1L << (UPGRADE - 492)) | (1L << (USER - 492)) | (1L << (VALIDATION - 492)) | (1L << (VALUE - 492)) | (1L << (VARIABLES - 492)) | (1L << (VIEW - 492)) | (1L << (WAIT - 492)) | (1L << (WARNINGS - 492)) | (1L << (WITHOUT - 492)) | (1L << (WORK - 492)) | (1L << (WRAPPER - 492)) | (1L << (X509 - 492)) | (1L << (XA - 492)) | (1L << (XML - 492)) | (1L << (QUARTER - 492)) | (1L << (MONTH - 492)) | (1L << (DAY - 492)) | (1L << (HOUR - 492)) | (1L << (MINUTE - 492)) | (1L << (WEEK - 492)))) != 0) || ((((_la - 556)) & ~0x3f) == 0 && ((1L << (_la - 556)) & ((1L << (SECOND - 556)) | (1L << (MICROSECOND - 556)) | (1L << (TABLES - 556)) | (1L << (ROUTINE - 556)) | (1L << (EXECUTE - 556)) | (1L << (FILE - 556)) | (1L << (PROCESS - 556)) | (1L << (RELOAD - 556)) | (1L << (SHUTDOWN - 556)) | (1L << (SUPER - 556)) | (1L << (PRIVILEGES - 556)) | (1L << (ARMSCII8 - 556)) | (1L << (ASCII - 556)) | (1L << (BIG5 - 556)) | (1L << (CP1250 - 556)) | (1L << (CP1251 - 556)) | (1L << (CP1256 - 556)) | (1L << (CP1257 - 556)) | (1L << (CP850 - 556)) | (1L << (CP852 - 556)) | (1L << (CP866 - 556)) | (1L << (CP932 - 556)) | (1L << (DEC8 - 556)) | (1L << (EUCJPMS - 556)) | (1L << (EUCKR - 556)) | (1L << (GB2312 - 556)) | (1L << (GBK - 556)) | (1L << (GEOSTD8 - 556)) | (1L << (GREEK - 556)) | (1L << (HEBREW - 556)) | (1L << (HP8 - 556)) | (1L << (KEYBCS2 - 556)) | (1L << (KOI8R - 556)) | (1L << (KOI8U - 556)) | (1L << (LATIN1 - 556)) | (1L << (LATIN2 - 556)) | (1L << (LATIN5 - 556)) | (1L << (LATIN7 - 556)) | (1L << (MACCE - 556)) | (1L << (MACROMAN - 556)) | (1L << (SJIS - 556)) | (1L << (SWE7 - 556)) | (1L << (TIS620 - 556)) | (1L << (UCS2 - 556)) | (1L << (UJIS - 556)) | (1L << (UTF16 - 556)) | (1L << (UTF16LE - 556)) | (1L << (UTF32 - 556)) | (1L << (UTF8 - 556)) | (1L << (UTF8MB3 - 556)) | (1L << (UTF8MB4 - 556)) | (1L << (ARCHIVE - 556)) | (1L << (BLACKHOLE - 556)) | (1L << (CSV - 556)) | (1L << (FEDERATED - 556)) | (1L << (INNODB - 556)) | (1L << (MEMORY - 556)) | (1L << (MRG_MYISAM - 556)) | (1L << (MYISAM - 556)) | (1L << (NDB - 556)) | (1L << (NDBCLUSTER - 556)) | (1L << (PERFOMANCE_SCHEMA - 556)) | (1L << (REPEATABLE - 556)) | (1L << (COMMITTED - 556)))) != 0) || ((((_la - 620)) & ~0x3f) == 0 && ((1L << (_la - 620)) & ((1L << (UNCOMMITTED - 620)) | (1L << (SERIALIZABLE - 620)) | (1L << (GEOMETRYCOLLECTION - 620)) | (1L << (LINESTRING - 620)) | (1L << (MULTILINESTRING - 620)) | (1L << (MULTIPOINT - 620)) | (1L << (MULTIPOLYGON - 620)) | (1L << (POINT - 620)) | (1L << (POLYGON - 620)) | (1L << (ABS - 620)) | (1L << (ACOS - 620)) | (1L << (ADDDATE - 620)) | (1L << (ADDTIME - 620)) | (1L << (AES_DECRYPT - 620)) | (1L << (AES_ENCRYPT - 620)) | (1L << (AREA - 620)) | (1L << (ASBINARY - 620)) | (1L << (ASIN - 620)) | (1L << (ASTEXT - 620)) | (1L << (ASWKB - 620)) | (1L << (ASWKT - 620)) | (1L << (ASYMMETRIC_DECRYPT - 620)) | (1L << (ASYMMETRIC_DERIVE - 620)) | (1L << (ASYMMETRIC_ENCRYPT - 620)) | (1L << (ASYMMETRIC_SIGN - 620)) | (1L << (ASYMMETRIC_VERIFY - 620)) | (1L << (ATAN - 620)) | (1L << (ATAN2 - 620)) | (1L << (BENCHMARK - 620)) | (1L << (BIN - 620)) | (1L << (BIT_COUNT - 620)) | (1L << (BIT_LENGTH - 620)) | (1L << (BUFFER - 620)) | (1L << (CEIL - 620)) | (1L << (CEILING - 620)) | (1L << (CENTROID - 620)) | (1L << (CHARACTER_LENGTH - 620)) | (1L << (CHARSET - 620)) | (1L << (CHAR_LENGTH - 620)) | (1L << (COERCIBILITY - 620)) | (1L << (COLLATION - 620)) | (1L << (COMPRESS - 620)) | (1L << (CONCAT - 620)) | (1L << (CONCAT_WS - 620)) | (1L << (CONNECTION_ID - 620)) | (1L << (CONV - 620)) | (1L << (CONVERT_TZ - 620)) | (1L << (COS - 620)) | (1L << (COT - 620)) | (1L << (CRC32 - 620)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1L << (CREATE_DH_PARAMETERS - 620)) | (1L << (CREATE_DIGEST - 620)) | (1L << (CROSSES - 620)) | (1L << (DATEDIFF - 620)) | (1L << (DATE_FORMAT - 620)) | (1L << (DAYNAME - 620)) | (1L << (DAYOFMONTH - 620)) | (1L << (DAYOFWEEK - 620)) | (1L << (DAYOFYEAR - 620)) | (1L << (DECODE - 620)) | (1L << (DEGREES - 620)) | (1L << (DES_DECRYPT - 620)))) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & ((1L << (DES_ENCRYPT - 684)) | (1L << (DIMENSION - 684)) | (1L << (DISJOINT - 684)) | (1L << (ELT - 684)) | (1L << (ENCODE - 684)) | (1L << (ENCRYPT - 684)) | (1L << (ENDPOINT - 684)) | (1L << (ENVELOPE - 684)) | (1L << (EQUALS - 684)) | (1L << (EXP - 684)) | (1L << (EXPORT_SET - 684)) | (1L << (EXTERIORRING - 684)) | (1L << (EXTRACTVALUE - 684)) | (1L << (FIELD - 684)) | (1L << (FIND_IN_SET - 684)) | (1L << (FLOOR - 684)) | (1L << (FORMAT - 684)) | (1L << (FOUND_ROWS - 684)) | (1L << (FROM_BASE64 - 684)) | (1L << (FROM_DAYS - 684)) | (1L << (FROM_UNIXTIME - 684)) | (1L << (GEOMCOLLFROMTEXT - 684)) | (1L << (GEOMCOLLFROMWKB - 684)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 684)) | (1L << (GEOMETRYFROMTEXT - 684)) | (1L << (GEOMETRYFROMWKB - 684)) | (1L << (GEOMETRYN - 684)) | (1L << (GEOMETRYTYPE - 684)) | (1L << (GEOMFROMTEXT - 684)) | (1L << (GEOMFROMWKB - 684)) | (1L << (GET_FORMAT - 684)) | (1L << (GET_LOCK - 684)) | (1L << (GLENGTH - 684)) | (1L << (GREATEST - 684)) | (1L << (GTID_SUBSET - 684)) | (1L << (GTID_SUBTRACT - 684)) | (1L << (HEX - 684)) | (1L << (IFNULL - 684)) | (1L << (INET6_ATON - 684)) | (1L << (INET6_NTOA - 684)) | (1L << (INET_ATON - 684)) | (1L << (INET_NTOA - 684)) | (1L << (INSTR - 684)) | (1L << (INTERIORRINGN - 684)) | (1L << (INTERSECTS - 684)) | (1L << (ISCLOSED - 684)) | (1L << (ISEMPTY - 684)) | (1L << (ISNULL - 684)) | (1L << (ISSIMPLE - 684)) | (1L << (IS_FREE_LOCK - 684)) | (1L << (IS_IPV4 - 684)) | (1L << (IS_IPV4_COMPAT - 684)) | (1L << (IS_IPV4_MAPPED - 684)) | (1L << (IS_IPV6 - 684)) | (1L << (IS_USED_LOCK - 684)) | (1L << (LAST_INSERT_ID - 684)) | (1L << (LCASE - 684)) | (1L << (LEAST - 684)) | (1L << (LENGTH - 684)) | (1L << (LINEFROMTEXT - 684)) | (1L << (LINEFROMWKB - 684)) | (1L << (LINESTRINGFROMTEXT - 684)) | (1L << (LINESTRINGFROMWKB - 684)))) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & ((1L << (LN - 748)) | (1L << (LOAD_FILE - 748)) | (1L << (LOCATE - 748)) | (1L << (LOG - 748)) | (1L << (LOG10 - 748)) | (1L << (LOG2 - 748)) | (1L << (LOWER - 748)) | (1L << (LPAD - 748)) | (1L << (LTRIM - 748)) | (1L << (MAKEDATE - 748)) | (1L << (MAKETIME - 748)) | (1L << (MAKE_SET - 748)) | (1L << (MASTER_POS_WAIT - 748)) | (1L << (MBRCONTAINS - 748)) | (1L << (MBRDISJOINT - 748)) | (1L << (MBREQUAL - 748)) | (1L << (MBRINTERSECTS - 748)) | (1L << (MBROVERLAPS - 748)) | (1L << (MBRTOUCHES - 748)) | (1L << (MBRWITHIN - 748)) | (1L << (MD5 - 748)) | (1L << (MLINEFROMTEXT - 748)) | (1L << (MLINEFROMWKB - 748)) | (1L << (MONTHNAME - 748)) | (1L << (MPOINTFROMTEXT - 748)) | (1L << (MPOINTFROMWKB - 748)) | (1L << (MPOLYFROMTEXT - 748)) | (1L << (MPOLYFROMWKB - 748)) | (1L << (MULTILINESTRINGFROMTEXT - 748)) | (1L << (MULTILINESTRINGFROMWKB - 748)) | (1L << (MULTIPOINTFROMTEXT - 748)) | (1L << (MULTIPOINTFROMWKB - 748)) | (1L << (MULTIPOLYGONFROMTEXT - 748)) | (1L << (MULTIPOLYGONFROMWKB - 748)) | (1L << (NAME_CONST - 748)) | (1L << (NULLIF - 748)) | (1L << (NUMGEOMETRIES - 748)) | (1L << (NUMINTERIORRINGS - 748)) | (1L << (NUMPOINTS - 748)) | (1L << (OCT - 748)) | (1L << (OCTET_LENGTH - 748)) | (1L << (ORD - 748)) | (1L << (OVERLAPS - 748)) | (1L << (PERIOD_ADD - 748)) | (1L << (PERIOD_DIFF - 748)) | (1L << (PI - 748)) | (1L << (POINTFROMTEXT - 748)) | (1L << (POINTFROMWKB - 748)) | (1L << (POINTN - 748)) | (1L << (POLYFROMTEXT - 748)) | (1L << (POLYFROMWKB - 748)) | (1L << (POLYGONFROMTEXT - 748)) | (1L << (POLYGONFROMWKB - 748)) | (1L << (POW - 748)) | (1L << (POWER - 748)) | (1L << (QUOTE - 748)) | (1L << (RADIANS - 748)) | (1L << (RAND - 748)) | (1L << (RANDOM_BYTES - 748)) | (1L << (RELEASE_LOCK - 748)) | (1L << (REVERSE - 748)) | (1L << (ROUND - 748)) | (1L << (ROW_COUNT - 748)) | (1L << (RPAD - 748)))) != 0) || ((((_la - 812)) & ~0x3f) == 0 && ((1L << (_la - 812)) & ((1L << (RTRIM - 812)) | (1L << (SEC_TO_TIME - 812)) | (1L << (SESSION_USER - 812)) | (1L << (SHA - 812)) | (1L << (SHA1 - 812)) | (1L << (SHA2 - 812)) | (1L << (SIGN - 812)) | (1L << (SIN - 812)) | (1L << (SLEEP - 812)) | (1L << (SOUNDEX - 812)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1L << (SQRT - 812)) | (1L << (SRID - 812)) | (1L << (STARTPOINT - 812)) | (1L << (STRCMP - 812)) | (1L << (STR_TO_DATE - 812)) | (1L << (ST_AREA - 812)) | (1L << (ST_ASBINARY - 812)) | (1L << (ST_ASTEXT - 812)) | (1L << (ST_ASWKB - 812)) | (1L << (ST_ASWKT - 812)) | (1L << (ST_BUFFER - 812)) | (1L << (ST_CENTROID - 812)) | (1L << (ST_CONTAINS - 812)) | (1L << (ST_CROSSES - 812)) | (1L << (ST_DIFFERENCE - 812)) | (1L << (ST_DIMENSION - 812)) | (1L << (ST_DISJOINT - 812)) | (1L << (ST_DISTANCE - 812)) | (1L << (ST_ENDPOINT - 812)) | (1L << (ST_ENVELOPE - 812)) | (1L << (ST_EQUALS - 812)) | (1L << (ST_EXTERIORRING - 812)) | (1L << (ST_GEOMCOLLFROMTEXT - 812)) | (1L << (ST_GEOMCOLLFROMTXT - 812)) | (1L << (ST_GEOMCOLLFROMWKB - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1L << (ST_GEOMETRYFROMTEXT - 812)) | (1L << (ST_GEOMETRYFROMWKB - 812)) | (1L << (ST_GEOMETRYN - 812)) | (1L << (ST_GEOMETRYTYPE - 812)) | (1L << (ST_GEOMFROMTEXT - 812)) | (1L << (ST_GEOMFROMWKB - 812)) | (1L << (ST_INTERIORRINGN - 812)) | (1L << (ST_INTERSECTION - 812)) | (1L << (ST_INTERSECTS - 812)) | (1L << (ST_ISCLOSED - 812)) | (1L << (ST_ISEMPTY - 812)) | (1L << (ST_ISSIMPLE - 812)) | (1L << (ST_LINEFROMTEXT - 812)) | (1L << (ST_LINEFROMWKB - 812)) | (1L << (ST_LINESTRINGFROMTEXT - 812)) | (1L << (ST_LINESTRINGFROMWKB - 812)) | (1L << (ST_NUMGEOMETRIES - 812)) | (1L << (ST_NUMINTERIORRING - 812)) | (1L << (ST_NUMINTERIORRINGS - 812)) | (1L << (ST_NUMPOINTS - 812)) | (1L << (ST_OVERLAPS - 812)) | (1L << (ST_POINTFROMTEXT - 812)) | (1L << (ST_POINTFROMWKB - 812)) | (1L << (ST_POINTN - 812)) | (1L << (ST_POLYFROMTEXT - 812)) | (1L << (ST_POLYFROMWKB - 812)))) != 0) || ((((_la - 876)) & ~0x3f) == 0 && ((1L << (_la - 876)) & ((1L << (ST_POLYGONFROMTEXT - 876)) | (1L << (ST_POLYGONFROMWKB - 876)) | (1L << (ST_SRID - 876)) | (1L << (ST_STARTPOINT - 876)) | (1L << (ST_SYMDIFFERENCE - 876)) | (1L << (ST_TOUCHES - 876)) | (1L << (ST_UNION - 876)) | (1L << (ST_WITHIN - 876)) | (1L << (ST_X - 876)) | (1L << (ST_Y - 876)) | (1L << (SUBDATE - 876)) | (1L << (SUBSTRING_INDEX - 876)) | (1L << (SUBTIME - 876)) | (1L << (SYSTEM_USER - 876)) | (1L << (TAN - 876)) | (1L << (TIMEDIFF - 876)) | (1L << (TIMESTAMPADD - 876)) | (1L << (TIMESTAMPDIFF - 876)) | (1L << (TIME_FORMAT - 876)) | (1L << (TIME_TO_SEC - 876)) | (1L << (TOUCHES - 876)) | (1L << (TO_BASE64 - 876)) | (1L << (TO_DAYS - 876)) | (1L << (TO_SECONDS - 876)) | (1L << (UCASE - 876)) | (1L << (UNCOMPRESS - 876)) | (1L << (UNCOMPRESSED_LENGTH - 876)) | (1L << (UNHEX - 876)) | (1L << (UNIX_TIMESTAMP - 876)) | (1L << (UPDATEXML - 876)) | (1L << (UPPER - 876)) | (1L << (UUID - 876)) | (1L << (UUID_SHORT - 876)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 876)) | (1L << (VERSION - 876)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1L << (WEEKDAY - 876)) | (1L << (WEEKOFYEAR - 876)) | (1L << (WEIGHT_STRING - 876)) | (1L << (WITHIN - 876)) | (1L << (YEARWEEK - 876)) | (1L << (Y_FUNCTION - 876)) | (1L << (X_FUNCTION - 876)))) != 0) || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (LR_BRACKET - 945)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 945)) | (1L << (ID - 945)) | (1L << (REVERSE_QUOTE_ID - 945)))) != 0)) {
				{
				State = 3969;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,564,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3964; declareVariable();
						State = 3965; Match(SEMI);
						}
						} 
					}
					State = 3971;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,564,Context);
				}
				State = 3977;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,565,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3972; declareCondition();
						State = 3973; Match(SEMI);
						}
						} 
					}
					State = 3979;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,565,Context);
				}
				State = 3985;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,566,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3980; declareCursor();
						State = 3981; Match(SEMI);
						}
						} 
					}
					State = 3987;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,566,Context);
				}
				State = 3993;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DECLARE) {
					{
					{
					State = 3988; declareHandler();
					State = 3989; Match(SEMI);
					}
					}
					State = 3995;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3997;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3996; procedureSqlStatement();
					}
					}
					State = 3999;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DATABASE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (UNLOCK - 155)) | (1L << (UPDATE - 155)) | (1L << (USE - 155)) | (1L << (WHILE - 155)) | (1L << (DATE - 155)) | (1L << (TIME - 155)) | (1L << (TIMESTAMP - 155)) | (1L << (DATETIME - 155)) | (1L << (YEAR - 155)) | (1L << (TEXT - 155)) | (1L << (ENUM - 155)) | (1L << (COUNT - 155)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (POSITION - 236)) | (1L << (ACCOUNT - 236)) | (1L << (ACTION - 236)) | (1L << (AFTER - 236)) | (1L << (AGGREGATE - 236)) | (1L << (ALGORITHM - 236)) | (1L << (ANY - 236)) | (1L << (AT - 236)) | (1L << (AUTHORS - 236)) | (1L << (AUTOCOMMIT - 236)) | (1L << (AUTOEXTEND_SIZE - 236)) | (1L << (AUTO_INCREMENT - 236)) | (1L << (AVG_ROW_LENGTH - 236)) | (1L << (BEGIN - 236)) | (1L << (BINLOG - 236)) | (1L << (BIT - 236)) | (1L << (BLOCK - 236)) | (1L << (BOOL - 236)) | (1L << (BOOLEAN - 236)) | (1L << (BTREE - 236)) | (1L << (CACHE - 236)) | (1L << (CASCADED - 236)) | (1L << (CHAIN - 236)) | (1L << (CHANNEL - 236)) | (1L << (CHECKSUM - 236)) | (1L << (CIPHER - 236)) | (1L << (CLIENT - 236)) | (1L << (CLOSE - 236)) | (1L << (COALESCE - 236)) | (1L << (CODE - 236)) | (1L << (COLUMNS - 236)) | (1L << (COLUMN_FORMAT - 236)) | (1L << (COMMENT - 236)) | (1L << (COMMIT - 236)) | (1L << (COMPACT - 236)) | (1L << (COMPLETION - 236)) | (1L << (COMPRESSED - 236)) | (1L << (COMPRESSION - 236)) | (1L << (CONCURRENT - 236)) | (1L << (CONNECTION - 236)) | (1L << (CONSISTENT - 236)) | (1L << (CONTAINS - 236)) | (1L << (CONTEXT - 236)) | (1L << (CONTRIBUTORS - 236)) | (1L << (COPY - 236)) | (1L << (CPU - 236)) | (1L << (DATA - 236)) | (1L << (DATAFILE - 236)) | (1L << (DEALLOCATE - 236)) | (1L << (DEFAULT_AUTH - 236)) | (1L << (DEFINER - 236)) | (1L << (DELAY_KEY_WRITE - 236)) | (1L << (DIRECTORY - 236)) | (1L << (DISABLE - 236)) | (1L << (DISCARD - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DISK - 300)) | (1L << (DO - 300)) | (1L << (DUMPFILE - 300)) | (1L << (DUPLICATE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENABLE - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (ENDS - 300)) | (1L << (ENGINE - 300)) | (1L << (ENGINES - 300)) | (1L << (ERROR - 300)) | (1L << (ERRORS - 300)) | (1L << (ESCAPE - 300)) | (1L << (EVEN - 300)) | (1L << (EVENT - 300)) | (1L << (EVENTS - 300)) | (1L << (EVERY - 300)) | (1L << (EXCHANGE - 300)) | (1L << (EXCLUSIVE - 300)) | (1L << (EXPIRE - 300)) | (1L << (EXTENT_SIZE - 300)) | (1L << (FAULTS - 300)) | (1L << (FIELDS - 300)) | (1L << (FILE_BLOCK_SIZE - 300)) | (1L << (FILTER - 300)) | (1L << (FIRST - 300)) | (1L << (FIXED - 300)) | (1L << (FLUSH - 300)) | (1L << (FOLLOWS - 300)) | (1L << (FULL - 300)) | (1L << (FUNCTION - 300)) | (1L << (GLOBAL - 300)) | (1L << (GRANTS - 300)) | (1L << (GROUP_REPLICATION - 300)) | (1L << (HANDLER - 300)) | (1L << (HASH - 300)) | (1L << (HELP - 300)) | (1L << (HOST - 300)) | (1L << (IDENTIFIED - 300)) | (1L << (IGNORE_SERVER_IDS - 300)) | (1L << (IMPORT - 300)) | (1L << (INDEXES - 300)) | (1L << (INITIAL_SIZE - 300)) | (1L << (INPLACE - 300)) | (1L << (INSERT_METHOD - 300)) | (1L << (INSTALL - 300)) | (1L << (INSTANCE - 300)) | (1L << (INVOKER - 300)) | (1L << (IO - 300)) | (1L << (IO_THREAD - 300)) | (1L << (IPC - 300)) | (1L << (ISOLATION - 300)) | (1L << (ISSUER - 300)) | (1L << (KEY_BLOCK_SIZE - 300)) | (1L << (LANGUAGE - 300)) | (1L << (LAST - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (LEAVES - 364)) | (1L << (LESS - 364)) | (1L << (LEVEL - 364)) | (1L << (LIST - 364)) | (1L << (LOCAL - 364)) | (1L << (LOGFILE - 364)) | (1L << (LOGS - 364)) | (1L << (MASTER - 364)) | (1L << (MASTER_AUTO_POSITION - 364)) | (1L << (MASTER_CONNECT_RETRY - 364)) | (1L << (MASTER_DELAY - 364)) | (1L << (MASTER_HEARTBEAT_PERIOD - 364)) | (1L << (MASTER_HOST - 364)) | (1L << (MASTER_LOG_FILE - 364)) | (1L << (MASTER_LOG_POS - 364)) | (1L << (MASTER_PASSWORD - 364)) | (1L << (MASTER_PORT - 364)) | (1L << (MASTER_RETRY_COUNT - 364)) | (1L << (MASTER_SSL - 364)) | (1L << (MASTER_SSL_CA - 364)) | (1L << (MASTER_SSL_CAPATH - 364)) | (1L << (MASTER_SSL_CERT - 364)) | (1L << (MASTER_SSL_CIPHER - 364)) | (1L << (MASTER_SSL_CRL - 364)) | (1L << (MASTER_SSL_CRLPATH - 364)) | (1L << (MASTER_SSL_KEY - 364)) | (1L << (MASTER_TLS_VERSION - 364)) | (1L << (MASTER_USER - 364)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 364)) | (1L << (MAX_QUERIES_PER_HOUR - 364)) | (1L << (MAX_ROWS - 364)) | (1L << (MAX_SIZE - 364)) | (1L << (MAX_UPDATES_PER_HOUR - 364)) | (1L << (MAX_USER_CONNECTIONS - 364)) | (1L << (MERGE - 364)) | (1L << (MID - 364)) | (1L << (MIGRATE - 364)) | (1L << (MIN_ROWS - 364)) | (1L << (MODIFY - 364)) | (1L << (MUTEX - 364)) | (1L << (MYSQL - 364)) | (1L << (NAME - 364)) | (1L << (NAMES - 364)) | (1L << (NCHAR - 364)) | (1L << (NEVER - 364)) | (1L << (NO - 364)) | (1L << (NODEGROUP - 364)) | (1L << (NONE - 364)) | (1L << (OFFLINE - 364)) | (1L << (OFFSET - 364)) | (1L << (OJ - 364)) | (1L << (OLD_PASSWORD - 364)) | (1L << (ONE - 364)) | (1L << (ONLINE - 364)) | (1L << (ONLY - 364)) | (1L << (OPEN - 364)) | (1L << (OPTIMIZER_COSTS - 364)) | (1L << (OPTIONS - 364)) | (1L << (OWNER - 364)) | (1L << (PACK_KEYS - 364)) | (1L << (PAGE - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (PARSER - 428)) | (1L << (PARTIAL - 428)) | (1L << (PARTITIONING - 428)) | (1L << (PARTITIONS - 428)) | (1L << (PASSWORD - 428)) | (1L << (PHASE - 428)) | (1L << (PLUGIN_DIR - 428)) | (1L << (PLUGINS - 428)) | (1L << (PORT - 428)) | (1L << (PRECEDES - 428)) | (1L << (PREPARE - 428)) | (1L << (PRESERVE - 428)) | (1L << (PREV - 428)) | (1L << (PROCESSLIST - 428)) | (1L << (PROFILE - 428)) | (1L << (PROFILES - 428)) | (1L << (PROXY - 428)) | (1L << (QUERY - 428)) | (1L << (QUICK - 428)) | (1L << (REBUILD - 428)) | (1L << (RECOVER - 428)) | (1L << (REDO_BUFFER_SIZE - 428)) | (1L << (REDUNDANT - 428)) | (1L << (RELAY_LOG_FILE - 428)) | (1L << (RELAY_LOG_POS - 428)) | (1L << (RELAYLOG - 428)) | (1L << (REMOVE - 428)) | (1L << (REORGANIZE - 428)) | (1L << (REPAIR - 428)) | (1L << (REPLICATE_DO_DB - 428)) | (1L << (REPLICATE_DO_TABLE - 428)) | (1L << (REPLICATE_IGNORE_DB - 428)) | (1L << (REPLICATE_IGNORE_TABLE - 428)) | (1L << (REPLICATE_REWRITE_DB - 428)) | (1L << (REPLICATE_WILD_DO_TABLE - 428)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 428)) | (1L << (REPLICATION - 428)) | (1L << (RESET - 428)) | (1L << (RESUME - 428)) | (1L << (RETURNS - 428)) | (1L << (ROLLBACK - 428)) | (1L << (ROLLUP - 428)) | (1L << (ROTATE - 428)) | (1L << (ROW - 428)) | (1L << (ROWS - 428)) | (1L << (ROW_FORMAT - 428)) | (1L << (SAVEPOINT - 428)) | (1L << (SCHEDULE - 428)) | (1L << (SECURITY - 428)) | (1L << (SERVER - 428)) | (1L << (SESSION - 428)) | (1L << (SHARE - 428)) | (1L << (SHARED - 428)) | (1L << (SIGNED - 428)) | (1L << (SIMPLE - 428)) | (1L << (SLAVE - 428)) | (1L << (SNAPSHOT - 428)) | (1L << (SOCKET - 428)) | (1L << (SOME - 428)) | (1L << (SOUNDS - 428)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (SOURCE - 492)) | (1L << (SQL_AFTER_GTIDS - 492)) | (1L << (SQL_AFTER_MTS_GAPS - 492)) | (1L << (SQL_BEFORE_GTIDS - 492)) | (1L << (SQL_BUFFER_RESULT - 492)) | (1L << (SQL_CACHE - 492)) | (1L << (SQL_NO_CACHE - 492)) | (1L << (SQL_THREAD - 492)) | (1L << (START - 492)) | (1L << (STARTS - 492)) | (1L << (STATS_AUTO_RECALC - 492)) | (1L << (STATS_PERSISTENT - 492)) | (1L << (STATS_SAMPLE_PAGES - 492)) | (1L << (STATUS - 492)) | (1L << (STOP - 492)) | (1L << (STORAGE - 492)) | (1L << (STRING - 492)) | (1L << (SUBJECT - 492)) | (1L << (SUBPARTITION - 492)) | (1L << (SUBPARTITIONS - 492)) | (1L << (SUSPEND - 492)) | (1L << (SWAPS - 492)) | (1L << (SWITCHES - 492)) | (1L << (TABLESPACE - 492)) | (1L << (TEMPORARY - 492)) | (1L << (TEMPTABLE - 492)) | (1L << (THAN - 492)) | (1L << (TRANSACTION - 492)) | (1L << (TRUNCATE - 492)) | (1L << (UNDEFINED - 492)) | (1L << (UNDOFILE - 492)) | (1L << (UNDO_BUFFER_SIZE - 492)) | (1L << (UNINSTALL - 492)) | (1L << (UNKNOWN - 492)) | (1L << (UPGRADE - 492)) | (1L << (USER - 492)) | (1L << (VALIDATION - 492)) | (1L << (VALUE - 492)) | (1L << (VARIABLES - 492)) | (1L << (VIEW - 492)) | (1L << (WAIT - 492)) | (1L << (WARNINGS - 492)) | (1L << (WITHOUT - 492)) | (1L << (WORK - 492)) | (1L << (WRAPPER - 492)) | (1L << (X509 - 492)) | (1L << (XA - 492)) | (1L << (XML - 492)) | (1L << (QUARTER - 492)) | (1L << (MONTH - 492)) | (1L << (DAY - 492)) | (1L << (HOUR - 492)) | (1L << (MINUTE - 492)) | (1L << (WEEK - 492)))) != 0) || ((((_la - 556)) & ~0x3f) == 0 && ((1L << (_la - 556)) & ((1L << (SECOND - 556)) | (1L << (MICROSECOND - 556)) | (1L << (TABLES - 556)) | (1L << (ROUTINE - 556)) | (1L << (EXECUTE - 556)) | (1L << (FILE - 556)) | (1L << (PROCESS - 556)) | (1L << (RELOAD - 556)) | (1L << (SHUTDOWN - 556)) | (1L << (SUPER - 556)) | (1L << (PRIVILEGES - 556)) | (1L << (ARMSCII8 - 556)) | (1L << (ASCII - 556)) | (1L << (BIG5 - 556)) | (1L << (CP1250 - 556)) | (1L << (CP1251 - 556)) | (1L << (CP1256 - 556)) | (1L << (CP1257 - 556)) | (1L << (CP850 - 556)) | (1L << (CP852 - 556)) | (1L << (CP866 - 556)) | (1L << (CP932 - 556)) | (1L << (DEC8 - 556)) | (1L << (EUCJPMS - 556)) | (1L << (EUCKR - 556)) | (1L << (GB2312 - 556)) | (1L << (GBK - 556)) | (1L << (GEOSTD8 - 556)) | (1L << (GREEK - 556)) | (1L << (HEBREW - 556)) | (1L << (HP8 - 556)) | (1L << (KEYBCS2 - 556)) | (1L << (KOI8R - 556)) | (1L << (KOI8U - 556)) | (1L << (LATIN1 - 556)) | (1L << (LATIN2 - 556)) | (1L << (LATIN5 - 556)) | (1L << (LATIN7 - 556)) | (1L << (MACCE - 556)) | (1L << (MACROMAN - 556)) | (1L << (SJIS - 556)) | (1L << (SWE7 - 556)) | (1L << (TIS620 - 556)) | (1L << (UCS2 - 556)) | (1L << (UJIS - 556)) | (1L << (UTF16 - 556)) | (1L << (UTF16LE - 556)) | (1L << (UTF32 - 556)) | (1L << (UTF8 - 556)) | (1L << (UTF8MB3 - 556)) | (1L << (UTF8MB4 - 556)) | (1L << (ARCHIVE - 556)) | (1L << (BLACKHOLE - 556)) | (1L << (CSV - 556)) | (1L << (FEDERATED - 556)) | (1L << (INNODB - 556)) | (1L << (MEMORY - 556)) | (1L << (MRG_MYISAM - 556)) | (1L << (MYISAM - 556)) | (1L << (NDB - 556)) | (1L << (NDBCLUSTER - 556)) | (1L << (PERFOMANCE_SCHEMA - 556)) | (1L << (REPEATABLE - 556)) | (1L << (COMMITTED - 556)))) != 0) || ((((_la - 620)) & ~0x3f) == 0 && ((1L << (_la - 620)) & ((1L << (UNCOMMITTED - 620)) | (1L << (SERIALIZABLE - 620)) | (1L << (GEOMETRYCOLLECTION - 620)) | (1L << (LINESTRING - 620)) | (1L << (MULTILINESTRING - 620)) | (1L << (MULTIPOINT - 620)) | (1L << (MULTIPOLYGON - 620)) | (1L << (POINT - 620)) | (1L << (POLYGON - 620)) | (1L << (ABS - 620)) | (1L << (ACOS - 620)) | (1L << (ADDDATE - 620)) | (1L << (ADDTIME - 620)) | (1L << (AES_DECRYPT - 620)) | (1L << (AES_ENCRYPT - 620)) | (1L << (AREA - 620)) | (1L << (ASBINARY - 620)) | (1L << (ASIN - 620)) | (1L << (ASTEXT - 620)) | (1L << (ASWKB - 620)) | (1L << (ASWKT - 620)) | (1L << (ASYMMETRIC_DECRYPT - 620)) | (1L << (ASYMMETRIC_DERIVE - 620)) | (1L << (ASYMMETRIC_ENCRYPT - 620)) | (1L << (ASYMMETRIC_SIGN - 620)) | (1L << (ASYMMETRIC_VERIFY - 620)) | (1L << (ATAN - 620)) | (1L << (ATAN2 - 620)) | (1L << (BENCHMARK - 620)) | (1L << (BIN - 620)) | (1L << (BIT_COUNT - 620)) | (1L << (BIT_LENGTH - 620)) | (1L << (BUFFER - 620)) | (1L << (CEIL - 620)) | (1L << (CEILING - 620)) | (1L << (CENTROID - 620)) | (1L << (CHARACTER_LENGTH - 620)) | (1L << (CHARSET - 620)) | (1L << (CHAR_LENGTH - 620)) | (1L << (COERCIBILITY - 620)) | (1L << (COLLATION - 620)) | (1L << (COMPRESS - 620)) | (1L << (CONCAT - 620)) | (1L << (CONCAT_WS - 620)) | (1L << (CONNECTION_ID - 620)) | (1L << (CONV - 620)) | (1L << (CONVERT_TZ - 620)) | (1L << (COS - 620)) | (1L << (COT - 620)) | (1L << (CRC32 - 620)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1L << (CREATE_DH_PARAMETERS - 620)) | (1L << (CREATE_DIGEST - 620)) | (1L << (CROSSES - 620)) | (1L << (DATEDIFF - 620)) | (1L << (DATE_FORMAT - 620)) | (1L << (DAYNAME - 620)) | (1L << (DAYOFMONTH - 620)) | (1L << (DAYOFWEEK - 620)) | (1L << (DAYOFYEAR - 620)) | (1L << (DECODE - 620)) | (1L << (DEGREES - 620)) | (1L << (DES_DECRYPT - 620)))) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & ((1L << (DES_ENCRYPT - 684)) | (1L << (DIMENSION - 684)) | (1L << (DISJOINT - 684)) | (1L << (ELT - 684)) | (1L << (ENCODE - 684)) | (1L << (ENCRYPT - 684)) | (1L << (ENDPOINT - 684)) | (1L << (ENVELOPE - 684)) | (1L << (EQUALS - 684)) | (1L << (EXP - 684)) | (1L << (EXPORT_SET - 684)) | (1L << (EXTERIORRING - 684)) | (1L << (EXTRACTVALUE - 684)) | (1L << (FIELD - 684)) | (1L << (FIND_IN_SET - 684)) | (1L << (FLOOR - 684)) | (1L << (FORMAT - 684)) | (1L << (FOUND_ROWS - 684)) | (1L << (FROM_BASE64 - 684)) | (1L << (FROM_DAYS - 684)) | (1L << (FROM_UNIXTIME - 684)) | (1L << (GEOMCOLLFROMTEXT - 684)) | (1L << (GEOMCOLLFROMWKB - 684)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 684)) | (1L << (GEOMETRYFROMTEXT - 684)) | (1L << (GEOMETRYFROMWKB - 684)) | (1L << (GEOMETRYN - 684)) | (1L << (GEOMETRYTYPE - 684)) | (1L << (GEOMFROMTEXT - 684)) | (1L << (GEOMFROMWKB - 684)) | (1L << (GET_FORMAT - 684)) | (1L << (GET_LOCK - 684)) | (1L << (GLENGTH - 684)) | (1L << (GREATEST - 684)) | (1L << (GTID_SUBSET - 684)) | (1L << (GTID_SUBTRACT - 684)) | (1L << (HEX - 684)) | (1L << (IFNULL - 684)) | (1L << (INET6_ATON - 684)) | (1L << (INET6_NTOA - 684)) | (1L << (INET_ATON - 684)) | (1L << (INET_NTOA - 684)) | (1L << (INSTR - 684)) | (1L << (INTERIORRINGN - 684)) | (1L << (INTERSECTS - 684)) | (1L << (ISCLOSED - 684)) | (1L << (ISEMPTY - 684)) | (1L << (ISNULL - 684)) | (1L << (ISSIMPLE - 684)) | (1L << (IS_FREE_LOCK - 684)) | (1L << (IS_IPV4 - 684)) | (1L << (IS_IPV4_COMPAT - 684)) | (1L << (IS_IPV4_MAPPED - 684)) | (1L << (IS_IPV6 - 684)) | (1L << (IS_USED_LOCK - 684)) | (1L << (LAST_INSERT_ID - 684)) | (1L << (LCASE - 684)) | (1L << (LEAST - 684)) | (1L << (LENGTH - 684)) | (1L << (LINEFROMTEXT - 684)) | (1L << (LINEFROMWKB - 684)) | (1L << (LINESTRINGFROMTEXT - 684)) | (1L << (LINESTRINGFROMWKB - 684)))) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & ((1L << (LN - 748)) | (1L << (LOAD_FILE - 748)) | (1L << (LOCATE - 748)) | (1L << (LOG - 748)) | (1L << (LOG10 - 748)) | (1L << (LOG2 - 748)) | (1L << (LOWER - 748)) | (1L << (LPAD - 748)) | (1L << (LTRIM - 748)) | (1L << (MAKEDATE - 748)) | (1L << (MAKETIME - 748)) | (1L << (MAKE_SET - 748)) | (1L << (MASTER_POS_WAIT - 748)) | (1L << (MBRCONTAINS - 748)) | (1L << (MBRDISJOINT - 748)) | (1L << (MBREQUAL - 748)) | (1L << (MBRINTERSECTS - 748)) | (1L << (MBROVERLAPS - 748)) | (1L << (MBRTOUCHES - 748)) | (1L << (MBRWITHIN - 748)) | (1L << (MD5 - 748)) | (1L << (MLINEFROMTEXT - 748)) | (1L << (MLINEFROMWKB - 748)) | (1L << (MONTHNAME - 748)) | (1L << (MPOINTFROMTEXT - 748)) | (1L << (MPOINTFROMWKB - 748)) | (1L << (MPOLYFROMTEXT - 748)) | (1L << (MPOLYFROMWKB - 748)) | (1L << (MULTILINESTRINGFROMTEXT - 748)) | (1L << (MULTILINESTRINGFROMWKB - 748)) | (1L << (MULTIPOINTFROMTEXT - 748)) | (1L << (MULTIPOINTFROMWKB - 748)) | (1L << (MULTIPOLYGONFROMTEXT - 748)) | (1L << (MULTIPOLYGONFROMWKB - 748)) | (1L << (NAME_CONST - 748)) | (1L << (NULLIF - 748)) | (1L << (NUMGEOMETRIES - 748)) | (1L << (NUMINTERIORRINGS - 748)) | (1L << (NUMPOINTS - 748)) | (1L << (OCT - 748)) | (1L << (OCTET_LENGTH - 748)) | (1L << (ORD - 748)) | (1L << (OVERLAPS - 748)) | (1L << (PERIOD_ADD - 748)) | (1L << (PERIOD_DIFF - 748)) | (1L << (PI - 748)) | (1L << (POINTFROMTEXT - 748)) | (1L << (POINTFROMWKB - 748)) | (1L << (POINTN - 748)) | (1L << (POLYFROMTEXT - 748)) | (1L << (POLYFROMWKB - 748)) | (1L << (POLYGONFROMTEXT - 748)) | (1L << (POLYGONFROMWKB - 748)) | (1L << (POW - 748)) | (1L << (POWER - 748)) | (1L << (QUOTE - 748)) | (1L << (RADIANS - 748)) | (1L << (RAND - 748)) | (1L << (RANDOM_BYTES - 748)) | (1L << (RELEASE_LOCK - 748)) | (1L << (REVERSE - 748)) | (1L << (ROUND - 748)) | (1L << (ROW_COUNT - 748)) | (1L << (RPAD - 748)))) != 0) || ((((_la - 812)) & ~0x3f) == 0 && ((1L << (_la - 812)) & ((1L << (RTRIM - 812)) | (1L << (SEC_TO_TIME - 812)) | (1L << (SESSION_USER - 812)) | (1L << (SHA - 812)) | (1L << (SHA1 - 812)) | (1L << (SHA2 - 812)) | (1L << (SIGN - 812)) | (1L << (SIN - 812)) | (1L << (SLEEP - 812)) | (1L << (SOUNDEX - 812)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1L << (SQRT - 812)) | (1L << (SRID - 812)) | (1L << (STARTPOINT - 812)) | (1L << (STRCMP - 812)) | (1L << (STR_TO_DATE - 812)) | (1L << (ST_AREA - 812)) | (1L << (ST_ASBINARY - 812)) | (1L << (ST_ASTEXT - 812)) | (1L << (ST_ASWKB - 812)) | (1L << (ST_ASWKT - 812)) | (1L << (ST_BUFFER - 812)) | (1L << (ST_CENTROID - 812)) | (1L << (ST_CONTAINS - 812)) | (1L << (ST_CROSSES - 812)) | (1L << (ST_DIFFERENCE - 812)) | (1L << (ST_DIMENSION - 812)) | (1L << (ST_DISJOINT - 812)) | (1L << (ST_DISTANCE - 812)) | (1L << (ST_ENDPOINT - 812)) | (1L << (ST_ENVELOPE - 812)) | (1L << (ST_EQUALS - 812)) | (1L << (ST_EXTERIORRING - 812)) | (1L << (ST_GEOMCOLLFROMTEXT - 812)) | (1L << (ST_GEOMCOLLFROMTXT - 812)) | (1L << (ST_GEOMCOLLFROMWKB - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1L << (ST_GEOMETRYFROMTEXT - 812)) | (1L << (ST_GEOMETRYFROMWKB - 812)) | (1L << (ST_GEOMETRYN - 812)) | (1L << (ST_GEOMETRYTYPE - 812)) | (1L << (ST_GEOMFROMTEXT - 812)) | (1L << (ST_GEOMFROMWKB - 812)) | (1L << (ST_INTERIORRINGN - 812)) | (1L << (ST_INTERSECTION - 812)) | (1L << (ST_INTERSECTS - 812)) | (1L << (ST_ISCLOSED - 812)) | (1L << (ST_ISEMPTY - 812)) | (1L << (ST_ISSIMPLE - 812)) | (1L << (ST_LINEFROMTEXT - 812)) | (1L << (ST_LINEFROMWKB - 812)) | (1L << (ST_LINESTRINGFROMTEXT - 812)) | (1L << (ST_LINESTRINGFROMWKB - 812)) | (1L << (ST_NUMGEOMETRIES - 812)) | (1L << (ST_NUMINTERIORRING - 812)) | (1L << (ST_NUMINTERIORRINGS - 812)) | (1L << (ST_NUMPOINTS - 812)) | (1L << (ST_OVERLAPS - 812)) | (1L << (ST_POINTFROMTEXT - 812)) | (1L << (ST_POINTFROMWKB - 812)) | (1L << (ST_POINTN - 812)) | (1L << (ST_POLYFROMTEXT - 812)) | (1L << (ST_POLYFROMWKB - 812)))) != 0) || ((((_la - 876)) & ~0x3f) == 0 && ((1L << (_la - 876)) & ((1L << (ST_POLYGONFROMTEXT - 876)) | (1L << (ST_POLYGONFROMWKB - 876)) | (1L << (ST_SRID - 876)) | (1L << (ST_STARTPOINT - 876)) | (1L << (ST_SYMDIFFERENCE - 876)) | (1L << (ST_TOUCHES - 876)) | (1L << (ST_UNION - 876)) | (1L << (ST_WITHIN - 876)) | (1L << (ST_X - 876)) | (1L << (ST_Y - 876)) | (1L << (SUBDATE - 876)) | (1L << (SUBSTRING_INDEX - 876)) | (1L << (SUBTIME - 876)) | (1L << (SYSTEM_USER - 876)) | (1L << (TAN - 876)) | (1L << (TIMEDIFF - 876)) | (1L << (TIMESTAMPADD - 876)) | (1L << (TIMESTAMPDIFF - 876)) | (1L << (TIME_FORMAT - 876)) | (1L << (TIME_TO_SEC - 876)) | (1L << (TOUCHES - 876)) | (1L << (TO_BASE64 - 876)) | (1L << (TO_DAYS - 876)) | (1L << (TO_SECONDS - 876)) | (1L << (UCASE - 876)) | (1L << (UNCOMPRESS - 876)) | (1L << (UNCOMPRESSED_LENGTH - 876)) | (1L << (UNHEX - 876)) | (1L << (UNIX_TIMESTAMP - 876)) | (1L << (UPDATEXML - 876)) | (1L << (UPPER - 876)) | (1L << (UUID - 876)) | (1L << (UUID_SHORT - 876)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 876)) | (1L << (VERSION - 876)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1L << (WEEKDAY - 876)) | (1L << (WEEKOFYEAR - 876)) | (1L << (WEIGHT_STRING - 876)) | (1L << (WITHIN - 876)) | (1L << (YEARWEEK - 876)) | (1L << (Y_FUNCTION - 876)) | (1L << (X_FUNCTION - 876)))) != 0) || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (LR_BRACKET - 945)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 945)) | (1L << (ID - 945)) | (1L << (REVERSE_QUOTE_ID - 945)))) != 0) );
				}
			}

			State = 4003; Match(END);
			State = 4005;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
				{
				State = 4004; uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		public ITerminalNode[] CASE() { return GetTokens(MySqlParser.CASE); }
		public ITerminalNode CASE(int i) {
			return GetToken(MySqlParser.CASE, i);
		}
		public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CaseAlternativeContext[] caseAlternative() {
			return GetRuleContexts<CaseAlternativeContext>();
		}
		public CaseAlternativeContext caseAlternative(int i) {
			return GetRuleContext<CaseAlternativeContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(MySqlParser.ELSE, 0); }
		public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 346, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4007; Match(CASE);
			State = 4010;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,571,Context) ) {
			case 1:
				{
				State = 4008; uid();
				}
				break;
			case 2:
				{
				State = 4009; expression(0);
				}
				break;
			}
			State = 4013;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4012; caseAlternative();
				}
				}
				State = 4015;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 4023;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 4017; Match(ELSE);
				State = 4019;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 4018; procedureSqlStatement();
					}
					}
					State = 4021;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DATABASE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (UNLOCK - 155)) | (1L << (UPDATE - 155)) | (1L << (USE - 155)) | (1L << (WHILE - 155)) | (1L << (DATE - 155)) | (1L << (TIME - 155)) | (1L << (TIMESTAMP - 155)) | (1L << (DATETIME - 155)) | (1L << (YEAR - 155)) | (1L << (TEXT - 155)) | (1L << (ENUM - 155)) | (1L << (COUNT - 155)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (POSITION - 236)) | (1L << (ACCOUNT - 236)) | (1L << (ACTION - 236)) | (1L << (AFTER - 236)) | (1L << (AGGREGATE - 236)) | (1L << (ALGORITHM - 236)) | (1L << (ANY - 236)) | (1L << (AT - 236)) | (1L << (AUTHORS - 236)) | (1L << (AUTOCOMMIT - 236)) | (1L << (AUTOEXTEND_SIZE - 236)) | (1L << (AUTO_INCREMENT - 236)) | (1L << (AVG_ROW_LENGTH - 236)) | (1L << (BEGIN - 236)) | (1L << (BINLOG - 236)) | (1L << (BIT - 236)) | (1L << (BLOCK - 236)) | (1L << (BOOL - 236)) | (1L << (BOOLEAN - 236)) | (1L << (BTREE - 236)) | (1L << (CACHE - 236)) | (1L << (CASCADED - 236)) | (1L << (CHAIN - 236)) | (1L << (CHANNEL - 236)) | (1L << (CHECKSUM - 236)) | (1L << (CIPHER - 236)) | (1L << (CLIENT - 236)) | (1L << (CLOSE - 236)) | (1L << (COALESCE - 236)) | (1L << (CODE - 236)) | (1L << (COLUMNS - 236)) | (1L << (COLUMN_FORMAT - 236)) | (1L << (COMMENT - 236)) | (1L << (COMMIT - 236)) | (1L << (COMPACT - 236)) | (1L << (COMPLETION - 236)) | (1L << (COMPRESSED - 236)) | (1L << (COMPRESSION - 236)) | (1L << (CONCURRENT - 236)) | (1L << (CONNECTION - 236)) | (1L << (CONSISTENT - 236)) | (1L << (CONTAINS - 236)) | (1L << (CONTEXT - 236)) | (1L << (CONTRIBUTORS - 236)) | (1L << (COPY - 236)) | (1L << (CPU - 236)) | (1L << (DATA - 236)) | (1L << (DATAFILE - 236)) | (1L << (DEALLOCATE - 236)) | (1L << (DEFAULT_AUTH - 236)) | (1L << (DEFINER - 236)) | (1L << (DELAY_KEY_WRITE - 236)) | (1L << (DIRECTORY - 236)) | (1L << (DISABLE - 236)) | (1L << (DISCARD - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DISK - 300)) | (1L << (DO - 300)) | (1L << (DUMPFILE - 300)) | (1L << (DUPLICATE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENABLE - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (ENDS - 300)) | (1L << (ENGINE - 300)) | (1L << (ENGINES - 300)) | (1L << (ERROR - 300)) | (1L << (ERRORS - 300)) | (1L << (ESCAPE - 300)) | (1L << (EVEN - 300)) | (1L << (EVENT - 300)) | (1L << (EVENTS - 300)) | (1L << (EVERY - 300)) | (1L << (EXCHANGE - 300)) | (1L << (EXCLUSIVE - 300)) | (1L << (EXPIRE - 300)) | (1L << (EXTENT_SIZE - 300)) | (1L << (FAULTS - 300)) | (1L << (FIELDS - 300)) | (1L << (FILE_BLOCK_SIZE - 300)) | (1L << (FILTER - 300)) | (1L << (FIRST - 300)) | (1L << (FIXED - 300)) | (1L << (FLUSH - 300)) | (1L << (FOLLOWS - 300)) | (1L << (FULL - 300)) | (1L << (FUNCTION - 300)) | (1L << (GLOBAL - 300)) | (1L << (GRANTS - 300)) | (1L << (GROUP_REPLICATION - 300)) | (1L << (HANDLER - 300)) | (1L << (HASH - 300)) | (1L << (HELP - 300)) | (1L << (HOST - 300)) | (1L << (IDENTIFIED - 300)) | (1L << (IGNORE_SERVER_IDS - 300)) | (1L << (IMPORT - 300)) | (1L << (INDEXES - 300)) | (1L << (INITIAL_SIZE - 300)) | (1L << (INPLACE - 300)) | (1L << (INSERT_METHOD - 300)) | (1L << (INSTALL - 300)) | (1L << (INSTANCE - 300)) | (1L << (INVOKER - 300)) | (1L << (IO - 300)) | (1L << (IO_THREAD - 300)) | (1L << (IPC - 300)) | (1L << (ISOLATION - 300)) | (1L << (ISSUER - 300)) | (1L << (KEY_BLOCK_SIZE - 300)) | (1L << (LANGUAGE - 300)) | (1L << (LAST - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (LEAVES - 364)) | (1L << (LESS - 364)) | (1L << (LEVEL - 364)) | (1L << (LIST - 364)) | (1L << (LOCAL - 364)) | (1L << (LOGFILE - 364)) | (1L << (LOGS - 364)) | (1L << (MASTER - 364)) | (1L << (MASTER_AUTO_POSITION - 364)) | (1L << (MASTER_CONNECT_RETRY - 364)) | (1L << (MASTER_DELAY - 364)) | (1L << (MASTER_HEARTBEAT_PERIOD - 364)) | (1L << (MASTER_HOST - 364)) | (1L << (MASTER_LOG_FILE - 364)) | (1L << (MASTER_LOG_POS - 364)) | (1L << (MASTER_PASSWORD - 364)) | (1L << (MASTER_PORT - 364)) | (1L << (MASTER_RETRY_COUNT - 364)) | (1L << (MASTER_SSL - 364)) | (1L << (MASTER_SSL_CA - 364)) | (1L << (MASTER_SSL_CAPATH - 364)) | (1L << (MASTER_SSL_CERT - 364)) | (1L << (MASTER_SSL_CIPHER - 364)) | (1L << (MASTER_SSL_CRL - 364)) | (1L << (MASTER_SSL_CRLPATH - 364)) | (1L << (MASTER_SSL_KEY - 364)) | (1L << (MASTER_TLS_VERSION - 364)) | (1L << (MASTER_USER - 364)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 364)) | (1L << (MAX_QUERIES_PER_HOUR - 364)) | (1L << (MAX_ROWS - 364)) | (1L << (MAX_SIZE - 364)) | (1L << (MAX_UPDATES_PER_HOUR - 364)) | (1L << (MAX_USER_CONNECTIONS - 364)) | (1L << (MERGE - 364)) | (1L << (MID - 364)) | (1L << (MIGRATE - 364)) | (1L << (MIN_ROWS - 364)) | (1L << (MODIFY - 364)) | (1L << (MUTEX - 364)) | (1L << (MYSQL - 364)) | (1L << (NAME - 364)) | (1L << (NAMES - 364)) | (1L << (NCHAR - 364)) | (1L << (NEVER - 364)) | (1L << (NO - 364)) | (1L << (NODEGROUP - 364)) | (1L << (NONE - 364)) | (1L << (OFFLINE - 364)) | (1L << (OFFSET - 364)) | (1L << (OJ - 364)) | (1L << (OLD_PASSWORD - 364)) | (1L << (ONE - 364)) | (1L << (ONLINE - 364)) | (1L << (ONLY - 364)) | (1L << (OPEN - 364)) | (1L << (OPTIMIZER_COSTS - 364)) | (1L << (OPTIONS - 364)) | (1L << (OWNER - 364)) | (1L << (PACK_KEYS - 364)) | (1L << (PAGE - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (PARSER - 428)) | (1L << (PARTIAL - 428)) | (1L << (PARTITIONING - 428)) | (1L << (PARTITIONS - 428)) | (1L << (PASSWORD - 428)) | (1L << (PHASE - 428)) | (1L << (PLUGIN_DIR - 428)) | (1L << (PLUGINS - 428)) | (1L << (PORT - 428)) | (1L << (PRECEDES - 428)) | (1L << (PREPARE - 428)) | (1L << (PRESERVE - 428)) | (1L << (PREV - 428)) | (1L << (PROCESSLIST - 428)) | (1L << (PROFILE - 428)) | (1L << (PROFILES - 428)) | (1L << (PROXY - 428)) | (1L << (QUERY - 428)) | (1L << (QUICK - 428)) | (1L << (REBUILD - 428)) | (1L << (RECOVER - 428)) | (1L << (REDO_BUFFER_SIZE - 428)) | (1L << (REDUNDANT - 428)) | (1L << (RELAY_LOG_FILE - 428)) | (1L << (RELAY_LOG_POS - 428)) | (1L << (RELAYLOG - 428)) | (1L << (REMOVE - 428)) | (1L << (REORGANIZE - 428)) | (1L << (REPAIR - 428)) | (1L << (REPLICATE_DO_DB - 428)) | (1L << (REPLICATE_DO_TABLE - 428)) | (1L << (REPLICATE_IGNORE_DB - 428)) | (1L << (REPLICATE_IGNORE_TABLE - 428)) | (1L << (REPLICATE_REWRITE_DB - 428)) | (1L << (REPLICATE_WILD_DO_TABLE - 428)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 428)) | (1L << (REPLICATION - 428)) | (1L << (RESET - 428)) | (1L << (RESUME - 428)) | (1L << (RETURNS - 428)) | (1L << (ROLLBACK - 428)) | (1L << (ROLLUP - 428)) | (1L << (ROTATE - 428)) | (1L << (ROW - 428)) | (1L << (ROWS - 428)) | (1L << (ROW_FORMAT - 428)) | (1L << (SAVEPOINT - 428)) | (1L << (SCHEDULE - 428)) | (1L << (SECURITY - 428)) | (1L << (SERVER - 428)) | (1L << (SESSION - 428)) | (1L << (SHARE - 428)) | (1L << (SHARED - 428)) | (1L << (SIGNED - 428)) | (1L << (SIMPLE - 428)) | (1L << (SLAVE - 428)) | (1L << (SNAPSHOT - 428)) | (1L << (SOCKET - 428)) | (1L << (SOME - 428)) | (1L << (SOUNDS - 428)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (SOURCE - 492)) | (1L << (SQL_AFTER_GTIDS - 492)) | (1L << (SQL_AFTER_MTS_GAPS - 492)) | (1L << (SQL_BEFORE_GTIDS - 492)) | (1L << (SQL_BUFFER_RESULT - 492)) | (1L << (SQL_CACHE - 492)) | (1L << (SQL_NO_CACHE - 492)) | (1L << (SQL_THREAD - 492)) | (1L << (START - 492)) | (1L << (STARTS - 492)) | (1L << (STATS_AUTO_RECALC - 492)) | (1L << (STATS_PERSISTENT - 492)) | (1L << (STATS_SAMPLE_PAGES - 492)) | (1L << (STATUS - 492)) | (1L << (STOP - 492)) | (1L << (STORAGE - 492)) | (1L << (STRING - 492)) | (1L << (SUBJECT - 492)) | (1L << (SUBPARTITION - 492)) | (1L << (SUBPARTITIONS - 492)) | (1L << (SUSPEND - 492)) | (1L << (SWAPS - 492)) | (1L << (SWITCHES - 492)) | (1L << (TABLESPACE - 492)) | (1L << (TEMPORARY - 492)) | (1L << (TEMPTABLE - 492)) | (1L << (THAN - 492)) | (1L << (TRANSACTION - 492)) | (1L << (TRUNCATE - 492)) | (1L << (UNDEFINED - 492)) | (1L << (UNDOFILE - 492)) | (1L << (UNDO_BUFFER_SIZE - 492)) | (1L << (UNINSTALL - 492)) | (1L << (UNKNOWN - 492)) | (1L << (UPGRADE - 492)) | (1L << (USER - 492)) | (1L << (VALIDATION - 492)) | (1L << (VALUE - 492)) | (1L << (VARIABLES - 492)) | (1L << (VIEW - 492)) | (1L << (WAIT - 492)) | (1L << (WARNINGS - 492)) | (1L << (WITHOUT - 492)) | (1L << (WORK - 492)) | (1L << (WRAPPER - 492)) | (1L << (X509 - 492)) | (1L << (XA - 492)) | (1L << (XML - 492)) | (1L << (QUARTER - 492)) | (1L << (MONTH - 492)) | (1L << (DAY - 492)) | (1L << (HOUR - 492)) | (1L << (MINUTE - 492)) | (1L << (WEEK - 492)))) != 0) || ((((_la - 556)) & ~0x3f) == 0 && ((1L << (_la - 556)) & ((1L << (SECOND - 556)) | (1L << (MICROSECOND - 556)) | (1L << (TABLES - 556)) | (1L << (ROUTINE - 556)) | (1L << (EXECUTE - 556)) | (1L << (FILE - 556)) | (1L << (PROCESS - 556)) | (1L << (RELOAD - 556)) | (1L << (SHUTDOWN - 556)) | (1L << (SUPER - 556)) | (1L << (PRIVILEGES - 556)) | (1L << (ARMSCII8 - 556)) | (1L << (ASCII - 556)) | (1L << (BIG5 - 556)) | (1L << (CP1250 - 556)) | (1L << (CP1251 - 556)) | (1L << (CP1256 - 556)) | (1L << (CP1257 - 556)) | (1L << (CP850 - 556)) | (1L << (CP852 - 556)) | (1L << (CP866 - 556)) | (1L << (CP932 - 556)) | (1L << (DEC8 - 556)) | (1L << (EUCJPMS - 556)) | (1L << (EUCKR - 556)) | (1L << (GB2312 - 556)) | (1L << (GBK - 556)) | (1L << (GEOSTD8 - 556)) | (1L << (GREEK - 556)) | (1L << (HEBREW - 556)) | (1L << (HP8 - 556)) | (1L << (KEYBCS2 - 556)) | (1L << (KOI8R - 556)) | (1L << (KOI8U - 556)) | (1L << (LATIN1 - 556)) | (1L << (LATIN2 - 556)) | (1L << (LATIN5 - 556)) | (1L << (LATIN7 - 556)) | (1L << (MACCE - 556)) | (1L << (MACROMAN - 556)) | (1L << (SJIS - 556)) | (1L << (SWE7 - 556)) | (1L << (TIS620 - 556)) | (1L << (UCS2 - 556)) | (1L << (UJIS - 556)) | (1L << (UTF16 - 556)) | (1L << (UTF16LE - 556)) | (1L << (UTF32 - 556)) | (1L << (UTF8 - 556)) | (1L << (UTF8MB3 - 556)) | (1L << (UTF8MB4 - 556)) | (1L << (ARCHIVE - 556)) | (1L << (BLACKHOLE - 556)) | (1L << (CSV - 556)) | (1L << (FEDERATED - 556)) | (1L << (INNODB - 556)) | (1L << (MEMORY - 556)) | (1L << (MRG_MYISAM - 556)) | (1L << (MYISAM - 556)) | (1L << (NDB - 556)) | (1L << (NDBCLUSTER - 556)) | (1L << (PERFOMANCE_SCHEMA - 556)) | (1L << (REPEATABLE - 556)) | (1L << (COMMITTED - 556)))) != 0) || ((((_la - 620)) & ~0x3f) == 0 && ((1L << (_la - 620)) & ((1L << (UNCOMMITTED - 620)) | (1L << (SERIALIZABLE - 620)) | (1L << (GEOMETRYCOLLECTION - 620)) | (1L << (LINESTRING - 620)) | (1L << (MULTILINESTRING - 620)) | (1L << (MULTIPOINT - 620)) | (1L << (MULTIPOLYGON - 620)) | (1L << (POINT - 620)) | (1L << (POLYGON - 620)) | (1L << (ABS - 620)) | (1L << (ACOS - 620)) | (1L << (ADDDATE - 620)) | (1L << (ADDTIME - 620)) | (1L << (AES_DECRYPT - 620)) | (1L << (AES_ENCRYPT - 620)) | (1L << (AREA - 620)) | (1L << (ASBINARY - 620)) | (1L << (ASIN - 620)) | (1L << (ASTEXT - 620)) | (1L << (ASWKB - 620)) | (1L << (ASWKT - 620)) | (1L << (ASYMMETRIC_DECRYPT - 620)) | (1L << (ASYMMETRIC_DERIVE - 620)) | (1L << (ASYMMETRIC_ENCRYPT - 620)) | (1L << (ASYMMETRIC_SIGN - 620)) | (1L << (ASYMMETRIC_VERIFY - 620)) | (1L << (ATAN - 620)) | (1L << (ATAN2 - 620)) | (1L << (BENCHMARK - 620)) | (1L << (BIN - 620)) | (1L << (BIT_COUNT - 620)) | (1L << (BIT_LENGTH - 620)) | (1L << (BUFFER - 620)) | (1L << (CEIL - 620)) | (1L << (CEILING - 620)) | (1L << (CENTROID - 620)) | (1L << (CHARACTER_LENGTH - 620)) | (1L << (CHARSET - 620)) | (1L << (CHAR_LENGTH - 620)) | (1L << (COERCIBILITY - 620)) | (1L << (COLLATION - 620)) | (1L << (COMPRESS - 620)) | (1L << (CONCAT - 620)) | (1L << (CONCAT_WS - 620)) | (1L << (CONNECTION_ID - 620)) | (1L << (CONV - 620)) | (1L << (CONVERT_TZ - 620)) | (1L << (COS - 620)) | (1L << (COT - 620)) | (1L << (CRC32 - 620)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1L << (CREATE_DH_PARAMETERS - 620)) | (1L << (CREATE_DIGEST - 620)) | (1L << (CROSSES - 620)) | (1L << (DATEDIFF - 620)) | (1L << (DATE_FORMAT - 620)) | (1L << (DAYNAME - 620)) | (1L << (DAYOFMONTH - 620)) | (1L << (DAYOFWEEK - 620)) | (1L << (DAYOFYEAR - 620)) | (1L << (DECODE - 620)) | (1L << (DEGREES - 620)) | (1L << (DES_DECRYPT - 620)))) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & ((1L << (DES_ENCRYPT - 684)) | (1L << (DIMENSION - 684)) | (1L << (DISJOINT - 684)) | (1L << (ELT - 684)) | (1L << (ENCODE - 684)) | (1L << (ENCRYPT - 684)) | (1L << (ENDPOINT - 684)) | (1L << (ENVELOPE - 684)) | (1L << (EQUALS - 684)) | (1L << (EXP - 684)) | (1L << (EXPORT_SET - 684)) | (1L << (EXTERIORRING - 684)) | (1L << (EXTRACTVALUE - 684)) | (1L << (FIELD - 684)) | (1L << (FIND_IN_SET - 684)) | (1L << (FLOOR - 684)) | (1L << (FORMAT - 684)) | (1L << (FOUND_ROWS - 684)) | (1L << (FROM_BASE64 - 684)) | (1L << (FROM_DAYS - 684)) | (1L << (FROM_UNIXTIME - 684)) | (1L << (GEOMCOLLFROMTEXT - 684)) | (1L << (GEOMCOLLFROMWKB - 684)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 684)) | (1L << (GEOMETRYFROMTEXT - 684)) | (1L << (GEOMETRYFROMWKB - 684)) | (1L << (GEOMETRYN - 684)) | (1L << (GEOMETRYTYPE - 684)) | (1L << (GEOMFROMTEXT - 684)) | (1L << (GEOMFROMWKB - 684)) | (1L << (GET_FORMAT - 684)) | (1L << (GET_LOCK - 684)) | (1L << (GLENGTH - 684)) | (1L << (GREATEST - 684)) | (1L << (GTID_SUBSET - 684)) | (1L << (GTID_SUBTRACT - 684)) | (1L << (HEX - 684)) | (1L << (IFNULL - 684)) | (1L << (INET6_ATON - 684)) | (1L << (INET6_NTOA - 684)) | (1L << (INET_ATON - 684)) | (1L << (INET_NTOA - 684)) | (1L << (INSTR - 684)) | (1L << (INTERIORRINGN - 684)) | (1L << (INTERSECTS - 684)) | (1L << (ISCLOSED - 684)) | (1L << (ISEMPTY - 684)) | (1L << (ISNULL - 684)) | (1L << (ISSIMPLE - 684)) | (1L << (IS_FREE_LOCK - 684)) | (1L << (IS_IPV4 - 684)) | (1L << (IS_IPV4_COMPAT - 684)) | (1L << (IS_IPV4_MAPPED - 684)) | (1L << (IS_IPV6 - 684)) | (1L << (IS_USED_LOCK - 684)) | (1L << (LAST_INSERT_ID - 684)) | (1L << (LCASE - 684)) | (1L << (LEAST - 684)) | (1L << (LENGTH - 684)) | (1L << (LINEFROMTEXT - 684)) | (1L << (LINEFROMWKB - 684)) | (1L << (LINESTRINGFROMTEXT - 684)) | (1L << (LINESTRINGFROMWKB - 684)))) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & ((1L << (LN - 748)) | (1L << (LOAD_FILE - 748)) | (1L << (LOCATE - 748)) | (1L << (LOG - 748)) | (1L << (LOG10 - 748)) | (1L << (LOG2 - 748)) | (1L << (LOWER - 748)) | (1L << (LPAD - 748)) | (1L << (LTRIM - 748)) | (1L << (MAKEDATE - 748)) | (1L << (MAKETIME - 748)) | (1L << (MAKE_SET - 748)) | (1L << (MASTER_POS_WAIT - 748)) | (1L << (MBRCONTAINS - 748)) | (1L << (MBRDISJOINT - 748)) | (1L << (MBREQUAL - 748)) | (1L << (MBRINTERSECTS - 748)) | (1L << (MBROVERLAPS - 748)) | (1L << (MBRTOUCHES - 748)) | (1L << (MBRWITHIN - 748)) | (1L << (MD5 - 748)) | (1L << (MLINEFROMTEXT - 748)) | (1L << (MLINEFROMWKB - 748)) | (1L << (MONTHNAME - 748)) | (1L << (MPOINTFROMTEXT - 748)) | (1L << (MPOINTFROMWKB - 748)) | (1L << (MPOLYFROMTEXT - 748)) | (1L << (MPOLYFROMWKB - 748)) | (1L << (MULTILINESTRINGFROMTEXT - 748)) | (1L << (MULTILINESTRINGFROMWKB - 748)) | (1L << (MULTIPOINTFROMTEXT - 748)) | (1L << (MULTIPOINTFROMWKB - 748)) | (1L << (MULTIPOLYGONFROMTEXT - 748)) | (1L << (MULTIPOLYGONFROMWKB - 748)) | (1L << (NAME_CONST - 748)) | (1L << (NULLIF - 748)) | (1L << (NUMGEOMETRIES - 748)) | (1L << (NUMINTERIORRINGS - 748)) | (1L << (NUMPOINTS - 748)) | (1L << (OCT - 748)) | (1L << (OCTET_LENGTH - 748)) | (1L << (ORD - 748)) | (1L << (OVERLAPS - 748)) | (1L << (PERIOD_ADD - 748)) | (1L << (PERIOD_DIFF - 748)) | (1L << (PI - 748)) | (1L << (POINTFROMTEXT - 748)) | (1L << (POINTFROMWKB - 748)) | (1L << (POINTN - 748)) | (1L << (POLYFROMTEXT - 748)) | (1L << (POLYFROMWKB - 748)) | (1L << (POLYGONFROMTEXT - 748)) | (1L << (POLYGONFROMWKB - 748)) | (1L << (POW - 748)) | (1L << (POWER - 748)) | (1L << (QUOTE - 748)) | (1L << (RADIANS - 748)) | (1L << (RAND - 748)) | (1L << (RANDOM_BYTES - 748)) | (1L << (RELEASE_LOCK - 748)) | (1L << (REVERSE - 748)) | (1L << (ROUND - 748)) | (1L << (ROW_COUNT - 748)) | (1L << (RPAD - 748)))) != 0) || ((((_la - 812)) & ~0x3f) == 0 && ((1L << (_la - 812)) & ((1L << (RTRIM - 812)) | (1L << (SEC_TO_TIME - 812)) | (1L << (SESSION_USER - 812)) | (1L << (SHA - 812)) | (1L << (SHA1 - 812)) | (1L << (SHA2 - 812)) | (1L << (SIGN - 812)) | (1L << (SIN - 812)) | (1L << (SLEEP - 812)) | (1L << (SOUNDEX - 812)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1L << (SQRT - 812)) | (1L << (SRID - 812)) | (1L << (STARTPOINT - 812)) | (1L << (STRCMP - 812)) | (1L << (STR_TO_DATE - 812)) | (1L << (ST_AREA - 812)) | (1L << (ST_ASBINARY - 812)) | (1L << (ST_ASTEXT - 812)) | (1L << (ST_ASWKB - 812)) | (1L << (ST_ASWKT - 812)) | (1L << (ST_BUFFER - 812)) | (1L << (ST_CENTROID - 812)) | (1L << (ST_CONTAINS - 812)) | (1L << (ST_CROSSES - 812)) | (1L << (ST_DIFFERENCE - 812)) | (1L << (ST_DIMENSION - 812)) | (1L << (ST_DISJOINT - 812)) | (1L << (ST_DISTANCE - 812)) | (1L << (ST_ENDPOINT - 812)) | (1L << (ST_ENVELOPE - 812)) | (1L << (ST_EQUALS - 812)) | (1L << (ST_EXTERIORRING - 812)) | (1L << (ST_GEOMCOLLFROMTEXT - 812)) | (1L << (ST_GEOMCOLLFROMTXT - 812)) | (1L << (ST_GEOMCOLLFROMWKB - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1L << (ST_GEOMETRYFROMTEXT - 812)) | (1L << (ST_GEOMETRYFROMWKB - 812)) | (1L << (ST_GEOMETRYN - 812)) | (1L << (ST_GEOMETRYTYPE - 812)) | (1L << (ST_GEOMFROMTEXT - 812)) | (1L << (ST_GEOMFROMWKB - 812)) | (1L << (ST_INTERIORRINGN - 812)) | (1L << (ST_INTERSECTION - 812)) | (1L << (ST_INTERSECTS - 812)) | (1L << (ST_ISCLOSED - 812)) | (1L << (ST_ISEMPTY - 812)) | (1L << (ST_ISSIMPLE - 812)) | (1L << (ST_LINEFROMTEXT - 812)) | (1L << (ST_LINEFROMWKB - 812)) | (1L << (ST_LINESTRINGFROMTEXT - 812)) | (1L << (ST_LINESTRINGFROMWKB - 812)) | (1L << (ST_NUMGEOMETRIES - 812)) | (1L << (ST_NUMINTERIORRING - 812)) | (1L << (ST_NUMINTERIORRINGS - 812)) | (1L << (ST_NUMPOINTS - 812)) | (1L << (ST_OVERLAPS - 812)) | (1L << (ST_POINTFROMTEXT - 812)) | (1L << (ST_POINTFROMWKB - 812)) | (1L << (ST_POINTN - 812)) | (1L << (ST_POLYFROMTEXT - 812)) | (1L << (ST_POLYFROMWKB - 812)))) != 0) || ((((_la - 876)) & ~0x3f) == 0 && ((1L << (_la - 876)) & ((1L << (ST_POLYGONFROMTEXT - 876)) | (1L << (ST_POLYGONFROMWKB - 876)) | (1L << (ST_SRID - 876)) | (1L << (ST_STARTPOINT - 876)) | (1L << (ST_SYMDIFFERENCE - 876)) | (1L << (ST_TOUCHES - 876)) | (1L << (ST_UNION - 876)) | (1L << (ST_WITHIN - 876)) | (1L << (ST_X - 876)) | (1L << (ST_Y - 876)) | (1L << (SUBDATE - 876)) | (1L << (SUBSTRING_INDEX - 876)) | (1L << (SUBTIME - 876)) | (1L << (SYSTEM_USER - 876)) | (1L << (TAN - 876)) | (1L << (TIMEDIFF - 876)) | (1L << (TIMESTAMPADD - 876)) | (1L << (TIMESTAMPDIFF - 876)) | (1L << (TIME_FORMAT - 876)) | (1L << (TIME_TO_SEC - 876)) | (1L << (TOUCHES - 876)) | (1L << (TO_BASE64 - 876)) | (1L << (TO_DAYS - 876)) | (1L << (TO_SECONDS - 876)) | (1L << (UCASE - 876)) | (1L << (UNCOMPRESS - 876)) | (1L << (UNCOMPRESSED_LENGTH - 876)) | (1L << (UNHEX - 876)) | (1L << (UNIX_TIMESTAMP - 876)) | (1L << (UPDATEXML - 876)) | (1L << (UPPER - 876)) | (1L << (UUID - 876)) | (1L << (UUID_SHORT - 876)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 876)) | (1L << (VERSION - 876)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1L << (WEEKDAY - 876)) | (1L << (WEEKOFYEAR - 876)) | (1L << (WEIGHT_STRING - 876)) | (1L << (WITHIN - 876)) | (1L << (YEARWEEK - 876)) | (1L << (Y_FUNCTION - 876)) | (1L << (X_FUNCTION - 876)))) != 0) || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (LR_BRACKET - 945)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 945)) | (1L << (ID - 945)) | (1L << (REVERSE_QUOTE_ID - 945)))) != 0) );
				}
			}

			State = 4025; Match(END);
			State = 4026; Match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ProcedureSqlStatementContext _procedureSqlStatement;
		public IList<ProcedureSqlStatementContext> _thenStatements = new List<ProcedureSqlStatementContext>();
		public IList<ProcedureSqlStatementContext> _elseStatements = new List<ProcedureSqlStatementContext>();
		public ITerminalNode[] IF() { return GetTokens(MySqlParser.IF); }
		public ITerminalNode IF(int i) {
			return GetToken(MySqlParser.IF, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
		public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		public ElifAlternativeContext[] elifAlternative() {
			return GetRuleContexts<ElifAlternativeContext>();
		}
		public ElifAlternativeContext elifAlternative(int i) {
			return GetRuleContext<ElifAlternativeContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(MySqlParser.ELSE, 0); }
		public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 348, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4028; Match(IF);
			State = 4029; expression(0);
			State = 4030; Match(THEN);
			State = 4032;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4031; _localctx._procedureSqlStatement = procedureSqlStatement();
				_localctx._thenStatements.Add(_localctx._procedureSqlStatement);
				}
				}
				State = 4034;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DATABASE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (UNLOCK - 155)) | (1L << (UPDATE - 155)) | (1L << (USE - 155)) | (1L << (WHILE - 155)) | (1L << (DATE - 155)) | (1L << (TIME - 155)) | (1L << (TIMESTAMP - 155)) | (1L << (DATETIME - 155)) | (1L << (YEAR - 155)) | (1L << (TEXT - 155)) | (1L << (ENUM - 155)) | (1L << (COUNT - 155)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (POSITION - 236)) | (1L << (ACCOUNT - 236)) | (1L << (ACTION - 236)) | (1L << (AFTER - 236)) | (1L << (AGGREGATE - 236)) | (1L << (ALGORITHM - 236)) | (1L << (ANY - 236)) | (1L << (AT - 236)) | (1L << (AUTHORS - 236)) | (1L << (AUTOCOMMIT - 236)) | (1L << (AUTOEXTEND_SIZE - 236)) | (1L << (AUTO_INCREMENT - 236)) | (1L << (AVG_ROW_LENGTH - 236)) | (1L << (BEGIN - 236)) | (1L << (BINLOG - 236)) | (1L << (BIT - 236)) | (1L << (BLOCK - 236)) | (1L << (BOOL - 236)) | (1L << (BOOLEAN - 236)) | (1L << (BTREE - 236)) | (1L << (CACHE - 236)) | (1L << (CASCADED - 236)) | (1L << (CHAIN - 236)) | (1L << (CHANNEL - 236)) | (1L << (CHECKSUM - 236)) | (1L << (CIPHER - 236)) | (1L << (CLIENT - 236)) | (1L << (CLOSE - 236)) | (1L << (COALESCE - 236)) | (1L << (CODE - 236)) | (1L << (COLUMNS - 236)) | (1L << (COLUMN_FORMAT - 236)) | (1L << (COMMENT - 236)) | (1L << (COMMIT - 236)) | (1L << (COMPACT - 236)) | (1L << (COMPLETION - 236)) | (1L << (COMPRESSED - 236)) | (1L << (COMPRESSION - 236)) | (1L << (CONCURRENT - 236)) | (1L << (CONNECTION - 236)) | (1L << (CONSISTENT - 236)) | (1L << (CONTAINS - 236)) | (1L << (CONTEXT - 236)) | (1L << (CONTRIBUTORS - 236)) | (1L << (COPY - 236)) | (1L << (CPU - 236)) | (1L << (DATA - 236)) | (1L << (DATAFILE - 236)) | (1L << (DEALLOCATE - 236)) | (1L << (DEFAULT_AUTH - 236)) | (1L << (DEFINER - 236)) | (1L << (DELAY_KEY_WRITE - 236)) | (1L << (DIRECTORY - 236)) | (1L << (DISABLE - 236)) | (1L << (DISCARD - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DISK - 300)) | (1L << (DO - 300)) | (1L << (DUMPFILE - 300)) | (1L << (DUPLICATE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENABLE - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (ENDS - 300)) | (1L << (ENGINE - 300)) | (1L << (ENGINES - 300)) | (1L << (ERROR - 300)) | (1L << (ERRORS - 300)) | (1L << (ESCAPE - 300)) | (1L << (EVEN - 300)) | (1L << (EVENT - 300)) | (1L << (EVENTS - 300)) | (1L << (EVERY - 300)) | (1L << (EXCHANGE - 300)) | (1L << (EXCLUSIVE - 300)) | (1L << (EXPIRE - 300)) | (1L << (EXTENT_SIZE - 300)) | (1L << (FAULTS - 300)) | (1L << (FIELDS - 300)) | (1L << (FILE_BLOCK_SIZE - 300)) | (1L << (FILTER - 300)) | (1L << (FIRST - 300)) | (1L << (FIXED - 300)) | (1L << (FLUSH - 300)) | (1L << (FOLLOWS - 300)) | (1L << (FULL - 300)) | (1L << (FUNCTION - 300)) | (1L << (GLOBAL - 300)) | (1L << (GRANTS - 300)) | (1L << (GROUP_REPLICATION - 300)) | (1L << (HANDLER - 300)) | (1L << (HASH - 300)) | (1L << (HELP - 300)) | (1L << (HOST - 300)) | (1L << (IDENTIFIED - 300)) | (1L << (IGNORE_SERVER_IDS - 300)) | (1L << (IMPORT - 300)) | (1L << (INDEXES - 300)) | (1L << (INITIAL_SIZE - 300)) | (1L << (INPLACE - 300)) | (1L << (INSERT_METHOD - 300)) | (1L << (INSTALL - 300)) | (1L << (INSTANCE - 300)) | (1L << (INVOKER - 300)) | (1L << (IO - 300)) | (1L << (IO_THREAD - 300)) | (1L << (IPC - 300)) | (1L << (ISOLATION - 300)) | (1L << (ISSUER - 300)) | (1L << (KEY_BLOCK_SIZE - 300)) | (1L << (LANGUAGE - 300)) | (1L << (LAST - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (LEAVES - 364)) | (1L << (LESS - 364)) | (1L << (LEVEL - 364)) | (1L << (LIST - 364)) | (1L << (LOCAL - 364)) | (1L << (LOGFILE - 364)) | (1L << (LOGS - 364)) | (1L << (MASTER - 364)) | (1L << (MASTER_AUTO_POSITION - 364)) | (1L << (MASTER_CONNECT_RETRY - 364)) | (1L << (MASTER_DELAY - 364)) | (1L << (MASTER_HEARTBEAT_PERIOD - 364)) | (1L << (MASTER_HOST - 364)) | (1L << (MASTER_LOG_FILE - 364)) | (1L << (MASTER_LOG_POS - 364)) | (1L << (MASTER_PASSWORD - 364)) | (1L << (MASTER_PORT - 364)) | (1L << (MASTER_RETRY_COUNT - 364)) | (1L << (MASTER_SSL - 364)) | (1L << (MASTER_SSL_CA - 364)) | (1L << (MASTER_SSL_CAPATH - 364)) | (1L << (MASTER_SSL_CERT - 364)) | (1L << (MASTER_SSL_CIPHER - 364)) | (1L << (MASTER_SSL_CRL - 364)) | (1L << (MASTER_SSL_CRLPATH - 364)) | (1L << (MASTER_SSL_KEY - 364)) | (1L << (MASTER_TLS_VERSION - 364)) | (1L << (MASTER_USER - 364)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 364)) | (1L << (MAX_QUERIES_PER_HOUR - 364)) | (1L << (MAX_ROWS - 364)) | (1L << (MAX_SIZE - 364)) | (1L << (MAX_UPDATES_PER_HOUR - 364)) | (1L << (MAX_USER_CONNECTIONS - 364)) | (1L << (MERGE - 364)) | (1L << (MID - 364)) | (1L << (MIGRATE - 364)) | (1L << (MIN_ROWS - 364)) | (1L << (MODIFY - 364)) | (1L << (MUTEX - 364)) | (1L << (MYSQL - 364)) | (1L << (NAME - 364)) | (1L << (NAMES - 364)) | (1L << (NCHAR - 364)) | (1L << (NEVER - 364)) | (1L << (NO - 364)) | (1L << (NODEGROUP - 364)) | (1L << (NONE - 364)) | (1L << (OFFLINE - 364)) | (1L << (OFFSET - 364)) | (1L << (OJ - 364)) | (1L << (OLD_PASSWORD - 364)) | (1L << (ONE - 364)) | (1L << (ONLINE - 364)) | (1L << (ONLY - 364)) | (1L << (OPEN - 364)) | (1L << (OPTIMIZER_COSTS - 364)) | (1L << (OPTIONS - 364)) | (1L << (OWNER - 364)) | (1L << (PACK_KEYS - 364)) | (1L << (PAGE - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (PARSER - 428)) | (1L << (PARTIAL - 428)) | (1L << (PARTITIONING - 428)) | (1L << (PARTITIONS - 428)) | (1L << (PASSWORD - 428)) | (1L << (PHASE - 428)) | (1L << (PLUGIN_DIR - 428)) | (1L << (PLUGINS - 428)) | (1L << (PORT - 428)) | (1L << (PRECEDES - 428)) | (1L << (PREPARE - 428)) | (1L << (PRESERVE - 428)) | (1L << (PREV - 428)) | (1L << (PROCESSLIST - 428)) | (1L << (PROFILE - 428)) | (1L << (PROFILES - 428)) | (1L << (PROXY - 428)) | (1L << (QUERY - 428)) | (1L << (QUICK - 428)) | (1L << (REBUILD - 428)) | (1L << (RECOVER - 428)) | (1L << (REDO_BUFFER_SIZE - 428)) | (1L << (REDUNDANT - 428)) | (1L << (RELAY_LOG_FILE - 428)) | (1L << (RELAY_LOG_POS - 428)) | (1L << (RELAYLOG - 428)) | (1L << (REMOVE - 428)) | (1L << (REORGANIZE - 428)) | (1L << (REPAIR - 428)) | (1L << (REPLICATE_DO_DB - 428)) | (1L << (REPLICATE_DO_TABLE - 428)) | (1L << (REPLICATE_IGNORE_DB - 428)) | (1L << (REPLICATE_IGNORE_TABLE - 428)) | (1L << (REPLICATE_REWRITE_DB - 428)) | (1L << (REPLICATE_WILD_DO_TABLE - 428)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 428)) | (1L << (REPLICATION - 428)) | (1L << (RESET - 428)) | (1L << (RESUME - 428)) | (1L << (RETURNS - 428)) | (1L << (ROLLBACK - 428)) | (1L << (ROLLUP - 428)) | (1L << (ROTATE - 428)) | (1L << (ROW - 428)) | (1L << (ROWS - 428)) | (1L << (ROW_FORMAT - 428)) | (1L << (SAVEPOINT - 428)) | (1L << (SCHEDULE - 428)) | (1L << (SECURITY - 428)) | (1L << (SERVER - 428)) | (1L << (SESSION - 428)) | (1L << (SHARE - 428)) | (1L << (SHARED - 428)) | (1L << (SIGNED - 428)) | (1L << (SIMPLE - 428)) | (1L << (SLAVE - 428)) | (1L << (SNAPSHOT - 428)) | (1L << (SOCKET - 428)) | (1L << (SOME - 428)) | (1L << (SOUNDS - 428)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (SOURCE - 492)) | (1L << (SQL_AFTER_GTIDS - 492)) | (1L << (SQL_AFTER_MTS_GAPS - 492)) | (1L << (SQL_BEFORE_GTIDS - 492)) | (1L << (SQL_BUFFER_RESULT - 492)) | (1L << (SQL_CACHE - 492)) | (1L << (SQL_NO_CACHE - 492)) | (1L << (SQL_THREAD - 492)) | (1L << (START - 492)) | (1L << (STARTS - 492)) | (1L << (STATS_AUTO_RECALC - 492)) | (1L << (STATS_PERSISTENT - 492)) | (1L << (STATS_SAMPLE_PAGES - 492)) | (1L << (STATUS - 492)) | (1L << (STOP - 492)) | (1L << (STORAGE - 492)) | (1L << (STRING - 492)) | (1L << (SUBJECT - 492)) | (1L << (SUBPARTITION - 492)) | (1L << (SUBPARTITIONS - 492)) | (1L << (SUSPEND - 492)) | (1L << (SWAPS - 492)) | (1L << (SWITCHES - 492)) | (1L << (TABLESPACE - 492)) | (1L << (TEMPORARY - 492)) | (1L << (TEMPTABLE - 492)) | (1L << (THAN - 492)) | (1L << (TRANSACTION - 492)) | (1L << (TRUNCATE - 492)) | (1L << (UNDEFINED - 492)) | (1L << (UNDOFILE - 492)) | (1L << (UNDO_BUFFER_SIZE - 492)) | (1L << (UNINSTALL - 492)) | (1L << (UNKNOWN - 492)) | (1L << (UPGRADE - 492)) | (1L << (USER - 492)) | (1L << (VALIDATION - 492)) | (1L << (VALUE - 492)) | (1L << (VARIABLES - 492)) | (1L << (VIEW - 492)) | (1L << (WAIT - 492)) | (1L << (WARNINGS - 492)) | (1L << (WITHOUT - 492)) | (1L << (WORK - 492)) | (1L << (WRAPPER - 492)) | (1L << (X509 - 492)) | (1L << (XA - 492)) | (1L << (XML - 492)) | (1L << (QUARTER - 492)) | (1L << (MONTH - 492)) | (1L << (DAY - 492)) | (1L << (HOUR - 492)) | (1L << (MINUTE - 492)) | (1L << (WEEK - 492)))) != 0) || ((((_la - 556)) & ~0x3f) == 0 && ((1L << (_la - 556)) & ((1L << (SECOND - 556)) | (1L << (MICROSECOND - 556)) | (1L << (TABLES - 556)) | (1L << (ROUTINE - 556)) | (1L << (EXECUTE - 556)) | (1L << (FILE - 556)) | (1L << (PROCESS - 556)) | (1L << (RELOAD - 556)) | (1L << (SHUTDOWN - 556)) | (1L << (SUPER - 556)) | (1L << (PRIVILEGES - 556)) | (1L << (ARMSCII8 - 556)) | (1L << (ASCII - 556)) | (1L << (BIG5 - 556)) | (1L << (CP1250 - 556)) | (1L << (CP1251 - 556)) | (1L << (CP1256 - 556)) | (1L << (CP1257 - 556)) | (1L << (CP850 - 556)) | (1L << (CP852 - 556)) | (1L << (CP866 - 556)) | (1L << (CP932 - 556)) | (1L << (DEC8 - 556)) | (1L << (EUCJPMS - 556)) | (1L << (EUCKR - 556)) | (1L << (GB2312 - 556)) | (1L << (GBK - 556)) | (1L << (GEOSTD8 - 556)) | (1L << (GREEK - 556)) | (1L << (HEBREW - 556)) | (1L << (HP8 - 556)) | (1L << (KEYBCS2 - 556)) | (1L << (KOI8R - 556)) | (1L << (KOI8U - 556)) | (1L << (LATIN1 - 556)) | (1L << (LATIN2 - 556)) | (1L << (LATIN5 - 556)) | (1L << (LATIN7 - 556)) | (1L << (MACCE - 556)) | (1L << (MACROMAN - 556)) | (1L << (SJIS - 556)) | (1L << (SWE7 - 556)) | (1L << (TIS620 - 556)) | (1L << (UCS2 - 556)) | (1L << (UJIS - 556)) | (1L << (UTF16 - 556)) | (1L << (UTF16LE - 556)) | (1L << (UTF32 - 556)) | (1L << (UTF8 - 556)) | (1L << (UTF8MB3 - 556)) | (1L << (UTF8MB4 - 556)) | (1L << (ARCHIVE - 556)) | (1L << (BLACKHOLE - 556)) | (1L << (CSV - 556)) | (1L << (FEDERATED - 556)) | (1L << (INNODB - 556)) | (1L << (MEMORY - 556)) | (1L << (MRG_MYISAM - 556)) | (1L << (MYISAM - 556)) | (1L << (NDB - 556)) | (1L << (NDBCLUSTER - 556)) | (1L << (PERFOMANCE_SCHEMA - 556)) | (1L << (REPEATABLE - 556)) | (1L << (COMMITTED - 556)))) != 0) || ((((_la - 620)) & ~0x3f) == 0 && ((1L << (_la - 620)) & ((1L << (UNCOMMITTED - 620)) | (1L << (SERIALIZABLE - 620)) | (1L << (GEOMETRYCOLLECTION - 620)) | (1L << (LINESTRING - 620)) | (1L << (MULTILINESTRING - 620)) | (1L << (MULTIPOINT - 620)) | (1L << (MULTIPOLYGON - 620)) | (1L << (POINT - 620)) | (1L << (POLYGON - 620)) | (1L << (ABS - 620)) | (1L << (ACOS - 620)) | (1L << (ADDDATE - 620)) | (1L << (ADDTIME - 620)) | (1L << (AES_DECRYPT - 620)) | (1L << (AES_ENCRYPT - 620)) | (1L << (AREA - 620)) | (1L << (ASBINARY - 620)) | (1L << (ASIN - 620)) | (1L << (ASTEXT - 620)) | (1L << (ASWKB - 620)) | (1L << (ASWKT - 620)) | (1L << (ASYMMETRIC_DECRYPT - 620)) | (1L << (ASYMMETRIC_DERIVE - 620)) | (1L << (ASYMMETRIC_ENCRYPT - 620)) | (1L << (ASYMMETRIC_SIGN - 620)) | (1L << (ASYMMETRIC_VERIFY - 620)) | (1L << (ATAN - 620)) | (1L << (ATAN2 - 620)) | (1L << (BENCHMARK - 620)) | (1L << (BIN - 620)) | (1L << (BIT_COUNT - 620)) | (1L << (BIT_LENGTH - 620)) | (1L << (BUFFER - 620)) | (1L << (CEIL - 620)) | (1L << (CEILING - 620)) | (1L << (CENTROID - 620)) | (1L << (CHARACTER_LENGTH - 620)) | (1L << (CHARSET - 620)) | (1L << (CHAR_LENGTH - 620)) | (1L << (COERCIBILITY - 620)) | (1L << (COLLATION - 620)) | (1L << (COMPRESS - 620)) | (1L << (CONCAT - 620)) | (1L << (CONCAT_WS - 620)) | (1L << (CONNECTION_ID - 620)) | (1L << (CONV - 620)) | (1L << (CONVERT_TZ - 620)) | (1L << (COS - 620)) | (1L << (COT - 620)) | (1L << (CRC32 - 620)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1L << (CREATE_DH_PARAMETERS - 620)) | (1L << (CREATE_DIGEST - 620)) | (1L << (CROSSES - 620)) | (1L << (DATEDIFF - 620)) | (1L << (DATE_FORMAT - 620)) | (1L << (DAYNAME - 620)) | (1L << (DAYOFMONTH - 620)) | (1L << (DAYOFWEEK - 620)) | (1L << (DAYOFYEAR - 620)) | (1L << (DECODE - 620)) | (1L << (DEGREES - 620)) | (1L << (DES_DECRYPT - 620)))) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & ((1L << (DES_ENCRYPT - 684)) | (1L << (DIMENSION - 684)) | (1L << (DISJOINT - 684)) | (1L << (ELT - 684)) | (1L << (ENCODE - 684)) | (1L << (ENCRYPT - 684)) | (1L << (ENDPOINT - 684)) | (1L << (ENVELOPE - 684)) | (1L << (EQUALS - 684)) | (1L << (EXP - 684)) | (1L << (EXPORT_SET - 684)) | (1L << (EXTERIORRING - 684)) | (1L << (EXTRACTVALUE - 684)) | (1L << (FIELD - 684)) | (1L << (FIND_IN_SET - 684)) | (1L << (FLOOR - 684)) | (1L << (FORMAT - 684)) | (1L << (FOUND_ROWS - 684)) | (1L << (FROM_BASE64 - 684)) | (1L << (FROM_DAYS - 684)) | (1L << (FROM_UNIXTIME - 684)) | (1L << (GEOMCOLLFROMTEXT - 684)) | (1L << (GEOMCOLLFROMWKB - 684)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 684)) | (1L << (GEOMETRYFROMTEXT - 684)) | (1L << (GEOMETRYFROMWKB - 684)) | (1L << (GEOMETRYN - 684)) | (1L << (GEOMETRYTYPE - 684)) | (1L << (GEOMFROMTEXT - 684)) | (1L << (GEOMFROMWKB - 684)) | (1L << (GET_FORMAT - 684)) | (1L << (GET_LOCK - 684)) | (1L << (GLENGTH - 684)) | (1L << (GREATEST - 684)) | (1L << (GTID_SUBSET - 684)) | (1L << (GTID_SUBTRACT - 684)) | (1L << (HEX - 684)) | (1L << (IFNULL - 684)) | (1L << (INET6_ATON - 684)) | (1L << (INET6_NTOA - 684)) | (1L << (INET_ATON - 684)) | (1L << (INET_NTOA - 684)) | (1L << (INSTR - 684)) | (1L << (INTERIORRINGN - 684)) | (1L << (INTERSECTS - 684)) | (1L << (ISCLOSED - 684)) | (1L << (ISEMPTY - 684)) | (1L << (ISNULL - 684)) | (1L << (ISSIMPLE - 684)) | (1L << (IS_FREE_LOCK - 684)) | (1L << (IS_IPV4 - 684)) | (1L << (IS_IPV4_COMPAT - 684)) | (1L << (IS_IPV4_MAPPED - 684)) | (1L << (IS_IPV6 - 684)) | (1L << (IS_USED_LOCK - 684)) | (1L << (LAST_INSERT_ID - 684)) | (1L << (LCASE - 684)) | (1L << (LEAST - 684)) | (1L << (LENGTH - 684)) | (1L << (LINEFROMTEXT - 684)) | (1L << (LINEFROMWKB - 684)) | (1L << (LINESTRINGFROMTEXT - 684)) | (1L << (LINESTRINGFROMWKB - 684)))) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & ((1L << (LN - 748)) | (1L << (LOAD_FILE - 748)) | (1L << (LOCATE - 748)) | (1L << (LOG - 748)) | (1L << (LOG10 - 748)) | (1L << (LOG2 - 748)) | (1L << (LOWER - 748)) | (1L << (LPAD - 748)) | (1L << (LTRIM - 748)) | (1L << (MAKEDATE - 748)) | (1L << (MAKETIME - 748)) | (1L << (MAKE_SET - 748)) | (1L << (MASTER_POS_WAIT - 748)) | (1L << (MBRCONTAINS - 748)) | (1L << (MBRDISJOINT - 748)) | (1L << (MBREQUAL - 748)) | (1L << (MBRINTERSECTS - 748)) | (1L << (MBROVERLAPS - 748)) | (1L << (MBRTOUCHES - 748)) | (1L << (MBRWITHIN - 748)) | (1L << (MD5 - 748)) | (1L << (MLINEFROMTEXT - 748)) | (1L << (MLINEFROMWKB - 748)) | (1L << (MONTHNAME - 748)) | (1L << (MPOINTFROMTEXT - 748)) | (1L << (MPOINTFROMWKB - 748)) | (1L << (MPOLYFROMTEXT - 748)) | (1L << (MPOLYFROMWKB - 748)) | (1L << (MULTILINESTRINGFROMTEXT - 748)) | (1L << (MULTILINESTRINGFROMWKB - 748)) | (1L << (MULTIPOINTFROMTEXT - 748)) | (1L << (MULTIPOINTFROMWKB - 748)) | (1L << (MULTIPOLYGONFROMTEXT - 748)) | (1L << (MULTIPOLYGONFROMWKB - 748)) | (1L << (NAME_CONST - 748)) | (1L << (NULLIF - 748)) | (1L << (NUMGEOMETRIES - 748)) | (1L << (NUMINTERIORRINGS - 748)) | (1L << (NUMPOINTS - 748)) | (1L << (OCT - 748)) | (1L << (OCTET_LENGTH - 748)) | (1L << (ORD - 748)) | (1L << (OVERLAPS - 748)) | (1L << (PERIOD_ADD - 748)) | (1L << (PERIOD_DIFF - 748)) | (1L << (PI - 748)) | (1L << (POINTFROMTEXT - 748)) | (1L << (POINTFROMWKB - 748)) | (1L << (POINTN - 748)) | (1L << (POLYFROMTEXT - 748)) | (1L << (POLYFROMWKB - 748)) | (1L << (POLYGONFROMTEXT - 748)) | (1L << (POLYGONFROMWKB - 748)) | (1L << (POW - 748)) | (1L << (POWER - 748)) | (1L << (QUOTE - 748)) | (1L << (RADIANS - 748)) | (1L << (RAND - 748)) | (1L << (RANDOM_BYTES - 748)) | (1L << (RELEASE_LOCK - 748)) | (1L << (REVERSE - 748)) | (1L << (ROUND - 748)) | (1L << (ROW_COUNT - 748)) | (1L << (RPAD - 748)))) != 0) || ((((_la - 812)) & ~0x3f) == 0 && ((1L << (_la - 812)) & ((1L << (RTRIM - 812)) | (1L << (SEC_TO_TIME - 812)) | (1L << (SESSION_USER - 812)) | (1L << (SHA - 812)) | (1L << (SHA1 - 812)) | (1L << (SHA2 - 812)) | (1L << (SIGN - 812)) | (1L << (SIN - 812)) | (1L << (SLEEP - 812)) | (1L << (SOUNDEX - 812)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1L << (SQRT - 812)) | (1L << (SRID - 812)) | (1L << (STARTPOINT - 812)) | (1L << (STRCMP - 812)) | (1L << (STR_TO_DATE - 812)) | (1L << (ST_AREA - 812)) | (1L << (ST_ASBINARY - 812)) | (1L << (ST_ASTEXT - 812)) | (1L << (ST_ASWKB - 812)) | (1L << (ST_ASWKT - 812)) | (1L << (ST_BUFFER - 812)) | (1L << (ST_CENTROID - 812)) | (1L << (ST_CONTAINS - 812)) | (1L << (ST_CROSSES - 812)) | (1L << (ST_DIFFERENCE - 812)) | (1L << (ST_DIMENSION - 812)) | (1L << (ST_DISJOINT - 812)) | (1L << (ST_DISTANCE - 812)) | (1L << (ST_ENDPOINT - 812)) | (1L << (ST_ENVELOPE - 812)) | (1L << (ST_EQUALS - 812)) | (1L << (ST_EXTERIORRING - 812)) | (1L << (ST_GEOMCOLLFROMTEXT - 812)) | (1L << (ST_GEOMCOLLFROMTXT - 812)) | (1L << (ST_GEOMCOLLFROMWKB - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1L << (ST_GEOMETRYFROMTEXT - 812)) | (1L << (ST_GEOMETRYFROMWKB - 812)) | (1L << (ST_GEOMETRYN - 812)) | (1L << (ST_GEOMETRYTYPE - 812)) | (1L << (ST_GEOMFROMTEXT - 812)) | (1L << (ST_GEOMFROMWKB - 812)) | (1L << (ST_INTERIORRINGN - 812)) | (1L << (ST_INTERSECTION - 812)) | (1L << (ST_INTERSECTS - 812)) | (1L << (ST_ISCLOSED - 812)) | (1L << (ST_ISEMPTY - 812)) | (1L << (ST_ISSIMPLE - 812)) | (1L << (ST_LINEFROMTEXT - 812)) | (1L << (ST_LINEFROMWKB - 812)) | (1L << (ST_LINESTRINGFROMTEXT - 812)) | (1L << (ST_LINESTRINGFROMWKB - 812)) | (1L << (ST_NUMGEOMETRIES - 812)) | (1L << (ST_NUMINTERIORRING - 812)) | (1L << (ST_NUMINTERIORRINGS - 812)) | (1L << (ST_NUMPOINTS - 812)) | (1L << (ST_OVERLAPS - 812)) | (1L << (ST_POINTFROMTEXT - 812)) | (1L << (ST_POINTFROMWKB - 812)) | (1L << (ST_POINTN - 812)) | (1L << (ST_POLYFROMTEXT - 812)) | (1L << (ST_POLYFROMWKB - 812)))) != 0) || ((((_la - 876)) & ~0x3f) == 0 && ((1L << (_la - 876)) & ((1L << (ST_POLYGONFROMTEXT - 876)) | (1L << (ST_POLYGONFROMWKB - 876)) | (1L << (ST_SRID - 876)) | (1L << (ST_STARTPOINT - 876)) | (1L << (ST_SYMDIFFERENCE - 876)) | (1L << (ST_TOUCHES - 876)) | (1L << (ST_UNION - 876)) | (1L << (ST_WITHIN - 876)) | (1L << (ST_X - 876)) | (1L << (ST_Y - 876)) | (1L << (SUBDATE - 876)) | (1L << (SUBSTRING_INDEX - 876)) | (1L << (SUBTIME - 876)) | (1L << (SYSTEM_USER - 876)) | (1L << (TAN - 876)) | (1L << (TIMEDIFF - 876)) | (1L << (TIMESTAMPADD - 876)) | (1L << (TIMESTAMPDIFF - 876)) | (1L << (TIME_FORMAT - 876)) | (1L << (TIME_TO_SEC - 876)) | (1L << (TOUCHES - 876)) | (1L << (TO_BASE64 - 876)) | (1L << (TO_DAYS - 876)) | (1L << (TO_SECONDS - 876)) | (1L << (UCASE - 876)) | (1L << (UNCOMPRESS - 876)) | (1L << (UNCOMPRESSED_LENGTH - 876)) | (1L << (UNHEX - 876)) | (1L << (UNIX_TIMESTAMP - 876)) | (1L << (UPDATEXML - 876)) | (1L << (UPPER - 876)) | (1L << (UUID - 876)) | (1L << (UUID_SHORT - 876)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 876)) | (1L << (VERSION - 876)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1L << (WEEKDAY - 876)) | (1L << (WEEKOFYEAR - 876)) | (1L << (WEIGHT_STRING - 876)) | (1L << (WITHIN - 876)) | (1L << (YEARWEEK - 876)) | (1L << (Y_FUNCTION - 876)) | (1L << (X_FUNCTION - 876)))) != 0) || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (LR_BRACKET - 945)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 945)) | (1L << (ID - 945)) | (1L << (REVERSE_QUOTE_ID - 945)))) != 0) );
			State = 4039;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSEIF) {
				{
				{
				State = 4036; elifAlternative();
				}
				}
				State = 4041;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4048;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 4042; Match(ELSE);
				State = 4044;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 4043; _localctx._procedureSqlStatement = procedureSqlStatement();
					_localctx._elseStatements.Add(_localctx._procedureSqlStatement);
					}
					}
					State = 4046;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DATABASE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (UNLOCK - 155)) | (1L << (UPDATE - 155)) | (1L << (USE - 155)) | (1L << (WHILE - 155)) | (1L << (DATE - 155)) | (1L << (TIME - 155)) | (1L << (TIMESTAMP - 155)) | (1L << (DATETIME - 155)) | (1L << (YEAR - 155)) | (1L << (TEXT - 155)) | (1L << (ENUM - 155)) | (1L << (COUNT - 155)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (POSITION - 236)) | (1L << (ACCOUNT - 236)) | (1L << (ACTION - 236)) | (1L << (AFTER - 236)) | (1L << (AGGREGATE - 236)) | (1L << (ALGORITHM - 236)) | (1L << (ANY - 236)) | (1L << (AT - 236)) | (1L << (AUTHORS - 236)) | (1L << (AUTOCOMMIT - 236)) | (1L << (AUTOEXTEND_SIZE - 236)) | (1L << (AUTO_INCREMENT - 236)) | (1L << (AVG_ROW_LENGTH - 236)) | (1L << (BEGIN - 236)) | (1L << (BINLOG - 236)) | (1L << (BIT - 236)) | (1L << (BLOCK - 236)) | (1L << (BOOL - 236)) | (1L << (BOOLEAN - 236)) | (1L << (BTREE - 236)) | (1L << (CACHE - 236)) | (1L << (CASCADED - 236)) | (1L << (CHAIN - 236)) | (1L << (CHANNEL - 236)) | (1L << (CHECKSUM - 236)) | (1L << (CIPHER - 236)) | (1L << (CLIENT - 236)) | (1L << (CLOSE - 236)) | (1L << (COALESCE - 236)) | (1L << (CODE - 236)) | (1L << (COLUMNS - 236)) | (1L << (COLUMN_FORMAT - 236)) | (1L << (COMMENT - 236)) | (1L << (COMMIT - 236)) | (1L << (COMPACT - 236)) | (1L << (COMPLETION - 236)) | (1L << (COMPRESSED - 236)) | (1L << (COMPRESSION - 236)) | (1L << (CONCURRENT - 236)) | (1L << (CONNECTION - 236)) | (1L << (CONSISTENT - 236)) | (1L << (CONTAINS - 236)) | (1L << (CONTEXT - 236)) | (1L << (CONTRIBUTORS - 236)) | (1L << (COPY - 236)) | (1L << (CPU - 236)) | (1L << (DATA - 236)) | (1L << (DATAFILE - 236)) | (1L << (DEALLOCATE - 236)) | (1L << (DEFAULT_AUTH - 236)) | (1L << (DEFINER - 236)) | (1L << (DELAY_KEY_WRITE - 236)) | (1L << (DIRECTORY - 236)) | (1L << (DISABLE - 236)) | (1L << (DISCARD - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DISK - 300)) | (1L << (DO - 300)) | (1L << (DUMPFILE - 300)) | (1L << (DUPLICATE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENABLE - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (ENDS - 300)) | (1L << (ENGINE - 300)) | (1L << (ENGINES - 300)) | (1L << (ERROR - 300)) | (1L << (ERRORS - 300)) | (1L << (ESCAPE - 300)) | (1L << (EVEN - 300)) | (1L << (EVENT - 300)) | (1L << (EVENTS - 300)) | (1L << (EVERY - 300)) | (1L << (EXCHANGE - 300)) | (1L << (EXCLUSIVE - 300)) | (1L << (EXPIRE - 300)) | (1L << (EXTENT_SIZE - 300)) | (1L << (FAULTS - 300)) | (1L << (FIELDS - 300)) | (1L << (FILE_BLOCK_SIZE - 300)) | (1L << (FILTER - 300)) | (1L << (FIRST - 300)) | (1L << (FIXED - 300)) | (1L << (FLUSH - 300)) | (1L << (FOLLOWS - 300)) | (1L << (FULL - 300)) | (1L << (FUNCTION - 300)) | (1L << (GLOBAL - 300)) | (1L << (GRANTS - 300)) | (1L << (GROUP_REPLICATION - 300)) | (1L << (HANDLER - 300)) | (1L << (HASH - 300)) | (1L << (HELP - 300)) | (1L << (HOST - 300)) | (1L << (IDENTIFIED - 300)) | (1L << (IGNORE_SERVER_IDS - 300)) | (1L << (IMPORT - 300)) | (1L << (INDEXES - 300)) | (1L << (INITIAL_SIZE - 300)) | (1L << (INPLACE - 300)) | (1L << (INSERT_METHOD - 300)) | (1L << (INSTALL - 300)) | (1L << (INSTANCE - 300)) | (1L << (INVOKER - 300)) | (1L << (IO - 300)) | (1L << (IO_THREAD - 300)) | (1L << (IPC - 300)) | (1L << (ISOLATION - 300)) | (1L << (ISSUER - 300)) | (1L << (KEY_BLOCK_SIZE - 300)) | (1L << (LANGUAGE - 300)) | (1L << (LAST - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (LEAVES - 364)) | (1L << (LESS - 364)) | (1L << (LEVEL - 364)) | (1L << (LIST - 364)) | (1L << (LOCAL - 364)) | (1L << (LOGFILE - 364)) | (1L << (LOGS - 364)) | (1L << (MASTER - 364)) | (1L << (MASTER_AUTO_POSITION - 364)) | (1L << (MASTER_CONNECT_RETRY - 364)) | (1L << (MASTER_DELAY - 364)) | (1L << (MASTER_HEARTBEAT_PERIOD - 364)) | (1L << (MASTER_HOST - 364)) | (1L << (MASTER_LOG_FILE - 364)) | (1L << (MASTER_LOG_POS - 364)) | (1L << (MASTER_PASSWORD - 364)) | (1L << (MASTER_PORT - 364)) | (1L << (MASTER_RETRY_COUNT - 364)) | (1L << (MASTER_SSL - 364)) | (1L << (MASTER_SSL_CA - 364)) | (1L << (MASTER_SSL_CAPATH - 364)) | (1L << (MASTER_SSL_CERT - 364)) | (1L << (MASTER_SSL_CIPHER - 364)) | (1L << (MASTER_SSL_CRL - 364)) | (1L << (MASTER_SSL_CRLPATH - 364)) | (1L << (MASTER_SSL_KEY - 364)) | (1L << (MASTER_TLS_VERSION - 364)) | (1L << (MASTER_USER - 364)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 364)) | (1L << (MAX_QUERIES_PER_HOUR - 364)) | (1L << (MAX_ROWS - 364)) | (1L << (MAX_SIZE - 364)) | (1L << (MAX_UPDATES_PER_HOUR - 364)) | (1L << (MAX_USER_CONNECTIONS - 364)) | (1L << (MERGE - 364)) | (1L << (MID - 364)) | (1L << (MIGRATE - 364)) | (1L << (MIN_ROWS - 364)) | (1L << (MODIFY - 364)) | (1L << (MUTEX - 364)) | (1L << (MYSQL - 364)) | (1L << (NAME - 364)) | (1L << (NAMES - 364)) | (1L << (NCHAR - 364)) | (1L << (NEVER - 364)) | (1L << (NO - 364)) | (1L << (NODEGROUP - 364)) | (1L << (NONE - 364)) | (1L << (OFFLINE - 364)) | (1L << (OFFSET - 364)) | (1L << (OJ - 364)) | (1L << (OLD_PASSWORD - 364)) | (1L << (ONE - 364)) | (1L << (ONLINE - 364)) | (1L << (ONLY - 364)) | (1L << (OPEN - 364)) | (1L << (OPTIMIZER_COSTS - 364)) | (1L << (OPTIONS - 364)) | (1L << (OWNER - 364)) | (1L << (PACK_KEYS - 364)) | (1L << (PAGE - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (PARSER - 428)) | (1L << (PARTIAL - 428)) | (1L << (PARTITIONING - 428)) | (1L << (PARTITIONS - 428)) | (1L << (PASSWORD - 428)) | (1L << (PHASE - 428)) | (1L << (PLUGIN_DIR - 428)) | (1L << (PLUGINS - 428)) | (1L << (PORT - 428)) | (1L << (PRECEDES - 428)) | (1L << (PREPARE - 428)) | (1L << (PRESERVE - 428)) | (1L << (PREV - 428)) | (1L << (PROCESSLIST - 428)) | (1L << (PROFILE - 428)) | (1L << (PROFILES - 428)) | (1L << (PROXY - 428)) | (1L << (QUERY - 428)) | (1L << (QUICK - 428)) | (1L << (REBUILD - 428)) | (1L << (RECOVER - 428)) | (1L << (REDO_BUFFER_SIZE - 428)) | (1L << (REDUNDANT - 428)) | (1L << (RELAY_LOG_FILE - 428)) | (1L << (RELAY_LOG_POS - 428)) | (1L << (RELAYLOG - 428)) | (1L << (REMOVE - 428)) | (1L << (REORGANIZE - 428)) | (1L << (REPAIR - 428)) | (1L << (REPLICATE_DO_DB - 428)) | (1L << (REPLICATE_DO_TABLE - 428)) | (1L << (REPLICATE_IGNORE_DB - 428)) | (1L << (REPLICATE_IGNORE_TABLE - 428)) | (1L << (REPLICATE_REWRITE_DB - 428)) | (1L << (REPLICATE_WILD_DO_TABLE - 428)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 428)) | (1L << (REPLICATION - 428)) | (1L << (RESET - 428)) | (1L << (RESUME - 428)) | (1L << (RETURNS - 428)) | (1L << (ROLLBACK - 428)) | (1L << (ROLLUP - 428)) | (1L << (ROTATE - 428)) | (1L << (ROW - 428)) | (1L << (ROWS - 428)) | (1L << (ROW_FORMAT - 428)) | (1L << (SAVEPOINT - 428)) | (1L << (SCHEDULE - 428)) | (1L << (SECURITY - 428)) | (1L << (SERVER - 428)) | (1L << (SESSION - 428)) | (1L << (SHARE - 428)) | (1L << (SHARED - 428)) | (1L << (SIGNED - 428)) | (1L << (SIMPLE - 428)) | (1L << (SLAVE - 428)) | (1L << (SNAPSHOT - 428)) | (1L << (SOCKET - 428)) | (1L << (SOME - 428)) | (1L << (SOUNDS - 428)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (SOURCE - 492)) | (1L << (SQL_AFTER_GTIDS - 492)) | (1L << (SQL_AFTER_MTS_GAPS - 492)) | (1L << (SQL_BEFORE_GTIDS - 492)) | (1L << (SQL_BUFFER_RESULT - 492)) | (1L << (SQL_CACHE - 492)) | (1L << (SQL_NO_CACHE - 492)) | (1L << (SQL_THREAD - 492)) | (1L << (START - 492)) | (1L << (STARTS - 492)) | (1L << (STATS_AUTO_RECALC - 492)) | (1L << (STATS_PERSISTENT - 492)) | (1L << (STATS_SAMPLE_PAGES - 492)) | (1L << (STATUS - 492)) | (1L << (STOP - 492)) | (1L << (STORAGE - 492)) | (1L << (STRING - 492)) | (1L << (SUBJECT - 492)) | (1L << (SUBPARTITION - 492)) | (1L << (SUBPARTITIONS - 492)) | (1L << (SUSPEND - 492)) | (1L << (SWAPS - 492)) | (1L << (SWITCHES - 492)) | (1L << (TABLESPACE - 492)) | (1L << (TEMPORARY - 492)) | (1L << (TEMPTABLE - 492)) | (1L << (THAN - 492)) | (1L << (TRANSACTION - 492)) | (1L << (TRUNCATE - 492)) | (1L << (UNDEFINED - 492)) | (1L << (UNDOFILE - 492)) | (1L << (UNDO_BUFFER_SIZE - 492)) | (1L << (UNINSTALL - 492)) | (1L << (UNKNOWN - 492)) | (1L << (UPGRADE - 492)) | (1L << (USER - 492)) | (1L << (VALIDATION - 492)) | (1L << (VALUE - 492)) | (1L << (VARIABLES - 492)) | (1L << (VIEW - 492)) | (1L << (WAIT - 492)) | (1L << (WARNINGS - 492)) | (1L << (WITHOUT - 492)) | (1L << (WORK - 492)) | (1L << (WRAPPER - 492)) | (1L << (X509 - 492)) | (1L << (XA - 492)) | (1L << (XML - 492)) | (1L << (QUARTER - 492)) | (1L << (MONTH - 492)) | (1L << (DAY - 492)) | (1L << (HOUR - 492)) | (1L << (MINUTE - 492)) | (1L << (WEEK - 492)))) != 0) || ((((_la - 556)) & ~0x3f) == 0 && ((1L << (_la - 556)) & ((1L << (SECOND - 556)) | (1L << (MICROSECOND - 556)) | (1L << (TABLES - 556)) | (1L << (ROUTINE - 556)) | (1L << (EXECUTE - 556)) | (1L << (FILE - 556)) | (1L << (PROCESS - 556)) | (1L << (RELOAD - 556)) | (1L << (SHUTDOWN - 556)) | (1L << (SUPER - 556)) | (1L << (PRIVILEGES - 556)) | (1L << (ARMSCII8 - 556)) | (1L << (ASCII - 556)) | (1L << (BIG5 - 556)) | (1L << (CP1250 - 556)) | (1L << (CP1251 - 556)) | (1L << (CP1256 - 556)) | (1L << (CP1257 - 556)) | (1L << (CP850 - 556)) | (1L << (CP852 - 556)) | (1L << (CP866 - 556)) | (1L << (CP932 - 556)) | (1L << (DEC8 - 556)) | (1L << (EUCJPMS - 556)) | (1L << (EUCKR - 556)) | (1L << (GB2312 - 556)) | (1L << (GBK - 556)) | (1L << (GEOSTD8 - 556)) | (1L << (GREEK - 556)) | (1L << (HEBREW - 556)) | (1L << (HP8 - 556)) | (1L << (KEYBCS2 - 556)) | (1L << (KOI8R - 556)) | (1L << (KOI8U - 556)) | (1L << (LATIN1 - 556)) | (1L << (LATIN2 - 556)) | (1L << (LATIN5 - 556)) | (1L << (LATIN7 - 556)) | (1L << (MACCE - 556)) | (1L << (MACROMAN - 556)) | (1L << (SJIS - 556)) | (1L << (SWE7 - 556)) | (1L << (TIS620 - 556)) | (1L << (UCS2 - 556)) | (1L << (UJIS - 556)) | (1L << (UTF16 - 556)) | (1L << (UTF16LE - 556)) | (1L << (UTF32 - 556)) | (1L << (UTF8 - 556)) | (1L << (UTF8MB3 - 556)) | (1L << (UTF8MB4 - 556)) | (1L << (ARCHIVE - 556)) | (1L << (BLACKHOLE - 556)) | (1L << (CSV - 556)) | (1L << (FEDERATED - 556)) | (1L << (INNODB - 556)) | (1L << (MEMORY - 556)) | (1L << (MRG_MYISAM - 556)) | (1L << (MYISAM - 556)) | (1L << (NDB - 556)) | (1L << (NDBCLUSTER - 556)) | (1L << (PERFOMANCE_SCHEMA - 556)) | (1L << (REPEATABLE - 556)) | (1L << (COMMITTED - 556)))) != 0) || ((((_la - 620)) & ~0x3f) == 0 && ((1L << (_la - 620)) & ((1L << (UNCOMMITTED - 620)) | (1L << (SERIALIZABLE - 620)) | (1L << (GEOMETRYCOLLECTION - 620)) | (1L << (LINESTRING - 620)) | (1L << (MULTILINESTRING - 620)) | (1L << (MULTIPOINT - 620)) | (1L << (MULTIPOLYGON - 620)) | (1L << (POINT - 620)) | (1L << (POLYGON - 620)) | (1L << (ABS - 620)) | (1L << (ACOS - 620)) | (1L << (ADDDATE - 620)) | (1L << (ADDTIME - 620)) | (1L << (AES_DECRYPT - 620)) | (1L << (AES_ENCRYPT - 620)) | (1L << (AREA - 620)) | (1L << (ASBINARY - 620)) | (1L << (ASIN - 620)) | (1L << (ASTEXT - 620)) | (1L << (ASWKB - 620)) | (1L << (ASWKT - 620)) | (1L << (ASYMMETRIC_DECRYPT - 620)) | (1L << (ASYMMETRIC_DERIVE - 620)) | (1L << (ASYMMETRIC_ENCRYPT - 620)) | (1L << (ASYMMETRIC_SIGN - 620)) | (1L << (ASYMMETRIC_VERIFY - 620)) | (1L << (ATAN - 620)) | (1L << (ATAN2 - 620)) | (1L << (BENCHMARK - 620)) | (1L << (BIN - 620)) | (1L << (BIT_COUNT - 620)) | (1L << (BIT_LENGTH - 620)) | (1L << (BUFFER - 620)) | (1L << (CEIL - 620)) | (1L << (CEILING - 620)) | (1L << (CENTROID - 620)) | (1L << (CHARACTER_LENGTH - 620)) | (1L << (CHARSET - 620)) | (1L << (CHAR_LENGTH - 620)) | (1L << (COERCIBILITY - 620)) | (1L << (COLLATION - 620)) | (1L << (COMPRESS - 620)) | (1L << (CONCAT - 620)) | (1L << (CONCAT_WS - 620)) | (1L << (CONNECTION_ID - 620)) | (1L << (CONV - 620)) | (1L << (CONVERT_TZ - 620)) | (1L << (COS - 620)) | (1L << (COT - 620)) | (1L << (CRC32 - 620)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1L << (CREATE_DH_PARAMETERS - 620)) | (1L << (CREATE_DIGEST - 620)) | (1L << (CROSSES - 620)) | (1L << (DATEDIFF - 620)) | (1L << (DATE_FORMAT - 620)) | (1L << (DAYNAME - 620)) | (1L << (DAYOFMONTH - 620)) | (1L << (DAYOFWEEK - 620)) | (1L << (DAYOFYEAR - 620)) | (1L << (DECODE - 620)) | (1L << (DEGREES - 620)) | (1L << (DES_DECRYPT - 620)))) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & ((1L << (DES_ENCRYPT - 684)) | (1L << (DIMENSION - 684)) | (1L << (DISJOINT - 684)) | (1L << (ELT - 684)) | (1L << (ENCODE - 684)) | (1L << (ENCRYPT - 684)) | (1L << (ENDPOINT - 684)) | (1L << (ENVELOPE - 684)) | (1L << (EQUALS - 684)) | (1L << (EXP - 684)) | (1L << (EXPORT_SET - 684)) | (1L << (EXTERIORRING - 684)) | (1L << (EXTRACTVALUE - 684)) | (1L << (FIELD - 684)) | (1L << (FIND_IN_SET - 684)) | (1L << (FLOOR - 684)) | (1L << (FORMAT - 684)) | (1L << (FOUND_ROWS - 684)) | (1L << (FROM_BASE64 - 684)) | (1L << (FROM_DAYS - 684)) | (1L << (FROM_UNIXTIME - 684)) | (1L << (GEOMCOLLFROMTEXT - 684)) | (1L << (GEOMCOLLFROMWKB - 684)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 684)) | (1L << (GEOMETRYFROMTEXT - 684)) | (1L << (GEOMETRYFROMWKB - 684)) | (1L << (GEOMETRYN - 684)) | (1L << (GEOMETRYTYPE - 684)) | (1L << (GEOMFROMTEXT - 684)) | (1L << (GEOMFROMWKB - 684)) | (1L << (GET_FORMAT - 684)) | (1L << (GET_LOCK - 684)) | (1L << (GLENGTH - 684)) | (1L << (GREATEST - 684)) | (1L << (GTID_SUBSET - 684)) | (1L << (GTID_SUBTRACT - 684)) | (1L << (HEX - 684)) | (1L << (IFNULL - 684)) | (1L << (INET6_ATON - 684)) | (1L << (INET6_NTOA - 684)) | (1L << (INET_ATON - 684)) | (1L << (INET_NTOA - 684)) | (1L << (INSTR - 684)) | (1L << (INTERIORRINGN - 684)) | (1L << (INTERSECTS - 684)) | (1L << (ISCLOSED - 684)) | (1L << (ISEMPTY - 684)) | (1L << (ISNULL - 684)) | (1L << (ISSIMPLE - 684)) | (1L << (IS_FREE_LOCK - 684)) | (1L << (IS_IPV4 - 684)) | (1L << (IS_IPV4_COMPAT - 684)) | (1L << (IS_IPV4_MAPPED - 684)) | (1L << (IS_IPV6 - 684)) | (1L << (IS_USED_LOCK - 684)) | (1L << (LAST_INSERT_ID - 684)) | (1L << (LCASE - 684)) | (1L << (LEAST - 684)) | (1L << (LENGTH - 684)) | (1L << (LINEFROMTEXT - 684)) | (1L << (LINEFROMWKB - 684)) | (1L << (LINESTRINGFROMTEXT - 684)) | (1L << (LINESTRINGFROMWKB - 684)))) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & ((1L << (LN - 748)) | (1L << (LOAD_FILE - 748)) | (1L << (LOCATE - 748)) | (1L << (LOG - 748)) | (1L << (LOG10 - 748)) | (1L << (LOG2 - 748)) | (1L << (LOWER - 748)) | (1L << (LPAD - 748)) | (1L << (LTRIM - 748)) | (1L << (MAKEDATE - 748)) | (1L << (MAKETIME - 748)) | (1L << (MAKE_SET - 748)) | (1L << (MASTER_POS_WAIT - 748)) | (1L << (MBRCONTAINS - 748)) | (1L << (MBRDISJOINT - 748)) | (1L << (MBREQUAL - 748)) | (1L << (MBRINTERSECTS - 748)) | (1L << (MBROVERLAPS - 748)) | (1L << (MBRTOUCHES - 748)) | (1L << (MBRWITHIN - 748)) | (1L << (MD5 - 748)) | (1L << (MLINEFROMTEXT - 748)) | (1L << (MLINEFROMWKB - 748)) | (1L << (MONTHNAME - 748)) | (1L << (MPOINTFROMTEXT - 748)) | (1L << (MPOINTFROMWKB - 748)) | (1L << (MPOLYFROMTEXT - 748)) | (1L << (MPOLYFROMWKB - 748)) | (1L << (MULTILINESTRINGFROMTEXT - 748)) | (1L << (MULTILINESTRINGFROMWKB - 748)) | (1L << (MULTIPOINTFROMTEXT - 748)) | (1L << (MULTIPOINTFROMWKB - 748)) | (1L << (MULTIPOLYGONFROMTEXT - 748)) | (1L << (MULTIPOLYGONFROMWKB - 748)) | (1L << (NAME_CONST - 748)) | (1L << (NULLIF - 748)) | (1L << (NUMGEOMETRIES - 748)) | (1L << (NUMINTERIORRINGS - 748)) | (1L << (NUMPOINTS - 748)) | (1L << (OCT - 748)) | (1L << (OCTET_LENGTH - 748)) | (1L << (ORD - 748)) | (1L << (OVERLAPS - 748)) | (1L << (PERIOD_ADD - 748)) | (1L << (PERIOD_DIFF - 748)) | (1L << (PI - 748)) | (1L << (POINTFROMTEXT - 748)) | (1L << (POINTFROMWKB - 748)) | (1L << (POINTN - 748)) | (1L << (POLYFROMTEXT - 748)) | (1L << (POLYFROMWKB - 748)) | (1L << (POLYGONFROMTEXT - 748)) | (1L << (POLYGONFROMWKB - 748)) | (1L << (POW - 748)) | (1L << (POWER - 748)) | (1L << (QUOTE - 748)) | (1L << (RADIANS - 748)) | (1L << (RAND - 748)) | (1L << (RANDOM_BYTES - 748)) | (1L << (RELEASE_LOCK - 748)) | (1L << (REVERSE - 748)) | (1L << (ROUND - 748)) | (1L << (ROW_COUNT - 748)) | (1L << (RPAD - 748)))) != 0) || ((((_la - 812)) & ~0x3f) == 0 && ((1L << (_la - 812)) & ((1L << (RTRIM - 812)) | (1L << (SEC_TO_TIME - 812)) | (1L << (SESSION_USER - 812)) | (1L << (SHA - 812)) | (1L << (SHA1 - 812)) | (1L << (SHA2 - 812)) | (1L << (SIGN - 812)) | (1L << (SIN - 812)) | (1L << (SLEEP - 812)) | (1L << (SOUNDEX - 812)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1L << (SQRT - 812)) | (1L << (SRID - 812)) | (1L << (STARTPOINT - 812)) | (1L << (STRCMP - 812)) | (1L << (STR_TO_DATE - 812)) | (1L << (ST_AREA - 812)) | (1L << (ST_ASBINARY - 812)) | (1L << (ST_ASTEXT - 812)) | (1L << (ST_ASWKB - 812)) | (1L << (ST_ASWKT - 812)) | (1L << (ST_BUFFER - 812)) | (1L << (ST_CENTROID - 812)) | (1L << (ST_CONTAINS - 812)) | (1L << (ST_CROSSES - 812)) | (1L << (ST_DIFFERENCE - 812)) | (1L << (ST_DIMENSION - 812)) | (1L << (ST_DISJOINT - 812)) | (1L << (ST_DISTANCE - 812)) | (1L << (ST_ENDPOINT - 812)) | (1L << (ST_ENVELOPE - 812)) | (1L << (ST_EQUALS - 812)) | (1L << (ST_EXTERIORRING - 812)) | (1L << (ST_GEOMCOLLFROMTEXT - 812)) | (1L << (ST_GEOMCOLLFROMTXT - 812)) | (1L << (ST_GEOMCOLLFROMWKB - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1L << (ST_GEOMETRYFROMTEXT - 812)) | (1L << (ST_GEOMETRYFROMWKB - 812)) | (1L << (ST_GEOMETRYN - 812)) | (1L << (ST_GEOMETRYTYPE - 812)) | (1L << (ST_GEOMFROMTEXT - 812)) | (1L << (ST_GEOMFROMWKB - 812)) | (1L << (ST_INTERIORRINGN - 812)) | (1L << (ST_INTERSECTION - 812)) | (1L << (ST_INTERSECTS - 812)) | (1L << (ST_ISCLOSED - 812)) | (1L << (ST_ISEMPTY - 812)) | (1L << (ST_ISSIMPLE - 812)) | (1L << (ST_LINEFROMTEXT - 812)) | (1L << (ST_LINEFROMWKB - 812)) | (1L << (ST_LINESTRINGFROMTEXT - 812)) | (1L << (ST_LINESTRINGFROMWKB - 812)) | (1L << (ST_NUMGEOMETRIES - 812)) | (1L << (ST_NUMINTERIORRING - 812)) | (1L << (ST_NUMINTERIORRINGS - 812)) | (1L << (ST_NUMPOINTS - 812)) | (1L << (ST_OVERLAPS - 812)) | (1L << (ST_POINTFROMTEXT - 812)) | (1L << (ST_POINTFROMWKB - 812)) | (1L << (ST_POINTN - 812)) | (1L << (ST_POLYFROMTEXT - 812)) | (1L << (ST_POLYFROMWKB - 812)))) != 0) || ((((_la - 876)) & ~0x3f) == 0 && ((1L << (_la - 876)) & ((1L << (ST_POLYGONFROMTEXT - 876)) | (1L << (ST_POLYGONFROMWKB - 876)) | (1L << (ST_SRID - 876)) | (1L << (ST_STARTPOINT - 876)) | (1L << (ST_SYMDIFFERENCE - 876)) | (1L << (ST_TOUCHES - 876)) | (1L << (ST_UNION - 876)) | (1L << (ST_WITHIN - 876)) | (1L << (ST_X - 876)) | (1L << (ST_Y - 876)) | (1L << (SUBDATE - 876)) | (1L << (SUBSTRING_INDEX - 876)) | (1L << (SUBTIME - 876)) | (1L << (SYSTEM_USER - 876)) | (1L << (TAN - 876)) | (1L << (TIMEDIFF - 876)) | (1L << (TIMESTAMPADD - 876)) | (1L << (TIMESTAMPDIFF - 876)) | (1L << (TIME_FORMAT - 876)) | (1L << (TIME_TO_SEC - 876)) | (1L << (TOUCHES - 876)) | (1L << (TO_BASE64 - 876)) | (1L << (TO_DAYS - 876)) | (1L << (TO_SECONDS - 876)) | (1L << (UCASE - 876)) | (1L << (UNCOMPRESS - 876)) | (1L << (UNCOMPRESSED_LENGTH - 876)) | (1L << (UNHEX - 876)) | (1L << (UNIX_TIMESTAMP - 876)) | (1L << (UPDATEXML - 876)) | (1L << (UPPER - 876)) | (1L << (UUID - 876)) | (1L << (UUID_SHORT - 876)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 876)) | (1L << (VERSION - 876)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1L << (WEEKDAY - 876)) | (1L << (WEEKOFYEAR - 876)) | (1L << (WEIGHT_STRING - 876)) | (1L << (WITHIN - 876)) | (1L << (YEARWEEK - 876)) | (1L << (Y_FUNCTION - 876)) | (1L << (X_FUNCTION - 876)))) != 0) || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (LR_BRACKET - 945)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 945)) | (1L << (ID - 945)) | (1L << (REVERSE_QUOTE_ID - 945)))) != 0) );
				}
			}

			State = 4050; Match(END);
			State = 4051; Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterateStatementContext : ParserRuleContext {
		public ITerminalNode ITERATE() { return GetToken(MySqlParser.ITERATE, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterateStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIterateStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIterateStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterateStatementContext iterateStatement() {
		IterateStatementContext _localctx = new IterateStatementContext(Context, State);
		EnterRule(_localctx, 350, RULE_iterateStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4053; Match(ITERATE);
			State = 4054; uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeaveStatementContext : ParserRuleContext {
		public ITerminalNode LEAVE() { return GetToken(MySqlParser.LEAVE, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leaveStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLeaveStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLeaveStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeaveStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeaveStatementContext leaveStatement() {
		LeaveStatementContext _localctx = new LeaveStatementContext(Context, State);
		EnterRule(_localctx, 352, RULE_leaveStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4056; Match(LEAVE);
			State = 4057; uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		public ITerminalNode[] LOOP() { return GetTokens(MySqlParser.LOOP); }
		public ITerminalNode LOOP(int i) {
			return GetToken(MySqlParser.LOOP, i);
		}
		public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoopStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoopStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 354, RULE_loopStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4062;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
				{
				State = 4059; uid();
				State = 4060; Match(COLON_SYMB);
				}
			}

			State = 4064; Match(LOOP);
			State = 4066;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4065; procedureSqlStatement();
				}
				}
				State = 4068;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DATABASE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (UNLOCK - 155)) | (1L << (UPDATE - 155)) | (1L << (USE - 155)) | (1L << (WHILE - 155)) | (1L << (DATE - 155)) | (1L << (TIME - 155)) | (1L << (TIMESTAMP - 155)) | (1L << (DATETIME - 155)) | (1L << (YEAR - 155)) | (1L << (TEXT - 155)) | (1L << (ENUM - 155)) | (1L << (COUNT - 155)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (POSITION - 236)) | (1L << (ACCOUNT - 236)) | (1L << (ACTION - 236)) | (1L << (AFTER - 236)) | (1L << (AGGREGATE - 236)) | (1L << (ALGORITHM - 236)) | (1L << (ANY - 236)) | (1L << (AT - 236)) | (1L << (AUTHORS - 236)) | (1L << (AUTOCOMMIT - 236)) | (1L << (AUTOEXTEND_SIZE - 236)) | (1L << (AUTO_INCREMENT - 236)) | (1L << (AVG_ROW_LENGTH - 236)) | (1L << (BEGIN - 236)) | (1L << (BINLOG - 236)) | (1L << (BIT - 236)) | (1L << (BLOCK - 236)) | (1L << (BOOL - 236)) | (1L << (BOOLEAN - 236)) | (1L << (BTREE - 236)) | (1L << (CACHE - 236)) | (1L << (CASCADED - 236)) | (1L << (CHAIN - 236)) | (1L << (CHANNEL - 236)) | (1L << (CHECKSUM - 236)) | (1L << (CIPHER - 236)) | (1L << (CLIENT - 236)) | (1L << (CLOSE - 236)) | (1L << (COALESCE - 236)) | (1L << (CODE - 236)) | (1L << (COLUMNS - 236)) | (1L << (COLUMN_FORMAT - 236)) | (1L << (COMMENT - 236)) | (1L << (COMMIT - 236)) | (1L << (COMPACT - 236)) | (1L << (COMPLETION - 236)) | (1L << (COMPRESSED - 236)) | (1L << (COMPRESSION - 236)) | (1L << (CONCURRENT - 236)) | (1L << (CONNECTION - 236)) | (1L << (CONSISTENT - 236)) | (1L << (CONTAINS - 236)) | (1L << (CONTEXT - 236)) | (1L << (CONTRIBUTORS - 236)) | (1L << (COPY - 236)) | (1L << (CPU - 236)) | (1L << (DATA - 236)) | (1L << (DATAFILE - 236)) | (1L << (DEALLOCATE - 236)) | (1L << (DEFAULT_AUTH - 236)) | (1L << (DEFINER - 236)) | (1L << (DELAY_KEY_WRITE - 236)) | (1L << (DIRECTORY - 236)) | (1L << (DISABLE - 236)) | (1L << (DISCARD - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DISK - 300)) | (1L << (DO - 300)) | (1L << (DUMPFILE - 300)) | (1L << (DUPLICATE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENABLE - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (ENDS - 300)) | (1L << (ENGINE - 300)) | (1L << (ENGINES - 300)) | (1L << (ERROR - 300)) | (1L << (ERRORS - 300)) | (1L << (ESCAPE - 300)) | (1L << (EVEN - 300)) | (1L << (EVENT - 300)) | (1L << (EVENTS - 300)) | (1L << (EVERY - 300)) | (1L << (EXCHANGE - 300)) | (1L << (EXCLUSIVE - 300)) | (1L << (EXPIRE - 300)) | (1L << (EXTENT_SIZE - 300)) | (1L << (FAULTS - 300)) | (1L << (FIELDS - 300)) | (1L << (FILE_BLOCK_SIZE - 300)) | (1L << (FILTER - 300)) | (1L << (FIRST - 300)) | (1L << (FIXED - 300)) | (1L << (FLUSH - 300)) | (1L << (FOLLOWS - 300)) | (1L << (FULL - 300)) | (1L << (FUNCTION - 300)) | (1L << (GLOBAL - 300)) | (1L << (GRANTS - 300)) | (1L << (GROUP_REPLICATION - 300)) | (1L << (HANDLER - 300)) | (1L << (HASH - 300)) | (1L << (HELP - 300)) | (1L << (HOST - 300)) | (1L << (IDENTIFIED - 300)) | (1L << (IGNORE_SERVER_IDS - 300)) | (1L << (IMPORT - 300)) | (1L << (INDEXES - 300)) | (1L << (INITIAL_SIZE - 300)) | (1L << (INPLACE - 300)) | (1L << (INSERT_METHOD - 300)) | (1L << (INSTALL - 300)) | (1L << (INSTANCE - 300)) | (1L << (INVOKER - 300)) | (1L << (IO - 300)) | (1L << (IO_THREAD - 300)) | (1L << (IPC - 300)) | (1L << (ISOLATION - 300)) | (1L << (ISSUER - 300)) | (1L << (KEY_BLOCK_SIZE - 300)) | (1L << (LANGUAGE - 300)) | (1L << (LAST - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (LEAVES - 364)) | (1L << (LESS - 364)) | (1L << (LEVEL - 364)) | (1L << (LIST - 364)) | (1L << (LOCAL - 364)) | (1L << (LOGFILE - 364)) | (1L << (LOGS - 364)) | (1L << (MASTER - 364)) | (1L << (MASTER_AUTO_POSITION - 364)) | (1L << (MASTER_CONNECT_RETRY - 364)) | (1L << (MASTER_DELAY - 364)) | (1L << (MASTER_HEARTBEAT_PERIOD - 364)) | (1L << (MASTER_HOST - 364)) | (1L << (MASTER_LOG_FILE - 364)) | (1L << (MASTER_LOG_POS - 364)) | (1L << (MASTER_PASSWORD - 364)) | (1L << (MASTER_PORT - 364)) | (1L << (MASTER_RETRY_COUNT - 364)) | (1L << (MASTER_SSL - 364)) | (1L << (MASTER_SSL_CA - 364)) | (1L << (MASTER_SSL_CAPATH - 364)) | (1L << (MASTER_SSL_CERT - 364)) | (1L << (MASTER_SSL_CIPHER - 364)) | (1L << (MASTER_SSL_CRL - 364)) | (1L << (MASTER_SSL_CRLPATH - 364)) | (1L << (MASTER_SSL_KEY - 364)) | (1L << (MASTER_TLS_VERSION - 364)) | (1L << (MASTER_USER - 364)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 364)) | (1L << (MAX_QUERIES_PER_HOUR - 364)) | (1L << (MAX_ROWS - 364)) | (1L << (MAX_SIZE - 364)) | (1L << (MAX_UPDATES_PER_HOUR - 364)) | (1L << (MAX_USER_CONNECTIONS - 364)) | (1L << (MERGE - 364)) | (1L << (MID - 364)) | (1L << (MIGRATE - 364)) | (1L << (MIN_ROWS - 364)) | (1L << (MODIFY - 364)) | (1L << (MUTEX - 364)) | (1L << (MYSQL - 364)) | (1L << (NAME - 364)) | (1L << (NAMES - 364)) | (1L << (NCHAR - 364)) | (1L << (NEVER - 364)) | (1L << (NO - 364)) | (1L << (NODEGROUP - 364)) | (1L << (NONE - 364)) | (1L << (OFFLINE - 364)) | (1L << (OFFSET - 364)) | (1L << (OJ - 364)) | (1L << (OLD_PASSWORD - 364)) | (1L << (ONE - 364)) | (1L << (ONLINE - 364)) | (1L << (ONLY - 364)) | (1L << (OPEN - 364)) | (1L << (OPTIMIZER_COSTS - 364)) | (1L << (OPTIONS - 364)) | (1L << (OWNER - 364)) | (1L << (PACK_KEYS - 364)) | (1L << (PAGE - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (PARSER - 428)) | (1L << (PARTIAL - 428)) | (1L << (PARTITIONING - 428)) | (1L << (PARTITIONS - 428)) | (1L << (PASSWORD - 428)) | (1L << (PHASE - 428)) | (1L << (PLUGIN_DIR - 428)) | (1L << (PLUGINS - 428)) | (1L << (PORT - 428)) | (1L << (PRECEDES - 428)) | (1L << (PREPARE - 428)) | (1L << (PRESERVE - 428)) | (1L << (PREV - 428)) | (1L << (PROCESSLIST - 428)) | (1L << (PROFILE - 428)) | (1L << (PROFILES - 428)) | (1L << (PROXY - 428)) | (1L << (QUERY - 428)) | (1L << (QUICK - 428)) | (1L << (REBUILD - 428)) | (1L << (RECOVER - 428)) | (1L << (REDO_BUFFER_SIZE - 428)) | (1L << (REDUNDANT - 428)) | (1L << (RELAY_LOG_FILE - 428)) | (1L << (RELAY_LOG_POS - 428)) | (1L << (RELAYLOG - 428)) | (1L << (REMOVE - 428)) | (1L << (REORGANIZE - 428)) | (1L << (REPAIR - 428)) | (1L << (REPLICATE_DO_DB - 428)) | (1L << (REPLICATE_DO_TABLE - 428)) | (1L << (REPLICATE_IGNORE_DB - 428)) | (1L << (REPLICATE_IGNORE_TABLE - 428)) | (1L << (REPLICATE_REWRITE_DB - 428)) | (1L << (REPLICATE_WILD_DO_TABLE - 428)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 428)) | (1L << (REPLICATION - 428)) | (1L << (RESET - 428)) | (1L << (RESUME - 428)) | (1L << (RETURNS - 428)) | (1L << (ROLLBACK - 428)) | (1L << (ROLLUP - 428)) | (1L << (ROTATE - 428)) | (1L << (ROW - 428)) | (1L << (ROWS - 428)) | (1L << (ROW_FORMAT - 428)) | (1L << (SAVEPOINT - 428)) | (1L << (SCHEDULE - 428)) | (1L << (SECURITY - 428)) | (1L << (SERVER - 428)) | (1L << (SESSION - 428)) | (1L << (SHARE - 428)) | (1L << (SHARED - 428)) | (1L << (SIGNED - 428)) | (1L << (SIMPLE - 428)) | (1L << (SLAVE - 428)) | (1L << (SNAPSHOT - 428)) | (1L << (SOCKET - 428)) | (1L << (SOME - 428)) | (1L << (SOUNDS - 428)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (SOURCE - 492)) | (1L << (SQL_AFTER_GTIDS - 492)) | (1L << (SQL_AFTER_MTS_GAPS - 492)) | (1L << (SQL_BEFORE_GTIDS - 492)) | (1L << (SQL_BUFFER_RESULT - 492)) | (1L << (SQL_CACHE - 492)) | (1L << (SQL_NO_CACHE - 492)) | (1L << (SQL_THREAD - 492)) | (1L << (START - 492)) | (1L << (STARTS - 492)) | (1L << (STATS_AUTO_RECALC - 492)) | (1L << (STATS_PERSISTENT - 492)) | (1L << (STATS_SAMPLE_PAGES - 492)) | (1L << (STATUS - 492)) | (1L << (STOP - 492)) | (1L << (STORAGE - 492)) | (1L << (STRING - 492)) | (1L << (SUBJECT - 492)) | (1L << (SUBPARTITION - 492)) | (1L << (SUBPARTITIONS - 492)) | (1L << (SUSPEND - 492)) | (1L << (SWAPS - 492)) | (1L << (SWITCHES - 492)) | (1L << (TABLESPACE - 492)) | (1L << (TEMPORARY - 492)) | (1L << (TEMPTABLE - 492)) | (1L << (THAN - 492)) | (1L << (TRANSACTION - 492)) | (1L << (TRUNCATE - 492)) | (1L << (UNDEFINED - 492)) | (1L << (UNDOFILE - 492)) | (1L << (UNDO_BUFFER_SIZE - 492)) | (1L << (UNINSTALL - 492)) | (1L << (UNKNOWN - 492)) | (1L << (UPGRADE - 492)) | (1L << (USER - 492)) | (1L << (VALIDATION - 492)) | (1L << (VALUE - 492)) | (1L << (VARIABLES - 492)) | (1L << (VIEW - 492)) | (1L << (WAIT - 492)) | (1L << (WARNINGS - 492)) | (1L << (WITHOUT - 492)) | (1L << (WORK - 492)) | (1L << (WRAPPER - 492)) | (1L << (X509 - 492)) | (1L << (XA - 492)) | (1L << (XML - 492)) | (1L << (QUARTER - 492)) | (1L << (MONTH - 492)) | (1L << (DAY - 492)) | (1L << (HOUR - 492)) | (1L << (MINUTE - 492)) | (1L << (WEEK - 492)))) != 0) || ((((_la - 556)) & ~0x3f) == 0 && ((1L << (_la - 556)) & ((1L << (SECOND - 556)) | (1L << (MICROSECOND - 556)) | (1L << (TABLES - 556)) | (1L << (ROUTINE - 556)) | (1L << (EXECUTE - 556)) | (1L << (FILE - 556)) | (1L << (PROCESS - 556)) | (1L << (RELOAD - 556)) | (1L << (SHUTDOWN - 556)) | (1L << (SUPER - 556)) | (1L << (PRIVILEGES - 556)) | (1L << (ARMSCII8 - 556)) | (1L << (ASCII - 556)) | (1L << (BIG5 - 556)) | (1L << (CP1250 - 556)) | (1L << (CP1251 - 556)) | (1L << (CP1256 - 556)) | (1L << (CP1257 - 556)) | (1L << (CP850 - 556)) | (1L << (CP852 - 556)) | (1L << (CP866 - 556)) | (1L << (CP932 - 556)) | (1L << (DEC8 - 556)) | (1L << (EUCJPMS - 556)) | (1L << (EUCKR - 556)) | (1L << (GB2312 - 556)) | (1L << (GBK - 556)) | (1L << (GEOSTD8 - 556)) | (1L << (GREEK - 556)) | (1L << (HEBREW - 556)) | (1L << (HP8 - 556)) | (1L << (KEYBCS2 - 556)) | (1L << (KOI8R - 556)) | (1L << (KOI8U - 556)) | (1L << (LATIN1 - 556)) | (1L << (LATIN2 - 556)) | (1L << (LATIN5 - 556)) | (1L << (LATIN7 - 556)) | (1L << (MACCE - 556)) | (1L << (MACROMAN - 556)) | (1L << (SJIS - 556)) | (1L << (SWE7 - 556)) | (1L << (TIS620 - 556)) | (1L << (UCS2 - 556)) | (1L << (UJIS - 556)) | (1L << (UTF16 - 556)) | (1L << (UTF16LE - 556)) | (1L << (UTF32 - 556)) | (1L << (UTF8 - 556)) | (1L << (UTF8MB3 - 556)) | (1L << (UTF8MB4 - 556)) | (1L << (ARCHIVE - 556)) | (1L << (BLACKHOLE - 556)) | (1L << (CSV - 556)) | (1L << (FEDERATED - 556)) | (1L << (INNODB - 556)) | (1L << (MEMORY - 556)) | (1L << (MRG_MYISAM - 556)) | (1L << (MYISAM - 556)) | (1L << (NDB - 556)) | (1L << (NDBCLUSTER - 556)) | (1L << (PERFOMANCE_SCHEMA - 556)) | (1L << (REPEATABLE - 556)) | (1L << (COMMITTED - 556)))) != 0) || ((((_la - 620)) & ~0x3f) == 0 && ((1L << (_la - 620)) & ((1L << (UNCOMMITTED - 620)) | (1L << (SERIALIZABLE - 620)) | (1L << (GEOMETRYCOLLECTION - 620)) | (1L << (LINESTRING - 620)) | (1L << (MULTILINESTRING - 620)) | (1L << (MULTIPOINT - 620)) | (1L << (MULTIPOLYGON - 620)) | (1L << (POINT - 620)) | (1L << (POLYGON - 620)) | (1L << (ABS - 620)) | (1L << (ACOS - 620)) | (1L << (ADDDATE - 620)) | (1L << (ADDTIME - 620)) | (1L << (AES_DECRYPT - 620)) | (1L << (AES_ENCRYPT - 620)) | (1L << (AREA - 620)) | (1L << (ASBINARY - 620)) | (1L << (ASIN - 620)) | (1L << (ASTEXT - 620)) | (1L << (ASWKB - 620)) | (1L << (ASWKT - 620)) | (1L << (ASYMMETRIC_DECRYPT - 620)) | (1L << (ASYMMETRIC_DERIVE - 620)) | (1L << (ASYMMETRIC_ENCRYPT - 620)) | (1L << (ASYMMETRIC_SIGN - 620)) | (1L << (ASYMMETRIC_VERIFY - 620)) | (1L << (ATAN - 620)) | (1L << (ATAN2 - 620)) | (1L << (BENCHMARK - 620)) | (1L << (BIN - 620)) | (1L << (BIT_COUNT - 620)) | (1L << (BIT_LENGTH - 620)) | (1L << (BUFFER - 620)) | (1L << (CEIL - 620)) | (1L << (CEILING - 620)) | (1L << (CENTROID - 620)) | (1L << (CHARACTER_LENGTH - 620)) | (1L << (CHARSET - 620)) | (1L << (CHAR_LENGTH - 620)) | (1L << (COERCIBILITY - 620)) | (1L << (COLLATION - 620)) | (1L << (COMPRESS - 620)) | (1L << (CONCAT - 620)) | (1L << (CONCAT_WS - 620)) | (1L << (CONNECTION_ID - 620)) | (1L << (CONV - 620)) | (1L << (CONVERT_TZ - 620)) | (1L << (COS - 620)) | (1L << (COT - 620)) | (1L << (CRC32 - 620)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1L << (CREATE_DH_PARAMETERS - 620)) | (1L << (CREATE_DIGEST - 620)) | (1L << (CROSSES - 620)) | (1L << (DATEDIFF - 620)) | (1L << (DATE_FORMAT - 620)) | (1L << (DAYNAME - 620)) | (1L << (DAYOFMONTH - 620)) | (1L << (DAYOFWEEK - 620)) | (1L << (DAYOFYEAR - 620)) | (1L << (DECODE - 620)) | (1L << (DEGREES - 620)) | (1L << (DES_DECRYPT - 620)))) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & ((1L << (DES_ENCRYPT - 684)) | (1L << (DIMENSION - 684)) | (1L << (DISJOINT - 684)) | (1L << (ELT - 684)) | (1L << (ENCODE - 684)) | (1L << (ENCRYPT - 684)) | (1L << (ENDPOINT - 684)) | (1L << (ENVELOPE - 684)) | (1L << (EQUALS - 684)) | (1L << (EXP - 684)) | (1L << (EXPORT_SET - 684)) | (1L << (EXTERIORRING - 684)) | (1L << (EXTRACTVALUE - 684)) | (1L << (FIELD - 684)) | (1L << (FIND_IN_SET - 684)) | (1L << (FLOOR - 684)) | (1L << (FORMAT - 684)) | (1L << (FOUND_ROWS - 684)) | (1L << (FROM_BASE64 - 684)) | (1L << (FROM_DAYS - 684)) | (1L << (FROM_UNIXTIME - 684)) | (1L << (GEOMCOLLFROMTEXT - 684)) | (1L << (GEOMCOLLFROMWKB - 684)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 684)) | (1L << (GEOMETRYFROMTEXT - 684)) | (1L << (GEOMETRYFROMWKB - 684)) | (1L << (GEOMETRYN - 684)) | (1L << (GEOMETRYTYPE - 684)) | (1L << (GEOMFROMTEXT - 684)) | (1L << (GEOMFROMWKB - 684)) | (1L << (GET_FORMAT - 684)) | (1L << (GET_LOCK - 684)) | (1L << (GLENGTH - 684)) | (1L << (GREATEST - 684)) | (1L << (GTID_SUBSET - 684)) | (1L << (GTID_SUBTRACT - 684)) | (1L << (HEX - 684)) | (1L << (IFNULL - 684)) | (1L << (INET6_ATON - 684)) | (1L << (INET6_NTOA - 684)) | (1L << (INET_ATON - 684)) | (1L << (INET_NTOA - 684)) | (1L << (INSTR - 684)) | (1L << (INTERIORRINGN - 684)) | (1L << (INTERSECTS - 684)) | (1L << (ISCLOSED - 684)) | (1L << (ISEMPTY - 684)) | (1L << (ISNULL - 684)) | (1L << (ISSIMPLE - 684)) | (1L << (IS_FREE_LOCK - 684)) | (1L << (IS_IPV4 - 684)) | (1L << (IS_IPV4_COMPAT - 684)) | (1L << (IS_IPV4_MAPPED - 684)) | (1L << (IS_IPV6 - 684)) | (1L << (IS_USED_LOCK - 684)) | (1L << (LAST_INSERT_ID - 684)) | (1L << (LCASE - 684)) | (1L << (LEAST - 684)) | (1L << (LENGTH - 684)) | (1L << (LINEFROMTEXT - 684)) | (1L << (LINEFROMWKB - 684)) | (1L << (LINESTRINGFROMTEXT - 684)) | (1L << (LINESTRINGFROMWKB - 684)))) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & ((1L << (LN - 748)) | (1L << (LOAD_FILE - 748)) | (1L << (LOCATE - 748)) | (1L << (LOG - 748)) | (1L << (LOG10 - 748)) | (1L << (LOG2 - 748)) | (1L << (LOWER - 748)) | (1L << (LPAD - 748)) | (1L << (LTRIM - 748)) | (1L << (MAKEDATE - 748)) | (1L << (MAKETIME - 748)) | (1L << (MAKE_SET - 748)) | (1L << (MASTER_POS_WAIT - 748)) | (1L << (MBRCONTAINS - 748)) | (1L << (MBRDISJOINT - 748)) | (1L << (MBREQUAL - 748)) | (1L << (MBRINTERSECTS - 748)) | (1L << (MBROVERLAPS - 748)) | (1L << (MBRTOUCHES - 748)) | (1L << (MBRWITHIN - 748)) | (1L << (MD5 - 748)) | (1L << (MLINEFROMTEXT - 748)) | (1L << (MLINEFROMWKB - 748)) | (1L << (MONTHNAME - 748)) | (1L << (MPOINTFROMTEXT - 748)) | (1L << (MPOINTFROMWKB - 748)) | (1L << (MPOLYFROMTEXT - 748)) | (1L << (MPOLYFROMWKB - 748)) | (1L << (MULTILINESTRINGFROMTEXT - 748)) | (1L << (MULTILINESTRINGFROMWKB - 748)) | (1L << (MULTIPOINTFROMTEXT - 748)) | (1L << (MULTIPOINTFROMWKB - 748)) | (1L << (MULTIPOLYGONFROMTEXT - 748)) | (1L << (MULTIPOLYGONFROMWKB - 748)) | (1L << (NAME_CONST - 748)) | (1L << (NULLIF - 748)) | (1L << (NUMGEOMETRIES - 748)) | (1L << (NUMINTERIORRINGS - 748)) | (1L << (NUMPOINTS - 748)) | (1L << (OCT - 748)) | (1L << (OCTET_LENGTH - 748)) | (1L << (ORD - 748)) | (1L << (OVERLAPS - 748)) | (1L << (PERIOD_ADD - 748)) | (1L << (PERIOD_DIFF - 748)) | (1L << (PI - 748)) | (1L << (POINTFROMTEXT - 748)) | (1L << (POINTFROMWKB - 748)) | (1L << (POINTN - 748)) | (1L << (POLYFROMTEXT - 748)) | (1L << (POLYFROMWKB - 748)) | (1L << (POLYGONFROMTEXT - 748)) | (1L << (POLYGONFROMWKB - 748)) | (1L << (POW - 748)) | (1L << (POWER - 748)) | (1L << (QUOTE - 748)) | (1L << (RADIANS - 748)) | (1L << (RAND - 748)) | (1L << (RANDOM_BYTES - 748)) | (1L << (RELEASE_LOCK - 748)) | (1L << (REVERSE - 748)) | (1L << (ROUND - 748)) | (1L << (ROW_COUNT - 748)) | (1L << (RPAD - 748)))) != 0) || ((((_la - 812)) & ~0x3f) == 0 && ((1L << (_la - 812)) & ((1L << (RTRIM - 812)) | (1L << (SEC_TO_TIME - 812)) | (1L << (SESSION_USER - 812)) | (1L << (SHA - 812)) | (1L << (SHA1 - 812)) | (1L << (SHA2 - 812)) | (1L << (SIGN - 812)) | (1L << (SIN - 812)) | (1L << (SLEEP - 812)) | (1L << (SOUNDEX - 812)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1L << (SQRT - 812)) | (1L << (SRID - 812)) | (1L << (STARTPOINT - 812)) | (1L << (STRCMP - 812)) | (1L << (STR_TO_DATE - 812)) | (1L << (ST_AREA - 812)) | (1L << (ST_ASBINARY - 812)) | (1L << (ST_ASTEXT - 812)) | (1L << (ST_ASWKB - 812)) | (1L << (ST_ASWKT - 812)) | (1L << (ST_BUFFER - 812)) | (1L << (ST_CENTROID - 812)) | (1L << (ST_CONTAINS - 812)) | (1L << (ST_CROSSES - 812)) | (1L << (ST_DIFFERENCE - 812)) | (1L << (ST_DIMENSION - 812)) | (1L << (ST_DISJOINT - 812)) | (1L << (ST_DISTANCE - 812)) | (1L << (ST_ENDPOINT - 812)) | (1L << (ST_ENVELOPE - 812)) | (1L << (ST_EQUALS - 812)) | (1L << (ST_EXTERIORRING - 812)) | (1L << (ST_GEOMCOLLFROMTEXT - 812)) | (1L << (ST_GEOMCOLLFROMTXT - 812)) | (1L << (ST_GEOMCOLLFROMWKB - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1L << (ST_GEOMETRYFROMTEXT - 812)) | (1L << (ST_GEOMETRYFROMWKB - 812)) | (1L << (ST_GEOMETRYN - 812)) | (1L << (ST_GEOMETRYTYPE - 812)) | (1L << (ST_GEOMFROMTEXT - 812)) | (1L << (ST_GEOMFROMWKB - 812)) | (1L << (ST_INTERIORRINGN - 812)) | (1L << (ST_INTERSECTION - 812)) | (1L << (ST_INTERSECTS - 812)) | (1L << (ST_ISCLOSED - 812)) | (1L << (ST_ISEMPTY - 812)) | (1L << (ST_ISSIMPLE - 812)) | (1L << (ST_LINEFROMTEXT - 812)) | (1L << (ST_LINEFROMWKB - 812)) | (1L << (ST_LINESTRINGFROMTEXT - 812)) | (1L << (ST_LINESTRINGFROMWKB - 812)) | (1L << (ST_NUMGEOMETRIES - 812)) | (1L << (ST_NUMINTERIORRING - 812)) | (1L << (ST_NUMINTERIORRINGS - 812)) | (1L << (ST_NUMPOINTS - 812)) | (1L << (ST_OVERLAPS - 812)) | (1L << (ST_POINTFROMTEXT - 812)) | (1L << (ST_POINTFROMWKB - 812)) | (1L << (ST_POINTN - 812)) | (1L << (ST_POLYFROMTEXT - 812)) | (1L << (ST_POLYFROMWKB - 812)))) != 0) || ((((_la - 876)) & ~0x3f) == 0 && ((1L << (_la - 876)) & ((1L << (ST_POLYGONFROMTEXT - 876)) | (1L << (ST_POLYGONFROMWKB - 876)) | (1L << (ST_SRID - 876)) | (1L << (ST_STARTPOINT - 876)) | (1L << (ST_SYMDIFFERENCE - 876)) | (1L << (ST_TOUCHES - 876)) | (1L << (ST_UNION - 876)) | (1L << (ST_WITHIN - 876)) | (1L << (ST_X - 876)) | (1L << (ST_Y - 876)) | (1L << (SUBDATE - 876)) | (1L << (SUBSTRING_INDEX - 876)) | (1L << (SUBTIME - 876)) | (1L << (SYSTEM_USER - 876)) | (1L << (TAN - 876)) | (1L << (TIMEDIFF - 876)) | (1L << (TIMESTAMPADD - 876)) | (1L << (TIMESTAMPDIFF - 876)) | (1L << (TIME_FORMAT - 876)) | (1L << (TIME_TO_SEC - 876)) | (1L << (TOUCHES - 876)) | (1L << (TO_BASE64 - 876)) | (1L << (TO_DAYS - 876)) | (1L << (TO_SECONDS - 876)) | (1L << (UCASE - 876)) | (1L << (UNCOMPRESS - 876)) | (1L << (UNCOMPRESSED_LENGTH - 876)) | (1L << (UNHEX - 876)) | (1L << (UNIX_TIMESTAMP - 876)) | (1L << (UPDATEXML - 876)) | (1L << (UPPER - 876)) | (1L << (UUID - 876)) | (1L << (UUID_SHORT - 876)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 876)) | (1L << (VERSION - 876)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1L << (WEEKDAY - 876)) | (1L << (WEEKOFYEAR - 876)) | (1L << (WEIGHT_STRING - 876)) | (1L << (WITHIN - 876)) | (1L << (YEARWEEK - 876)) | (1L << (Y_FUNCTION - 876)) | (1L << (X_FUNCTION - 876)))) != 0) || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (LR_BRACKET - 945)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 945)) | (1L << (ID - 945)) | (1L << (REVERSE_QUOTE_ID - 945)))) != 0) );
			State = 4070; Match(END);
			State = 4071; Match(LOOP);
			State = 4073;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
				{
				State = 4072; uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		public ITerminalNode[] REPEAT() { return GetTokens(MySqlParser.REPEAT); }
		public ITerminalNode REPEAT(int i) {
			return GetToken(MySqlParser.REPEAT, i);
		}
		public ITerminalNode UNTIL() { return GetToken(MySqlParser.UNTIL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 356, RULE_repeatStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4078;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
				{
				State = 4075; uid();
				State = 4076; Match(COLON_SYMB);
				}
			}

			State = 4080; Match(REPEAT);
			State = 4082;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4081; procedureSqlStatement();
				}
				}
				State = 4084;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DATABASE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (UNLOCK - 155)) | (1L << (UPDATE - 155)) | (1L << (USE - 155)) | (1L << (WHILE - 155)) | (1L << (DATE - 155)) | (1L << (TIME - 155)) | (1L << (TIMESTAMP - 155)) | (1L << (DATETIME - 155)) | (1L << (YEAR - 155)) | (1L << (TEXT - 155)) | (1L << (ENUM - 155)) | (1L << (COUNT - 155)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (POSITION - 236)) | (1L << (ACCOUNT - 236)) | (1L << (ACTION - 236)) | (1L << (AFTER - 236)) | (1L << (AGGREGATE - 236)) | (1L << (ALGORITHM - 236)) | (1L << (ANY - 236)) | (1L << (AT - 236)) | (1L << (AUTHORS - 236)) | (1L << (AUTOCOMMIT - 236)) | (1L << (AUTOEXTEND_SIZE - 236)) | (1L << (AUTO_INCREMENT - 236)) | (1L << (AVG_ROW_LENGTH - 236)) | (1L << (BEGIN - 236)) | (1L << (BINLOG - 236)) | (1L << (BIT - 236)) | (1L << (BLOCK - 236)) | (1L << (BOOL - 236)) | (1L << (BOOLEAN - 236)) | (1L << (BTREE - 236)) | (1L << (CACHE - 236)) | (1L << (CASCADED - 236)) | (1L << (CHAIN - 236)) | (1L << (CHANNEL - 236)) | (1L << (CHECKSUM - 236)) | (1L << (CIPHER - 236)) | (1L << (CLIENT - 236)) | (1L << (CLOSE - 236)) | (1L << (COALESCE - 236)) | (1L << (CODE - 236)) | (1L << (COLUMNS - 236)) | (1L << (COLUMN_FORMAT - 236)) | (1L << (COMMENT - 236)) | (1L << (COMMIT - 236)) | (1L << (COMPACT - 236)) | (1L << (COMPLETION - 236)) | (1L << (COMPRESSED - 236)) | (1L << (COMPRESSION - 236)) | (1L << (CONCURRENT - 236)) | (1L << (CONNECTION - 236)) | (1L << (CONSISTENT - 236)) | (1L << (CONTAINS - 236)) | (1L << (CONTEXT - 236)) | (1L << (CONTRIBUTORS - 236)) | (1L << (COPY - 236)) | (1L << (CPU - 236)) | (1L << (DATA - 236)) | (1L << (DATAFILE - 236)) | (1L << (DEALLOCATE - 236)) | (1L << (DEFAULT_AUTH - 236)) | (1L << (DEFINER - 236)) | (1L << (DELAY_KEY_WRITE - 236)) | (1L << (DIRECTORY - 236)) | (1L << (DISABLE - 236)) | (1L << (DISCARD - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DISK - 300)) | (1L << (DO - 300)) | (1L << (DUMPFILE - 300)) | (1L << (DUPLICATE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENABLE - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (ENDS - 300)) | (1L << (ENGINE - 300)) | (1L << (ENGINES - 300)) | (1L << (ERROR - 300)) | (1L << (ERRORS - 300)) | (1L << (ESCAPE - 300)) | (1L << (EVEN - 300)) | (1L << (EVENT - 300)) | (1L << (EVENTS - 300)) | (1L << (EVERY - 300)) | (1L << (EXCHANGE - 300)) | (1L << (EXCLUSIVE - 300)) | (1L << (EXPIRE - 300)) | (1L << (EXTENT_SIZE - 300)) | (1L << (FAULTS - 300)) | (1L << (FIELDS - 300)) | (1L << (FILE_BLOCK_SIZE - 300)) | (1L << (FILTER - 300)) | (1L << (FIRST - 300)) | (1L << (FIXED - 300)) | (1L << (FLUSH - 300)) | (1L << (FOLLOWS - 300)) | (1L << (FULL - 300)) | (1L << (FUNCTION - 300)) | (1L << (GLOBAL - 300)) | (1L << (GRANTS - 300)) | (1L << (GROUP_REPLICATION - 300)) | (1L << (HANDLER - 300)) | (1L << (HASH - 300)) | (1L << (HELP - 300)) | (1L << (HOST - 300)) | (1L << (IDENTIFIED - 300)) | (1L << (IGNORE_SERVER_IDS - 300)) | (1L << (IMPORT - 300)) | (1L << (INDEXES - 300)) | (1L << (INITIAL_SIZE - 300)) | (1L << (INPLACE - 300)) | (1L << (INSERT_METHOD - 300)) | (1L << (INSTALL - 300)) | (1L << (INSTANCE - 300)) | (1L << (INVOKER - 300)) | (1L << (IO - 300)) | (1L << (IO_THREAD - 300)) | (1L << (IPC - 300)) | (1L << (ISOLATION - 300)) | (1L << (ISSUER - 300)) | (1L << (KEY_BLOCK_SIZE - 300)) | (1L << (LANGUAGE - 300)) | (1L << (LAST - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (LEAVES - 364)) | (1L << (LESS - 364)) | (1L << (LEVEL - 364)) | (1L << (LIST - 364)) | (1L << (LOCAL - 364)) | (1L << (LOGFILE - 364)) | (1L << (LOGS - 364)) | (1L << (MASTER - 364)) | (1L << (MASTER_AUTO_POSITION - 364)) | (1L << (MASTER_CONNECT_RETRY - 364)) | (1L << (MASTER_DELAY - 364)) | (1L << (MASTER_HEARTBEAT_PERIOD - 364)) | (1L << (MASTER_HOST - 364)) | (1L << (MASTER_LOG_FILE - 364)) | (1L << (MASTER_LOG_POS - 364)) | (1L << (MASTER_PASSWORD - 364)) | (1L << (MASTER_PORT - 364)) | (1L << (MASTER_RETRY_COUNT - 364)) | (1L << (MASTER_SSL - 364)) | (1L << (MASTER_SSL_CA - 364)) | (1L << (MASTER_SSL_CAPATH - 364)) | (1L << (MASTER_SSL_CERT - 364)) | (1L << (MASTER_SSL_CIPHER - 364)) | (1L << (MASTER_SSL_CRL - 364)) | (1L << (MASTER_SSL_CRLPATH - 364)) | (1L << (MASTER_SSL_KEY - 364)) | (1L << (MASTER_TLS_VERSION - 364)) | (1L << (MASTER_USER - 364)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 364)) | (1L << (MAX_QUERIES_PER_HOUR - 364)) | (1L << (MAX_ROWS - 364)) | (1L << (MAX_SIZE - 364)) | (1L << (MAX_UPDATES_PER_HOUR - 364)) | (1L << (MAX_USER_CONNECTIONS - 364)) | (1L << (MERGE - 364)) | (1L << (MID - 364)) | (1L << (MIGRATE - 364)) | (1L << (MIN_ROWS - 364)) | (1L << (MODIFY - 364)) | (1L << (MUTEX - 364)) | (1L << (MYSQL - 364)) | (1L << (NAME - 364)) | (1L << (NAMES - 364)) | (1L << (NCHAR - 364)) | (1L << (NEVER - 364)) | (1L << (NO - 364)) | (1L << (NODEGROUP - 364)) | (1L << (NONE - 364)) | (1L << (OFFLINE - 364)) | (1L << (OFFSET - 364)) | (1L << (OJ - 364)) | (1L << (OLD_PASSWORD - 364)) | (1L << (ONE - 364)) | (1L << (ONLINE - 364)) | (1L << (ONLY - 364)) | (1L << (OPEN - 364)) | (1L << (OPTIMIZER_COSTS - 364)) | (1L << (OPTIONS - 364)) | (1L << (OWNER - 364)) | (1L << (PACK_KEYS - 364)) | (1L << (PAGE - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (PARSER - 428)) | (1L << (PARTIAL - 428)) | (1L << (PARTITIONING - 428)) | (1L << (PARTITIONS - 428)) | (1L << (PASSWORD - 428)) | (1L << (PHASE - 428)) | (1L << (PLUGIN_DIR - 428)) | (1L << (PLUGINS - 428)) | (1L << (PORT - 428)) | (1L << (PRECEDES - 428)) | (1L << (PREPARE - 428)) | (1L << (PRESERVE - 428)) | (1L << (PREV - 428)) | (1L << (PROCESSLIST - 428)) | (1L << (PROFILE - 428)) | (1L << (PROFILES - 428)) | (1L << (PROXY - 428)) | (1L << (QUERY - 428)) | (1L << (QUICK - 428)) | (1L << (REBUILD - 428)) | (1L << (RECOVER - 428)) | (1L << (REDO_BUFFER_SIZE - 428)) | (1L << (REDUNDANT - 428)) | (1L << (RELAY_LOG_FILE - 428)) | (1L << (RELAY_LOG_POS - 428)) | (1L << (RELAYLOG - 428)) | (1L << (REMOVE - 428)) | (1L << (REORGANIZE - 428)) | (1L << (REPAIR - 428)) | (1L << (REPLICATE_DO_DB - 428)) | (1L << (REPLICATE_DO_TABLE - 428)) | (1L << (REPLICATE_IGNORE_DB - 428)) | (1L << (REPLICATE_IGNORE_TABLE - 428)) | (1L << (REPLICATE_REWRITE_DB - 428)) | (1L << (REPLICATE_WILD_DO_TABLE - 428)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 428)) | (1L << (REPLICATION - 428)) | (1L << (RESET - 428)) | (1L << (RESUME - 428)) | (1L << (RETURNS - 428)) | (1L << (ROLLBACK - 428)) | (1L << (ROLLUP - 428)) | (1L << (ROTATE - 428)) | (1L << (ROW - 428)) | (1L << (ROWS - 428)) | (1L << (ROW_FORMAT - 428)) | (1L << (SAVEPOINT - 428)) | (1L << (SCHEDULE - 428)) | (1L << (SECURITY - 428)) | (1L << (SERVER - 428)) | (1L << (SESSION - 428)) | (1L << (SHARE - 428)) | (1L << (SHARED - 428)) | (1L << (SIGNED - 428)) | (1L << (SIMPLE - 428)) | (1L << (SLAVE - 428)) | (1L << (SNAPSHOT - 428)) | (1L << (SOCKET - 428)) | (1L << (SOME - 428)) | (1L << (SOUNDS - 428)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (SOURCE - 492)) | (1L << (SQL_AFTER_GTIDS - 492)) | (1L << (SQL_AFTER_MTS_GAPS - 492)) | (1L << (SQL_BEFORE_GTIDS - 492)) | (1L << (SQL_BUFFER_RESULT - 492)) | (1L << (SQL_CACHE - 492)) | (1L << (SQL_NO_CACHE - 492)) | (1L << (SQL_THREAD - 492)) | (1L << (START - 492)) | (1L << (STARTS - 492)) | (1L << (STATS_AUTO_RECALC - 492)) | (1L << (STATS_PERSISTENT - 492)) | (1L << (STATS_SAMPLE_PAGES - 492)) | (1L << (STATUS - 492)) | (1L << (STOP - 492)) | (1L << (STORAGE - 492)) | (1L << (STRING - 492)) | (1L << (SUBJECT - 492)) | (1L << (SUBPARTITION - 492)) | (1L << (SUBPARTITIONS - 492)) | (1L << (SUSPEND - 492)) | (1L << (SWAPS - 492)) | (1L << (SWITCHES - 492)) | (1L << (TABLESPACE - 492)) | (1L << (TEMPORARY - 492)) | (1L << (TEMPTABLE - 492)) | (1L << (THAN - 492)) | (1L << (TRANSACTION - 492)) | (1L << (TRUNCATE - 492)) | (1L << (UNDEFINED - 492)) | (1L << (UNDOFILE - 492)) | (1L << (UNDO_BUFFER_SIZE - 492)) | (1L << (UNINSTALL - 492)) | (1L << (UNKNOWN - 492)) | (1L << (UPGRADE - 492)) | (1L << (USER - 492)) | (1L << (VALIDATION - 492)) | (1L << (VALUE - 492)) | (1L << (VARIABLES - 492)) | (1L << (VIEW - 492)) | (1L << (WAIT - 492)) | (1L << (WARNINGS - 492)) | (1L << (WITHOUT - 492)) | (1L << (WORK - 492)) | (1L << (WRAPPER - 492)) | (1L << (X509 - 492)) | (1L << (XA - 492)) | (1L << (XML - 492)) | (1L << (QUARTER - 492)) | (1L << (MONTH - 492)) | (1L << (DAY - 492)) | (1L << (HOUR - 492)) | (1L << (MINUTE - 492)) | (1L << (WEEK - 492)))) != 0) || ((((_la - 556)) & ~0x3f) == 0 && ((1L << (_la - 556)) & ((1L << (SECOND - 556)) | (1L << (MICROSECOND - 556)) | (1L << (TABLES - 556)) | (1L << (ROUTINE - 556)) | (1L << (EXECUTE - 556)) | (1L << (FILE - 556)) | (1L << (PROCESS - 556)) | (1L << (RELOAD - 556)) | (1L << (SHUTDOWN - 556)) | (1L << (SUPER - 556)) | (1L << (PRIVILEGES - 556)) | (1L << (ARMSCII8 - 556)) | (1L << (ASCII - 556)) | (1L << (BIG5 - 556)) | (1L << (CP1250 - 556)) | (1L << (CP1251 - 556)) | (1L << (CP1256 - 556)) | (1L << (CP1257 - 556)) | (1L << (CP850 - 556)) | (1L << (CP852 - 556)) | (1L << (CP866 - 556)) | (1L << (CP932 - 556)) | (1L << (DEC8 - 556)) | (1L << (EUCJPMS - 556)) | (1L << (EUCKR - 556)) | (1L << (GB2312 - 556)) | (1L << (GBK - 556)) | (1L << (GEOSTD8 - 556)) | (1L << (GREEK - 556)) | (1L << (HEBREW - 556)) | (1L << (HP8 - 556)) | (1L << (KEYBCS2 - 556)) | (1L << (KOI8R - 556)) | (1L << (KOI8U - 556)) | (1L << (LATIN1 - 556)) | (1L << (LATIN2 - 556)) | (1L << (LATIN5 - 556)) | (1L << (LATIN7 - 556)) | (1L << (MACCE - 556)) | (1L << (MACROMAN - 556)) | (1L << (SJIS - 556)) | (1L << (SWE7 - 556)) | (1L << (TIS620 - 556)) | (1L << (UCS2 - 556)) | (1L << (UJIS - 556)) | (1L << (UTF16 - 556)) | (1L << (UTF16LE - 556)) | (1L << (UTF32 - 556)) | (1L << (UTF8 - 556)) | (1L << (UTF8MB3 - 556)) | (1L << (UTF8MB4 - 556)) | (1L << (ARCHIVE - 556)) | (1L << (BLACKHOLE - 556)) | (1L << (CSV - 556)) | (1L << (FEDERATED - 556)) | (1L << (INNODB - 556)) | (1L << (MEMORY - 556)) | (1L << (MRG_MYISAM - 556)) | (1L << (MYISAM - 556)) | (1L << (NDB - 556)) | (1L << (NDBCLUSTER - 556)) | (1L << (PERFOMANCE_SCHEMA - 556)) | (1L << (REPEATABLE - 556)) | (1L << (COMMITTED - 556)))) != 0) || ((((_la - 620)) & ~0x3f) == 0 && ((1L << (_la - 620)) & ((1L << (UNCOMMITTED - 620)) | (1L << (SERIALIZABLE - 620)) | (1L << (GEOMETRYCOLLECTION - 620)) | (1L << (LINESTRING - 620)) | (1L << (MULTILINESTRING - 620)) | (1L << (MULTIPOINT - 620)) | (1L << (MULTIPOLYGON - 620)) | (1L << (POINT - 620)) | (1L << (POLYGON - 620)) | (1L << (ABS - 620)) | (1L << (ACOS - 620)) | (1L << (ADDDATE - 620)) | (1L << (ADDTIME - 620)) | (1L << (AES_DECRYPT - 620)) | (1L << (AES_ENCRYPT - 620)) | (1L << (AREA - 620)) | (1L << (ASBINARY - 620)) | (1L << (ASIN - 620)) | (1L << (ASTEXT - 620)) | (1L << (ASWKB - 620)) | (1L << (ASWKT - 620)) | (1L << (ASYMMETRIC_DECRYPT - 620)) | (1L << (ASYMMETRIC_DERIVE - 620)) | (1L << (ASYMMETRIC_ENCRYPT - 620)) | (1L << (ASYMMETRIC_SIGN - 620)) | (1L << (ASYMMETRIC_VERIFY - 620)) | (1L << (ATAN - 620)) | (1L << (ATAN2 - 620)) | (1L << (BENCHMARK - 620)) | (1L << (BIN - 620)) | (1L << (BIT_COUNT - 620)) | (1L << (BIT_LENGTH - 620)) | (1L << (BUFFER - 620)) | (1L << (CEIL - 620)) | (1L << (CEILING - 620)) | (1L << (CENTROID - 620)) | (1L << (CHARACTER_LENGTH - 620)) | (1L << (CHARSET - 620)) | (1L << (CHAR_LENGTH - 620)) | (1L << (COERCIBILITY - 620)) | (1L << (COLLATION - 620)) | (1L << (COMPRESS - 620)) | (1L << (CONCAT - 620)) | (1L << (CONCAT_WS - 620)) | (1L << (CONNECTION_ID - 620)) | (1L << (CONV - 620)) | (1L << (CONVERT_TZ - 620)) | (1L << (COS - 620)) | (1L << (COT - 620)) | (1L << (CRC32 - 620)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1L << (CREATE_DH_PARAMETERS - 620)) | (1L << (CREATE_DIGEST - 620)) | (1L << (CROSSES - 620)) | (1L << (DATEDIFF - 620)) | (1L << (DATE_FORMAT - 620)) | (1L << (DAYNAME - 620)) | (1L << (DAYOFMONTH - 620)) | (1L << (DAYOFWEEK - 620)) | (1L << (DAYOFYEAR - 620)) | (1L << (DECODE - 620)) | (1L << (DEGREES - 620)) | (1L << (DES_DECRYPT - 620)))) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & ((1L << (DES_ENCRYPT - 684)) | (1L << (DIMENSION - 684)) | (1L << (DISJOINT - 684)) | (1L << (ELT - 684)) | (1L << (ENCODE - 684)) | (1L << (ENCRYPT - 684)) | (1L << (ENDPOINT - 684)) | (1L << (ENVELOPE - 684)) | (1L << (EQUALS - 684)) | (1L << (EXP - 684)) | (1L << (EXPORT_SET - 684)) | (1L << (EXTERIORRING - 684)) | (1L << (EXTRACTVALUE - 684)) | (1L << (FIELD - 684)) | (1L << (FIND_IN_SET - 684)) | (1L << (FLOOR - 684)) | (1L << (FORMAT - 684)) | (1L << (FOUND_ROWS - 684)) | (1L << (FROM_BASE64 - 684)) | (1L << (FROM_DAYS - 684)) | (1L << (FROM_UNIXTIME - 684)) | (1L << (GEOMCOLLFROMTEXT - 684)) | (1L << (GEOMCOLLFROMWKB - 684)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 684)) | (1L << (GEOMETRYFROMTEXT - 684)) | (1L << (GEOMETRYFROMWKB - 684)) | (1L << (GEOMETRYN - 684)) | (1L << (GEOMETRYTYPE - 684)) | (1L << (GEOMFROMTEXT - 684)) | (1L << (GEOMFROMWKB - 684)) | (1L << (GET_FORMAT - 684)) | (1L << (GET_LOCK - 684)) | (1L << (GLENGTH - 684)) | (1L << (GREATEST - 684)) | (1L << (GTID_SUBSET - 684)) | (1L << (GTID_SUBTRACT - 684)) | (1L << (HEX - 684)) | (1L << (IFNULL - 684)) | (1L << (INET6_ATON - 684)) | (1L << (INET6_NTOA - 684)) | (1L << (INET_ATON - 684)) | (1L << (INET_NTOA - 684)) | (1L << (INSTR - 684)) | (1L << (INTERIORRINGN - 684)) | (1L << (INTERSECTS - 684)) | (1L << (ISCLOSED - 684)) | (1L << (ISEMPTY - 684)) | (1L << (ISNULL - 684)) | (1L << (ISSIMPLE - 684)) | (1L << (IS_FREE_LOCK - 684)) | (1L << (IS_IPV4 - 684)) | (1L << (IS_IPV4_COMPAT - 684)) | (1L << (IS_IPV4_MAPPED - 684)) | (1L << (IS_IPV6 - 684)) | (1L << (IS_USED_LOCK - 684)) | (1L << (LAST_INSERT_ID - 684)) | (1L << (LCASE - 684)) | (1L << (LEAST - 684)) | (1L << (LENGTH - 684)) | (1L << (LINEFROMTEXT - 684)) | (1L << (LINEFROMWKB - 684)) | (1L << (LINESTRINGFROMTEXT - 684)) | (1L << (LINESTRINGFROMWKB - 684)))) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & ((1L << (LN - 748)) | (1L << (LOAD_FILE - 748)) | (1L << (LOCATE - 748)) | (1L << (LOG - 748)) | (1L << (LOG10 - 748)) | (1L << (LOG2 - 748)) | (1L << (LOWER - 748)) | (1L << (LPAD - 748)) | (1L << (LTRIM - 748)) | (1L << (MAKEDATE - 748)) | (1L << (MAKETIME - 748)) | (1L << (MAKE_SET - 748)) | (1L << (MASTER_POS_WAIT - 748)) | (1L << (MBRCONTAINS - 748)) | (1L << (MBRDISJOINT - 748)) | (1L << (MBREQUAL - 748)) | (1L << (MBRINTERSECTS - 748)) | (1L << (MBROVERLAPS - 748)) | (1L << (MBRTOUCHES - 748)) | (1L << (MBRWITHIN - 748)) | (1L << (MD5 - 748)) | (1L << (MLINEFROMTEXT - 748)) | (1L << (MLINEFROMWKB - 748)) | (1L << (MONTHNAME - 748)) | (1L << (MPOINTFROMTEXT - 748)) | (1L << (MPOINTFROMWKB - 748)) | (1L << (MPOLYFROMTEXT - 748)) | (1L << (MPOLYFROMWKB - 748)) | (1L << (MULTILINESTRINGFROMTEXT - 748)) | (1L << (MULTILINESTRINGFROMWKB - 748)) | (1L << (MULTIPOINTFROMTEXT - 748)) | (1L << (MULTIPOINTFROMWKB - 748)) | (1L << (MULTIPOLYGONFROMTEXT - 748)) | (1L << (MULTIPOLYGONFROMWKB - 748)) | (1L << (NAME_CONST - 748)) | (1L << (NULLIF - 748)) | (1L << (NUMGEOMETRIES - 748)) | (1L << (NUMINTERIORRINGS - 748)) | (1L << (NUMPOINTS - 748)) | (1L << (OCT - 748)) | (1L << (OCTET_LENGTH - 748)) | (1L << (ORD - 748)) | (1L << (OVERLAPS - 748)) | (1L << (PERIOD_ADD - 748)) | (1L << (PERIOD_DIFF - 748)) | (1L << (PI - 748)) | (1L << (POINTFROMTEXT - 748)) | (1L << (POINTFROMWKB - 748)) | (1L << (POINTN - 748)) | (1L << (POLYFROMTEXT - 748)) | (1L << (POLYFROMWKB - 748)) | (1L << (POLYGONFROMTEXT - 748)) | (1L << (POLYGONFROMWKB - 748)) | (1L << (POW - 748)) | (1L << (POWER - 748)) | (1L << (QUOTE - 748)) | (1L << (RADIANS - 748)) | (1L << (RAND - 748)) | (1L << (RANDOM_BYTES - 748)) | (1L << (RELEASE_LOCK - 748)) | (1L << (REVERSE - 748)) | (1L << (ROUND - 748)) | (1L << (ROW_COUNT - 748)) | (1L << (RPAD - 748)))) != 0) || ((((_la - 812)) & ~0x3f) == 0 && ((1L << (_la - 812)) & ((1L << (RTRIM - 812)) | (1L << (SEC_TO_TIME - 812)) | (1L << (SESSION_USER - 812)) | (1L << (SHA - 812)) | (1L << (SHA1 - 812)) | (1L << (SHA2 - 812)) | (1L << (SIGN - 812)) | (1L << (SIN - 812)) | (1L << (SLEEP - 812)) | (1L << (SOUNDEX - 812)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1L << (SQRT - 812)) | (1L << (SRID - 812)) | (1L << (STARTPOINT - 812)) | (1L << (STRCMP - 812)) | (1L << (STR_TO_DATE - 812)) | (1L << (ST_AREA - 812)) | (1L << (ST_ASBINARY - 812)) | (1L << (ST_ASTEXT - 812)) | (1L << (ST_ASWKB - 812)) | (1L << (ST_ASWKT - 812)) | (1L << (ST_BUFFER - 812)) | (1L << (ST_CENTROID - 812)) | (1L << (ST_CONTAINS - 812)) | (1L << (ST_CROSSES - 812)) | (1L << (ST_DIFFERENCE - 812)) | (1L << (ST_DIMENSION - 812)) | (1L << (ST_DISJOINT - 812)) | (1L << (ST_DISTANCE - 812)) | (1L << (ST_ENDPOINT - 812)) | (1L << (ST_ENVELOPE - 812)) | (1L << (ST_EQUALS - 812)) | (1L << (ST_EXTERIORRING - 812)) | (1L << (ST_GEOMCOLLFROMTEXT - 812)) | (1L << (ST_GEOMCOLLFROMTXT - 812)) | (1L << (ST_GEOMCOLLFROMWKB - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1L << (ST_GEOMETRYFROMTEXT - 812)) | (1L << (ST_GEOMETRYFROMWKB - 812)) | (1L << (ST_GEOMETRYN - 812)) | (1L << (ST_GEOMETRYTYPE - 812)) | (1L << (ST_GEOMFROMTEXT - 812)) | (1L << (ST_GEOMFROMWKB - 812)) | (1L << (ST_INTERIORRINGN - 812)) | (1L << (ST_INTERSECTION - 812)) | (1L << (ST_INTERSECTS - 812)) | (1L << (ST_ISCLOSED - 812)) | (1L << (ST_ISEMPTY - 812)) | (1L << (ST_ISSIMPLE - 812)) | (1L << (ST_LINEFROMTEXT - 812)) | (1L << (ST_LINEFROMWKB - 812)) | (1L << (ST_LINESTRINGFROMTEXT - 812)) | (1L << (ST_LINESTRINGFROMWKB - 812)) | (1L << (ST_NUMGEOMETRIES - 812)) | (1L << (ST_NUMINTERIORRING - 812)) | (1L << (ST_NUMINTERIORRINGS - 812)) | (1L << (ST_NUMPOINTS - 812)) | (1L << (ST_OVERLAPS - 812)) | (1L << (ST_POINTFROMTEXT - 812)) | (1L << (ST_POINTFROMWKB - 812)) | (1L << (ST_POINTN - 812)) | (1L << (ST_POLYFROMTEXT - 812)) | (1L << (ST_POLYFROMWKB - 812)))) != 0) || ((((_la - 876)) & ~0x3f) == 0 && ((1L << (_la - 876)) & ((1L << (ST_POLYGONFROMTEXT - 876)) | (1L << (ST_POLYGONFROMWKB - 876)) | (1L << (ST_SRID - 876)) | (1L << (ST_STARTPOINT - 876)) | (1L << (ST_SYMDIFFERENCE - 876)) | (1L << (ST_TOUCHES - 876)) | (1L << (ST_UNION - 876)) | (1L << (ST_WITHIN - 876)) | (1L << (ST_X - 876)) | (1L << (ST_Y - 876)) | (1L << (SUBDATE - 876)) | (1L << (SUBSTRING_INDEX - 876)) | (1L << (SUBTIME - 876)) | (1L << (SYSTEM_USER - 876)) | (1L << (TAN - 876)) | (1L << (TIMEDIFF - 876)) | (1L << (TIMESTAMPADD - 876)) | (1L << (TIMESTAMPDIFF - 876)) | (1L << (TIME_FORMAT - 876)) | (1L << (TIME_TO_SEC - 876)) | (1L << (TOUCHES - 876)) | (1L << (TO_BASE64 - 876)) | (1L << (TO_DAYS - 876)) | (1L << (TO_SECONDS - 876)) | (1L << (UCASE - 876)) | (1L << (UNCOMPRESS - 876)) | (1L << (UNCOMPRESSED_LENGTH - 876)) | (1L << (UNHEX - 876)) | (1L << (UNIX_TIMESTAMP - 876)) | (1L << (UPDATEXML - 876)) | (1L << (UPPER - 876)) | (1L << (UUID - 876)) | (1L << (UUID_SHORT - 876)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 876)) | (1L << (VERSION - 876)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1L << (WEEKDAY - 876)) | (1L << (WEEKOFYEAR - 876)) | (1L << (WEIGHT_STRING - 876)) | (1L << (WITHIN - 876)) | (1L << (YEARWEEK - 876)) | (1L << (Y_FUNCTION - 876)) | (1L << (X_FUNCTION - 876)))) != 0) || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (LR_BRACKET - 945)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 945)) | (1L << (ID - 945)) | (1L << (REVERSE_QUOTE_ID - 945)))) != 0) );
			State = 4086; Match(UNTIL);
			State = 4087; expression(0);
			State = 4088; Match(END);
			State = 4089; Match(REPEAT);
			State = 4091;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
				{
				State = 4090; uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(MySqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 358, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4093; Match(RETURN);
			State = 4094; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ITerminalNode[] WHILE() { return GetTokens(MySqlParser.WHILE); }
		public ITerminalNode WHILE(int i) {
			return GetToken(MySqlParser.WHILE, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 360, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4099;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
				{
				State = 4096; uid();
				State = 4097; Match(COLON_SYMB);
				}
			}

			State = 4101; Match(WHILE);
			State = 4102; expression(0);
			State = 4103; Match(DO);
			State = 4105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4104; procedureSqlStatement();
				}
				}
				State = 4107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DATABASE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (UNLOCK - 155)) | (1L << (UPDATE - 155)) | (1L << (USE - 155)) | (1L << (WHILE - 155)) | (1L << (DATE - 155)) | (1L << (TIME - 155)) | (1L << (TIMESTAMP - 155)) | (1L << (DATETIME - 155)) | (1L << (YEAR - 155)) | (1L << (TEXT - 155)) | (1L << (ENUM - 155)) | (1L << (COUNT - 155)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (POSITION - 236)) | (1L << (ACCOUNT - 236)) | (1L << (ACTION - 236)) | (1L << (AFTER - 236)) | (1L << (AGGREGATE - 236)) | (1L << (ALGORITHM - 236)) | (1L << (ANY - 236)) | (1L << (AT - 236)) | (1L << (AUTHORS - 236)) | (1L << (AUTOCOMMIT - 236)) | (1L << (AUTOEXTEND_SIZE - 236)) | (1L << (AUTO_INCREMENT - 236)) | (1L << (AVG_ROW_LENGTH - 236)) | (1L << (BEGIN - 236)) | (1L << (BINLOG - 236)) | (1L << (BIT - 236)) | (1L << (BLOCK - 236)) | (1L << (BOOL - 236)) | (1L << (BOOLEAN - 236)) | (1L << (BTREE - 236)) | (1L << (CACHE - 236)) | (1L << (CASCADED - 236)) | (1L << (CHAIN - 236)) | (1L << (CHANNEL - 236)) | (1L << (CHECKSUM - 236)) | (1L << (CIPHER - 236)) | (1L << (CLIENT - 236)) | (1L << (CLOSE - 236)) | (1L << (COALESCE - 236)) | (1L << (CODE - 236)) | (1L << (COLUMNS - 236)) | (1L << (COLUMN_FORMAT - 236)) | (1L << (COMMENT - 236)) | (1L << (COMMIT - 236)) | (1L << (COMPACT - 236)) | (1L << (COMPLETION - 236)) | (1L << (COMPRESSED - 236)) | (1L << (COMPRESSION - 236)) | (1L << (CONCURRENT - 236)) | (1L << (CONNECTION - 236)) | (1L << (CONSISTENT - 236)) | (1L << (CONTAINS - 236)) | (1L << (CONTEXT - 236)) | (1L << (CONTRIBUTORS - 236)) | (1L << (COPY - 236)) | (1L << (CPU - 236)) | (1L << (DATA - 236)) | (1L << (DATAFILE - 236)) | (1L << (DEALLOCATE - 236)) | (1L << (DEFAULT_AUTH - 236)) | (1L << (DEFINER - 236)) | (1L << (DELAY_KEY_WRITE - 236)) | (1L << (DIRECTORY - 236)) | (1L << (DISABLE - 236)) | (1L << (DISCARD - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DISK - 300)) | (1L << (DO - 300)) | (1L << (DUMPFILE - 300)) | (1L << (DUPLICATE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENABLE - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (ENDS - 300)) | (1L << (ENGINE - 300)) | (1L << (ENGINES - 300)) | (1L << (ERROR - 300)) | (1L << (ERRORS - 300)) | (1L << (ESCAPE - 300)) | (1L << (EVEN - 300)) | (1L << (EVENT - 300)) | (1L << (EVENTS - 300)) | (1L << (EVERY - 300)) | (1L << (EXCHANGE - 300)) | (1L << (EXCLUSIVE - 300)) | (1L << (EXPIRE - 300)) | (1L << (EXTENT_SIZE - 300)) | (1L << (FAULTS - 300)) | (1L << (FIELDS - 300)) | (1L << (FILE_BLOCK_SIZE - 300)) | (1L << (FILTER - 300)) | (1L << (FIRST - 300)) | (1L << (FIXED - 300)) | (1L << (FLUSH - 300)) | (1L << (FOLLOWS - 300)) | (1L << (FULL - 300)) | (1L << (FUNCTION - 300)) | (1L << (GLOBAL - 300)) | (1L << (GRANTS - 300)) | (1L << (GROUP_REPLICATION - 300)) | (1L << (HANDLER - 300)) | (1L << (HASH - 300)) | (1L << (HELP - 300)) | (1L << (HOST - 300)) | (1L << (IDENTIFIED - 300)) | (1L << (IGNORE_SERVER_IDS - 300)) | (1L << (IMPORT - 300)) | (1L << (INDEXES - 300)) | (1L << (INITIAL_SIZE - 300)) | (1L << (INPLACE - 300)) | (1L << (INSERT_METHOD - 300)) | (1L << (INSTALL - 300)) | (1L << (INSTANCE - 300)) | (1L << (INVOKER - 300)) | (1L << (IO - 300)) | (1L << (IO_THREAD - 300)) | (1L << (IPC - 300)) | (1L << (ISOLATION - 300)) | (1L << (ISSUER - 300)) | (1L << (KEY_BLOCK_SIZE - 300)) | (1L << (LANGUAGE - 300)) | (1L << (LAST - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (LEAVES - 364)) | (1L << (LESS - 364)) | (1L << (LEVEL - 364)) | (1L << (LIST - 364)) | (1L << (LOCAL - 364)) | (1L << (LOGFILE - 364)) | (1L << (LOGS - 364)) | (1L << (MASTER - 364)) | (1L << (MASTER_AUTO_POSITION - 364)) | (1L << (MASTER_CONNECT_RETRY - 364)) | (1L << (MASTER_DELAY - 364)) | (1L << (MASTER_HEARTBEAT_PERIOD - 364)) | (1L << (MASTER_HOST - 364)) | (1L << (MASTER_LOG_FILE - 364)) | (1L << (MASTER_LOG_POS - 364)) | (1L << (MASTER_PASSWORD - 364)) | (1L << (MASTER_PORT - 364)) | (1L << (MASTER_RETRY_COUNT - 364)) | (1L << (MASTER_SSL - 364)) | (1L << (MASTER_SSL_CA - 364)) | (1L << (MASTER_SSL_CAPATH - 364)) | (1L << (MASTER_SSL_CERT - 364)) | (1L << (MASTER_SSL_CIPHER - 364)) | (1L << (MASTER_SSL_CRL - 364)) | (1L << (MASTER_SSL_CRLPATH - 364)) | (1L << (MASTER_SSL_KEY - 364)) | (1L << (MASTER_TLS_VERSION - 364)) | (1L << (MASTER_USER - 364)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 364)) | (1L << (MAX_QUERIES_PER_HOUR - 364)) | (1L << (MAX_ROWS - 364)) | (1L << (MAX_SIZE - 364)) | (1L << (MAX_UPDATES_PER_HOUR - 364)) | (1L << (MAX_USER_CONNECTIONS - 364)) | (1L << (MERGE - 364)) | (1L << (MID - 364)) | (1L << (MIGRATE - 364)) | (1L << (MIN_ROWS - 364)) | (1L << (MODIFY - 364)) | (1L << (MUTEX - 364)) | (1L << (MYSQL - 364)) | (1L << (NAME - 364)) | (1L << (NAMES - 364)) | (1L << (NCHAR - 364)) | (1L << (NEVER - 364)) | (1L << (NO - 364)) | (1L << (NODEGROUP - 364)) | (1L << (NONE - 364)) | (1L << (OFFLINE - 364)) | (1L << (OFFSET - 364)) | (1L << (OJ - 364)) | (1L << (OLD_PASSWORD - 364)) | (1L << (ONE - 364)) | (1L << (ONLINE - 364)) | (1L << (ONLY - 364)) | (1L << (OPEN - 364)) | (1L << (OPTIMIZER_COSTS - 364)) | (1L << (OPTIONS - 364)) | (1L << (OWNER - 364)) | (1L << (PACK_KEYS - 364)) | (1L << (PAGE - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (PARSER - 428)) | (1L << (PARTIAL - 428)) | (1L << (PARTITIONING - 428)) | (1L << (PARTITIONS - 428)) | (1L << (PASSWORD - 428)) | (1L << (PHASE - 428)) | (1L << (PLUGIN_DIR - 428)) | (1L << (PLUGINS - 428)) | (1L << (PORT - 428)) | (1L << (PRECEDES - 428)) | (1L << (PREPARE - 428)) | (1L << (PRESERVE - 428)) | (1L << (PREV - 428)) | (1L << (PROCESSLIST - 428)) | (1L << (PROFILE - 428)) | (1L << (PROFILES - 428)) | (1L << (PROXY - 428)) | (1L << (QUERY - 428)) | (1L << (QUICK - 428)) | (1L << (REBUILD - 428)) | (1L << (RECOVER - 428)) | (1L << (REDO_BUFFER_SIZE - 428)) | (1L << (REDUNDANT - 428)) | (1L << (RELAY_LOG_FILE - 428)) | (1L << (RELAY_LOG_POS - 428)) | (1L << (RELAYLOG - 428)) | (1L << (REMOVE - 428)) | (1L << (REORGANIZE - 428)) | (1L << (REPAIR - 428)) | (1L << (REPLICATE_DO_DB - 428)) | (1L << (REPLICATE_DO_TABLE - 428)) | (1L << (REPLICATE_IGNORE_DB - 428)) | (1L << (REPLICATE_IGNORE_TABLE - 428)) | (1L << (REPLICATE_REWRITE_DB - 428)) | (1L << (REPLICATE_WILD_DO_TABLE - 428)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 428)) | (1L << (REPLICATION - 428)) | (1L << (RESET - 428)) | (1L << (RESUME - 428)) | (1L << (RETURNS - 428)) | (1L << (ROLLBACK - 428)) | (1L << (ROLLUP - 428)) | (1L << (ROTATE - 428)) | (1L << (ROW - 428)) | (1L << (ROWS - 428)) | (1L << (ROW_FORMAT - 428)) | (1L << (SAVEPOINT - 428)) | (1L << (SCHEDULE - 428)) | (1L << (SECURITY - 428)) | (1L << (SERVER - 428)) | (1L << (SESSION - 428)) | (1L << (SHARE - 428)) | (1L << (SHARED - 428)) | (1L << (SIGNED - 428)) | (1L << (SIMPLE - 428)) | (1L << (SLAVE - 428)) | (1L << (SNAPSHOT - 428)) | (1L << (SOCKET - 428)) | (1L << (SOME - 428)) | (1L << (SOUNDS - 428)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (SOURCE - 492)) | (1L << (SQL_AFTER_GTIDS - 492)) | (1L << (SQL_AFTER_MTS_GAPS - 492)) | (1L << (SQL_BEFORE_GTIDS - 492)) | (1L << (SQL_BUFFER_RESULT - 492)) | (1L << (SQL_CACHE - 492)) | (1L << (SQL_NO_CACHE - 492)) | (1L << (SQL_THREAD - 492)) | (1L << (START - 492)) | (1L << (STARTS - 492)) | (1L << (STATS_AUTO_RECALC - 492)) | (1L << (STATS_PERSISTENT - 492)) | (1L << (STATS_SAMPLE_PAGES - 492)) | (1L << (STATUS - 492)) | (1L << (STOP - 492)) | (1L << (STORAGE - 492)) | (1L << (STRING - 492)) | (1L << (SUBJECT - 492)) | (1L << (SUBPARTITION - 492)) | (1L << (SUBPARTITIONS - 492)) | (1L << (SUSPEND - 492)) | (1L << (SWAPS - 492)) | (1L << (SWITCHES - 492)) | (1L << (TABLESPACE - 492)) | (1L << (TEMPORARY - 492)) | (1L << (TEMPTABLE - 492)) | (1L << (THAN - 492)) | (1L << (TRANSACTION - 492)) | (1L << (TRUNCATE - 492)) | (1L << (UNDEFINED - 492)) | (1L << (UNDOFILE - 492)) | (1L << (UNDO_BUFFER_SIZE - 492)) | (1L << (UNINSTALL - 492)) | (1L << (UNKNOWN - 492)) | (1L << (UPGRADE - 492)) | (1L << (USER - 492)) | (1L << (VALIDATION - 492)) | (1L << (VALUE - 492)) | (1L << (VARIABLES - 492)) | (1L << (VIEW - 492)) | (1L << (WAIT - 492)) | (1L << (WARNINGS - 492)) | (1L << (WITHOUT - 492)) | (1L << (WORK - 492)) | (1L << (WRAPPER - 492)) | (1L << (X509 - 492)) | (1L << (XA - 492)) | (1L << (XML - 492)) | (1L << (QUARTER - 492)) | (1L << (MONTH - 492)) | (1L << (DAY - 492)) | (1L << (HOUR - 492)) | (1L << (MINUTE - 492)) | (1L << (WEEK - 492)))) != 0) || ((((_la - 556)) & ~0x3f) == 0 && ((1L << (_la - 556)) & ((1L << (SECOND - 556)) | (1L << (MICROSECOND - 556)) | (1L << (TABLES - 556)) | (1L << (ROUTINE - 556)) | (1L << (EXECUTE - 556)) | (1L << (FILE - 556)) | (1L << (PROCESS - 556)) | (1L << (RELOAD - 556)) | (1L << (SHUTDOWN - 556)) | (1L << (SUPER - 556)) | (1L << (PRIVILEGES - 556)) | (1L << (ARMSCII8 - 556)) | (1L << (ASCII - 556)) | (1L << (BIG5 - 556)) | (1L << (CP1250 - 556)) | (1L << (CP1251 - 556)) | (1L << (CP1256 - 556)) | (1L << (CP1257 - 556)) | (1L << (CP850 - 556)) | (1L << (CP852 - 556)) | (1L << (CP866 - 556)) | (1L << (CP932 - 556)) | (1L << (DEC8 - 556)) | (1L << (EUCJPMS - 556)) | (1L << (EUCKR - 556)) | (1L << (GB2312 - 556)) | (1L << (GBK - 556)) | (1L << (GEOSTD8 - 556)) | (1L << (GREEK - 556)) | (1L << (HEBREW - 556)) | (1L << (HP8 - 556)) | (1L << (KEYBCS2 - 556)) | (1L << (KOI8R - 556)) | (1L << (KOI8U - 556)) | (1L << (LATIN1 - 556)) | (1L << (LATIN2 - 556)) | (1L << (LATIN5 - 556)) | (1L << (LATIN7 - 556)) | (1L << (MACCE - 556)) | (1L << (MACROMAN - 556)) | (1L << (SJIS - 556)) | (1L << (SWE7 - 556)) | (1L << (TIS620 - 556)) | (1L << (UCS2 - 556)) | (1L << (UJIS - 556)) | (1L << (UTF16 - 556)) | (1L << (UTF16LE - 556)) | (1L << (UTF32 - 556)) | (1L << (UTF8 - 556)) | (1L << (UTF8MB3 - 556)) | (1L << (UTF8MB4 - 556)) | (1L << (ARCHIVE - 556)) | (1L << (BLACKHOLE - 556)) | (1L << (CSV - 556)) | (1L << (FEDERATED - 556)) | (1L << (INNODB - 556)) | (1L << (MEMORY - 556)) | (1L << (MRG_MYISAM - 556)) | (1L << (MYISAM - 556)) | (1L << (NDB - 556)) | (1L << (NDBCLUSTER - 556)) | (1L << (PERFOMANCE_SCHEMA - 556)) | (1L << (REPEATABLE - 556)) | (1L << (COMMITTED - 556)))) != 0) || ((((_la - 620)) & ~0x3f) == 0 && ((1L << (_la - 620)) & ((1L << (UNCOMMITTED - 620)) | (1L << (SERIALIZABLE - 620)) | (1L << (GEOMETRYCOLLECTION - 620)) | (1L << (LINESTRING - 620)) | (1L << (MULTILINESTRING - 620)) | (1L << (MULTIPOINT - 620)) | (1L << (MULTIPOLYGON - 620)) | (1L << (POINT - 620)) | (1L << (POLYGON - 620)) | (1L << (ABS - 620)) | (1L << (ACOS - 620)) | (1L << (ADDDATE - 620)) | (1L << (ADDTIME - 620)) | (1L << (AES_DECRYPT - 620)) | (1L << (AES_ENCRYPT - 620)) | (1L << (AREA - 620)) | (1L << (ASBINARY - 620)) | (1L << (ASIN - 620)) | (1L << (ASTEXT - 620)) | (1L << (ASWKB - 620)) | (1L << (ASWKT - 620)) | (1L << (ASYMMETRIC_DECRYPT - 620)) | (1L << (ASYMMETRIC_DERIVE - 620)) | (1L << (ASYMMETRIC_ENCRYPT - 620)) | (1L << (ASYMMETRIC_SIGN - 620)) | (1L << (ASYMMETRIC_VERIFY - 620)) | (1L << (ATAN - 620)) | (1L << (ATAN2 - 620)) | (1L << (BENCHMARK - 620)) | (1L << (BIN - 620)) | (1L << (BIT_COUNT - 620)) | (1L << (BIT_LENGTH - 620)) | (1L << (BUFFER - 620)) | (1L << (CEIL - 620)) | (1L << (CEILING - 620)) | (1L << (CENTROID - 620)) | (1L << (CHARACTER_LENGTH - 620)) | (1L << (CHARSET - 620)) | (1L << (CHAR_LENGTH - 620)) | (1L << (COERCIBILITY - 620)) | (1L << (COLLATION - 620)) | (1L << (COMPRESS - 620)) | (1L << (CONCAT - 620)) | (1L << (CONCAT_WS - 620)) | (1L << (CONNECTION_ID - 620)) | (1L << (CONV - 620)) | (1L << (CONVERT_TZ - 620)) | (1L << (COS - 620)) | (1L << (COT - 620)) | (1L << (CRC32 - 620)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1L << (CREATE_DH_PARAMETERS - 620)) | (1L << (CREATE_DIGEST - 620)) | (1L << (CROSSES - 620)) | (1L << (DATEDIFF - 620)) | (1L << (DATE_FORMAT - 620)) | (1L << (DAYNAME - 620)) | (1L << (DAYOFMONTH - 620)) | (1L << (DAYOFWEEK - 620)) | (1L << (DAYOFYEAR - 620)) | (1L << (DECODE - 620)) | (1L << (DEGREES - 620)) | (1L << (DES_DECRYPT - 620)))) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & ((1L << (DES_ENCRYPT - 684)) | (1L << (DIMENSION - 684)) | (1L << (DISJOINT - 684)) | (1L << (ELT - 684)) | (1L << (ENCODE - 684)) | (1L << (ENCRYPT - 684)) | (1L << (ENDPOINT - 684)) | (1L << (ENVELOPE - 684)) | (1L << (EQUALS - 684)) | (1L << (EXP - 684)) | (1L << (EXPORT_SET - 684)) | (1L << (EXTERIORRING - 684)) | (1L << (EXTRACTVALUE - 684)) | (1L << (FIELD - 684)) | (1L << (FIND_IN_SET - 684)) | (1L << (FLOOR - 684)) | (1L << (FORMAT - 684)) | (1L << (FOUND_ROWS - 684)) | (1L << (FROM_BASE64 - 684)) | (1L << (FROM_DAYS - 684)) | (1L << (FROM_UNIXTIME - 684)) | (1L << (GEOMCOLLFROMTEXT - 684)) | (1L << (GEOMCOLLFROMWKB - 684)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 684)) | (1L << (GEOMETRYFROMTEXT - 684)) | (1L << (GEOMETRYFROMWKB - 684)) | (1L << (GEOMETRYN - 684)) | (1L << (GEOMETRYTYPE - 684)) | (1L << (GEOMFROMTEXT - 684)) | (1L << (GEOMFROMWKB - 684)) | (1L << (GET_FORMAT - 684)) | (1L << (GET_LOCK - 684)) | (1L << (GLENGTH - 684)) | (1L << (GREATEST - 684)) | (1L << (GTID_SUBSET - 684)) | (1L << (GTID_SUBTRACT - 684)) | (1L << (HEX - 684)) | (1L << (IFNULL - 684)) | (1L << (INET6_ATON - 684)) | (1L << (INET6_NTOA - 684)) | (1L << (INET_ATON - 684)) | (1L << (INET_NTOA - 684)) | (1L << (INSTR - 684)) | (1L << (INTERIORRINGN - 684)) | (1L << (INTERSECTS - 684)) | (1L << (ISCLOSED - 684)) | (1L << (ISEMPTY - 684)) | (1L << (ISNULL - 684)) | (1L << (ISSIMPLE - 684)) | (1L << (IS_FREE_LOCK - 684)) | (1L << (IS_IPV4 - 684)) | (1L << (IS_IPV4_COMPAT - 684)) | (1L << (IS_IPV4_MAPPED - 684)) | (1L << (IS_IPV6 - 684)) | (1L << (IS_USED_LOCK - 684)) | (1L << (LAST_INSERT_ID - 684)) | (1L << (LCASE - 684)) | (1L << (LEAST - 684)) | (1L << (LENGTH - 684)) | (1L << (LINEFROMTEXT - 684)) | (1L << (LINEFROMWKB - 684)) | (1L << (LINESTRINGFROMTEXT - 684)) | (1L << (LINESTRINGFROMWKB - 684)))) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & ((1L << (LN - 748)) | (1L << (LOAD_FILE - 748)) | (1L << (LOCATE - 748)) | (1L << (LOG - 748)) | (1L << (LOG10 - 748)) | (1L << (LOG2 - 748)) | (1L << (LOWER - 748)) | (1L << (LPAD - 748)) | (1L << (LTRIM - 748)) | (1L << (MAKEDATE - 748)) | (1L << (MAKETIME - 748)) | (1L << (MAKE_SET - 748)) | (1L << (MASTER_POS_WAIT - 748)) | (1L << (MBRCONTAINS - 748)) | (1L << (MBRDISJOINT - 748)) | (1L << (MBREQUAL - 748)) | (1L << (MBRINTERSECTS - 748)) | (1L << (MBROVERLAPS - 748)) | (1L << (MBRTOUCHES - 748)) | (1L << (MBRWITHIN - 748)) | (1L << (MD5 - 748)) | (1L << (MLINEFROMTEXT - 748)) | (1L << (MLINEFROMWKB - 748)) | (1L << (MONTHNAME - 748)) | (1L << (MPOINTFROMTEXT - 748)) | (1L << (MPOINTFROMWKB - 748)) | (1L << (MPOLYFROMTEXT - 748)) | (1L << (MPOLYFROMWKB - 748)) | (1L << (MULTILINESTRINGFROMTEXT - 748)) | (1L << (MULTILINESTRINGFROMWKB - 748)) | (1L << (MULTIPOINTFROMTEXT - 748)) | (1L << (MULTIPOINTFROMWKB - 748)) | (1L << (MULTIPOLYGONFROMTEXT - 748)) | (1L << (MULTIPOLYGONFROMWKB - 748)) | (1L << (NAME_CONST - 748)) | (1L << (NULLIF - 748)) | (1L << (NUMGEOMETRIES - 748)) | (1L << (NUMINTERIORRINGS - 748)) | (1L << (NUMPOINTS - 748)) | (1L << (OCT - 748)) | (1L << (OCTET_LENGTH - 748)) | (1L << (ORD - 748)) | (1L << (OVERLAPS - 748)) | (1L << (PERIOD_ADD - 748)) | (1L << (PERIOD_DIFF - 748)) | (1L << (PI - 748)) | (1L << (POINTFROMTEXT - 748)) | (1L << (POINTFROMWKB - 748)) | (1L << (POINTN - 748)) | (1L << (POLYFROMTEXT - 748)) | (1L << (POLYFROMWKB - 748)) | (1L << (POLYGONFROMTEXT - 748)) | (1L << (POLYGONFROMWKB - 748)) | (1L << (POW - 748)) | (1L << (POWER - 748)) | (1L << (QUOTE - 748)) | (1L << (RADIANS - 748)) | (1L << (RAND - 748)) | (1L << (RANDOM_BYTES - 748)) | (1L << (RELEASE_LOCK - 748)) | (1L << (REVERSE - 748)) | (1L << (ROUND - 748)) | (1L << (ROW_COUNT - 748)) | (1L << (RPAD - 748)))) != 0) || ((((_la - 812)) & ~0x3f) == 0 && ((1L << (_la - 812)) & ((1L << (RTRIM - 812)) | (1L << (SEC_TO_TIME - 812)) | (1L << (SESSION_USER - 812)) | (1L << (SHA - 812)) | (1L << (SHA1 - 812)) | (1L << (SHA2 - 812)) | (1L << (SIGN - 812)) | (1L << (SIN - 812)) | (1L << (SLEEP - 812)) | (1L << (SOUNDEX - 812)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1L << (SQRT - 812)) | (1L << (SRID - 812)) | (1L << (STARTPOINT - 812)) | (1L << (STRCMP - 812)) | (1L << (STR_TO_DATE - 812)) | (1L << (ST_AREA - 812)) | (1L << (ST_ASBINARY - 812)) | (1L << (ST_ASTEXT - 812)) | (1L << (ST_ASWKB - 812)) | (1L << (ST_ASWKT - 812)) | (1L << (ST_BUFFER - 812)) | (1L << (ST_CENTROID - 812)) | (1L << (ST_CONTAINS - 812)) | (1L << (ST_CROSSES - 812)) | (1L << (ST_DIFFERENCE - 812)) | (1L << (ST_DIMENSION - 812)) | (1L << (ST_DISJOINT - 812)) | (1L << (ST_DISTANCE - 812)) | (1L << (ST_ENDPOINT - 812)) | (1L << (ST_ENVELOPE - 812)) | (1L << (ST_EQUALS - 812)) | (1L << (ST_EXTERIORRING - 812)) | (1L << (ST_GEOMCOLLFROMTEXT - 812)) | (1L << (ST_GEOMCOLLFROMTXT - 812)) | (1L << (ST_GEOMCOLLFROMWKB - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1L << (ST_GEOMETRYFROMTEXT - 812)) | (1L << (ST_GEOMETRYFROMWKB - 812)) | (1L << (ST_GEOMETRYN - 812)) | (1L << (ST_GEOMETRYTYPE - 812)) | (1L << (ST_GEOMFROMTEXT - 812)) | (1L << (ST_GEOMFROMWKB - 812)) | (1L << (ST_INTERIORRINGN - 812)) | (1L << (ST_INTERSECTION - 812)) | (1L << (ST_INTERSECTS - 812)) | (1L << (ST_ISCLOSED - 812)) | (1L << (ST_ISEMPTY - 812)) | (1L << (ST_ISSIMPLE - 812)) | (1L << (ST_LINEFROMTEXT - 812)) | (1L << (ST_LINEFROMWKB - 812)) | (1L << (ST_LINESTRINGFROMTEXT - 812)) | (1L << (ST_LINESTRINGFROMWKB - 812)) | (1L << (ST_NUMGEOMETRIES - 812)) | (1L << (ST_NUMINTERIORRING - 812)) | (1L << (ST_NUMINTERIORRINGS - 812)) | (1L << (ST_NUMPOINTS - 812)) | (1L << (ST_OVERLAPS - 812)) | (1L << (ST_POINTFROMTEXT - 812)) | (1L << (ST_POINTFROMWKB - 812)) | (1L << (ST_POINTN - 812)) | (1L << (ST_POLYFROMTEXT - 812)) | (1L << (ST_POLYFROMWKB - 812)))) != 0) || ((((_la - 876)) & ~0x3f) == 0 && ((1L << (_la - 876)) & ((1L << (ST_POLYGONFROMTEXT - 876)) | (1L << (ST_POLYGONFROMWKB - 876)) | (1L << (ST_SRID - 876)) | (1L << (ST_STARTPOINT - 876)) | (1L << (ST_SYMDIFFERENCE - 876)) | (1L << (ST_TOUCHES - 876)) | (1L << (ST_UNION - 876)) | (1L << (ST_WITHIN - 876)) | (1L << (ST_X - 876)) | (1L << (ST_Y - 876)) | (1L << (SUBDATE - 876)) | (1L << (SUBSTRING_INDEX - 876)) | (1L << (SUBTIME - 876)) | (1L << (SYSTEM_USER - 876)) | (1L << (TAN - 876)) | (1L << (TIMEDIFF - 876)) | (1L << (TIMESTAMPADD - 876)) | (1L << (TIMESTAMPDIFF - 876)) | (1L << (TIME_FORMAT - 876)) | (1L << (TIME_TO_SEC - 876)) | (1L << (TOUCHES - 876)) | (1L << (TO_BASE64 - 876)) | (1L << (TO_DAYS - 876)) | (1L << (TO_SECONDS - 876)) | (1L << (UCASE - 876)) | (1L << (UNCOMPRESS - 876)) | (1L << (UNCOMPRESSED_LENGTH - 876)) | (1L << (UNHEX - 876)) | (1L << (UNIX_TIMESTAMP - 876)) | (1L << (UPDATEXML - 876)) | (1L << (UPPER - 876)) | (1L << (UUID - 876)) | (1L << (UUID_SHORT - 876)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 876)) | (1L << (VERSION - 876)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1L << (WEEKDAY - 876)) | (1L << (WEEKOFYEAR - 876)) | (1L << (WEIGHT_STRING - 876)) | (1L << (WITHIN - 876)) | (1L << (YEARWEEK - 876)) | (1L << (Y_FUNCTION - 876)) | (1L << (X_FUNCTION - 876)))) != 0) || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (LR_BRACKET - 945)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 945)) | (1L << (ID - 945)) | (1L << (REVERSE_QUOTE_ID - 945)))) != 0) );
			State = 4109; Match(END);
			State = 4110; Match(WHILE);
			State = 4112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)) | (1L << (QUARTER - 500)) | (1L << (MONTH - 500)) | (1L << (DAY - 500)) | (1L << (HOUR - 500)) | (1L << (MINUTE - 500)) | (1L << (WEEK - 500)) | (1L << (SECOND - 500)) | (1L << (MICROSECOND - 500)) | (1L << (TABLES - 500)) | (1L << (ROUTINE - 500)) | (1L << (EXECUTE - 500)) | (1L << (FILE - 500)) | (1L << (PROCESS - 500)) | (1L << (RELOAD - 500)))) != 0) || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & ((1L << (SHUTDOWN - 564)) | (1L << (SUPER - 564)) | (1L << (PRIVILEGES - 564)) | (1L << (ARMSCII8 - 564)) | (1L << (ASCII - 564)) | (1L << (BIG5 - 564)) | (1L << (CP1250 - 564)) | (1L << (CP1251 - 564)) | (1L << (CP1256 - 564)) | (1L << (CP1257 - 564)) | (1L << (CP850 - 564)) | (1L << (CP852 - 564)) | (1L << (CP866 - 564)) | (1L << (CP932 - 564)) | (1L << (DEC8 - 564)) | (1L << (EUCJPMS - 564)) | (1L << (EUCKR - 564)) | (1L << (GB2312 - 564)) | (1L << (GBK - 564)) | (1L << (GEOSTD8 - 564)) | (1L << (GREEK - 564)) | (1L << (HEBREW - 564)) | (1L << (HP8 - 564)) | (1L << (KEYBCS2 - 564)) | (1L << (KOI8R - 564)) | (1L << (KOI8U - 564)) | (1L << (LATIN1 - 564)) | (1L << (LATIN2 - 564)) | (1L << (LATIN5 - 564)) | (1L << (LATIN7 - 564)) | (1L << (MACCE - 564)) | (1L << (MACROMAN - 564)) | (1L << (SJIS - 564)) | (1L << (SWE7 - 564)) | (1L << (TIS620 - 564)) | (1L << (UCS2 - 564)) | (1L << (UJIS - 564)) | (1L << (UTF16 - 564)) | (1L << (UTF16LE - 564)) | (1L << (UTF32 - 564)) | (1L << (UTF8 - 564)) | (1L << (UTF8MB3 - 564)) | (1L << (UTF8MB4 - 564)) | (1L << (ARCHIVE - 564)) | (1L << (BLACKHOLE - 564)) | (1L << (CSV - 564)) | (1L << (FEDERATED - 564)) | (1L << (INNODB - 564)) | (1L << (MEMORY - 564)) | (1L << (MRG_MYISAM - 564)) | (1L << (MYISAM - 564)) | (1L << (NDB - 564)) | (1L << (NDBCLUSTER - 564)) | (1L << (PERFOMANCE_SCHEMA - 564)) | (1L << (REPEATABLE - 564)) | (1L << (COMMITTED - 564)) | (1L << (UNCOMMITTED - 564)) | (1L << (SERIALIZABLE - 564)) | (1L << (GEOMETRYCOLLECTION - 564)) | (1L << (LINESTRING - 564)) | (1L << (MULTILINESTRING - 564)) | (1L << (MULTIPOINT - 564)) | (1L << (MULTIPOLYGON - 564)) | (1L << (POINT - 564)))) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (POLYGON - 628)) | (1L << (ABS - 628)) | (1L << (ACOS - 628)) | (1L << (ADDDATE - 628)) | (1L << (ADDTIME - 628)) | (1L << (AES_DECRYPT - 628)) | (1L << (AES_ENCRYPT - 628)) | (1L << (AREA - 628)) | (1L << (ASBINARY - 628)) | (1L << (ASIN - 628)) | (1L << (ASTEXT - 628)) | (1L << (ASWKB - 628)) | (1L << (ASWKT - 628)) | (1L << (ASYMMETRIC_DECRYPT - 628)) | (1L << (ASYMMETRIC_DERIVE - 628)) | (1L << (ASYMMETRIC_ENCRYPT - 628)) | (1L << (ASYMMETRIC_SIGN - 628)) | (1L << (ASYMMETRIC_VERIFY - 628)) | (1L << (ATAN - 628)) | (1L << (ATAN2 - 628)) | (1L << (BENCHMARK - 628)) | (1L << (BIN - 628)) | (1L << (BIT_COUNT - 628)) | (1L << (BIT_LENGTH - 628)) | (1L << (BUFFER - 628)) | (1L << (CEIL - 628)) | (1L << (CEILING - 628)) | (1L << (CENTROID - 628)) | (1L << (CHARACTER_LENGTH - 628)) | (1L << (CHARSET - 628)) | (1L << (CHAR_LENGTH - 628)) | (1L << (COERCIBILITY - 628)) | (1L << (COLLATION - 628)) | (1L << (COMPRESS - 628)) | (1L << (CONCAT - 628)) | (1L << (CONCAT_WS - 628)) | (1L << (CONNECTION_ID - 628)) | (1L << (CONV - 628)) | (1L << (CONVERT_TZ - 628)) | (1L << (COS - 628)) | (1L << (COT - 628)) | (1L << (CRC32 - 628)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1L << (CREATE_DH_PARAMETERS - 628)) | (1L << (CREATE_DIGEST - 628)) | (1L << (CROSSES - 628)) | (1L << (DATEDIFF - 628)) | (1L << (DATE_FORMAT - 628)) | (1L << (DAYNAME - 628)) | (1L << (DAYOFMONTH - 628)) | (1L << (DAYOFWEEK - 628)) | (1L << (DAYOFYEAR - 628)) | (1L << (DECODE - 628)) | (1L << (DEGREES - 628)) | (1L << (DES_DECRYPT - 628)) | (1L << (DES_ENCRYPT - 628)) | (1L << (DIMENSION - 628)) | (1L << (DISJOINT - 628)) | (1L << (ELT - 628)) | (1L << (ENCODE - 628)) | (1L << (ENCRYPT - 628)) | (1L << (ENDPOINT - 628)) | (1L << (ENVELOPE - 628)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (EQUALS - 692)) | (1L << (EXP - 692)) | (1L << (EXPORT_SET - 692)) | (1L << (EXTERIORRING - 692)) | (1L << (EXTRACTVALUE - 692)) | (1L << (FIELD - 692)) | (1L << (FIND_IN_SET - 692)) | (1L << (FLOOR - 692)) | (1L << (FORMAT - 692)) | (1L << (FOUND_ROWS - 692)) | (1L << (FROM_BASE64 - 692)) | (1L << (FROM_DAYS - 692)) | (1L << (FROM_UNIXTIME - 692)) | (1L << (GEOMCOLLFROMTEXT - 692)) | (1L << (GEOMCOLLFROMWKB - 692)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 692)) | (1L << (GEOMETRYFROMTEXT - 692)) | (1L << (GEOMETRYFROMWKB - 692)) | (1L << (GEOMETRYN - 692)) | (1L << (GEOMETRYTYPE - 692)) | (1L << (GEOMFROMTEXT - 692)) | (1L << (GEOMFROMWKB - 692)) | (1L << (GET_FORMAT - 692)) | (1L << (GET_LOCK - 692)) | (1L << (GLENGTH - 692)) | (1L << (GREATEST - 692)) | (1L << (GTID_SUBSET - 692)) | (1L << (GTID_SUBTRACT - 692)) | (1L << (HEX - 692)) | (1L << (IFNULL - 692)) | (1L << (INET6_ATON - 692)) | (1L << (INET6_NTOA - 692)) | (1L << (INET_ATON - 692)) | (1L << (INET_NTOA - 692)) | (1L << (INSTR - 692)) | (1L << (INTERIORRINGN - 692)) | (1L << (INTERSECTS - 692)) | (1L << (ISCLOSED - 692)) | (1L << (ISEMPTY - 692)) | (1L << (ISNULL - 692)) | (1L << (ISSIMPLE - 692)) | (1L << (IS_FREE_LOCK - 692)) | (1L << (IS_IPV4 - 692)) | (1L << (IS_IPV4_COMPAT - 692)) | (1L << (IS_IPV4_MAPPED - 692)) | (1L << (IS_IPV6 - 692)) | (1L << (IS_USED_LOCK - 692)) | (1L << (LAST_INSERT_ID - 692)) | (1L << (LCASE - 692)) | (1L << (LEAST - 692)) | (1L << (LENGTH - 692)) | (1L << (LINEFROMTEXT - 692)) | (1L << (LINEFROMWKB - 692)) | (1L << (LINESTRINGFROMTEXT - 692)) | (1L << (LINESTRINGFROMWKB - 692)) | (1L << (LN - 692)) | (1L << (LOAD_FILE - 692)) | (1L << (LOCATE - 692)) | (1L << (LOG - 692)) | (1L << (LOG10 - 692)) | (1L << (LOG2 - 692)) | (1L << (LOWER - 692)) | (1L << (LPAD - 692)))) != 0) || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (LTRIM - 756)) | (1L << (MAKEDATE - 756)) | (1L << (MAKETIME - 756)) | (1L << (MAKE_SET - 756)) | (1L << (MASTER_POS_WAIT - 756)) | (1L << (MBRCONTAINS - 756)) | (1L << (MBRDISJOINT - 756)) | (1L << (MBREQUAL - 756)) | (1L << (MBRINTERSECTS - 756)) | (1L << (MBROVERLAPS - 756)) | (1L << (MBRTOUCHES - 756)) | (1L << (MBRWITHIN - 756)) | (1L << (MD5 - 756)) | (1L << (MLINEFROMTEXT - 756)) | (1L << (MLINEFROMWKB - 756)) | (1L << (MONTHNAME - 756)) | (1L << (MPOINTFROMTEXT - 756)) | (1L << (MPOINTFROMWKB - 756)) | (1L << (MPOLYFROMTEXT - 756)) | (1L << (MPOLYFROMWKB - 756)) | (1L << (MULTILINESTRINGFROMTEXT - 756)) | (1L << (MULTILINESTRINGFROMWKB - 756)) | (1L << (MULTIPOINTFROMTEXT - 756)) | (1L << (MULTIPOINTFROMWKB - 756)) | (1L << (MULTIPOLYGONFROMTEXT - 756)) | (1L << (MULTIPOLYGONFROMWKB - 756)) | (1L << (NAME_CONST - 756)) | (1L << (NULLIF - 756)) | (1L << (NUMGEOMETRIES - 756)) | (1L << (NUMINTERIORRINGS - 756)) | (1L << (NUMPOINTS - 756)) | (1L << (OCT - 756)) | (1L << (OCTET_LENGTH - 756)) | (1L << (ORD - 756)) | (1L << (OVERLAPS - 756)) | (1L << (PERIOD_ADD - 756)) | (1L << (PERIOD_DIFF - 756)) | (1L << (PI - 756)) | (1L << (POINTFROMTEXT - 756)) | (1L << (POINTFROMWKB - 756)) | (1L << (POINTN - 756)) | (1L << (POLYFROMTEXT - 756)) | (1L << (POLYFROMWKB - 756)) | (1L << (POLYGONFROMTEXT - 756)) | (1L << (POLYGONFROMWKB - 756)) | (1L << (POW - 756)) | (1L << (POWER - 756)) | (1L << (QUOTE - 756)) | (1L << (RADIANS - 756)) | (1L << (RAND - 756)) | (1L << (RANDOM_BYTES - 756)) | (1L << (RELEASE_LOCK - 756)) | (1L << (REVERSE - 756)) | (1L << (ROUND - 756)) | (1L << (ROW_COUNT - 756)) | (1L << (RPAD - 756)) | (1L << (RTRIM - 756)) | (1L << (SEC_TO_TIME - 756)) | (1L << (SESSION_USER - 756)) | (1L << (SHA - 756)) | (1L << (SHA1 - 756)) | (1L << (SHA2 - 756)) | (1L << (SIGN - 756)) | (1L << (SIN - 756)))) != 0) || ((((_la - 820)) & ~0x3f) == 0 && ((1L << (_la - 820)) & ((1L << (SLEEP - 820)) | (1L << (SOUNDEX - 820)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1L << (SQRT - 820)) | (1L << (SRID - 820)) | (1L << (STARTPOINT - 820)) | (1L << (STRCMP - 820)) | (1L << (STR_TO_DATE - 820)) | (1L << (ST_AREA - 820)) | (1L << (ST_ASBINARY - 820)) | (1L << (ST_ASTEXT - 820)) | (1L << (ST_ASWKB - 820)) | (1L << (ST_ASWKT - 820)) | (1L << (ST_BUFFER - 820)) | (1L << (ST_CENTROID - 820)) | (1L << (ST_CONTAINS - 820)) | (1L << (ST_CROSSES - 820)) | (1L << (ST_DIFFERENCE - 820)) | (1L << (ST_DIMENSION - 820)) | (1L << (ST_DISJOINT - 820)) | (1L << (ST_DISTANCE - 820)) | (1L << (ST_ENDPOINT - 820)) | (1L << (ST_ENVELOPE - 820)) | (1L << (ST_EQUALS - 820)) | (1L << (ST_EXTERIORRING - 820)) | (1L << (ST_GEOMCOLLFROMTEXT - 820)) | (1L << (ST_GEOMCOLLFROMTXT - 820)) | (1L << (ST_GEOMCOLLFROMWKB - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1L << (ST_GEOMETRYFROMTEXT - 820)) | (1L << (ST_GEOMETRYFROMWKB - 820)) | (1L << (ST_GEOMETRYN - 820)) | (1L << (ST_GEOMETRYTYPE - 820)) | (1L << (ST_GEOMFROMTEXT - 820)) | (1L << (ST_GEOMFROMWKB - 820)) | (1L << (ST_INTERIORRINGN - 820)) | (1L << (ST_INTERSECTION - 820)) | (1L << (ST_INTERSECTS - 820)) | (1L << (ST_ISCLOSED - 820)) | (1L << (ST_ISEMPTY - 820)) | (1L << (ST_ISSIMPLE - 820)) | (1L << (ST_LINEFROMTEXT - 820)) | (1L << (ST_LINEFROMWKB - 820)) | (1L << (ST_LINESTRINGFROMTEXT - 820)) | (1L << (ST_LINESTRINGFROMWKB - 820)) | (1L << (ST_NUMGEOMETRIES - 820)) | (1L << (ST_NUMINTERIORRING - 820)) | (1L << (ST_NUMINTERIORRINGS - 820)) | (1L << (ST_NUMPOINTS - 820)) | (1L << (ST_OVERLAPS - 820)) | (1L << (ST_POINTFROMTEXT - 820)) | (1L << (ST_POINTFROMWKB - 820)) | (1L << (ST_POINTN - 820)) | (1L << (ST_POLYFROMTEXT - 820)) | (1L << (ST_POLYFROMWKB - 820)) | (1L << (ST_POLYGONFROMTEXT - 820)) | (1L << (ST_POLYGONFROMWKB - 820)) | (1L << (ST_SRID - 820)) | (1L << (ST_STARTPOINT - 820)) | (1L << (ST_SYMDIFFERENCE - 820)) | (1L << (ST_TOUCHES - 820)) | (1L << (ST_UNION - 820)) | (1L << (ST_WITHIN - 820)))) != 0) || ((((_la - 884)) & ~0x3f) == 0 && ((1L << (_la - 884)) & ((1L << (ST_X - 884)) | (1L << (ST_Y - 884)) | (1L << (SUBDATE - 884)) | (1L << (SUBSTRING_INDEX - 884)) | (1L << (SUBTIME - 884)) | (1L << (SYSTEM_USER - 884)) | (1L << (TAN - 884)) | (1L << (TIMEDIFF - 884)) | (1L << (TIMESTAMPADD - 884)) | (1L << (TIMESTAMPDIFF - 884)) | (1L << (TIME_FORMAT - 884)) | (1L << (TIME_TO_SEC - 884)) | (1L << (TOUCHES - 884)) | (1L << (TO_BASE64 - 884)) | (1L << (TO_DAYS - 884)) | (1L << (TO_SECONDS - 884)) | (1L << (UCASE - 884)) | (1L << (UNCOMPRESS - 884)) | (1L << (UNCOMPRESSED_LENGTH - 884)) | (1L << (UNHEX - 884)) | (1L << (UNIX_TIMESTAMP - 884)) | (1L << (UPDATEXML - 884)) | (1L << (UPPER - 884)) | (1L << (UUID - 884)) | (1L << (UUID_SHORT - 884)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 884)) | (1L << (VERSION - 884)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1L << (WEEKDAY - 884)) | (1L << (WEEKOFYEAR - 884)) | (1L << (WEIGHT_STRING - 884)) | (1L << (WITHIN - 884)) | (1L << (YEARWEEK - 884)) | (1L << (Y_FUNCTION - 884)) | (1L << (X_FUNCTION - 884)))) != 0) || ((((_la - 957)) & ~0x3f) == 0 && ((1L << (_la - 957)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 957)) | (1L << (ID - 957)) | (1L << (REVERSE_QUOTE_ID - 957)))) != 0)) {
				{
				State = 4111; uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorStatementContext : ParserRuleContext {
		public CursorStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorStatement; } }
	 
		public CursorStatementContext() { }
		public virtual void CopyFrom(CursorStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CloseCursorContext : CursorStatementContext {
		public ITerminalNode CLOSE() { return GetToken(MySqlParser.CLOSE, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CloseCursorContext(CursorStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCloseCursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCloseCursor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseCursor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpenCursorContext : CursorStatementContext {
		public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public OpenCursorContext(CursorStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOpenCursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOpenCursor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenCursor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FetchCursorContext : CursorStatementContext {
		public ITerminalNode FETCH() { return GetToken(MySqlParser.FETCH, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
		public FetchCursorContext(CursorStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFetchCursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFetchCursor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFetchCursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorStatementContext cursorStatement() {
		CursorStatementContext _localctx = new CursorStatementContext(Context, State);
		EnterRule(_localctx, 362, RULE_cursorStatement);
		int _la;
		try {
			State = 4129;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4114; Match(CLOSE);
				State = 4115; uid();
				}
				break;
			case FETCH:
				_localctx = new FetchCursorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4116; Match(FETCH);
				State = 4121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==NEXT) {
					{
					State = 4118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEXT) {
						{
						State = 4117; Match(NEXT);
						}
					}

					State = 4120; Match(FROM);
					}
				}

				State = 4123; uid();
				State = 4124; Match(INTO);
				State = 4125; uidList();
				}
				break;
			case OPEN:
				_localctx = new OpenCursorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4127; Match(OPEN);
				State = 4128; uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareVariableContext : ParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeclareVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeclareVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareVariableContext declareVariable() {
		DeclareVariableContext _localctx = new DeclareVariableContext(Context, State);
		EnterRule(_localctx, 364, RULE_declareVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4131; Match(DECLARE);
			State = 4132; uidList();
			State = 4133; dataType();
			State = 4136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 4134; Match(DEFAULT);
				State = 4135; defaultValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareConditionContext : ParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode CONDITION() { return GetToken(MySqlParser.CONDITION, 0); }
		public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ITerminalNode SQLSTATE() { return GetToken(MySqlParser.SQLSTATE, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public DeclareConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeclareCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeclareCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareConditionContext declareCondition() {
		DeclareConditionContext _localctx = new DeclareConditionContext(Context, State);
		EnterRule(_localctx, 366, RULE_declareCondition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4138; Match(DECLARE);
			State = 4139; uid();
			State = 4140; Match(CONDITION);
			State = 4141; Match(FOR);
			State = 4148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				{
				State = 4142; decimalLiteral();
				}
				break;
			case SQLSTATE:
				{
				State = 4143; Match(SQLSTATE);
				State = 4145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 4144; Match(VALUE);
					}
				}

				State = 4147; Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareCursorContext : ParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode CURSOR() { return GetToken(MySqlParser.CURSOR, 0); }
		public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public DeclareCursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareCursor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeclareCursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeclareCursor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareCursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareCursorContext declareCursor() {
		DeclareCursorContext _localctx = new DeclareCursorContext(Context, State);
		EnterRule(_localctx, 368, RULE_declareCursor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4150; Match(DECLARE);
			State = 4151; uid();
			State = 4152; Match(CURSOR);
			State = 4153; Match(FOR);
			State = 4154; selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareHandlerContext : ParserRuleContext {
		public IToken handlerAction;
		public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
		public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		public HandlerConditionValueContext[] handlerConditionValue() {
			return GetRuleContexts<HandlerConditionValueContext>();
		}
		public HandlerConditionValueContext handlerConditionValue(int i) {
			return GetRuleContext<HandlerConditionValueContext>(i);
		}
		public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		public ITerminalNode CONTINUE() { return GetToken(MySqlParser.CONTINUE, 0); }
		public ITerminalNode EXIT() { return GetToken(MySqlParser.EXIT, 0); }
		public ITerminalNode UNDO() { return GetToken(MySqlParser.UNDO, 0); }
		public DeclareHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareHandler; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeclareHandler(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeclareHandler(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareHandlerContext declareHandler() {
		DeclareHandlerContext _localctx = new DeclareHandlerContext(Context, State);
		EnterRule(_localctx, 370, RULE_declareHandler);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4156; Match(DECLARE);
			State = 4157;
			_localctx.handlerAction = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT || _la==UNDO) ) {
				_localctx.handlerAction = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4158; Match(HANDLER);
			State = 4159; Match(FOR);
			State = 4160; handlerConditionValue();
			State = 4165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4161; Match(COMMA);
				State = 4162; handlerConditionValue();
				}
				}
				State = 4167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4168; routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerConditionValueContext : ParserRuleContext {
		public HandlerConditionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerConditionValue; } }
	 
		public HandlerConditionValueContext() { }
		public virtual void CopyFrom(HandlerConditionValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HandlerConditionWarningContext : HandlerConditionValueContext {
		public ITerminalNode SQLWARNING() { return GetToken(MySqlParser.SQLWARNING, 0); }
		public HandlerConditionWarningContext(HandlerConditionValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionWarning(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionWarning(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionWarning(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionCodeContext : HandlerConditionValueContext {
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public HandlerConditionCodeContext(HandlerConditionValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionCode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionCode(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionNotfoundContext : HandlerConditionValueContext {
		public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public ITerminalNode FOUND() { return GetToken(MySqlParser.FOUND, 0); }
		public HandlerConditionNotfoundContext(HandlerConditionValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionNotfound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionNotfound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionNotfound(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionStateContext : HandlerConditionValueContext {
		public ITerminalNode SQLSTATE() { return GetToken(MySqlParser.SQLSTATE, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public HandlerConditionStateContext(HandlerConditionValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionState(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionState(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionState(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionExceptionContext : HandlerConditionValueContext {
		public ITerminalNode SQLEXCEPTION() { return GetToken(MySqlParser.SQLEXCEPTION, 0); }
		public HandlerConditionExceptionContext(HandlerConditionValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionException(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionException(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionException(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionNameContext : HandlerConditionValueContext {
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public HandlerConditionNameContext(HandlerConditionValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerConditionValueContext handlerConditionValue() {
		HandlerConditionValueContext _localctx = new HandlerConditionValueContext(Context, State);
		EnterRule(_localctx, 372, RULE_handlerConditionValue);
		int _la;
		try {
			State = 4181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				_localctx = new HandlerConditionCodeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4170; decimalLiteral();
				}
				break;
			case SQLSTATE:
				_localctx = new HandlerConditionStateContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4171; Match(SQLSTATE);
				State = 4173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 4172; Match(VALUE);
					}
				}

				State = 4175; Match(STRING_LITERAL);
				}
				break;
			case DATABASE:
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new HandlerConditionNameContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4176; uid();
				}
				break;
			case SQLWARNING:
				_localctx = new HandlerConditionWarningContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4177; Match(SQLWARNING);
				}
				break;
			case NOT:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 4178; Match(NOT);
				State = 4179; Match(FOUND);
				}
				break;
			case SQLEXCEPTION:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 4180; Match(SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureSqlStatementContext : ParserRuleContext {
		public ITerminalNode SEMI() { return GetToken(MySqlParser.SEMI, 0); }
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public SqlStatementContext sqlStatement() {
			return GetRuleContext<SqlStatementContext>(0);
		}
		public ProcedureSqlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureSqlStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterProcedureSqlStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitProcedureSqlStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureSqlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureSqlStatementContext procedureSqlStatement() {
		ProcedureSqlStatementContext _localctx = new ProcedureSqlStatementContext(Context, State);
		EnterRule(_localctx, 374, RULE_procedureSqlStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4185;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,597,Context) ) {
			case 1:
				{
				State = 4183; compoundStatement();
				}
				break;
			case 2:
				{
				State = 4184; sqlStatement();
				}
				break;
			}
			State = 4187; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseAlternativeContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(MySqlParser.WHEN, 0); }
		public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public CaseAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseAlternative; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCaseAlternative(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCaseAlternative(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseAlternativeContext caseAlternative() {
		CaseAlternativeContext _localctx = new CaseAlternativeContext(Context, State);
		EnterRule(_localctx, 376, RULE_caseAlternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4189; Match(WHEN);
			State = 4192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,598,Context) ) {
			case 1:
				{
				State = 4190; constant();
				}
				break;
			case 2:
				{
				State = 4191; expression(0);
				}
				break;
			}
			State = 4194; Match(THEN);
			State = 4196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4195; procedureSqlStatement();
				}
				}
				State = 4198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DATABASE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (UNLOCK - 155)) | (1L << (UPDATE - 155)) | (1L << (USE - 155)) | (1L << (WHILE - 155)) | (1L << (DATE - 155)) | (1L << (TIME - 155)) | (1L << (TIMESTAMP - 155)) | (1L << (DATETIME - 155)) | (1L << (YEAR - 155)) | (1L << (TEXT - 155)) | (1L << (ENUM - 155)) | (1L << (COUNT - 155)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (POSITION - 236)) | (1L << (ACCOUNT - 236)) | (1L << (ACTION - 236)) | (1L << (AFTER - 236)) | (1L << (AGGREGATE - 236)) | (1L << (ALGORITHM - 236)) | (1L << (ANY - 236)) | (1L << (AT - 236)) | (1L << (AUTHORS - 236)) | (1L << (AUTOCOMMIT - 236)) | (1L << (AUTOEXTEND_SIZE - 236)) | (1L << (AUTO_INCREMENT - 236)) | (1L << (AVG_ROW_LENGTH - 236)) | (1L << (BEGIN - 236)) | (1L << (BINLOG - 236)) | (1L << (BIT - 236)) | (1L << (BLOCK - 236)) | (1L << (BOOL - 236)) | (1L << (BOOLEAN - 236)) | (1L << (BTREE - 236)) | (1L << (CACHE - 236)) | (1L << (CASCADED - 236)) | (1L << (CHAIN - 236)) | (1L << (CHANNEL - 236)) | (1L << (CHECKSUM - 236)) | (1L << (CIPHER - 236)) | (1L << (CLIENT - 236)) | (1L << (CLOSE - 236)) | (1L << (COALESCE - 236)) | (1L << (CODE - 236)) | (1L << (COLUMNS - 236)) | (1L << (COLUMN_FORMAT - 236)) | (1L << (COMMENT - 236)) | (1L << (COMMIT - 236)) | (1L << (COMPACT - 236)) | (1L << (COMPLETION - 236)) | (1L << (COMPRESSED - 236)) | (1L << (COMPRESSION - 236)) | (1L << (CONCURRENT - 236)) | (1L << (CONNECTION - 236)) | (1L << (CONSISTENT - 236)) | (1L << (CONTAINS - 236)) | (1L << (CONTEXT - 236)) | (1L << (CONTRIBUTORS - 236)) | (1L << (COPY - 236)) | (1L << (CPU - 236)) | (1L << (DATA - 236)) | (1L << (DATAFILE - 236)) | (1L << (DEALLOCATE - 236)) | (1L << (DEFAULT_AUTH - 236)) | (1L << (DEFINER - 236)) | (1L << (DELAY_KEY_WRITE - 236)) | (1L << (DIRECTORY - 236)) | (1L << (DISABLE - 236)) | (1L << (DISCARD - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DISK - 300)) | (1L << (DO - 300)) | (1L << (DUMPFILE - 300)) | (1L << (DUPLICATE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENABLE - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (ENDS - 300)) | (1L << (ENGINE - 300)) | (1L << (ENGINES - 300)) | (1L << (ERROR - 300)) | (1L << (ERRORS - 300)) | (1L << (ESCAPE - 300)) | (1L << (EVEN - 300)) | (1L << (EVENT - 300)) | (1L << (EVENTS - 300)) | (1L << (EVERY - 300)) | (1L << (EXCHANGE - 300)) | (1L << (EXCLUSIVE - 300)) | (1L << (EXPIRE - 300)) | (1L << (EXTENT_SIZE - 300)) | (1L << (FAULTS - 300)) | (1L << (FIELDS - 300)) | (1L << (FILE_BLOCK_SIZE - 300)) | (1L << (FILTER - 300)) | (1L << (FIRST - 300)) | (1L << (FIXED - 300)) | (1L << (FLUSH - 300)) | (1L << (FOLLOWS - 300)) | (1L << (FULL - 300)) | (1L << (FUNCTION - 300)) | (1L << (GLOBAL - 300)) | (1L << (GRANTS - 300)) | (1L << (GROUP_REPLICATION - 300)) | (1L << (HANDLER - 300)) | (1L << (HASH - 300)) | (1L << (HELP - 300)) | (1L << (HOST - 300)) | (1L << (IDENTIFIED - 300)) | (1L << (IGNORE_SERVER_IDS - 300)) | (1L << (IMPORT - 300)) | (1L << (INDEXES - 300)) | (1L << (INITIAL_SIZE - 300)) | (1L << (INPLACE - 300)) | (1L << (INSERT_METHOD - 300)) | (1L << (INSTALL - 300)) | (1L << (INSTANCE - 300)) | (1L << (INVOKER - 300)) | (1L << (IO - 300)) | (1L << (IO_THREAD - 300)) | (1L << (IPC - 300)) | (1L << (ISOLATION - 300)) | (1L << (ISSUER - 300)) | (1L << (KEY_BLOCK_SIZE - 300)) | (1L << (LANGUAGE - 300)) | (1L << (LAST - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (LEAVES - 364)) | (1L << (LESS - 364)) | (1L << (LEVEL - 364)) | (1L << (LIST - 364)) | (1L << (LOCAL - 364)) | (1L << (LOGFILE - 364)) | (1L << (LOGS - 364)) | (1L << (MASTER - 364)) | (1L << (MASTER_AUTO_POSITION - 364)) | (1L << (MASTER_CONNECT_RETRY - 364)) | (1L << (MASTER_DELAY - 364)) | (1L << (MASTER_HEARTBEAT_PERIOD - 364)) | (1L << (MASTER_HOST - 364)) | (1L << (MASTER_LOG_FILE - 364)) | (1L << (MASTER_LOG_POS - 364)) | (1L << (MASTER_PASSWORD - 364)) | (1L << (MASTER_PORT - 364)) | (1L << (MASTER_RETRY_COUNT - 364)) | (1L << (MASTER_SSL - 364)) | (1L << (MASTER_SSL_CA - 364)) | (1L << (MASTER_SSL_CAPATH - 364)) | (1L << (MASTER_SSL_CERT - 364)) | (1L << (MASTER_SSL_CIPHER - 364)) | (1L << (MASTER_SSL_CRL - 364)) | (1L << (MASTER_SSL_CRLPATH - 364)) | (1L << (MASTER_SSL_KEY - 364)) | (1L << (MASTER_TLS_VERSION - 364)) | (1L << (MASTER_USER - 364)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 364)) | (1L << (MAX_QUERIES_PER_HOUR - 364)) | (1L << (MAX_ROWS - 364)) | (1L << (MAX_SIZE - 364)) | (1L << (MAX_UPDATES_PER_HOUR - 364)) | (1L << (MAX_USER_CONNECTIONS - 364)) | (1L << (MERGE - 364)) | (1L << (MID - 364)) | (1L << (MIGRATE - 364)) | (1L << (MIN_ROWS - 364)) | (1L << (MODIFY - 364)) | (1L << (MUTEX - 364)) | (1L << (MYSQL - 364)) | (1L << (NAME - 364)) | (1L << (NAMES - 364)) | (1L << (NCHAR - 364)) | (1L << (NEVER - 364)) | (1L << (NO - 364)) | (1L << (NODEGROUP - 364)) | (1L << (NONE - 364)) | (1L << (OFFLINE - 364)) | (1L << (OFFSET - 364)) | (1L << (OJ - 364)) | (1L << (OLD_PASSWORD - 364)) | (1L << (ONE - 364)) | (1L << (ONLINE - 364)) | (1L << (ONLY - 364)) | (1L << (OPEN - 364)) | (1L << (OPTIMIZER_COSTS - 364)) | (1L << (OPTIONS - 364)) | (1L << (OWNER - 364)) | (1L << (PACK_KEYS - 364)) | (1L << (PAGE - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (PARSER - 428)) | (1L << (PARTIAL - 428)) | (1L << (PARTITIONING - 428)) | (1L << (PARTITIONS - 428)) | (1L << (PASSWORD - 428)) | (1L << (PHASE - 428)) | (1L << (PLUGIN_DIR - 428)) | (1L << (PLUGINS - 428)) | (1L << (PORT - 428)) | (1L << (PRECEDES - 428)) | (1L << (PREPARE - 428)) | (1L << (PRESERVE - 428)) | (1L << (PREV - 428)) | (1L << (PROCESSLIST - 428)) | (1L << (PROFILE - 428)) | (1L << (PROFILES - 428)) | (1L << (PROXY - 428)) | (1L << (QUERY - 428)) | (1L << (QUICK - 428)) | (1L << (REBUILD - 428)) | (1L << (RECOVER - 428)) | (1L << (REDO_BUFFER_SIZE - 428)) | (1L << (REDUNDANT - 428)) | (1L << (RELAY_LOG_FILE - 428)) | (1L << (RELAY_LOG_POS - 428)) | (1L << (RELAYLOG - 428)) | (1L << (REMOVE - 428)) | (1L << (REORGANIZE - 428)) | (1L << (REPAIR - 428)) | (1L << (REPLICATE_DO_DB - 428)) | (1L << (REPLICATE_DO_TABLE - 428)) | (1L << (REPLICATE_IGNORE_DB - 428)) | (1L << (REPLICATE_IGNORE_TABLE - 428)) | (1L << (REPLICATE_REWRITE_DB - 428)) | (1L << (REPLICATE_WILD_DO_TABLE - 428)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 428)) | (1L << (REPLICATION - 428)) | (1L << (RESET - 428)) | (1L << (RESUME - 428)) | (1L << (RETURNS - 428)) | (1L << (ROLLBACK - 428)) | (1L << (ROLLUP - 428)) | (1L << (ROTATE - 428)) | (1L << (ROW - 428)) | (1L << (ROWS - 428)) | (1L << (ROW_FORMAT - 428)) | (1L << (SAVEPOINT - 428)) | (1L << (SCHEDULE - 428)) | (1L << (SECURITY - 428)) | (1L << (SERVER - 428)) | (1L << (SESSION - 428)) | (1L << (SHARE - 428)) | (1L << (SHARED - 428)) | (1L << (SIGNED - 428)) | (1L << (SIMPLE - 428)) | (1L << (SLAVE - 428)) | (1L << (SNAPSHOT - 428)) | (1L << (SOCKET - 428)) | (1L << (SOME - 428)) | (1L << (SOUNDS - 428)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (SOURCE - 492)) | (1L << (SQL_AFTER_GTIDS - 492)) | (1L << (SQL_AFTER_MTS_GAPS - 492)) | (1L << (SQL_BEFORE_GTIDS - 492)) | (1L << (SQL_BUFFER_RESULT - 492)) | (1L << (SQL_CACHE - 492)) | (1L << (SQL_NO_CACHE - 492)) | (1L << (SQL_THREAD - 492)) | (1L << (START - 492)) | (1L << (STARTS - 492)) | (1L << (STATS_AUTO_RECALC - 492)) | (1L << (STATS_PERSISTENT - 492)) | (1L << (STATS_SAMPLE_PAGES - 492)) | (1L << (STATUS - 492)) | (1L << (STOP - 492)) | (1L << (STORAGE - 492)) | (1L << (STRING - 492)) | (1L << (SUBJECT - 492)) | (1L << (SUBPARTITION - 492)) | (1L << (SUBPARTITIONS - 492)) | (1L << (SUSPEND - 492)) | (1L << (SWAPS - 492)) | (1L << (SWITCHES - 492)) | (1L << (TABLESPACE - 492)) | (1L << (TEMPORARY - 492)) | (1L << (TEMPTABLE - 492)) | (1L << (THAN - 492)) | (1L << (TRANSACTION - 492)) | (1L << (TRUNCATE - 492)) | (1L << (UNDEFINED - 492)) | (1L << (UNDOFILE - 492)) | (1L << (UNDO_BUFFER_SIZE - 492)) | (1L << (UNINSTALL - 492)) | (1L << (UNKNOWN - 492)) | (1L << (UPGRADE - 492)) | (1L << (USER - 492)) | (1L << (VALIDATION - 492)) | (1L << (VALUE - 492)) | (1L << (VARIABLES - 492)) | (1L << (VIEW - 492)) | (1L << (WAIT - 492)) | (1L << (WARNINGS - 492)) | (1L << (WITHOUT - 492)) | (1L << (WORK - 492)) | (1L << (WRAPPER - 492)) | (1L << (X509 - 492)) | (1L << (XA - 492)) | (1L << (XML - 492)) | (1L << (QUARTER - 492)) | (1L << (MONTH - 492)) | (1L << (DAY - 492)) | (1L << (HOUR - 492)) | (1L << (MINUTE - 492)) | (1L << (WEEK - 492)))) != 0) || ((((_la - 556)) & ~0x3f) == 0 && ((1L << (_la - 556)) & ((1L << (SECOND - 556)) | (1L << (MICROSECOND - 556)) | (1L << (TABLES - 556)) | (1L << (ROUTINE - 556)) | (1L << (EXECUTE - 556)) | (1L << (FILE - 556)) | (1L << (PROCESS - 556)) | (1L << (RELOAD - 556)) | (1L << (SHUTDOWN - 556)) | (1L << (SUPER - 556)) | (1L << (PRIVILEGES - 556)) | (1L << (ARMSCII8 - 556)) | (1L << (ASCII - 556)) | (1L << (BIG5 - 556)) | (1L << (CP1250 - 556)) | (1L << (CP1251 - 556)) | (1L << (CP1256 - 556)) | (1L << (CP1257 - 556)) | (1L << (CP850 - 556)) | (1L << (CP852 - 556)) | (1L << (CP866 - 556)) | (1L << (CP932 - 556)) | (1L << (DEC8 - 556)) | (1L << (EUCJPMS - 556)) | (1L << (EUCKR - 556)) | (1L << (GB2312 - 556)) | (1L << (GBK - 556)) | (1L << (GEOSTD8 - 556)) | (1L << (GREEK - 556)) | (1L << (HEBREW - 556)) | (1L << (HP8 - 556)) | (1L << (KEYBCS2 - 556)) | (1L << (KOI8R - 556)) | (1L << (KOI8U - 556)) | (1L << (LATIN1 - 556)) | (1L << (LATIN2 - 556)) | (1L << (LATIN5 - 556)) | (1L << (LATIN7 - 556)) | (1L << (MACCE - 556)) | (1L << (MACROMAN - 556)) | (1L << (SJIS - 556)) | (1L << (SWE7 - 556)) | (1L << (TIS620 - 556)) | (1L << (UCS2 - 556)) | (1L << (UJIS - 556)) | (1L << (UTF16 - 556)) | (1L << (UTF16LE - 556)) | (1L << (UTF32 - 556)) | (1L << (UTF8 - 556)) | (1L << (UTF8MB3 - 556)) | (1L << (UTF8MB4 - 556)) | (1L << (ARCHIVE - 556)) | (1L << (BLACKHOLE - 556)) | (1L << (CSV - 556)) | (1L << (FEDERATED - 556)) | (1L << (INNODB - 556)) | (1L << (MEMORY - 556)) | (1L << (MRG_MYISAM - 556)) | (1L << (MYISAM - 556)) | (1L << (NDB - 556)) | (1L << (NDBCLUSTER - 556)) | (1L << (PERFOMANCE_SCHEMA - 556)) | (1L << (REPEATABLE - 556)) | (1L << (COMMITTED - 556)))) != 0) || ((((_la - 620)) & ~0x3f) == 0 && ((1L << (_la - 620)) & ((1L << (UNCOMMITTED - 620)) | (1L << (SERIALIZABLE - 620)) | (1L << (GEOMETRYCOLLECTION - 620)) | (1L << (LINESTRING - 620)) | (1L << (MULTILINESTRING - 620)) | (1L << (MULTIPOINT - 620)) | (1L << (MULTIPOLYGON - 620)) | (1L << (POINT - 620)) | (1L << (POLYGON - 620)) | (1L << (ABS - 620)) | (1L << (ACOS - 620)) | (1L << (ADDDATE - 620)) | (1L << (ADDTIME - 620)) | (1L << (AES_DECRYPT - 620)) | (1L << (AES_ENCRYPT - 620)) | (1L << (AREA - 620)) | (1L << (ASBINARY - 620)) | (1L << (ASIN - 620)) | (1L << (ASTEXT - 620)) | (1L << (ASWKB - 620)) | (1L << (ASWKT - 620)) | (1L << (ASYMMETRIC_DECRYPT - 620)) | (1L << (ASYMMETRIC_DERIVE - 620)) | (1L << (ASYMMETRIC_ENCRYPT - 620)) | (1L << (ASYMMETRIC_SIGN - 620)) | (1L << (ASYMMETRIC_VERIFY - 620)) | (1L << (ATAN - 620)) | (1L << (ATAN2 - 620)) | (1L << (BENCHMARK - 620)) | (1L << (BIN - 620)) | (1L << (BIT_COUNT - 620)) | (1L << (BIT_LENGTH - 620)) | (1L << (BUFFER - 620)) | (1L << (CEIL - 620)) | (1L << (CEILING - 620)) | (1L << (CENTROID - 620)) | (1L << (CHARACTER_LENGTH - 620)) | (1L << (CHARSET - 620)) | (1L << (CHAR_LENGTH - 620)) | (1L << (COERCIBILITY - 620)) | (1L << (COLLATION - 620)) | (1L << (COMPRESS - 620)) | (1L << (CONCAT - 620)) | (1L << (CONCAT_WS - 620)) | (1L << (CONNECTION_ID - 620)) | (1L << (CONV - 620)) | (1L << (CONVERT_TZ - 620)) | (1L << (COS - 620)) | (1L << (COT - 620)) | (1L << (CRC32 - 620)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1L << (CREATE_DH_PARAMETERS - 620)) | (1L << (CREATE_DIGEST - 620)) | (1L << (CROSSES - 620)) | (1L << (DATEDIFF - 620)) | (1L << (DATE_FORMAT - 620)) | (1L << (DAYNAME - 620)) | (1L << (DAYOFMONTH - 620)) | (1L << (DAYOFWEEK - 620)) | (1L << (DAYOFYEAR - 620)) | (1L << (DECODE - 620)) | (1L << (DEGREES - 620)) | (1L << (DES_DECRYPT - 620)))) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & ((1L << (DES_ENCRYPT - 684)) | (1L << (DIMENSION - 684)) | (1L << (DISJOINT - 684)) | (1L << (ELT - 684)) | (1L << (ENCODE - 684)) | (1L << (ENCRYPT - 684)) | (1L << (ENDPOINT - 684)) | (1L << (ENVELOPE - 684)) | (1L << (EQUALS - 684)) | (1L << (EXP - 684)) | (1L << (EXPORT_SET - 684)) | (1L << (EXTERIORRING - 684)) | (1L << (EXTRACTVALUE - 684)) | (1L << (FIELD - 684)) | (1L << (FIND_IN_SET - 684)) | (1L << (FLOOR - 684)) | (1L << (FORMAT - 684)) | (1L << (FOUND_ROWS - 684)) | (1L << (FROM_BASE64 - 684)) | (1L << (FROM_DAYS - 684)) | (1L << (FROM_UNIXTIME - 684)) | (1L << (GEOMCOLLFROMTEXT - 684)) | (1L << (GEOMCOLLFROMWKB - 684)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 684)) | (1L << (GEOMETRYFROMTEXT - 684)) | (1L << (GEOMETRYFROMWKB - 684)) | (1L << (GEOMETRYN - 684)) | (1L << (GEOMETRYTYPE - 684)) | (1L << (GEOMFROMTEXT - 684)) | (1L << (GEOMFROMWKB - 684)) | (1L << (GET_FORMAT - 684)) | (1L << (GET_LOCK - 684)) | (1L << (GLENGTH - 684)) | (1L << (GREATEST - 684)) | (1L << (GTID_SUBSET - 684)) | (1L << (GTID_SUBTRACT - 684)) | (1L << (HEX - 684)) | (1L << (IFNULL - 684)) | (1L << (INET6_ATON - 684)) | (1L << (INET6_NTOA - 684)) | (1L << (INET_ATON - 684)) | (1L << (INET_NTOA - 684)) | (1L << (INSTR - 684)) | (1L << (INTERIORRINGN - 684)) | (1L << (INTERSECTS - 684)) | (1L << (ISCLOSED - 684)) | (1L << (ISEMPTY - 684)) | (1L << (ISNULL - 684)) | (1L << (ISSIMPLE - 684)) | (1L << (IS_FREE_LOCK - 684)) | (1L << (IS_IPV4 - 684)) | (1L << (IS_IPV4_COMPAT - 684)) | (1L << (IS_IPV4_MAPPED - 684)) | (1L << (IS_IPV6 - 684)) | (1L << (IS_USED_LOCK - 684)) | (1L << (LAST_INSERT_ID - 684)) | (1L << (LCASE - 684)) | (1L << (LEAST - 684)) | (1L << (LENGTH - 684)) | (1L << (LINEFROMTEXT - 684)) | (1L << (LINEFROMWKB - 684)) | (1L << (LINESTRINGFROMTEXT - 684)) | (1L << (LINESTRINGFROMWKB - 684)))) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & ((1L << (LN - 748)) | (1L << (LOAD_FILE - 748)) | (1L << (LOCATE - 748)) | (1L << (LOG - 748)) | (1L << (LOG10 - 748)) | (1L << (LOG2 - 748)) | (1L << (LOWER - 748)) | (1L << (LPAD - 748)) | (1L << (LTRIM - 748)) | (1L << (MAKEDATE - 748)) | (1L << (MAKETIME - 748)) | (1L << (MAKE_SET - 748)) | (1L << (MASTER_POS_WAIT - 748)) | (1L << (MBRCONTAINS - 748)) | (1L << (MBRDISJOINT - 748)) | (1L << (MBREQUAL - 748)) | (1L << (MBRINTERSECTS - 748)) | (1L << (MBROVERLAPS - 748)) | (1L << (MBRTOUCHES - 748)) | (1L << (MBRWITHIN - 748)) | (1L << (MD5 - 748)) | (1L << (MLINEFROMTEXT - 748)) | (1L << (MLINEFROMWKB - 748)) | (1L << (MONTHNAME - 748)) | (1L << (MPOINTFROMTEXT - 748)) | (1L << (MPOINTFROMWKB - 748)) | (1L << (MPOLYFROMTEXT - 748)) | (1L << (MPOLYFROMWKB - 748)) | (1L << (MULTILINESTRINGFROMTEXT - 748)) | (1L << (MULTILINESTRINGFROMWKB - 748)) | (1L << (MULTIPOINTFROMTEXT - 748)) | (1L << (MULTIPOINTFROMWKB - 748)) | (1L << (MULTIPOLYGONFROMTEXT - 748)) | (1L << (MULTIPOLYGONFROMWKB - 748)) | (1L << (NAME_CONST - 748)) | (1L << (NULLIF - 748)) | (1L << (NUMGEOMETRIES - 748)) | (1L << (NUMINTERIORRINGS - 748)) | (1L << (NUMPOINTS - 748)) | (1L << (OCT - 748)) | (1L << (OCTET_LENGTH - 748)) | (1L << (ORD - 748)) | (1L << (OVERLAPS - 748)) | (1L << (PERIOD_ADD - 748)) | (1L << (PERIOD_DIFF - 748)) | (1L << (PI - 748)) | (1L << (POINTFROMTEXT - 748)) | (1L << (POINTFROMWKB - 748)) | (1L << (POINTN - 748)) | (1L << (POLYFROMTEXT - 748)) | (1L << (POLYFROMWKB - 748)) | (1L << (POLYGONFROMTEXT - 748)) | (1L << (POLYGONFROMWKB - 748)) | (1L << (POW - 748)) | (1L << (POWER - 748)) | (1L << (QUOTE - 748)) | (1L << (RADIANS - 748)) | (1L << (RAND - 748)) | (1L << (RANDOM_BYTES - 748)) | (1L << (RELEASE_LOCK - 748)) | (1L << (REVERSE - 748)) | (1L << (ROUND - 748)) | (1L << (ROW_COUNT - 748)) | (1L << (RPAD - 748)))) != 0) || ((((_la - 812)) & ~0x3f) == 0 && ((1L << (_la - 812)) & ((1L << (RTRIM - 812)) | (1L << (SEC_TO_TIME - 812)) | (1L << (SESSION_USER - 812)) | (1L << (SHA - 812)) | (1L << (SHA1 - 812)) | (1L << (SHA2 - 812)) | (1L << (SIGN - 812)) | (1L << (SIN - 812)) | (1L << (SLEEP - 812)) | (1L << (SOUNDEX - 812)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1L << (SQRT - 812)) | (1L << (SRID - 812)) | (1L << (STARTPOINT - 812)) | (1L << (STRCMP - 812)) | (1L << (STR_TO_DATE - 812)) | (1L << (ST_AREA - 812)) | (1L << (ST_ASBINARY - 812)) | (1L << (ST_ASTEXT - 812)) | (1L << (ST_ASWKB - 812)) | (1L << (ST_ASWKT - 812)) | (1L << (ST_BUFFER - 812)) | (1L << (ST_CENTROID - 812)) | (1L << (ST_CONTAINS - 812)) | (1L << (ST_CROSSES - 812)) | (1L << (ST_DIFFERENCE - 812)) | (1L << (ST_DIMENSION - 812)) | (1L << (ST_DISJOINT - 812)) | (1L << (ST_DISTANCE - 812)) | (1L << (ST_ENDPOINT - 812)) | (1L << (ST_ENVELOPE - 812)) | (1L << (ST_EQUALS - 812)) | (1L << (ST_EXTERIORRING - 812)) | (1L << (ST_GEOMCOLLFROMTEXT - 812)) | (1L << (ST_GEOMCOLLFROMTXT - 812)) | (1L << (ST_GEOMCOLLFROMWKB - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1L << (ST_GEOMETRYFROMTEXT - 812)) | (1L << (ST_GEOMETRYFROMWKB - 812)) | (1L << (ST_GEOMETRYN - 812)) | (1L << (ST_GEOMETRYTYPE - 812)) | (1L << (ST_GEOMFROMTEXT - 812)) | (1L << (ST_GEOMFROMWKB - 812)) | (1L << (ST_INTERIORRINGN - 812)) | (1L << (ST_INTERSECTION - 812)) | (1L << (ST_INTERSECTS - 812)) | (1L << (ST_ISCLOSED - 812)) | (1L << (ST_ISEMPTY - 812)) | (1L << (ST_ISSIMPLE - 812)) | (1L << (ST_LINEFROMTEXT - 812)) | (1L << (ST_LINEFROMWKB - 812)) | (1L << (ST_LINESTRINGFROMTEXT - 812)) | (1L << (ST_LINESTRINGFROMWKB - 812)) | (1L << (ST_NUMGEOMETRIES - 812)) | (1L << (ST_NUMINTERIORRING - 812)) | (1L << (ST_NUMINTERIORRINGS - 812)) | (1L << (ST_NUMPOINTS - 812)) | (1L << (ST_OVERLAPS - 812)) | (1L << (ST_POINTFROMTEXT - 812)) | (1L << (ST_POINTFROMWKB - 812)) | (1L << (ST_POINTN - 812)) | (1L << (ST_POLYFROMTEXT - 812)) | (1L << (ST_POLYFROMWKB - 812)))) != 0) || ((((_la - 876)) & ~0x3f) == 0 && ((1L << (_la - 876)) & ((1L << (ST_POLYGONFROMTEXT - 876)) | (1L << (ST_POLYGONFROMWKB - 876)) | (1L << (ST_SRID - 876)) | (1L << (ST_STARTPOINT - 876)) | (1L << (ST_SYMDIFFERENCE - 876)) | (1L << (ST_TOUCHES - 876)) | (1L << (ST_UNION - 876)) | (1L << (ST_WITHIN - 876)) | (1L << (ST_X - 876)) | (1L << (ST_Y - 876)) | (1L << (SUBDATE - 876)) | (1L << (SUBSTRING_INDEX - 876)) | (1L << (SUBTIME - 876)) | (1L << (SYSTEM_USER - 876)) | (1L << (TAN - 876)) | (1L << (TIMEDIFF - 876)) | (1L << (TIMESTAMPADD - 876)) | (1L << (TIMESTAMPDIFF - 876)) | (1L << (TIME_FORMAT - 876)) | (1L << (TIME_TO_SEC - 876)) | (1L << (TOUCHES - 876)) | (1L << (TO_BASE64 - 876)) | (1L << (TO_DAYS - 876)) | (1L << (TO_SECONDS - 876)) | (1L << (UCASE - 876)) | (1L << (UNCOMPRESS - 876)) | (1L << (UNCOMPRESSED_LENGTH - 876)) | (1L << (UNHEX - 876)) | (1L << (UNIX_TIMESTAMP - 876)) | (1L << (UPDATEXML - 876)) | (1L << (UPPER - 876)) | (1L << (UUID - 876)) | (1L << (UUID_SHORT - 876)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 876)) | (1L << (VERSION - 876)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1L << (WEEKDAY - 876)) | (1L << (WEEKOFYEAR - 876)) | (1L << (WEIGHT_STRING - 876)) | (1L << (WITHIN - 876)) | (1L << (YEARWEEK - 876)) | (1L << (Y_FUNCTION - 876)) | (1L << (X_FUNCTION - 876)))) != 0) || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (LR_BRACKET - 945)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 945)) | (1L << (ID - 945)) | (1L << (REVERSE_QUOTE_ID - 945)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifAlternativeContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(MySqlParser.ELSEIF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
		public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public ElifAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifAlternative; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterElifAlternative(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitElifAlternative(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifAlternativeContext elifAlternative() {
		ElifAlternativeContext _localctx = new ElifAlternativeContext(Context, State);
		EnterRule(_localctx, 378, RULE_elifAlternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4200; Match(ELSEIF);
			State = 4201; expression(0);
			State = 4202; Match(THEN);
			State = 4204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4203; procedureSqlStatement();
				}
				}
				State = 4206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DATABASE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INSERT - 71)) | (1L << (ITERATE - 71)) | (1L << (KILL - 71)) | (1L << (LEAVE - 71)) | (1L << (LEFT - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (LOOP - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)) | (1L << (RELEASE - 71)) | (1L << (RENAME - 71)) | (1L << (REPEAT - 71)) | (1L << (REPLACE - 71)) | (1L << (RETURN - 71)) | (1L << (REVOKE - 71)) | (1L << (RIGHT - 71)) | (1L << (SELECT - 71)) | (1L << (SET - 71)) | (1L << (SHOW - 71)))) != 0) || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (UNLOCK - 155)) | (1L << (UPDATE - 155)) | (1L << (USE - 155)) | (1L << (WHILE - 155)) | (1L << (DATE - 155)) | (1L << (TIME - 155)) | (1L << (TIMESTAMP - 155)) | (1L << (DATETIME - 155)) | (1L << (YEAR - 155)) | (1L << (TEXT - 155)) | (1L << (ENUM - 155)) | (1L << (COUNT - 155)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (POSITION - 236)) | (1L << (ACCOUNT - 236)) | (1L << (ACTION - 236)) | (1L << (AFTER - 236)) | (1L << (AGGREGATE - 236)) | (1L << (ALGORITHM - 236)) | (1L << (ANY - 236)) | (1L << (AT - 236)) | (1L << (AUTHORS - 236)) | (1L << (AUTOCOMMIT - 236)) | (1L << (AUTOEXTEND_SIZE - 236)) | (1L << (AUTO_INCREMENT - 236)) | (1L << (AVG_ROW_LENGTH - 236)) | (1L << (BEGIN - 236)) | (1L << (BINLOG - 236)) | (1L << (BIT - 236)) | (1L << (BLOCK - 236)) | (1L << (BOOL - 236)) | (1L << (BOOLEAN - 236)) | (1L << (BTREE - 236)) | (1L << (CACHE - 236)) | (1L << (CASCADED - 236)) | (1L << (CHAIN - 236)) | (1L << (CHANNEL - 236)) | (1L << (CHECKSUM - 236)) | (1L << (CIPHER - 236)) | (1L << (CLIENT - 236)) | (1L << (CLOSE - 236)) | (1L << (COALESCE - 236)) | (1L << (CODE - 236)) | (1L << (COLUMNS - 236)) | (1L << (COLUMN_FORMAT - 236)) | (1L << (COMMENT - 236)) | (1L << (COMMIT - 236)) | (1L << (COMPACT - 236)) | (1L << (COMPLETION - 236)) | (1L << (COMPRESSED - 236)) | (1L << (COMPRESSION - 236)) | (1L << (CONCURRENT - 236)) | (1L << (CONNECTION - 236)) | (1L << (CONSISTENT - 236)) | (1L << (CONTAINS - 236)) | (1L << (CONTEXT - 236)) | (1L << (CONTRIBUTORS - 236)) | (1L << (COPY - 236)) | (1L << (CPU - 236)) | (1L << (DATA - 236)) | (1L << (DATAFILE - 236)) | (1L << (DEALLOCATE - 236)) | (1L << (DEFAULT_AUTH - 236)) | (1L << (DEFINER - 236)) | (1L << (DELAY_KEY_WRITE - 236)) | (1L << (DIRECTORY - 236)) | (1L << (DISABLE - 236)) | (1L << (DISCARD - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DISK - 300)) | (1L << (DO - 300)) | (1L << (DUMPFILE - 300)) | (1L << (DUPLICATE - 300)) | (1L << (DYNAMIC - 300)) | (1L << (ENABLE - 300)) | (1L << (ENCRYPTION - 300)) | (1L << (ENDS - 300)) | (1L << (ENGINE - 300)) | (1L << (ENGINES - 300)) | (1L << (ERROR - 300)) | (1L << (ERRORS - 300)) | (1L << (ESCAPE - 300)) | (1L << (EVEN - 300)) | (1L << (EVENT - 300)) | (1L << (EVENTS - 300)) | (1L << (EVERY - 300)) | (1L << (EXCHANGE - 300)) | (1L << (EXCLUSIVE - 300)) | (1L << (EXPIRE - 300)) | (1L << (EXTENT_SIZE - 300)) | (1L << (FAULTS - 300)) | (1L << (FIELDS - 300)) | (1L << (FILE_BLOCK_SIZE - 300)) | (1L << (FILTER - 300)) | (1L << (FIRST - 300)) | (1L << (FIXED - 300)) | (1L << (FLUSH - 300)) | (1L << (FOLLOWS - 300)) | (1L << (FULL - 300)) | (1L << (FUNCTION - 300)) | (1L << (GLOBAL - 300)) | (1L << (GRANTS - 300)) | (1L << (GROUP_REPLICATION - 300)) | (1L << (HANDLER - 300)) | (1L << (HASH - 300)) | (1L << (HELP - 300)) | (1L << (HOST - 300)) | (1L << (IDENTIFIED - 300)) | (1L << (IGNORE_SERVER_IDS - 300)) | (1L << (IMPORT - 300)) | (1L << (INDEXES - 300)) | (1L << (INITIAL_SIZE - 300)) | (1L << (INPLACE - 300)) | (1L << (INSERT_METHOD - 300)) | (1L << (INSTALL - 300)) | (1L << (INSTANCE - 300)) | (1L << (INVOKER - 300)) | (1L << (IO - 300)) | (1L << (IO_THREAD - 300)) | (1L << (IPC - 300)) | (1L << (ISOLATION - 300)) | (1L << (ISSUER - 300)) | (1L << (KEY_BLOCK_SIZE - 300)) | (1L << (LANGUAGE - 300)) | (1L << (LAST - 300)))) != 0) || ((((_la - 364)) & ~0x3f) == 0 && ((1L << (_la - 364)) & ((1L << (LEAVES - 364)) | (1L << (LESS - 364)) | (1L << (LEVEL - 364)) | (1L << (LIST - 364)) | (1L << (LOCAL - 364)) | (1L << (LOGFILE - 364)) | (1L << (LOGS - 364)) | (1L << (MASTER - 364)) | (1L << (MASTER_AUTO_POSITION - 364)) | (1L << (MASTER_CONNECT_RETRY - 364)) | (1L << (MASTER_DELAY - 364)) | (1L << (MASTER_HEARTBEAT_PERIOD - 364)) | (1L << (MASTER_HOST - 364)) | (1L << (MASTER_LOG_FILE - 364)) | (1L << (MASTER_LOG_POS - 364)) | (1L << (MASTER_PASSWORD - 364)) | (1L << (MASTER_PORT - 364)) | (1L << (MASTER_RETRY_COUNT - 364)) | (1L << (MASTER_SSL - 364)) | (1L << (MASTER_SSL_CA - 364)) | (1L << (MASTER_SSL_CAPATH - 364)) | (1L << (MASTER_SSL_CERT - 364)) | (1L << (MASTER_SSL_CIPHER - 364)) | (1L << (MASTER_SSL_CRL - 364)) | (1L << (MASTER_SSL_CRLPATH - 364)) | (1L << (MASTER_SSL_KEY - 364)) | (1L << (MASTER_TLS_VERSION - 364)) | (1L << (MASTER_USER - 364)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 364)) | (1L << (MAX_QUERIES_PER_HOUR - 364)) | (1L << (MAX_ROWS - 364)) | (1L << (MAX_SIZE - 364)) | (1L << (MAX_UPDATES_PER_HOUR - 364)) | (1L << (MAX_USER_CONNECTIONS - 364)) | (1L << (MERGE - 364)) | (1L << (MID - 364)) | (1L << (MIGRATE - 364)) | (1L << (MIN_ROWS - 364)) | (1L << (MODIFY - 364)) | (1L << (MUTEX - 364)) | (1L << (MYSQL - 364)) | (1L << (NAME - 364)) | (1L << (NAMES - 364)) | (1L << (NCHAR - 364)) | (1L << (NEVER - 364)) | (1L << (NO - 364)) | (1L << (NODEGROUP - 364)) | (1L << (NONE - 364)) | (1L << (OFFLINE - 364)) | (1L << (OFFSET - 364)) | (1L << (OJ - 364)) | (1L << (OLD_PASSWORD - 364)) | (1L << (ONE - 364)) | (1L << (ONLINE - 364)) | (1L << (ONLY - 364)) | (1L << (OPEN - 364)) | (1L << (OPTIMIZER_COSTS - 364)) | (1L << (OPTIONS - 364)) | (1L << (OWNER - 364)) | (1L << (PACK_KEYS - 364)) | (1L << (PAGE - 364)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (PARSER - 428)) | (1L << (PARTIAL - 428)) | (1L << (PARTITIONING - 428)) | (1L << (PARTITIONS - 428)) | (1L << (PASSWORD - 428)) | (1L << (PHASE - 428)) | (1L << (PLUGIN_DIR - 428)) | (1L << (PLUGINS - 428)) | (1L << (PORT - 428)) | (1L << (PRECEDES - 428)) | (1L << (PREPARE - 428)) | (1L << (PRESERVE - 428)) | (1L << (PREV - 428)) | (1L << (PROCESSLIST - 428)) | (1L << (PROFILE - 428)) | (1L << (PROFILES - 428)) | (1L << (PROXY - 428)) | (1L << (QUERY - 428)) | (1L << (QUICK - 428)) | (1L << (REBUILD - 428)) | (1L << (RECOVER - 428)) | (1L << (REDO_BUFFER_SIZE - 428)) | (1L << (REDUNDANT - 428)) | (1L << (RELAY_LOG_FILE - 428)) | (1L << (RELAY_LOG_POS - 428)) | (1L << (RELAYLOG - 428)) | (1L << (REMOVE - 428)) | (1L << (REORGANIZE - 428)) | (1L << (REPAIR - 428)) | (1L << (REPLICATE_DO_DB - 428)) | (1L << (REPLICATE_DO_TABLE - 428)) | (1L << (REPLICATE_IGNORE_DB - 428)) | (1L << (REPLICATE_IGNORE_TABLE - 428)) | (1L << (REPLICATE_REWRITE_DB - 428)) | (1L << (REPLICATE_WILD_DO_TABLE - 428)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 428)) | (1L << (REPLICATION - 428)) | (1L << (RESET - 428)) | (1L << (RESUME - 428)) | (1L << (RETURNS - 428)) | (1L << (ROLLBACK - 428)) | (1L << (ROLLUP - 428)) | (1L << (ROTATE - 428)) | (1L << (ROW - 428)) | (1L << (ROWS - 428)) | (1L << (ROW_FORMAT - 428)) | (1L << (SAVEPOINT - 428)) | (1L << (SCHEDULE - 428)) | (1L << (SECURITY - 428)) | (1L << (SERVER - 428)) | (1L << (SESSION - 428)) | (1L << (SHARE - 428)) | (1L << (SHARED - 428)) | (1L << (SIGNED - 428)) | (1L << (SIMPLE - 428)) | (1L << (SLAVE - 428)) | (1L << (SNAPSHOT - 428)) | (1L << (SOCKET - 428)) | (1L << (SOME - 428)) | (1L << (SOUNDS - 428)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (SOURCE - 492)) | (1L << (SQL_AFTER_GTIDS - 492)) | (1L << (SQL_AFTER_MTS_GAPS - 492)) | (1L << (SQL_BEFORE_GTIDS - 492)) | (1L << (SQL_BUFFER_RESULT - 492)) | (1L << (SQL_CACHE - 492)) | (1L << (SQL_NO_CACHE - 492)) | (1L << (SQL_THREAD - 492)) | (1L << (START - 492)) | (1L << (STARTS - 492)) | (1L << (STATS_AUTO_RECALC - 492)) | (1L << (STATS_PERSISTENT - 492)) | (1L << (STATS_SAMPLE_PAGES - 492)) | (1L << (STATUS - 492)) | (1L << (STOP - 492)) | (1L << (STORAGE - 492)) | (1L << (STRING - 492)) | (1L << (SUBJECT - 492)) | (1L << (SUBPARTITION - 492)) | (1L << (SUBPARTITIONS - 492)) | (1L << (SUSPEND - 492)) | (1L << (SWAPS - 492)) | (1L << (SWITCHES - 492)) | (1L << (TABLESPACE - 492)) | (1L << (TEMPORARY - 492)) | (1L << (TEMPTABLE - 492)) | (1L << (THAN - 492)) | (1L << (TRANSACTION - 492)) | (1L << (TRUNCATE - 492)) | (1L << (UNDEFINED - 492)) | (1L << (UNDOFILE - 492)) | (1L << (UNDO_BUFFER_SIZE - 492)) | (1L << (UNINSTALL - 492)) | (1L << (UNKNOWN - 492)) | (1L << (UPGRADE - 492)) | (1L << (USER - 492)) | (1L << (VALIDATION - 492)) | (1L << (VALUE - 492)) | (1L << (VARIABLES - 492)) | (1L << (VIEW - 492)) | (1L << (WAIT - 492)) | (1L << (WARNINGS - 492)) | (1L << (WITHOUT - 492)) | (1L << (WORK - 492)) | (1L << (WRAPPER - 492)) | (1L << (X509 - 492)) | (1L << (XA - 492)) | (1L << (XML - 492)) | (1L << (QUARTER - 492)) | (1L << (MONTH - 492)) | (1L << (DAY - 492)) | (1L << (HOUR - 492)) | (1L << (MINUTE - 492)) | (1L << (WEEK - 492)))) != 0) || ((((_la - 556)) & ~0x3f) == 0 && ((1L << (_la - 556)) & ((1L << (SECOND - 556)) | (1L << (MICROSECOND - 556)) | (1L << (TABLES - 556)) | (1L << (ROUTINE - 556)) | (1L << (EXECUTE - 556)) | (1L << (FILE - 556)) | (1L << (PROCESS - 556)) | (1L << (RELOAD - 556)) | (1L << (SHUTDOWN - 556)) | (1L << (SUPER - 556)) | (1L << (PRIVILEGES - 556)) | (1L << (ARMSCII8 - 556)) | (1L << (ASCII - 556)) | (1L << (BIG5 - 556)) | (1L << (CP1250 - 556)) | (1L << (CP1251 - 556)) | (1L << (CP1256 - 556)) | (1L << (CP1257 - 556)) | (1L << (CP850 - 556)) | (1L << (CP852 - 556)) | (1L << (CP866 - 556)) | (1L << (CP932 - 556)) | (1L << (DEC8 - 556)) | (1L << (EUCJPMS - 556)) | (1L << (EUCKR - 556)) | (1L << (GB2312 - 556)) | (1L << (GBK - 556)) | (1L << (GEOSTD8 - 556)) | (1L << (GREEK - 556)) | (1L << (HEBREW - 556)) | (1L << (HP8 - 556)) | (1L << (KEYBCS2 - 556)) | (1L << (KOI8R - 556)) | (1L << (KOI8U - 556)) | (1L << (LATIN1 - 556)) | (1L << (LATIN2 - 556)) | (1L << (LATIN5 - 556)) | (1L << (LATIN7 - 556)) | (1L << (MACCE - 556)) | (1L << (MACROMAN - 556)) | (1L << (SJIS - 556)) | (1L << (SWE7 - 556)) | (1L << (TIS620 - 556)) | (1L << (UCS2 - 556)) | (1L << (UJIS - 556)) | (1L << (UTF16 - 556)) | (1L << (UTF16LE - 556)) | (1L << (UTF32 - 556)) | (1L << (UTF8 - 556)) | (1L << (UTF8MB3 - 556)) | (1L << (UTF8MB4 - 556)) | (1L << (ARCHIVE - 556)) | (1L << (BLACKHOLE - 556)) | (1L << (CSV - 556)) | (1L << (FEDERATED - 556)) | (1L << (INNODB - 556)) | (1L << (MEMORY - 556)) | (1L << (MRG_MYISAM - 556)) | (1L << (MYISAM - 556)) | (1L << (NDB - 556)) | (1L << (NDBCLUSTER - 556)) | (1L << (PERFOMANCE_SCHEMA - 556)) | (1L << (REPEATABLE - 556)) | (1L << (COMMITTED - 556)))) != 0) || ((((_la - 620)) & ~0x3f) == 0 && ((1L << (_la - 620)) & ((1L << (UNCOMMITTED - 620)) | (1L << (SERIALIZABLE - 620)) | (1L << (GEOMETRYCOLLECTION - 620)) | (1L << (LINESTRING - 620)) | (1L << (MULTILINESTRING - 620)) | (1L << (MULTIPOINT - 620)) | (1L << (MULTIPOLYGON - 620)) | (1L << (POINT - 620)) | (1L << (POLYGON - 620)) | (1L << (ABS - 620)) | (1L << (ACOS - 620)) | (1L << (ADDDATE - 620)) | (1L << (ADDTIME - 620)) | (1L << (AES_DECRYPT - 620)) | (1L << (AES_ENCRYPT - 620)) | (1L << (AREA - 620)) | (1L << (ASBINARY - 620)) | (1L << (ASIN - 620)) | (1L << (ASTEXT - 620)) | (1L << (ASWKB - 620)) | (1L << (ASWKT - 620)) | (1L << (ASYMMETRIC_DECRYPT - 620)) | (1L << (ASYMMETRIC_DERIVE - 620)) | (1L << (ASYMMETRIC_ENCRYPT - 620)) | (1L << (ASYMMETRIC_SIGN - 620)) | (1L << (ASYMMETRIC_VERIFY - 620)) | (1L << (ATAN - 620)) | (1L << (ATAN2 - 620)) | (1L << (BENCHMARK - 620)) | (1L << (BIN - 620)) | (1L << (BIT_COUNT - 620)) | (1L << (BIT_LENGTH - 620)) | (1L << (BUFFER - 620)) | (1L << (CEIL - 620)) | (1L << (CEILING - 620)) | (1L << (CENTROID - 620)) | (1L << (CHARACTER_LENGTH - 620)) | (1L << (CHARSET - 620)) | (1L << (CHAR_LENGTH - 620)) | (1L << (COERCIBILITY - 620)) | (1L << (COLLATION - 620)) | (1L << (COMPRESS - 620)) | (1L << (CONCAT - 620)) | (1L << (CONCAT_WS - 620)) | (1L << (CONNECTION_ID - 620)) | (1L << (CONV - 620)) | (1L << (CONVERT_TZ - 620)) | (1L << (COS - 620)) | (1L << (COT - 620)) | (1L << (CRC32 - 620)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1L << (CREATE_DH_PARAMETERS - 620)) | (1L << (CREATE_DIGEST - 620)) | (1L << (CROSSES - 620)) | (1L << (DATEDIFF - 620)) | (1L << (DATE_FORMAT - 620)) | (1L << (DAYNAME - 620)) | (1L << (DAYOFMONTH - 620)) | (1L << (DAYOFWEEK - 620)) | (1L << (DAYOFYEAR - 620)) | (1L << (DECODE - 620)) | (1L << (DEGREES - 620)) | (1L << (DES_DECRYPT - 620)))) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & ((1L << (DES_ENCRYPT - 684)) | (1L << (DIMENSION - 684)) | (1L << (DISJOINT - 684)) | (1L << (ELT - 684)) | (1L << (ENCODE - 684)) | (1L << (ENCRYPT - 684)) | (1L << (ENDPOINT - 684)) | (1L << (ENVELOPE - 684)) | (1L << (EQUALS - 684)) | (1L << (EXP - 684)) | (1L << (EXPORT_SET - 684)) | (1L << (EXTERIORRING - 684)) | (1L << (EXTRACTVALUE - 684)) | (1L << (FIELD - 684)) | (1L << (FIND_IN_SET - 684)) | (1L << (FLOOR - 684)) | (1L << (FORMAT - 684)) | (1L << (FOUND_ROWS - 684)) | (1L << (FROM_BASE64 - 684)) | (1L << (FROM_DAYS - 684)) | (1L << (FROM_UNIXTIME - 684)) | (1L << (GEOMCOLLFROMTEXT - 684)) | (1L << (GEOMCOLLFROMWKB - 684)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 684)) | (1L << (GEOMETRYFROMTEXT - 684)) | (1L << (GEOMETRYFROMWKB - 684)) | (1L << (GEOMETRYN - 684)) | (1L << (GEOMETRYTYPE - 684)) | (1L << (GEOMFROMTEXT - 684)) | (1L << (GEOMFROMWKB - 684)) | (1L << (GET_FORMAT - 684)) | (1L << (GET_LOCK - 684)) | (1L << (GLENGTH - 684)) | (1L << (GREATEST - 684)) | (1L << (GTID_SUBSET - 684)) | (1L << (GTID_SUBTRACT - 684)) | (1L << (HEX - 684)) | (1L << (IFNULL - 684)) | (1L << (INET6_ATON - 684)) | (1L << (INET6_NTOA - 684)) | (1L << (INET_ATON - 684)) | (1L << (INET_NTOA - 684)) | (1L << (INSTR - 684)) | (1L << (INTERIORRINGN - 684)) | (1L << (INTERSECTS - 684)) | (1L << (ISCLOSED - 684)) | (1L << (ISEMPTY - 684)) | (1L << (ISNULL - 684)) | (1L << (ISSIMPLE - 684)) | (1L << (IS_FREE_LOCK - 684)) | (1L << (IS_IPV4 - 684)) | (1L << (IS_IPV4_COMPAT - 684)) | (1L << (IS_IPV4_MAPPED - 684)) | (1L << (IS_IPV6 - 684)) | (1L << (IS_USED_LOCK - 684)) | (1L << (LAST_INSERT_ID - 684)) | (1L << (LCASE - 684)) | (1L << (LEAST - 684)) | (1L << (LENGTH - 684)) | (1L << (LINEFROMTEXT - 684)) | (1L << (LINEFROMWKB - 684)) | (1L << (LINESTRINGFROMTEXT - 684)) | (1L << (LINESTRINGFROMWKB - 684)))) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & ((1L << (LN - 748)) | (1L << (LOAD_FILE - 748)) | (1L << (LOCATE - 748)) | (1L << (LOG - 748)) | (1L << (LOG10 - 748)) | (1L << (LOG2 - 748)) | (1L << (LOWER - 748)) | (1L << (LPAD - 748)) | (1L << (LTRIM - 748)) | (1L << (MAKEDATE - 748)) | (1L << (MAKETIME - 748)) | (1L << (MAKE_SET - 748)) | (1L << (MASTER_POS_WAIT - 748)) | (1L << (MBRCONTAINS - 748)) | (1L << (MBRDISJOINT - 748)) | (1L << (MBREQUAL - 748)) | (1L << (MBRINTERSECTS - 748)) | (1L << (MBROVERLAPS - 748)) | (1L << (MBRTOUCHES - 748)) | (1L << (MBRWITHIN - 748)) | (1L << (MD5 - 748)) | (1L << (MLINEFROMTEXT - 748)) | (1L << (MLINEFROMWKB - 748)) | (1L << (MONTHNAME - 748)) | (1L << (MPOINTFROMTEXT - 748)) | (1L << (MPOINTFROMWKB - 748)) | (1L << (MPOLYFROMTEXT - 748)) | (1L << (MPOLYFROMWKB - 748)) | (1L << (MULTILINESTRINGFROMTEXT - 748)) | (1L << (MULTILINESTRINGFROMWKB - 748)) | (1L << (MULTIPOINTFROMTEXT - 748)) | (1L << (MULTIPOINTFROMWKB - 748)) | (1L << (MULTIPOLYGONFROMTEXT - 748)) | (1L << (MULTIPOLYGONFROMWKB - 748)) | (1L << (NAME_CONST - 748)) | (1L << (NULLIF - 748)) | (1L << (NUMGEOMETRIES - 748)) | (1L << (NUMINTERIORRINGS - 748)) | (1L << (NUMPOINTS - 748)) | (1L << (OCT - 748)) | (1L << (OCTET_LENGTH - 748)) | (1L << (ORD - 748)) | (1L << (OVERLAPS - 748)) | (1L << (PERIOD_ADD - 748)) | (1L << (PERIOD_DIFF - 748)) | (1L << (PI - 748)) | (1L << (POINTFROMTEXT - 748)) | (1L << (POINTFROMWKB - 748)) | (1L << (POINTN - 748)) | (1L << (POLYFROMTEXT - 748)) | (1L << (POLYFROMWKB - 748)) | (1L << (POLYGONFROMTEXT - 748)) | (1L << (POLYGONFROMWKB - 748)) | (1L << (POW - 748)) | (1L << (POWER - 748)) | (1L << (QUOTE - 748)) | (1L << (RADIANS - 748)) | (1L << (RAND - 748)) | (1L << (RANDOM_BYTES - 748)) | (1L << (RELEASE_LOCK - 748)) | (1L << (REVERSE - 748)) | (1L << (ROUND - 748)) | (1L << (ROW_COUNT - 748)) | (1L << (RPAD - 748)))) != 0) || ((((_la - 812)) & ~0x3f) == 0 && ((1L << (_la - 812)) & ((1L << (RTRIM - 812)) | (1L << (SEC_TO_TIME - 812)) | (1L << (SESSION_USER - 812)) | (1L << (SHA - 812)) | (1L << (SHA1 - 812)) | (1L << (SHA2 - 812)) | (1L << (SIGN - 812)) | (1L << (SIN - 812)) | (1L << (SLEEP - 812)) | (1L << (SOUNDEX - 812)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1L << (SQRT - 812)) | (1L << (SRID - 812)) | (1L << (STARTPOINT - 812)) | (1L << (STRCMP - 812)) | (1L << (STR_TO_DATE - 812)) | (1L << (ST_AREA - 812)) | (1L << (ST_ASBINARY - 812)) | (1L << (ST_ASTEXT - 812)) | (1L << (ST_ASWKB - 812)) | (1L << (ST_ASWKT - 812)) | (1L << (ST_BUFFER - 812)) | (1L << (ST_CENTROID - 812)) | (1L << (ST_CONTAINS - 812)) | (1L << (ST_CROSSES - 812)) | (1L << (ST_DIFFERENCE - 812)) | (1L << (ST_DIMENSION - 812)) | (1L << (ST_DISJOINT - 812)) | (1L << (ST_DISTANCE - 812)) | (1L << (ST_ENDPOINT - 812)) | (1L << (ST_ENVELOPE - 812)) | (1L << (ST_EQUALS - 812)) | (1L << (ST_EXTERIORRING - 812)) | (1L << (ST_GEOMCOLLFROMTEXT - 812)) | (1L << (ST_GEOMCOLLFROMTXT - 812)) | (1L << (ST_GEOMCOLLFROMWKB - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1L << (ST_GEOMETRYFROMTEXT - 812)) | (1L << (ST_GEOMETRYFROMWKB - 812)) | (1L << (ST_GEOMETRYN - 812)) | (1L << (ST_GEOMETRYTYPE - 812)) | (1L << (ST_GEOMFROMTEXT - 812)) | (1L << (ST_GEOMFROMWKB - 812)) | (1L << (ST_INTERIORRINGN - 812)) | (1L << (ST_INTERSECTION - 812)) | (1L << (ST_INTERSECTS - 812)) | (1L << (ST_ISCLOSED - 812)) | (1L << (ST_ISEMPTY - 812)) | (1L << (ST_ISSIMPLE - 812)) | (1L << (ST_LINEFROMTEXT - 812)) | (1L << (ST_LINEFROMWKB - 812)) | (1L << (ST_LINESTRINGFROMTEXT - 812)) | (1L << (ST_LINESTRINGFROMWKB - 812)) | (1L << (ST_NUMGEOMETRIES - 812)) | (1L << (ST_NUMINTERIORRING - 812)) | (1L << (ST_NUMINTERIORRINGS - 812)) | (1L << (ST_NUMPOINTS - 812)) | (1L << (ST_OVERLAPS - 812)) | (1L << (ST_POINTFROMTEXT - 812)) | (1L << (ST_POINTFROMWKB - 812)) | (1L << (ST_POINTN - 812)) | (1L << (ST_POLYFROMTEXT - 812)) | (1L << (ST_POLYFROMWKB - 812)))) != 0) || ((((_la - 876)) & ~0x3f) == 0 && ((1L << (_la - 876)) & ((1L << (ST_POLYGONFROMTEXT - 876)) | (1L << (ST_POLYGONFROMWKB - 876)) | (1L << (ST_SRID - 876)) | (1L << (ST_STARTPOINT - 876)) | (1L << (ST_SYMDIFFERENCE - 876)) | (1L << (ST_TOUCHES - 876)) | (1L << (ST_UNION - 876)) | (1L << (ST_WITHIN - 876)) | (1L << (ST_X - 876)) | (1L << (ST_Y - 876)) | (1L << (SUBDATE - 876)) | (1L << (SUBSTRING_INDEX - 876)) | (1L << (SUBTIME - 876)) | (1L << (SYSTEM_USER - 876)) | (1L << (TAN - 876)) | (1L << (TIMEDIFF - 876)) | (1L << (TIMESTAMPADD - 876)) | (1L << (TIMESTAMPDIFF - 876)) | (1L << (TIME_FORMAT - 876)) | (1L << (TIME_TO_SEC - 876)) | (1L << (TOUCHES - 876)) | (1L << (TO_BASE64 - 876)) | (1L << (TO_DAYS - 876)) | (1L << (TO_SECONDS - 876)) | (1L << (UCASE - 876)) | (1L << (UNCOMPRESS - 876)) | (1L << (UNCOMPRESSED_LENGTH - 876)) | (1L << (UNHEX - 876)) | (1L << (UNIX_TIMESTAMP - 876)) | (1L << (UPDATEXML - 876)) | (1L << (UPPER - 876)) | (1L << (UUID - 876)) | (1L << (UUID_SHORT - 876)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 876)) | (1L << (VERSION - 876)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1L << (WEEKDAY - 876)) | (1L << (WEEKOFYEAR - 876)) | (1L << (WEIGHT_STRING - 876)) | (1L << (WITHIN - 876)) | (1L << (YEARWEEK - 876)) | (1L << (Y_FUNCTION - 876)) | (1L << (X_FUNCTION - 876)))) != 0) || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (LR_BRACKET - 945)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 945)) | (1L << (ID - 945)) | (1L << (REVERSE_QUOTE_ID - 945)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserContext : ParserRuleContext {
		public AlterUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUser; } }
	 
		public AlterUserContext() { }
		public virtual void CopyFrom(AlterUserContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlterUserMysqlV56Context : AlterUserContext {
		public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		public UserSpecificationContext[] userSpecification() {
			return GetRuleContexts<UserSpecificationContext>();
		}
		public UserSpecificationContext userSpecification(int i) {
			return GetRuleContext<UserSpecificationContext>(i);
		}
		public AlterUserMysqlV56Context(AlterUserContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterUserMysqlV56(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterUserMysqlV56(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUserMysqlV56(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterUserMysqlV57Context : AlterUserContext {
		public IToken tlsNone;
		public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public ITerminalNode REQUIRE() { return GetToken(MySqlParser.REQUIRE, 0); }
		public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		public UserPasswordOptionContext[] userPasswordOption() {
			return GetRuleContexts<UserPasswordOptionContext>();
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return GetRuleContext<UserPasswordOptionContext>(i);
		}
		public UserLockOptionContext[] userLockOption() {
			return GetRuleContexts<UserLockOptionContext>();
		}
		public UserLockOptionContext userLockOption(int i) {
			return GetRuleContext<UserLockOptionContext>(i);
		}
		public TlsOptionContext[] tlsOption() {
			return GetRuleContexts<TlsOptionContext>();
		}
		public TlsOptionContext tlsOption(int i) {
			return GetRuleContext<TlsOptionContext>(i);
		}
		public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		public UserResourceOptionContext[] userResourceOption() {
			return GetRuleContexts<UserResourceOptionContext>();
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return GetRuleContext<UserResourceOptionContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(MySqlParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(MySqlParser.AND, i);
		}
		public AlterUserMysqlV57Context(AlterUserContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterUserMysqlV57(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterUserMysqlV57(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUserMysqlV57(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserContext alterUser() {
		AlterUserContext _localctx = new AlterUserContext(Context, State);
		EnterRule(_localctx, 380, RULE_alterUser);
		int _la;
		try {
			State = 4262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,612,Context) ) {
			case 1:
				_localctx = new AlterUserMysqlV56Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4208; Match(ALTER);
				State = 4209; Match(USER);
				State = 4210; userSpecification();
				State = 4215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4211; Match(COMMA);
					State = 4212; userSpecification();
					}
					}
					State = 4217;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new AlterUserMysqlV57Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4218; Match(ALTER);
				State = 4219; Match(USER);
				State = 4221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 4220; ifExists();
					}
				}

				State = 4223; userAuthOption();
				State = 4228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4224; Match(COMMA);
					State = 4225; userAuthOption();
					}
					}
					State = 4230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE) {
					{
					State = 4231; Match(REQUIRE);
					State = 4243;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NONE:
						{
						State = 4232; ((AlterUserMysqlV57Context)_localctx).tlsNone = Match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						State = 4233; tlsOption();
						State = 4240;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							State = 4235;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==AND) {
								{
								State = 4234; Match(AND);
								}
							}

							State = 4237; tlsOption();
							}
							}
							State = 4242;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 4253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4247; Match(WITH);
					State = 4249;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 4248; userResourceOption();
						}
						}
						State = 4251;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)))) != 0) );
					}
				}

				State = 4259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					State = 4257;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PASSWORD:
						{
						State = 4255; userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						State = 4256; userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 4261;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserContext : ParserRuleContext {
		public CreateUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUser; } }
	 
		public CreateUserContext() { }
		public virtual void CopyFrom(CreateUserContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CreateUserMysqlV57Context : CreateUserContext {
		public IToken tlsNone;
		public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public ITerminalNode REQUIRE() { return GetToken(MySqlParser.REQUIRE, 0); }
		public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		public UserPasswordOptionContext[] userPasswordOption() {
			return GetRuleContexts<UserPasswordOptionContext>();
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return GetRuleContext<UserPasswordOptionContext>(i);
		}
		public UserLockOptionContext[] userLockOption() {
			return GetRuleContexts<UserLockOptionContext>();
		}
		public UserLockOptionContext userLockOption(int i) {
			return GetRuleContext<UserLockOptionContext>(i);
		}
		public TlsOptionContext[] tlsOption() {
			return GetRuleContexts<TlsOptionContext>();
		}
		public TlsOptionContext tlsOption(int i) {
			return GetRuleContext<TlsOptionContext>(i);
		}
		public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		public UserResourceOptionContext[] userResourceOption() {
			return GetRuleContexts<UserResourceOptionContext>();
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return GetRuleContext<UserResourceOptionContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(MySqlParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(MySqlParser.AND, i);
		}
		public CreateUserMysqlV57Context(CreateUserContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateUserMysqlV57(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateUserMysqlV57(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUserMysqlV57(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateUserMysqlV56Context : CreateUserContext {
		public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		public CreateUserMysqlV56Context(CreateUserContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateUserMysqlV56(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateUserMysqlV56(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUserMysqlV56(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserContext createUser() {
		CreateUserContext _localctx = new CreateUserContext(Context, State);
		EnterRule(_localctx, 382, RULE_createUser);
		int _la;
		try {
			State = 4318;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,624,Context) ) {
			case 1:
				_localctx = new CreateUserMysqlV56Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4264; Match(CREATE);
				State = 4265; Match(USER);
				State = 4266; userAuthOption();
				State = 4271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4267; Match(COMMA);
					State = 4268; userAuthOption();
					}
					}
					State = 4273;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new CreateUserMysqlV57Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4274; Match(CREATE);
				State = 4275; Match(USER);
				State = 4277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 4276; ifNotExists();
					}
				}

				State = 4279; userAuthOption();
				State = 4284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4280; Match(COMMA);
					State = 4281; userAuthOption();
					}
					}
					State = 4286;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE) {
					{
					State = 4287; Match(REQUIRE);
					State = 4299;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NONE:
						{
						State = 4288; ((CreateUserMysqlV57Context)_localctx).tlsNone = Match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						State = 4289; tlsOption();
						State = 4296;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							State = 4291;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==AND) {
								{
								State = 4290; Match(AND);
								}
							}

							State = 4293; tlsOption();
							}
							}
							State = 4298;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 4309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4303; Match(WITH);
					State = 4305;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 4304; userResourceOption();
						}
						}
						State = 4307;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)))) != 0) );
					}
				}

				State = 4315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					State = 4313;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PASSWORD:
						{
						State = 4311; userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						State = 4312; userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 4317;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropUserContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropUser; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropUser(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropUser(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropUser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropUserContext dropUser() {
		DropUserContext _localctx = new DropUserContext(Context, State);
		EnterRule(_localctx, 384, RULE_dropUser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4320; Match(DROP);
			State = 4321; Match(USER);
			State = 4323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 4322; ifExists();
				}
			}

			State = 4325; userName();
			State = 4330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4326; Match(COMMA);
				State = 4327; userName();
				}
				}
				State = 4332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantStatementContext : ParserRuleContext {
		public IToken privilegeObject;
		public IToken tlsNone;
		public ITerminalNode[] GRANT() { return GetTokens(MySqlParser.GRANT); }
		public ITerminalNode GRANT(int i) {
			return GetToken(MySqlParser.GRANT, i);
		}
		public PrivelegeClauseContext[] privelegeClause() {
			return GetRuleContexts<PrivelegeClauseContext>();
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return GetRuleContext<PrivelegeClauseContext>(i);
		}
		public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return GetRuleContext<PrivilegeLevelContext>(0);
		}
		public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		public ITerminalNode REQUIRE() { return GetToken(MySqlParser.REQUIRE, 0); }
		public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		public TlsOptionContext[] tlsOption() {
			return GetRuleContexts<TlsOptionContext>();
		}
		public TlsOptionContext tlsOption(int i) {
			return GetRuleContext<TlsOptionContext>(i);
		}
		public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		public ITerminalNode[] OPTION() { return GetTokens(MySqlParser.OPTION); }
		public ITerminalNode OPTION(int i) {
			return GetToken(MySqlParser.OPTION, i);
		}
		public UserResourceOptionContext[] userResourceOption() {
			return GetRuleContexts<UserResourceOptionContext>();
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return GetRuleContext<UserResourceOptionContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(MySqlParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(MySqlParser.AND, i);
		}
		public GrantStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGrantStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGrantStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantStatementContext grantStatement() {
		GrantStatementContext _localctx = new GrantStatementContext(Context, State);
		EnterRule(_localctx, 386, RULE_grantStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4333; Match(GRANT);
			State = 4334; privelegeClause();
			State = 4339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4335; Match(COMMA);
				State = 4336; privelegeClause();
				}
				}
				State = 4341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4342; Match(ON);
			State = 4344;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,628,Context) ) {
			case 1:
				{
				State = 4343;
				_localctx.privilegeObject = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
					_localctx.privilegeObject = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 4346; privilegeLevel();
			State = 4347; Match(TO);
			State = 4348; userAuthOption();
			State = 4353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4349; Match(COMMA);
				State = 4350; userAuthOption();
				}
				}
				State = 4355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REQUIRE) {
				{
				State = 4356; Match(REQUIRE);
				State = 4368;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NONE:
					{
					State = 4357; _localctx.tlsNone = Match(NONE);
					}
					break;
				case SSL:
				case CIPHER:
				case ISSUER:
				case SUBJECT:
				case X509:
					{
					State = 4358; tlsOption();
					State = 4365;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
						{
						{
						State = 4360;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==AND) {
							{
							State = 4359; Match(AND);
							}
						}

						State = 4362; tlsOption();
						}
						}
						State = 4367;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 4381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 4372; Match(WITH);
				State = 4378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==GRANT || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)))) != 0)) {
					{
					State = 4376;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case GRANT:
						{
						State = 4373; Match(GRANT);
						State = 4374; Match(OPTION);
						}
						break;
					case MAX_CONNECTIONS_PER_HOUR:
					case MAX_QUERIES_PER_HOUR:
					case MAX_UPDATES_PER_HOUR:
					case MAX_USER_CONNECTIONS:
						{
						State = 4375; userResourceOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 4380;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantProxyContext : ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public UserNameContext _userName;
		public IList<UserNameContext> _toOther = new List<UserNameContext>();
		public ITerminalNode[] GRANT() { return GetTokens(MySqlParser.GRANT); }
		public ITerminalNode GRANT(int i) {
			return GetToken(MySqlParser.GRANT, i);
		}
		public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
		public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		public GrantProxyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantProxy; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGrantProxy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGrantProxy(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantProxy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantProxyContext grantProxy() {
		GrantProxyContext _localctx = new GrantProxyContext(Context, State);
		EnterRule(_localctx, 388, RULE_grantProxy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4383; Match(GRANT);
			State = 4384; Match(PROXY);
			State = 4385; Match(ON);
			State = 4386; _localctx.fromFirst = userName();
			State = 4387; Match(TO);
			State = 4388; _localctx.toFirst = userName();
			State = 4393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4389; Match(COMMA);
				State = 4390; _localctx._userName = userName();
				_localctx._toOther.Add(_localctx._userName);
				}
				}
				State = 4395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 4396; Match(WITH);
				State = 4397; Match(GRANT);
				State = 4398; Match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameUserContext : ParserRuleContext {
		public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		public RenameUserClauseContext[] renameUserClause() {
			return GetRuleContexts<RenameUserClauseContext>();
		}
		public RenameUserClauseContext renameUserClause(int i) {
			return GetRuleContext<RenameUserClauseContext>(i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameUser; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRenameUser(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRenameUser(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameUser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameUserContext renameUser() {
		RenameUserContext _localctx = new RenameUserContext(Context, State);
		EnterRule(_localctx, 390, RULE_renameUser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4401; Match(RENAME);
			State = 4402; Match(USER);
			State = 4403; renameUserClause();
			State = 4408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4404; Match(COMMA);
				State = 4405; renameUserClause();
				}
				}
				State = 4410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokeStatementContext : ParserRuleContext {
		public RevokeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokeStatement; } }
	 
		public RevokeStatementContext() { }
		public virtual void CopyFrom(RevokeStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DetailRevokeContext : RevokeStatementContext {
		public IToken privilegeObject;
		public ITerminalNode REVOKE() { return GetToken(MySqlParser.REVOKE, 0); }
		public PrivelegeClauseContext[] privelegeClause() {
			return GetRuleContexts<PrivelegeClauseContext>();
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return GetRuleContext<PrivelegeClauseContext>(i);
		}
		public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return GetRuleContext<PrivilegeLevelContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		public DetailRevokeContext(RevokeStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDetailRevoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDetailRevoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetailRevoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShortRevokeContext : RevokeStatementContext {
		public ITerminalNode REVOKE() { return GetToken(MySqlParser.REVOKE, 0); }
		public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public ITerminalNode GRANT() { return GetToken(MySqlParser.GRANT, 0); }
		public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		public ShortRevokeContext(RevokeStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShortRevoke(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShortRevoke(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortRevoke(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RevokeStatementContext revokeStatement() {
		RevokeStatementContext _localctx = new RevokeStatementContext(Context, State);
		EnterRule(_localctx, 392, RULE_revokeStatement);
		int _la;
		try {
			State = 4451;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,645,Context) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4411; Match(REVOKE);
				State = 4412; privelegeClause();
				State = 4417;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4413; Match(COMMA);
					State = 4414; privelegeClause();
					}
					}
					State = 4419;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4420; Match(ON);
				State = 4422;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,641,Context) ) {
				case 1:
					{
					State = 4421;
					((DetailRevokeContext)_localctx).privilegeObject = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((DetailRevokeContext)_localctx).privilegeObject = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 4424; privilegeLevel();
				State = 4425; Match(FROM);
				State = 4426; userName();
				State = 4431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4427; Match(COMMA);
					State = 4428; userName();
					}
					}
					State = 4433;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4434; Match(REVOKE);
				State = 4435; Match(ALL);
				State = 4437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVILEGES) {
					{
					State = 4436; Match(PRIVILEGES);
					}
				}

				State = 4439; Match(COMMA);
				State = 4440; Match(GRANT);
				State = 4441; Match(OPTION);
				State = 4442; Match(FROM);
				State = 4443; userName();
				State = 4448;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4444; Match(COMMA);
					State = 4445; userName();
					}
					}
					State = 4450;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokeProxyContext : ParserRuleContext {
		public UserNameContext onUser;
		public UserNameContext fromFirst;
		public UserNameContext _userName;
		public IList<UserNameContext> _fromOther = new List<UserNameContext>();
		public ITerminalNode REVOKE() { return GetToken(MySqlParser.REVOKE, 0); }
		public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
		public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		public RevokeProxyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokeProxy; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRevokeProxy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRevokeProxy(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRevokeProxy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RevokeProxyContext revokeProxy() {
		RevokeProxyContext _localctx = new RevokeProxyContext(Context, State);
		EnterRule(_localctx, 394, RULE_revokeProxy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4453; Match(REVOKE);
			State = 4454; Match(PROXY);
			State = 4455; Match(ON);
			State = 4456; _localctx.onUser = userName();
			State = 4457; Match(FROM);
			State = 4458; _localctx.fromFirst = userName();
			State = 4463;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4459; Match(COMMA);
				State = 4460; _localctx._userName = userName();
				_localctx._fromOther.Add(_localctx._userName);
				}
				}
				State = 4465;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetPasswordStatementContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return GetRuleContext<PasswordFunctionClauseContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public SetPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setPasswordStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetPasswordStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetPasswordStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetPasswordStatementContext setPasswordStatement() {
		SetPasswordStatementContext _localctx = new SetPasswordStatementContext(Context, State);
		EnterRule(_localctx, 396, RULE_setPasswordStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4466; Match(SET);
			State = 4467; Match(PASSWORD);
			State = 4470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 4468; Match(FOR);
				State = 4469; userName();
				}
			}

			State = 4472; Match(EQUAL_SYMBOL);
			State = 4475;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OLD_PASSWORD:
			case PASSWORD:
				{
				State = 4473; passwordFunctionClause();
				}
				break;
			case STRING_LITERAL:
				{
				State = 4474; Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserSpecificationContext : ParserRuleContext {
		public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public UserPasswordOptionContext userPasswordOption() {
			return GetRuleContext<UserPasswordOptionContext>(0);
		}
		public UserSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userSpecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserSpecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserSpecification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserSpecificationContext userSpecification() {
		UserSpecificationContext _localctx = new UserSpecificationContext(Context, State);
		EnterRule(_localctx, 398, RULE_userSpecification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4477; userName();
			State = 4478; userPasswordOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserAuthOptionContext : ParserRuleContext {
		public UserAuthOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userAuthOption; } }
	 
		public UserAuthOptionContext() { }
		public virtual void CopyFrom(UserAuthOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleAuthOptionContext : UserAuthOptionContext {
		public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public SimpleAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleAuthOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleAuthOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleAuthOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PasswordAuthOptionContext : UserAuthOptionContext {
		public IToken hashed;
		public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public PasswordAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPasswordAuthOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPasswordAuthOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPasswordAuthOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringAuthOptionContext : UserAuthOptionContext {
		public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		public AuthPluginContext authPlugin() {
			return GetRuleContext<AuthPluginContext>(0);
		}
		public StringAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStringAuthOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStringAuthOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAuthOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HashAuthOptionContext : UserAuthOptionContext {
		public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		public AuthPluginContext authPlugin() {
			return GetRuleContext<AuthPluginContext>(0);
		}
		public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public HashAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHashAuthOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHashAuthOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHashAuthOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserAuthOptionContext userAuthOption() {
		UserAuthOptionContext _localctx = new UserAuthOptionContext(Context, State);
		EnterRule(_localctx, 400, RULE_userAuthOption);
		int _la;
		try {
			State = 4504;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,651,Context) ) {
			case 1:
				_localctx = new PasswordAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4480; userName();
				State = 4481; Match(IDENTIFIED);
				State = 4482; Match(BY);
				State = 4483; Match(PASSWORD);
				State = 4484; ((PasswordAuthOptionContext)_localctx).hashed = Match(STRING_LITERAL);
				}
				break;
			case 2:
				_localctx = new StringAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4486; userName();
				State = 4487; Match(IDENTIFIED);
				State = 4490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4488; Match(WITH);
					State = 4489; authPlugin();
					}
				}

				State = 4492; Match(BY);
				State = 4493; Match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new HashAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4495; userName();
				State = 4496; Match(IDENTIFIED);
				State = 4497; Match(WITH);
				State = 4498; authPlugin();
				State = 4501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 4499; Match(AS);
					State = 4500; Match(STRING_LITERAL);
					}
				}

				}
				break;
			case 4:
				_localctx = new SimpleAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4503; userName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TlsOptionContext : ParserRuleContext {
		public ITerminalNode SSL() { return GetToken(MySqlParser.SSL, 0); }
		public ITerminalNode X509() { return GetToken(MySqlParser.X509, 0); }
		public ITerminalNode CIPHER() { return GetToken(MySqlParser.CIPHER, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ITerminalNode ISSUER() { return GetToken(MySqlParser.ISSUER, 0); }
		public ITerminalNode SUBJECT() { return GetToken(MySqlParser.SUBJECT, 0); }
		public TlsOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tlsOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTlsOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTlsOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTlsOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TlsOptionContext tlsOption() {
		TlsOptionContext _localctx = new TlsOptionContext(Context, State);
		EnterRule(_localctx, 402, RULE_tlsOption);
		try {
			State = 4514;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SSL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4506; Match(SSL);
				}
				break;
			case X509:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4507; Match(X509);
				}
				break;
			case CIPHER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4508; Match(CIPHER);
				State = 4509; Match(STRING_LITERAL);
				}
				break;
			case ISSUER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4510; Match(ISSUER);
				State = 4511; Match(STRING_LITERAL);
				}
				break;
			case SUBJECT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4512; Match(SUBJECT);
				State = 4513; Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserResourceOptionContext : ParserRuleContext {
		public ITerminalNode MAX_QUERIES_PER_HOUR() { return GetToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ITerminalNode MAX_UPDATES_PER_HOUR() { return GetToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public ITerminalNode MAX_CONNECTIONS_PER_HOUR() { return GetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public ITerminalNode MAX_USER_CONNECTIONS() { return GetToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public UserResourceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userResourceOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserResourceOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserResourceOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserResourceOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserResourceOptionContext userResourceOption() {
		UserResourceOptionContext _localctx = new UserResourceOptionContext(Context, State);
		EnterRule(_localctx, 404, RULE_userResourceOption);
		try {
			State = 4524;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MAX_QUERIES_PER_HOUR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4516; Match(MAX_QUERIES_PER_HOUR);
				State = 4517; decimalLiteral();
				}
				break;
			case MAX_UPDATES_PER_HOUR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4518; Match(MAX_UPDATES_PER_HOUR);
				State = 4519; decimalLiteral();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4520; Match(MAX_CONNECTIONS_PER_HOUR);
				State = 4521; decimalLiteral();
				}
				break;
			case MAX_USER_CONNECTIONS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4522; Match(MAX_USER_CONNECTIONS);
				State = 4523; decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserPasswordOptionContext : ParserRuleContext {
		public IToken expireType;
		public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		public ITerminalNode EXPIRE() { return GetToken(MySqlParser.EXPIRE, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ITerminalNode DAY() { return GetToken(MySqlParser.DAY, 0); }
		public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public ITerminalNode NEVER() { return GetToken(MySqlParser.NEVER, 0); }
		public ITerminalNode INTERVAL() { return GetToken(MySqlParser.INTERVAL, 0); }
		public UserPasswordOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userPasswordOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserPasswordOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserPasswordOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserPasswordOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserPasswordOptionContext userPasswordOption() {
		UserPasswordOptionContext _localctx = new UserPasswordOptionContext(Context, State);
		EnterRule(_localctx, 406, RULE_userPasswordOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4526; Match(PASSWORD);
			State = 4527; Match(EXPIRE);
			State = 4534;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
				{
				State = 4528; _localctx.expireType = Match(DEFAULT);
				}
				break;
			case NEVER:
				{
				State = 4529; _localctx.expireType = Match(NEVER);
				}
				break;
			case INTERVAL:
				{
				State = 4530; _localctx.expireType = Match(INTERVAL);
				State = 4531; decimalLiteral();
				State = 4532; Match(DAY);
				}
				break;
			case Eof:
			case ACCOUNT:
			case PASSWORD:
			case MINUSMINUS:
			case COMMA:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserLockOptionContext : ParserRuleContext {
		public IToken lockType;
		public ITerminalNode ACCOUNT() { return GetToken(MySqlParser.ACCOUNT, 0); }
		public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		public ITerminalNode UNLOCK() { return GetToken(MySqlParser.UNLOCK, 0); }
		public UserLockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userLockOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserLockOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserLockOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserLockOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserLockOptionContext userLockOption() {
		UserLockOptionContext _localctx = new UserLockOptionContext(Context, State);
		EnterRule(_localctx, 408, RULE_userLockOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4536; Match(ACCOUNT);
			State = 4537;
			_localctx.lockType = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
				_localctx.lockType = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivelegeClauseContext : ParserRuleContext {
		public PrivilegeContext privilege() {
			return GetRuleContext<PrivilegeContext>(0);
		}
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public PrivelegeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privelegeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrivelegeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrivelegeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivelegeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivelegeClauseContext privelegeClause() {
		PrivelegeClauseContext _localctx = new PrivelegeClauseContext(Context, State);
		EnterRule(_localctx, 410, RULE_privelegeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4539; privilege();
			State = 4544;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 4540; Match(LR_BRACKET);
				State = 4541; uidList();
				State = 4542; Match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeContext : ParserRuleContext {
		public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		public ITerminalNode ROUTINE() { return GetToken(MySqlParser.ROUTINE, 0); }
		public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		public ITerminalNode EXECUTE() { return GetToken(MySqlParser.EXECUTE, 0); }
		public ITerminalNode FILE() { return GetToken(MySqlParser.FILE, 0); }
		public ITerminalNode GRANT() { return GetToken(MySqlParser.GRANT, 0); }
		public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
		public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		public ITerminalNode PROCESS() { return GetToken(MySqlParser.PROCESS, 0); }
		public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
		public ITerminalNode REFERENCES() { return GetToken(MySqlParser.REFERENCES, 0); }
		public ITerminalNode RELOAD() { return GetToken(MySqlParser.RELOAD, 0); }
		public ITerminalNode REPLICATION() { return GetToken(MySqlParser.REPLICATION, 0); }
		public ITerminalNode CLIENT() { return GetToken(MySqlParser.CLIENT, 0); }
		public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		public ITerminalNode SELECT() { return GetToken(MySqlParser.SELECT, 0); }
		public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		public ITerminalNode DATABASES() { return GetToken(MySqlParser.DATABASES, 0); }
		public ITerminalNode SHUTDOWN() { return GetToken(MySqlParser.SHUTDOWN, 0); }
		public ITerminalNode SUPER() { return GetToken(MySqlParser.SUPER, 0); }
		public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
		public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		public ITerminalNode USAGE() { return GetToken(MySqlParser.USAGE, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilege; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrivilege(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrivilege(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivilege(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeContext privilege() {
		PrivilegeContext _localctx = new PrivilegeContext(Context, State);
		EnterRule(_localctx, 412, RULE_privilege);
		int _la;
		try {
			State = 4588;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4546; Match(ALL);
				State = 4548;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVILEGES) {
					{
					State = 4547; Match(PRIVILEGES);
					}
				}

				}
				break;
			case ALTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4550; Match(ALTER);
				State = 4552;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ROUTINE) {
					{
					State = 4551; Match(ROUTINE);
					}
				}

				}
				break;
			case CREATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4554; Match(CREATE);
				State = 4561;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEMPORARY:
					{
					State = 4555; Match(TEMPORARY);
					State = 4556; Match(TABLES);
					}
					break;
				case ROUTINE:
					{
					State = 4557; Match(ROUTINE);
					}
					break;
				case VIEW:
					{
					State = 4558; Match(VIEW);
					}
					break;
				case USER:
					{
					State = 4559; Match(USER);
					}
					break;
				case TABLESPACE:
					{
					State = 4560; Match(TABLESPACE);
					}
					break;
				case ON:
				case LR_BRACKET:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case DELETE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4563; Match(DELETE);
				}
				break;
			case DROP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4564; Match(DROP);
				}
				break;
			case EVENT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4565; Match(EVENT);
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4566; Match(EXECUTE);
				}
				break;
			case FILE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4567; Match(FILE);
				}
				break;
			case GRANT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4568; Match(GRANT);
				State = 4569; Match(OPTION);
				}
				break;
			case INDEX:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4570; Match(INDEX);
				}
				break;
			case INSERT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4571; Match(INSERT);
				}
				break;
			case LOCK:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4572; Match(LOCK);
				State = 4573; Match(TABLES);
				}
				break;
			case PROCESS:
				EnterOuterAlt(_localctx, 13);
				{
				State = 4574; Match(PROCESS);
				}
				break;
			case PROXY:
				EnterOuterAlt(_localctx, 14);
				{
				State = 4575; Match(PROXY);
				}
				break;
			case REFERENCES:
				EnterOuterAlt(_localctx, 15);
				{
				State = 4576; Match(REFERENCES);
				}
				break;
			case RELOAD:
				EnterOuterAlt(_localctx, 16);
				{
				State = 4577; Match(RELOAD);
				}
				break;
			case REPLICATION:
				EnterOuterAlt(_localctx, 17);
				{
				State = 4578; Match(REPLICATION);
				State = 4579;
				_la = TokenStream.LA(1);
				if ( !(_la==CLIENT || _la==SLAVE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SELECT:
				EnterOuterAlt(_localctx, 18);
				{
				State = 4580; Match(SELECT);
				}
				break;
			case SHOW:
				EnterOuterAlt(_localctx, 19);
				{
				State = 4581; Match(SHOW);
				State = 4582;
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASES || _la==VIEW) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SHUTDOWN:
				EnterOuterAlt(_localctx, 20);
				{
				State = 4583; Match(SHUTDOWN);
				}
				break;
			case SUPER:
				EnterOuterAlt(_localctx, 21);
				{
				State = 4584; Match(SUPER);
				}
				break;
			case TRIGGER:
				EnterOuterAlt(_localctx, 22);
				{
				State = 4585; Match(TRIGGER);
				}
				break;
			case UPDATE:
				EnterOuterAlt(_localctx, 23);
				{
				State = 4586; Match(UPDATE);
				}
				break;
			case USAGE:
				EnterOuterAlt(_localctx, 24);
				{
				State = 4587; Match(USAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeLevelContext : ParserRuleContext {
		public PrivilegeLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilegeLevel; } }
	 
		public PrivilegeLevelContext() { }
		public virtual void CopyFrom(PrivilegeLevelContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DefiniteSchemaPrivLevelContext : PrivilegeLevelContext {
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DefiniteSchemaPrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefiniteSchemaPrivLevel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefiniteSchemaPrivLevel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefiniteSchemaPrivLevel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefiniteFullTablePrivLevelContext : PrivilegeLevelContext {
		public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public DefiniteFullTablePrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefiniteFullTablePrivLevel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefiniteFullTablePrivLevel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefiniteFullTablePrivLevel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GlobalPrivLevelContext : PrivilegeLevelContext {
		public GlobalPrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGlobalPrivLevel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGlobalPrivLevel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalPrivLevel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefiniteTablePrivLevelContext : PrivilegeLevelContext {
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DefiniteTablePrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefiniteTablePrivLevel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefiniteTablePrivLevel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefiniteTablePrivLevel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurrentSchemaPriviLevelContext : PrivilegeLevelContext {
		public CurrentSchemaPriviLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCurrentSchemaPriviLevel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCurrentSchemaPriviLevel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentSchemaPriviLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeLevelContext privilegeLevel() {
		PrivilegeLevelContext _localctx = new PrivilegeLevelContext(Context, State);
		EnterRule(_localctx, 414, RULE_privilegeLevel);
		try {
			State = 4603;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,660,Context) ) {
			case 1:
				_localctx = new CurrentSchemaPriviLevelContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4590; Match(STAR);
				}
				break;
			case 2:
				_localctx = new GlobalPrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4591; Match(STAR);
				State = 4592; Match(DOT);
				State = 4593; Match(STAR);
				}
				break;
			case 3:
				_localctx = new DefiniteSchemaPrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4594; uid();
				State = 4595; Match(DOT);
				State = 4596; Match(STAR);
				}
				break;
			case 4:
				_localctx = new DefiniteFullTablePrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4598; uid();
				State = 4599; Match(DOT);
				State = 4600; uid();
				}
				break;
			case 5:
				_localctx = new DefiniteTablePrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 4602; uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameUserClauseContext : ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		public RenameUserClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameUserClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRenameUserClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRenameUserClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameUserClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameUserClauseContext renameUserClause() {
		RenameUserClauseContext _localctx = new RenameUserClauseContext(Context, State);
		EnterRule(_localctx, 416, RULE_renameUserClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4605; _localctx.fromFirst = userName();
			State = 4606; Match(TO);
			State = 4607; _localctx.toFirst = userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnalyzeTableContext : ParserRuleContext {
		public IToken actionOption;
		public ITerminalNode ANALYZE() { return GetToken(MySqlParser.ANALYZE, 0); }
		public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public AnalyzeTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyzeTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAnalyzeTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAnalyzeTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnalyzeTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnalyzeTableContext analyzeTable() {
		AnalyzeTableContext _localctx = new AnalyzeTableContext(Context, State);
		EnterRule(_localctx, 418, RULE_analyzeTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4609; Match(ANALYZE);
			State = 4611;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 4610;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 4613; Match(TABLE);
			State = 4614; tables();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckTableContext : ParserRuleContext {
		public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		public CheckTableOptionContext[] checkTableOption() {
			return GetRuleContexts<CheckTableOptionContext>();
		}
		public CheckTableOptionContext checkTableOption(int i) {
			return GetRuleContext<CheckTableOptionContext>(i);
		}
		public CheckTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCheckTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCheckTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckTableContext checkTable() {
		CheckTableContext _localctx = new CheckTableContext(Context, State);
		EnterRule(_localctx, 420, RULE_checkTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4616; Match(CHECK);
			State = 4617; Match(TABLE);
			State = 4618; tables();
			State = 4622;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FOR || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (CHANGED - 266)) | (1L << (EXTENDED - 266)) | (1L << (FAST - 266)))) != 0) || _la==MEDIUM || _la==QUICK) {
				{
				{
				State = 4619; checkTableOption();
				}
				}
				State = 4624;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecksumTableContext : ParserRuleContext {
		public IToken actionOption;
		public ITerminalNode CHECKSUM() { return GetToken(MySqlParser.CHECKSUM, 0); }
		public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		public ChecksumTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checksumTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChecksumTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChecksumTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecksumTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecksumTableContext checksumTable() {
		ChecksumTableContext _localctx = new ChecksumTableContext(Context, State);
		EnterRule(_localctx, 422, RULE_checksumTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4625; Match(CHECKSUM);
			State = 4626; Match(TABLE);
			State = 4627; tables();
			State = 4629;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED || _la==QUICK) {
				{
				State = 4628;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==EXTENDED || _la==QUICK) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptimizeTableContext : ParserRuleContext {
		public IToken actionOption;
		public ITerminalNode OPTIMIZE() { return GetToken(MySqlParser.OPTIMIZE, 0); }
		public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public OptimizeTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optimizeTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOptimizeTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOptimizeTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptimizeTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptimizeTableContext optimizeTable() {
		OptimizeTableContext _localctx = new OptimizeTableContext(Context, State);
		EnterRule(_localctx, 424, RULE_optimizeTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4631; Match(OPTIMIZE);
			State = 4633;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 4632;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 4635; Match(TABLE);
			State = 4636; tables();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepairTableContext : ParserRuleContext {
		public IToken actionOption;
		public ITerminalNode REPAIR() { return GetToken(MySqlParser.REPAIR, 0); }
		public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		public ITerminalNode USE_FRM() { return GetToken(MySqlParser.USE_FRM, 0); }
		public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public RepairTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repairTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRepairTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRepairTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepairTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepairTableContext repairTable() {
		RepairTableContext _localctx = new RepairTableContext(Context, State);
		EnterRule(_localctx, 426, RULE_repairTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4638; Match(REPAIR);
			State = 4640;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 4639;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 4642; Match(TABLE);
			State = 4643; tables();
			State = 4645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUICK) {
				{
				State = 4644; Match(QUICK);
				}
			}

			State = 4648;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED) {
				{
				State = 4647; Match(EXTENDED);
				}
			}

			State = 4651;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USE_FRM) {
				{
				State = 4650; Match(USE_FRM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckTableOptionContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
		public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		public ITerminalNode FAST() { return GetToken(MySqlParser.FAST, 0); }
		public ITerminalNode MEDIUM() { return GetToken(MySqlParser.MEDIUM, 0); }
		public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		public ITerminalNode CHANGED() { return GetToken(MySqlParser.CHANGED, 0); }
		public CheckTableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkTableOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCheckTableOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCheckTableOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckTableOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckTableOptionContext checkTableOption() {
		CheckTableOptionContext _localctx = new CheckTableOptionContext(Context, State);
		EnterRule(_localctx, 428, RULE_checkTableOption);
		try {
			State = 4660;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4653; Match(FOR);
				State = 4654; Match(UPGRADE);
				}
				break;
			case QUICK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4655; Match(QUICK);
				}
				break;
			case FAST:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4656; Match(FAST);
				}
				break;
			case MEDIUM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4657; Match(MEDIUM);
				}
				break;
			case EXTENDED:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4658; Match(EXTENDED);
				}
				break;
			case CHANGED:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4659; Match(CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUdfunctionContext : ParserRuleContext {
		public IToken returnType;
		public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode RETURNS() { return GetToken(MySqlParser.RETURNS, 0); }
		public ITerminalNode SONAME() { return GetToken(MySqlParser.SONAME, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ITerminalNode STRING() { return GetToken(MySqlParser.STRING, 0); }
		public ITerminalNode INTEGER() { return GetToken(MySqlParser.INTEGER, 0); }
		public ITerminalNode REAL() { return GetToken(MySqlParser.REAL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(MySqlParser.DECIMAL, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(MySqlParser.AGGREGATE, 0); }
		public CreateUdfunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUdfunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateUdfunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateUdfunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUdfunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateUdfunctionContext createUdfunction() {
		CreateUdfunctionContext _localctx = new CreateUdfunctionContext(Context, State);
		EnterRule(_localctx, 430, RULE_createUdfunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4662; Match(CREATE);
			State = 4664;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AGGREGATE) {
				{
				State = 4663; Match(AGGREGATE);
				}
			}

			State = 4666; Match(FUNCTION);
			State = 4667; uid();
			State = 4668; Match(RETURNS);
			State = 4669;
			_localctx.returnType = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 173)) & ~0x3f) == 0 && ((1L << (_la - 173)) & ((1L << (INTEGER - 173)) | (1L << (REAL - 173)) | (1L << (DECIMAL - 173)))) != 0) || _la==STRING) ) {
				_localctx.returnType = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4670; Match(SONAME);
			State = 4671; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstallPluginContext : ParserRuleContext {
		public ITerminalNode INSTALL() { return GetToken(MySqlParser.INSTALL, 0); }
		public ITerminalNode PLUGIN() { return GetToken(MySqlParser.PLUGIN, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode SONAME() { return GetToken(MySqlParser.SONAME, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public InstallPluginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_installPlugin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInstallPlugin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInstallPlugin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstallPlugin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstallPluginContext installPlugin() {
		InstallPluginContext _localctx = new InstallPluginContext(Context, State);
		EnterRule(_localctx, 432, RULE_installPlugin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4673; Match(INSTALL);
			State = 4674; Match(PLUGIN);
			State = 4675; uid();
			State = 4676; Match(SONAME);
			State = 4677; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UninstallPluginContext : ParserRuleContext {
		public ITerminalNode UNINSTALL() { return GetToken(MySqlParser.UNINSTALL, 0); }
		public ITerminalNode PLUGIN() { return GetToken(MySqlParser.PLUGIN, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public UninstallPluginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uninstallPlugin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUninstallPlugin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUninstallPlugin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUninstallPlugin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UninstallPluginContext uninstallPlugin() {
		UninstallPluginContext _localctx = new UninstallPluginContext(Context, State);
		EnterRule(_localctx, 434, RULE_uninstallPlugin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4679; Match(UNINSTALL);
			State = 4680; Match(PLUGIN);
			State = 4681; uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStatementContext : ParserRuleContext {
		public SetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStatement; } }
	 
		public SetStatementContext() { }
		public virtual void CopyFrom(SetStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SetTransactionContext : SetStatementContext {
		public SetTransactionStatementContext setTransactionStatement() {
			return GetRuleContext<SetTransactionStatementContext>(0);
		}
		public SetTransactionContext(SetStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetTransaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetTransaction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetCharsetContext : SetStatementContext {
		public ITerminalNode[] SET() { return GetTokens(MySqlParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(MySqlParser.SET, i);
		}
		public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public SetCharsetContext(SetStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetCharset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetCharset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetCharset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetNamesContext : SetStatementContext {
		public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		public ITerminalNode NAMES() { return GetToken(MySqlParser.NAMES, 0); }
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public SetNamesContext(SetStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetNames(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetNames(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetNames(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetPasswordContext : SetStatementContext {
		public SetPasswordStatementContext setPasswordStatement() {
			return GetRuleContext<SetPasswordStatementContext>(0);
		}
		public SetPasswordContext(SetStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetPassword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetPassword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetPassword(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetAutocommitContext : SetStatementContext {
		public SetAutocommitStatementContext setAutocommitStatement() {
			return GetRuleContext<SetAutocommitStatementContext>(0);
		}
		public SetAutocommitContext(SetStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetAutocommit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetAutocommit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetAutocommit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetVariableContext : SetStatementContext {
		public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		public VariableClauseContext[] variableClause() {
			return GetRuleContexts<VariableClauseContext>();
		}
		public VariableClauseContext variableClause(int i) {
			return GetRuleContext<VariableClauseContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SetVariableContext(SetStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStatementContext setStatement() {
		SetStatementContext _localctx = new SetStatementContext(Context, State);
		EnterRule(_localctx, 436, RULE_setStatement);
		int _la;
		try {
			State = 4720;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,676,Context) ) {
			case 1:
				_localctx = new SetVariableContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4683; Match(SET);
				State = 4684; variableClause();
				State = 4685; Match(EQUAL_SYMBOL);
				State = 4686; expression(0);
				State = 4694;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4687; Match(COMMA);
					State = 4688; variableClause();
					State = 4689; Match(EQUAL_SYMBOL);
					State = 4690; expression(0);
					}
					}
					State = 4696;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SetCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4697; Match(SET);
				State = 4701;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CHARACTER:
					{
					State = 4698; Match(CHARACTER);
					State = 4699; Match(SET);
					}
					break;
				case CHARSET:
					{
					State = 4700; Match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4705;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					State = 4703; charsetName();
					}
					break;
				case DEFAULT:
					{
					State = 4704; Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new SetNamesContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4707; Match(SET);
				State = 4708; Match(NAMES);
				State = 4715;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					State = 4709; charsetName();
					State = 4712;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COLLATE) {
						{
						State = 4710; Match(COLLATE);
						State = 4711; collationName();
						}
					}

					}
					break;
				case DEFAULT:
					{
					State = 4714; Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new SetPasswordContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4717; setPasswordStatement();
				}
				break;
			case 5:
				_localctx = new SetTransactionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 4718; setTransactionStatement();
				}
				break;
			case 6:
				_localctx = new SetAutocommitContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 4719; setAutocommitStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowStatementContext : ParserRuleContext {
		public ShowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showStatement; } }
	 
		public ShowStatementContext() { }
		public virtual void CopyFrom(ShowStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ShowOpenTablesContext : ShowStatementContext {
		public IToken schemaFormat;
		public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
		public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		public ShowOpenTablesContext(ShowStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowOpenTables(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowOpenTables(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowOpenTables(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowGlobalInfoContext : ShowStatementContext {
		public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		public ShowGlobalInfoClauseContext showGlobalInfoClause() {
			return GetRuleContext<ShowGlobalInfoClauseContext>(0);
		}
		public ShowGlobalInfoContext(ShowStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowGlobalInfo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowGlobalInfo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowGlobalInfo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateFullIdObjectContext : ShowStatementContext {
		public IToken namedEntity;
		public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
		public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		public ShowCreateFullIdObjectContext(ShowStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCreateFullIdObject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCreateFullIdObject(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateFullIdObject(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateUserContext : ShowStatementContext {
		public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public ShowCreateUserContext(ShowStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCreateUser(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCreateUser(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateUser(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowErrorsContext : ShowStatementContext {
		public IToken errorFormat;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		public ITerminalNode ERRORS() { return GetToken(MySqlParser.ERRORS, 0); }
		public ITerminalNode WARNINGS() { return GetToken(MySqlParser.WARNINGS, 0); }
		public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		public ShowErrorsContext(ShowStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowErrors(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowErrors(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowErrors(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCountErrorsContext : ShowStatementContext {
		public IToken errorFormat;
		public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		public ITerminalNode COUNT() { return GetToken(MySqlParser.COUNT, 0); }
		public ITerminalNode ERRORS() { return GetToken(MySqlParser.ERRORS, 0); }
		public ITerminalNode WARNINGS() { return GetToken(MySqlParser.WARNINGS, 0); }
		public ShowCountErrorsContext(ShowStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCountErrors(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCountErrors(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCountErrors(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowObjectFilterContext : ShowStatementContext {
		public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		public ShowCommonEntityContext showCommonEntity() {
			return GetRuleContext<ShowCommonEntityContext>(0);
		}
		public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		public ShowObjectFilterContext(ShowStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowObjectFilter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowObjectFilter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowObjectFilter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateDbContext : ShowStatementContext {
		public IToken schemaFormat;
		public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public ShowCreateDbContext(ShowStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCreateDb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCreateDb(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateDb(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowEngineContext : ShowStatementContext {
		public IToken engineOption;
		public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		public ITerminalNode MUTEX() { return GetToken(MySqlParser.MUTEX, 0); }
		public ShowEngineContext(ShowStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowEngine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowEngine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowEngine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowSchemaFilterContext : ShowStatementContext {
		public IToken schemaFormat;
		public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		public ShowSchemaEntityContext showSchemaEntity() {
			return GetRuleContext<ShowSchemaEntityContext>(0);
		}
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		public ShowSchemaFilterContext(ShowStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowSchemaFilter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowSchemaFilter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowSchemaFilter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowIndexesContext : ShowStatementContext {
		public IToken indexFormat;
		public IToken tableFormat;
		public IToken schemaFormat;
		public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		public ITerminalNode INDEXES() { return GetToken(MySqlParser.INDEXES, 0); }
		public ITerminalNode KEYS() { return GetToken(MySqlParser.KEYS, 0); }
		public ITerminalNode[] FROM() { return GetTokens(MySqlParser.FROM); }
		public ITerminalNode FROM(int i) {
			return GetToken(MySqlParser.FROM, i);
		}
		public ITerminalNode[] IN() { return GetTokens(MySqlParser.IN); }
		public ITerminalNode IN(int i) {
			return GetToken(MySqlParser.IN, i);
		}
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ShowIndexesContext(ShowStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowIndexes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowIndexes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowIndexes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowLogEventsContext : ShowStatementContext {
		public IToken logFormat;
		public IToken filename;
		public DecimalLiteralContext fromPosition;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		public ITerminalNode EVENTS() { return GetToken(MySqlParser.EVENTS, 0); }
		public ITerminalNode BINLOG() { return GetToken(MySqlParser.BINLOG, 0); }
		public ITerminalNode RELAYLOG() { return GetToken(MySqlParser.RELAYLOG, 0); }
		public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		public ShowLogEventsContext(ShowStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowLogEvents(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowLogEvents(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowLogEvents(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowMasterLogsContext : ShowStatementContext {
		public IToken logFormat;
		public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		public ShowMasterLogsContext(ShowStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowMasterLogs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowMasterLogs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowMasterLogs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowGrantsContext : ShowStatementContext {
		public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		public ITerminalNode GRANTS() { return GetToken(MySqlParser.GRANTS, 0); }
		public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public ShowGrantsContext(ShowStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowGrants(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowGrants(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowGrants(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowSlaveStatusContext : ShowStatementContext {
		public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		public ITerminalNode CHANNEL() { return GetToken(MySqlParser.CHANNEL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ShowSlaveStatusContext(ShowStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowSlaveStatus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowSlaveStatus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowSlaveStatus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowRoutineContext : ShowStatementContext {
		public IToken routine;
		public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		public ITerminalNode CODE() { return GetToken(MySqlParser.CODE, 0); }
		public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		public ShowRoutineContext(ShowStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowRoutine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowRoutine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowRoutine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowProfileContext : ShowStatementContext {
		public DecimalLiteralContext queryCount;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		public ITerminalNode PROFILE() { return GetToken(MySqlParser.PROFILE, 0); }
		public ShowProfileTypeContext[] showProfileType() {
			return GetRuleContexts<ShowProfileTypeContext>();
		}
		public ShowProfileTypeContext showProfileType(int i) {
			return GetRuleContext<ShowProfileTypeContext>(i);
		}
		public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		public ShowProfileContext(ShowStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowProfile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowProfile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowProfile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowColumnsContext : ShowStatementContext {
		public IToken columnsFormat;
		public IToken tableFormat;
		public IToken schemaFormat;
		public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
		public ITerminalNode[] FROM() { return GetTokens(MySqlParser.FROM); }
		public ITerminalNode FROM(int i) {
			return GetToken(MySqlParser.FROM, i);
		}
		public ITerminalNode[] IN() { return GetTokens(MySqlParser.IN); }
		public ITerminalNode IN(int i) {
			return GetToken(MySqlParser.IN, i);
		}
		public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		public ShowColumnsContext(ShowStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowColumns(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowColumns(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowColumns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowStatementContext showStatement() {
		ShowStatementContext _localctx = new ShowStatementContext(Context, State);
		EnterRule(_localctx, 438, RULE_showStatement);
		int _la;
		try {
			State = 4873;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,698,Context) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4722; Match(SHOW);
				State = 4723;
				((ShowMasterLogsContext)_localctx).logFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BINARY || _la==MASTER) ) {
					((ShowMasterLogsContext)_localctx).logFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4724; Match(LOGS);
				}
				break;
			case 2:
				_localctx = new ShowLogEventsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4725; Match(SHOW);
				State = 4726;
				((ShowLogEventsContext)_localctx).logFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BINLOG || _la==RELAYLOG) ) {
					((ShowLogEventsContext)_localctx).logFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4727; Match(EVENTS);
				State = 4730;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN) {
					{
					State = 4728; Match(IN);
					State = 4729; ((ShowLogEventsContext)_localctx).filename = Match(STRING_LITERAL);
					}
				}

				State = 4734;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 4732; Match(FROM);
					State = 4733; ((ShowLogEventsContext)_localctx).fromPosition = decimalLiteral();
					}
				}

				State = 4743;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 4736; Match(LIMIT);
					State = 4740;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,679,Context) ) {
					case 1:
						{
						State = 4737; ((ShowLogEventsContext)_localctx).offset = decimalLiteral();
						State = 4738; Match(COMMA);
						}
						break;
					}
					State = 4742; ((ShowLogEventsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 3:
				_localctx = new ShowObjectFilterContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4745; Match(SHOW);
				State = 4746; showCommonEntity();
				State = 4748;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 4747; showFilter();
					}
				}

				}
				break;
			case 4:
				_localctx = new ShowColumnsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4750; Match(SHOW);
				State = 4752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL) {
					{
					State = 4751; Match(FULL);
					}
				}

				State = 4754;
				((ShowColumnsContext)_localctx).columnsFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((ShowColumnsContext)_localctx).columnsFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4755;
				((ShowColumnsContext)_localctx).tableFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowColumnsContext)_localctx).tableFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4756; tableName();
				State = 4759;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 4757;
					((ShowColumnsContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowColumnsContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 4758; uid();
					}
				}

				State = 4762;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 4761; showFilter();
					}
				}

				}
				break;
			case 5:
				_localctx = new ShowCreateDbContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 4764; Match(SHOW);
				State = 4765; Match(CREATE);
				State = 4766;
				((ShowCreateDbContext)_localctx).schemaFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((ShowCreateDbContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4768;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 4767; ifNotExists();
					}
				}

				State = 4770; uid();
				}
				break;
			case 6:
				_localctx = new ShowCreateFullIdObjectContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 4771; Match(SHOW);
				State = 4772; Match(CREATE);
				State = 4773;
				((ShowCreateFullIdObjectContext)_localctx).namedEntity = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (PROCEDURE - 111)) | (1L << (TABLE - 111)) | (1L << (TRIGGER - 111)))) != 0) || _la==EVENT || _la==FUNCTION || _la==VIEW) ) {
					((ShowCreateFullIdObjectContext)_localctx).namedEntity = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4774; fullId();
				}
				break;
			case 7:
				_localctx = new ShowCreateUserContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 4775; Match(SHOW);
				State = 4776; Match(CREATE);
				State = 4777; Match(USER);
				State = 4778; userName();
				}
				break;
			case 8:
				_localctx = new ShowEngineContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 4779; Match(SHOW);
				State = 4780; Match(ENGINE);
				State = 4781; engineName();
				State = 4782;
				((ShowEngineContext)_localctx).engineOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MUTEX || _la==STATUS) ) {
					((ShowEngineContext)_localctx).engineOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 9:
				_localctx = new ShowGlobalInfoContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 4784; Match(SHOW);
				State = 4785; showGlobalInfoClause();
				}
				break;
			case 10:
				_localctx = new ShowErrorsContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 4786; Match(SHOW);
				State = 4787;
				((ShowErrorsContext)_localctx).errorFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowErrorsContext)_localctx).errorFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				{
				State = 4788; Match(LIMIT);
				State = 4792;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,686,Context) ) {
				case 1:
					{
					State = 4789; ((ShowErrorsContext)_localctx).offset = decimalLiteral();
					State = 4790; Match(COMMA);
					}
					break;
				}
				State = 4794; ((ShowErrorsContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 11:
				_localctx = new ShowCountErrorsContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 4795; Match(SHOW);
				State = 4796; Match(COUNT);
				State = 4797; Match(LR_BRACKET);
				State = 4798; Match(STAR);
				State = 4799; Match(RR_BRACKET);
				State = 4800;
				((ShowCountErrorsContext)_localctx).errorFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowCountErrorsContext)_localctx).errorFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 12:
				_localctx = new ShowSchemaFilterContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 4801; Match(SHOW);
				State = 4802; showSchemaEntity();
				State = 4805;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 4803;
					((ShowSchemaFilterContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowSchemaFilterContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 4804; uid();
					}
				}

				State = 4808;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 4807; showFilter();
					}
				}

				}
				break;
			case 13:
				_localctx = new ShowRoutineContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 4810; Match(SHOW);
				State = 4811;
				((ShowRoutineContext)_localctx).routine = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PROCEDURE || _la==FUNCTION) ) {
					((ShowRoutineContext)_localctx).routine = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4812; Match(CODE);
				State = 4813; fullId();
				}
				break;
			case 14:
				_localctx = new ShowGrantsContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 4814; Match(SHOW);
				State = 4815; Match(GRANTS);
				State = 4818;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 4816; Match(FOR);
					State = 4817; userName();
					}
				}

				}
				break;
			case 15:
				_localctx = new ShowIndexesContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 4820; Match(SHOW);
				State = 4821;
				((ShowIndexesContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEYS || _la==INDEXES) ) {
					((ShowIndexesContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4822;
				((ShowIndexesContext)_localctx).tableFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4823; tableName();
				State = 4826;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 4824;
					((ShowIndexesContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 4825; uid();
					}
				}

				State = 4830;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 4828; Match(WHERE);
					State = 4829; expression(0);
					}
				}

				}
				break;
			case 16:
				_localctx = new ShowOpenTablesContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 4832; Match(SHOW);
				State = 4833; Match(OPEN);
				State = 4834; Match(TABLES);
				State = 4837;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 4835;
					((ShowOpenTablesContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowOpenTablesContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 4836; uid();
					}
				}

				State = 4840;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 4839; showFilter();
					}
				}

				}
				break;
			case 17:
				_localctx = new ShowProfileContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 4842; Match(SHOW);
				State = 4843; Match(PROFILE);
				State = 4844; showProfileType();
				State = 4849;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4845; Match(COMMA);
					State = 4846; showProfileType();
					}
					}
					State = 4851;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4855;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 4852; Match(FOR);
					State = 4853; Match(QUERY);
					State = 4854; ((ShowProfileContext)_localctx).queryCount = decimalLiteral();
					}
				}

				{
				State = 4857; Match(LIMIT);
				State = 4861;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,696,Context) ) {
				case 1:
					{
					State = 4858; ((ShowProfileContext)_localctx).offset = decimalLiteral();
					State = 4859; Match(COMMA);
					}
					break;
				}
				State = 4863; ((ShowProfileContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 18:
				_localctx = new ShowSlaveStatusContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 4865; Match(SHOW);
				State = 4866; Match(SLAVE);
				State = 4867; Match(STATUS);
				State = 4871;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 4868; Match(FOR);
					State = 4869; Match(CHANNEL);
					State = 4870; Match(STRING_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableClauseContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		public ITerminalNode GLOBAL_ID() { return GetToken(MySqlParser.GLOBAL_ID, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
		public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
		public VariableClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterVariableClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitVariableClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableClauseContext variableClause() {
		VariableClauseContext _localctx = new VariableClauseContext(Context, State);
		EnterRule(_localctx, 440, RULE_variableClause);
		int _la;
		try {
			State = 4885;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4875; Match(LOCAL_ID);
				}
				break;
			case GLOBAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4876; Match(GLOBAL_ID);
				}
				break;
			case DATABASE:
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4882;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,700,Context) ) {
				case 1:
					{
					State = 4879;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AT_SIGN) {
						{
						State = 4877; Match(AT_SIGN);
						State = 4878; Match(AT_SIGN);
						}
					}

					State = 4881;
					_la = TokenStream.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 4884; uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCommonEntityContext : ParserRuleContext {
		public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		public ITerminalNode COLLATION() { return GetToken(MySqlParser.COLLATION, 0); }
		public ITerminalNode DATABASES() { return GetToken(MySqlParser.DATABASES, 0); }
		public ITerminalNode SCHEMAS() { return GetToken(MySqlParser.SCHEMAS, 0); }
		public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		public ITerminalNode VARIABLES() { return GetToken(MySqlParser.VARIABLES, 0); }
		public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
		public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
		public ShowCommonEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCommonEntity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCommonEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCommonEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCommonEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowCommonEntityContext showCommonEntity() {
		ShowCommonEntityContext _localctx = new ShowCommonEntityContext(Context, State);
		EnterRule(_localctx, 442, RULE_showCommonEntity);
		int _la;
		try {
			State = 4900;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHARACTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4887; Match(CHARACTER);
				State = 4888; Match(SET);
				}
				break;
			case COLLATION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4889; Match(COLLATION);
				}
				break;
			case DATABASES:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4890; Match(DATABASES);
				}
				break;
			case SCHEMAS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4891; Match(SCHEMAS);
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4892; Match(FUNCTION);
				State = 4893; Match(STATUS);
				}
				break;
			case PROCEDURE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4894; Match(PROCEDURE);
				State = 4895; Match(STATUS);
				}
				break;
			case GLOBAL:
			case SESSION:
			case STATUS:
			case VARIABLES:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL || _la==SESSION) {
					{
					State = 4896;
					_la = TokenStream.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 4899;
				_la = TokenStream.LA(1);
				if ( !(_la==STATUS || _la==VARIABLES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowFilterContext : ParserRuleContext {
		public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ShowFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showFilter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowFilter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowFilter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowFilterContext showFilter() {
		ShowFilterContext _localctx = new ShowFilterContext(Context, State);
		EnterRule(_localctx, 444, RULE_showFilter);
		try {
			State = 4906;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIKE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4902; Match(LIKE);
				State = 4903; Match(STRING_LITERAL);
				}
				break;
			case WHERE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4904; Match(WHERE);
				State = 4905; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowGlobalInfoClauseContext : ParserRuleContext {
		public ITerminalNode ENGINES() { return GetToken(MySqlParser.ENGINES, 0); }
		public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		public ITerminalNode PLUGINS() { return GetToken(MySqlParser.PLUGINS, 0); }
		public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		public ITerminalNode PROCESSLIST() { return GetToken(MySqlParser.PROCESSLIST, 0); }
		public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		public ITerminalNode PROFILES() { return GetToken(MySqlParser.PROFILES, 0); }
		public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		public ITerminalNode HOSTS() { return GetToken(MySqlParser.HOSTS, 0); }
		public ITerminalNode AUTHORS() { return GetToken(MySqlParser.AUTHORS, 0); }
		public ITerminalNode CONTRIBUTORS() { return GetToken(MySqlParser.CONTRIBUTORS, 0); }
		public ShowGlobalInfoClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showGlobalInfoClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowGlobalInfoClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowGlobalInfoClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowGlobalInfoClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowGlobalInfoClauseContext showGlobalInfoClause() {
		ShowGlobalInfoClauseContext _localctx = new ShowGlobalInfoClauseContext(Context, State);
		EnterRule(_localctx, 446, RULE_showGlobalInfoClause);
		int _la;
		try {
			State = 4925;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENGINES:
			case STORAGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4909;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORAGE) {
					{
					State = 4908; Match(STORAGE);
					}
				}

				State = 4911; Match(ENGINES);
				}
				break;
			case MASTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4912; Match(MASTER);
				State = 4913; Match(STATUS);
				}
				break;
			case PLUGINS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4914; Match(PLUGINS);
				}
				break;
			case PRIVILEGES:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4915; Match(PRIVILEGES);
				}
				break;
			case FULL:
			case PROCESSLIST:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4917;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL) {
					{
					State = 4916; Match(FULL);
					}
				}

				State = 4919; Match(PROCESSLIST);
				}
				break;
			case PROFILES:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4920; Match(PROFILES);
				}
				break;
			case SLAVE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4921; Match(SLAVE);
				State = 4922; Match(HOSTS);
				}
				break;
			case AUTHORS:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4923; Match(AUTHORS);
				}
				break;
			case CONTRIBUTORS:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4924; Match(CONTRIBUTORS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowSchemaEntityContext : ParserRuleContext {
		public ITerminalNode EVENTS() { return GetToken(MySqlParser.EVENTS, 0); }
		public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		public ITerminalNode TRIGGERS() { return GetToken(MySqlParser.TRIGGERS, 0); }
		public ShowSchemaEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showSchemaEntity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowSchemaEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowSchemaEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowSchemaEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowSchemaEntityContext showSchemaEntity() {
		ShowSchemaEntityContext _localctx = new ShowSchemaEntityContext(Context, State);
		EnterRule(_localctx, 448, RULE_showSchemaEntity);
		int _la;
		try {
			State = 4935;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EVENTS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4927; Match(EVENTS);
				}
				break;
			case TABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4928; Match(TABLE);
				State = 4929; Match(STATUS);
				}
				break;
			case FULL:
			case TABLES:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4931;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL) {
					{
					State = 4930; Match(FULL);
					}
				}

				State = 4933; Match(TABLES);
				}
				break;
			case TRIGGERS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4934; Match(TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowProfileTypeContext : ParserRuleContext {
		public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public ITerminalNode BLOCK() { return GetToken(MySqlParser.BLOCK, 0); }
		public ITerminalNode IO() { return GetToken(MySqlParser.IO, 0); }
		public ITerminalNode CONTEXT() { return GetToken(MySqlParser.CONTEXT, 0); }
		public ITerminalNode SWITCHES() { return GetToken(MySqlParser.SWITCHES, 0); }
		public ITerminalNode CPU() { return GetToken(MySqlParser.CPU, 0); }
		public ITerminalNode IPC() { return GetToken(MySqlParser.IPC, 0); }
		public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		public ITerminalNode PAGE() { return GetToken(MySqlParser.PAGE, 0); }
		public ITerminalNode FAULTS() { return GetToken(MySqlParser.FAULTS, 0); }
		public ITerminalNode SOURCE() { return GetToken(MySqlParser.SOURCE, 0); }
		public ITerminalNode SWAPS() { return GetToken(MySqlParser.SWAPS, 0); }
		public ShowProfileTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showProfileType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowProfileType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowProfileType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowProfileType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowProfileTypeContext showProfileType() {
		ShowProfileTypeContext _localctx = new ShowProfileTypeContext(Context, State);
		EnterRule(_localctx, 450, RULE_showProfileType);
		try {
			State = 4949;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4937; Match(ALL);
				}
				break;
			case BLOCK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4938; Match(BLOCK);
				State = 4939; Match(IO);
				}
				break;
			case CONTEXT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4940; Match(CONTEXT);
				State = 4941; Match(SWITCHES);
				}
				break;
			case CPU:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4942; Match(CPU);
				}
				break;
			case IPC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4943; Match(IPC);
				}
				break;
			case MEMORY:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4944; Match(MEMORY);
				}
				break;
			case PAGE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4945; Match(PAGE);
				State = 4946; Match(FAULTS);
				}
				break;
			case SOURCE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4947; Match(SOURCE);
				}
				break;
			case SWAPS:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4948; Match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinlogStatementContext : ParserRuleContext {
		public ITerminalNode BINLOG() { return GetToken(MySqlParser.BINLOG, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public BinlogStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binlogStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBinlogStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBinlogStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinlogStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinlogStatementContext binlogStatement() {
		BinlogStatementContext _localctx = new BinlogStatementContext(Context, State);
		EnterRule(_localctx, 452, RULE_binlogStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4951; Match(BINLOG);
			State = 4952; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CacheIndexStatementContext : ParserRuleContext {
		public UidContext schema;
		public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		public TableIndexesContext[] tableIndexes() {
			return GetRuleContexts<TableIndexesContext>();
		}
		public TableIndexesContext tableIndexes(int i) {
			return GetRuleContext<TableIndexesContext>(i);
		}
		public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public CacheIndexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cacheIndexStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCacheIndexStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCacheIndexStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCacheIndexStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CacheIndexStatementContext cacheIndexStatement() {
		CacheIndexStatementContext _localctx = new CacheIndexStatementContext(Context, State);
		EnterRule(_localctx, 454, RULE_cacheIndexStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4954; Match(CACHE);
			State = 4955; Match(INDEX);
			State = 4956; tableIndexes();
			State = 4961;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4957; Match(COMMA);
				State = 4958; tableIndexes();
				}
				}
				State = 4963;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4971;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 4964; Match(PARTITION);
				State = 4965; Match(LR_BRACKET);
				State = 4968;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DATABASE:
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHANNEL:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FOLLOWS:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 4966; uidList();
					}
					break;
				case ALL:
					{
					State = 4967; Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4970; Match(RR_BRACKET);
				}
			}

			State = 4973; Match(IN);
			State = 4974; _localctx.schema = uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushStatementContext : ParserRuleContext {
		public IToken flushFormat;
		public ITerminalNode FLUSH() { return GetToken(MySqlParser.FLUSH, 0); }
		public FlushOptionContext[] flushOption() {
			return GetRuleContexts<FlushOptionContext>();
		}
		public FlushOptionContext flushOption(int i) {
			return GetRuleContext<FlushOptionContext>(i);
		}
		public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public FlushStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFlushStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFlushStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlushStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlushStatementContext flushStatement() {
		FlushStatementContext _localctx = new FlushStatementContext(Context, State);
		EnterRule(_localctx, 456, RULE_flushStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4976; Match(FLUSH);
			State = 4978;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 4977;
				_localctx.flushFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.flushFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 4980; flushOption();
			State = 4985;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4981; Match(COMMA);
				State = 4982; flushOption();
				}
				}
				State = 4987;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KillStatementContext : ParserRuleContext {
		public IToken connectionFormat;
		public ITerminalNode KILL() { return GetToken(MySqlParser.KILL, 0); }
		public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
		public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		public KillStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_killStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKillStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKillStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKillStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KillStatementContext killStatement() {
		KillStatementContext _localctx = new KillStatementContext(Context, State);
		EnterRule(_localctx, 458, RULE_killStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4988; Match(KILL);
			State = 4990;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONNECTION || _la==QUERY) {
				{
				State = 4989;
				_localctx.connectionFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CONNECTION || _la==QUERY) ) {
					_localctx.connectionFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 4993;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4992; decimalLiteral();
				}
				}
				State = 4995;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 950)) & ~0x3f) == 0 && ((1L << (_la - 950)) & ((1L << (ZERO_DECIMAL - 950)) | (1L << (ONE_DECIMAL - 950)) | (1L << (TWO_DECIMAL - 950)) | (1L << (DECIMAL_LITERAL - 950)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadIndexIntoCacheContext : ParserRuleContext {
		public ITerminalNode LOAD() { return GetToken(MySqlParser.LOAD, 0); }
		public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		public LoadedTableIndexesContext[] loadedTableIndexes() {
			return GetRuleContexts<LoadedTableIndexesContext>();
		}
		public LoadedTableIndexesContext loadedTableIndexes(int i) {
			return GetRuleContext<LoadedTableIndexesContext>(i);
		}
		public LoadIndexIntoCacheContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadIndexIntoCache; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadIndexIntoCache(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadIndexIntoCache(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadIndexIntoCache(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadIndexIntoCacheContext loadIndexIntoCache() {
		LoadIndexIntoCacheContext _localctx = new LoadIndexIntoCacheContext(Context, State);
		EnterRule(_localctx, 460, RULE_loadIndexIntoCache);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4997; Match(LOAD);
			State = 4998; Match(INDEX);
			State = 4999; Match(INTO);
			State = 5000; Match(CACHE);
			State = 5001; loadedTableIndexes();
			State = 5006;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5002; Match(COMMA);
				State = 5003; loadedTableIndexes();
				}
				}
				State = 5008;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStatementContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
		public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		public ResetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResetStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResetStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStatementContext resetStatement() {
		ResetStatementContext _localctx = new ResetStatementContext(Context, State);
		EnterRule(_localctx, 462, RULE_resetStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5009; Match(RESET);
			State = 5010; Match(QUERY);
			State = 5011; Match(CACHE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShutdownStatementContext : ParserRuleContext {
		public ITerminalNode SHUTDOWN() { return GetToken(MySqlParser.SHUTDOWN, 0); }
		public ShutdownStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shutdownStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShutdownStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShutdownStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShutdownStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShutdownStatementContext shutdownStatement() {
		ShutdownStatementContext _localctx = new ShutdownStatementContext(Context, State);
		EnterRule(_localctx, 464, RULE_shutdownStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5013; Match(SHUTDOWN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableIndexesContext : ParserRuleContext {
		public IToken indexFormat;
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public TableIndexesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableIndexes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableIndexes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableIndexes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableIndexes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableIndexesContext tableIndexes() {
		TableIndexesContext _localctx = new TableIndexesContext(Context, State);
		EnterRule(_localctx, 466, RULE_tableIndexes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5015; tableName();
			State = 5023;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX || _la==KEY || _la==LR_BRACKET) {
				{
				State = 5017;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 5016;
					_localctx.indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						_localctx.indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 5019; Match(LR_BRACKET);
				State = 5020; uidList();
				State = 5021; Match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushOptionContext : ParserRuleContext {
		public FlushOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushOption; } }
	 
		public FlushOptionContext() { }
		public virtual void CopyFrom(FlushOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TableFlushOptionContext : FlushOptionContext {
		public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		public FlushTableOptionContext flushTableOption() {
			return GetRuleContext<FlushTableOptionContext>(0);
		}
		public TableFlushOptionContext(FlushOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableFlushOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableFlushOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableFlushOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ChannelFlushOptionContext : FlushOptionContext {
		public ITerminalNode RELAY() { return GetToken(MySqlParser.RELAY, 0); }
		public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		public ChannelFlushOptionContext(FlushOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChannelFlushOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChannelFlushOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelFlushOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleFlushOptionContext : FlushOptionContext {
		public ITerminalNode DES_KEY_FILE() { return GetToken(MySqlParser.DES_KEY_FILE, 0); }
		public ITerminalNode HOSTS() { return GetToken(MySqlParser.HOSTS, 0); }
		public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		public ITerminalNode OPTIMIZER_COSTS() { return GetToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		public ITerminalNode USER_RESOURCES() { return GetToken(MySqlParser.USER_RESOURCES, 0); }
		public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		public ITerminalNode ERROR() { return GetToken(MySqlParser.ERROR, 0); }
		public ITerminalNode GENERAL() { return GetToken(MySqlParser.GENERAL, 0); }
		public ITerminalNode RELAY() { return GetToken(MySqlParser.RELAY, 0); }
		public ITerminalNode SLOW() { return GetToken(MySqlParser.SLOW, 0); }
		public SimpleFlushOptionContext(FlushOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleFlushOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleFlushOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleFlushOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlushOptionContext flushOption() {
		FlushOptionContext _localctx = new FlushOptionContext(Context, State);
		EnterRule(_localctx, 468, RULE_flushOption);
		int _la;
		try {
			State = 5055;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,726,Context) ) {
			case 1:
				_localctx = new SimpleFlushOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5043;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DES_KEY_FILE:
					{
					State = 5025; Match(DES_KEY_FILE);
					}
					break;
				case HOSTS:
					{
					State = 5026; Match(HOSTS);
					}
					break;
				case BINARY:
				case ENGINE:
				case ERROR:
				case GENERAL:
				case LOGS:
				case RELAY:
				case SLOW:
					{
					State = 5028;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BINARY || ((((_la - 309)) & ~0x3f) == 0 && ((1L << (_la - 309)) & ((1L << (ENGINE - 309)) | (1L << (ERROR - 309)) | (1L << (GENERAL - 309)))) != 0) || _la==RELAY || _la==SLOW) {
						{
						State = 5027;
						_la = TokenStream.LA(1);
						if ( !(_la==BINARY || ((((_la - 309)) & ~0x3f) == 0 && ((1L << (_la - 309)) & ((1L << (ENGINE - 309)) | (1L << (ERROR - 309)) | (1L << (GENERAL - 309)))) != 0) || _la==RELAY || _la==SLOW) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 5030; Match(LOGS);
					}
					break;
				case OPTIMIZER_COSTS:
					{
					State = 5031; Match(OPTIMIZER_COSTS);
					}
					break;
				case PRIVILEGES:
					{
					State = 5032; Match(PRIVILEGES);
					}
					break;
				case QUERY:
					{
					State = 5033; Match(QUERY);
					State = 5034; Match(CACHE);
					}
					break;
				case STATUS:
					{
					State = 5035; Match(STATUS);
					}
					break;
				case USER_RESOURCES:
					{
					State = 5036; Match(USER_RESOURCES);
					}
					break;
				case TABLES:
					{
					State = 5037; Match(TABLES);
					State = 5041;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WITH) {
						{
						State = 5038; Match(WITH);
						State = 5039; Match(READ);
						State = 5040; Match(LOCK);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new ChannelFlushOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5045; Match(RELAY);
				State = 5046; Match(LOGS);
				State = 5048;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 5047; channelOption();
					}
				}

				}
				break;
			case 3:
				_localctx = new TableFlushOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5050; Match(TABLES);
				State = 5051; tables();
				State = 5053;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR || _la==WITH) {
					{
					State = 5052; flushTableOption();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushTableOptionContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		public ITerminalNode EXPORT() { return GetToken(MySqlParser.EXPORT, 0); }
		public FlushTableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushTableOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFlushTableOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFlushTableOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlushTableOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlushTableOptionContext flushTableOption() {
		FlushTableOptionContext _localctx = new FlushTableOptionContext(Context, State);
		EnterRule(_localctx, 470, RULE_flushTableOption);
		try {
			State = 5062;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5057; Match(WITH);
				State = 5058; Match(READ);
				State = 5059; Match(LOCK);
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5060; Match(FOR);
				State = 5061; Match(EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadedTableIndexesContext : ParserRuleContext {
		public UidListContext partitionList;
		public IToken indexFormat;
		public UidListContext indexList;
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		public ITerminalNode LEAVES() { return GetToken(MySqlParser.LEAVES, 0); }
		public UidListContext[] uidList() {
			return GetRuleContexts<UidListContext>();
		}
		public UidListContext uidList(int i) {
			return GetRuleContext<UidListContext>(i);
		}
		public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public LoadedTableIndexesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadedTableIndexes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadedTableIndexes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadedTableIndexes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadedTableIndexes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadedTableIndexesContext loadedTableIndexes() {
		LoadedTableIndexesContext _localctx = new LoadedTableIndexesContext(Context, State);
		EnterRule(_localctx, 472, RULE_loadedTableIndexes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5064; tableName();
			State = 5072;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 5065; Match(PARTITION);
				State = 5066; Match(LR_BRACKET);
				State = 5069;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DATABASE:
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHANNEL:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FOLLOWS:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 5067; _localctx.partitionList = uidList();
					}
					break;
				case ALL:
					{
					State = 5068; Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5071; Match(RR_BRACKET);
				}
			}

			State = 5081;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX || _la==KEY || _la==LR_BRACKET) {
				{
				State = 5075;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 5074;
					_localctx.indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						_localctx.indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 5077; Match(LR_BRACKET);
				State = 5078; _localctx.indexList = uidList();
				State = 5079; Match(RR_BRACKET);
				}
			}

			State = 5085;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 5083; Match(IGNORE);
				State = 5084; Match(LEAVES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleDescribeStatementContext : ParserRuleContext {
		public IToken command;
		public UidContext column;
		public IToken pattern;
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode EXPLAIN() { return GetToken(MySqlParser.EXPLAIN, 0); }
		public ITerminalNode DESCRIBE() { return GetToken(MySqlParser.DESCRIBE, 0); }
		public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public SimpleDescribeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleDescribeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleDescribeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleDescribeStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleDescribeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleDescribeStatementContext simpleDescribeStatement() {
		SimpleDescribeStatementContext _localctx = new SimpleDescribeStatementContext(Context, State);
		EnterRule(_localctx, 474, RULE_simpleDescribeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5087;
			_localctx.command = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				_localctx.command = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5088; tableName();
			State = 5091;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				State = 5089; _localctx.column = uid();
				}
				break;
			case STRING_LITERAL:
				{
				State = 5090; _localctx.pattern = Match(STRING_LITERAL);
				}
				break;
			case Eof:
			case MINUSMINUS:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullDescribeStatementContext : ParserRuleContext {
		public IToken command;
		public IToken formatType;
		public IToken formatValue;
		public DescribeObjectClauseContext describeObjectClause() {
			return GetRuleContext<DescribeObjectClauseContext>(0);
		}
		public ITerminalNode EXPLAIN() { return GetToken(MySqlParser.EXPLAIN, 0); }
		public ITerminalNode DESCRIBE() { return GetToken(MySqlParser.DESCRIBE, 0); }
		public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		public ITerminalNode PARTITIONS() { return GetToken(MySqlParser.PARTITIONS, 0); }
		public ITerminalNode FORMAT() { return GetToken(MySqlParser.FORMAT, 0); }
		public ITerminalNode TRADITIONAL() { return GetToken(MySqlParser.TRADITIONAL, 0); }
		public ITerminalNode JSON() { return GetToken(MySqlParser.JSON, 0); }
		public FullDescribeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullDescribeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFullDescribeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFullDescribeStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullDescribeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullDescribeStatementContext fullDescribeStatement() {
		FullDescribeStatementContext _localctx = new FullDescribeStatementContext(Context, State);
		EnterRule(_localctx, 476, RULE_fullDescribeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5093;
			_localctx.command = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				_localctx.command = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5097;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) {
				{
				State = 5094;
				_localctx.formatType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) ) {
					_localctx.formatType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5095; Match(EQUAL_SYMBOL);
				State = 5096;
				_localctx.formatValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==JSON || _la==TRADITIONAL) ) {
					_localctx.formatValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5099; describeObjectClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HelpStatementContext : ParserRuleContext {
		public ITerminalNode HELP() { return GetToken(MySqlParser.HELP, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public HelpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_helpStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHelpStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHelpStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHelpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HelpStatementContext helpStatement() {
		HelpStatementContext _localctx = new HelpStatementContext(Context, State);
		EnterRule(_localctx, 478, RULE_helpStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5101; Match(HELP);
			State = 5102; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseStatementContext : ParserRuleContext {
		public ITerminalNode USE() { return GetToken(MySqlParser.USE, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public UseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseStatementContext useStatement() {
		UseStatementContext _localctx = new UseStatementContext(Context, State);
		EnterRule(_localctx, 480, RULE_useStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5104; Match(USE);
			State = 5105; uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescribeObjectClauseContext : ParserRuleContext {
		public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_describeObjectClause; } }
	 
		public DescribeObjectClauseContext() { }
		public virtual void CopyFrom(DescribeObjectClauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DescribeStatementsContext : DescribeObjectClauseContext {
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		public ReplaceStatementContext replaceStatement() {
			return GetRuleContext<ReplaceStatementContext>(0);
		}
		public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		public DescribeStatementsContext(DescribeObjectClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDescribeStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDescribeStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescribeStatements(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DescribeConnectionContext : DescribeObjectClauseContext {
		public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DescribeConnectionContext(DescribeObjectClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDescribeConnection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDescribeConnection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescribeConnection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescribeObjectClauseContext describeObjectClause() {
		DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(Context, State);
		EnterRule(_localctx, 482, RULE_describeObjectClause);
		try {
			State = 5117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DELETE:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				_localctx = new DescribeStatementsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5112;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SELECT:
				case LR_BRACKET:
					{
					State = 5107; selectStatement();
					}
					break;
				case DELETE:
					{
					State = 5108; deleteStatement();
					}
					break;
				case INSERT:
					{
					State = 5109; insertStatement();
					}
					break;
				case REPLACE:
					{
					State = 5110; replaceStatement();
					}
					break;
				case UPDATE:
					{
					State = 5111; updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5114; Match(FOR);
				State = 5115; Match(CONNECTION);
				State = 5116; uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullIdContext : ParserRuleContext {
		public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public ITerminalNode DOT_ID() { return GetToken(MySqlParser.DOT_ID, 0); }
		public FullIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFullId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFullId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullIdContext fullId() {
		FullIdContext _localctx = new FullIdContext(Context, State);
		EnterRule(_localctx, 484, RULE_fullId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5119; uid();
			State = 5123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,737,Context) ) {
			case 1:
				{
				State = 5120; Match(DOT_ID);
				}
				break;
			case 2:
				{
				State = 5121; Match(DOT);
				State = 5122; uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableNameContext : ParserRuleContext {
		public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableNameContext tableName() {
		TableNameContext _localctx = new TableNameContext(Context, State);
		EnterRule(_localctx, 486, RULE_tableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5125; fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullColumnNameContext : ParserRuleContext {
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DottedIdContext[] dottedId() {
			return GetRuleContexts<DottedIdContext>();
		}
		public DottedIdContext dottedId(int i) {
			return GetRuleContext<DottedIdContext>(i);
		}
		public FullColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullColumnName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFullColumnName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFullColumnName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullColumnNameContext fullColumnName() {
		FullColumnNameContext _localctx = new FullColumnNameContext(Context, State);
		EnterRule(_localctx, 488, RULE_fullColumnName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5127; uid();
			State = 5132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,739,Context) ) {
			case 1:
				{
				State = 5128; dottedId();
				State = 5130;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,738,Context) ) {
				case 1:
					{
					State = 5129; dottedId();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexColumnNameContext : ParserRuleContext {
		public IToken sortType;
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		public IndexColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexColumnName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexColumnName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexColumnName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexColumnNameContext indexColumnName() {
		IndexColumnNameContext _localctx = new IndexColumnNameContext(Context, State);
		EnterRule(_localctx, 490, RULE_indexColumnName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5134; uid();
			State = 5139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 5135; Match(LR_BRACKET);
				State = 5136; decimalLiteral();
				State = 5137; Match(RR_BRACKET);
				}
			}

			State = 5142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 5141;
				_localctx.sortType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					_localctx.sortType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserNameContext : ParserRuleContext {
		public ITerminalNode STRING_USER_NAME() { return GetToken(MySqlParser.STRING_USER_NAME, 0); }
		public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		public UserNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserNameContext userName() {
		UserNameContext _localctx = new UserNameContext(Context, State);
		EnterRule(_localctx, 492, RULE_userName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5144;
			_la = TokenStream.LA(1);
			if ( !(_la==ID || _la==STRING_USER_NAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MysqlVariableContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		public ITerminalNode GLOBAL_ID() { return GetToken(MySqlParser.GLOBAL_ID, 0); }
		public MysqlVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mysqlVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMysqlVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMysqlVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMysqlVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MysqlVariableContext mysqlVariable() {
		MysqlVariableContext _localctx = new MysqlVariableContext(Context, State);
		EnterRule(_localctx, 494, RULE_mysqlVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5146;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_ID || _la==GLOBAL_ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetNameContext : ParserRuleContext {
		public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return GetRuleContext<CharsetNameBaseContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ITerminalNode CHARSET_REVERSE_QOUTE_STRING() { return GetToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCharsetName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCharsetName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharsetName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharsetNameContext charsetName() {
		CharsetNameContext _localctx = new CharsetNameContext(Context, State);
		EnterRule(_localctx, 496, RULE_charsetName);
		try {
			State = 5152;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5148; Match(BINARY);
				}
				break;
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5149; charsetNameBase();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5150; Match(STRING_LITERAL);
				}
				break;
			case CHARSET_REVERSE_QOUTE_STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5151; Match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollationNameContext : ParserRuleContext {
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collationName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCollationName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCollationName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollationNameContext collationName() {
		CollationNameContext _localctx = new CollationNameContext(Context, State);
		EnterRule(_localctx, 498, RULE_collationName);
		try {
			State = 5156;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5154; uid();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5155; Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EngineNameContext : ParserRuleContext {
		public ITerminalNode ARCHIVE() { return GetToken(MySqlParser.ARCHIVE, 0); }
		public ITerminalNode BLACKHOLE() { return GetToken(MySqlParser.BLACKHOLE, 0); }
		public ITerminalNode CSV() { return GetToken(MySqlParser.CSV, 0); }
		public ITerminalNode FEDERATED() { return GetToken(MySqlParser.FEDERATED, 0); }
		public ITerminalNode INNODB() { return GetToken(MySqlParser.INNODB, 0); }
		public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		public ITerminalNode MRG_MYISAM() { return GetToken(MySqlParser.MRG_MYISAM, 0); }
		public ITerminalNode MYISAM() { return GetToken(MySqlParser.MYISAM, 0); }
		public ITerminalNode NDB() { return GetToken(MySqlParser.NDB, 0); }
		public ITerminalNode NDBCLUSTER() { return GetToken(MySqlParser.NDBCLUSTER, 0); }
		public ITerminalNode PERFOMANCE_SCHEMA() { return GetToken(MySqlParser.PERFOMANCE_SCHEMA, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_engineName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterEngineName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitEngineName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEngineName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EngineNameContext engineName() {
		EngineNameContext _localctx = new EngineNameContext(Context, State);
		EnterRule(_localctx, 500, RULE_engineName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5158;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 607)) & ~0x3f) == 0 && ((1L << (_la - 607)) & ((1L << (ARCHIVE - 607)) | (1L << (BLACKHOLE - 607)) | (1L << (CSV - 607)) | (1L << (FEDERATED - 607)) | (1L << (INNODB - 607)) | (1L << (MEMORY - 607)) | (1L << (MRG_MYISAM - 607)) | (1L << (MYISAM - 607)) | (1L << (NDB - 607)) | (1L << (NDBCLUSTER - 607)) | (1L << (PERFOMANCE_SCHEMA - 607)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UuidSetContext : ParserRuleContext {
		public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		public UuidSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uuidSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUuidSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUuidSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUuidSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UuidSetContext uuidSet() {
		UuidSetContext _localctx = new UuidSetContext(Context, State);
		EnterRule(_localctx, 502, RULE_uuidSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5160; decimalLiteral();
			State = 5161; Match(MINUS);
			State = 5162; decimalLiteral();
			State = 5163; Match(MINUS);
			State = 5164; decimalLiteral();
			State = 5165; Match(MINUS);
			State = 5166; decimalLiteral();
			State = 5167; Match(MINUS);
			State = 5168; decimalLiteral();
			State = 5174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5169; Match(COLON_SYMB);
				State = 5170; decimalLiteral();
				State = 5171; Match(MINUS);
				State = 5172; decimalLiteral();
				}
				}
				State = 5176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COLON_SYMB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XidContext : ParserRuleContext {
		public XuidStringIdContext globalTableUid;
		public XuidStringIdContext qualifier;
		public DecimalLiteralContext idFormat;
		public XuidStringIdContext[] xuidStringId() {
			return GetRuleContexts<XuidStringIdContext>();
		}
		public XuidStringIdContext xuidStringId(int i) {
			return GetRuleContext<XuidStringIdContext>(i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public XidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XidContext xid() {
		XidContext _localctx = new XidContext(Context, State);
		EnterRule(_localctx, 504, RULE_xid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5178; _localctx.globalTableUid = xuidStringId();
			State = 5185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 5179; Match(COMMA);
				State = 5180; _localctx.qualifier = xuidStringId();
				State = 5183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5181; Match(COMMA);
					State = 5182; _localctx.idFormat = decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XuidStringIdContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ITerminalNode BIT_STRING() { return GetToken(MySqlParser.BIT_STRING, 0); }
		public ITerminalNode[] HEXADECIMAL_LITERAL() { return GetTokens(MySqlParser.HEXADECIMAL_LITERAL); }
		public ITerminalNode HEXADECIMAL_LITERAL(int i) {
			return GetToken(MySqlParser.HEXADECIMAL_LITERAL, i);
		}
		public XuidStringIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xuidStringId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXuidStringId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXuidStringId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXuidStringId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XuidStringIdContext xuidStringId() {
		XuidStringIdContext _localctx = new XuidStringIdContext(Context, State);
		EnterRule(_localctx, 506, RULE_xuidStringId);
		int _la;
		try {
			State = 5194;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5187; Match(STRING_LITERAL);
				}
				break;
			case BIT_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5188; Match(BIT_STRING);
				}
				break;
			case HEXADECIMAL_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 5189; Match(HEXADECIMAL_LITERAL);
					}
					}
					State = 5192;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==HEXADECIMAL_LITERAL );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AuthPluginContext : ParserRuleContext {
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public AuthPluginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_authPlugin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAuthPlugin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAuthPlugin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAuthPlugin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AuthPluginContext authPlugin() {
		AuthPluginContext _localctx = new AuthPluginContext(Context, State);
		EnterRule(_localctx, 508, RULE_authPlugin);
		try {
			State = 5198;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case ID:
			case REVERSE_QUOTE_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5196; uid();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5197; Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UidContext : ParserRuleContext {
		public SimpleIdContext simpleId() {
			return GetRuleContext<SimpleIdContext>(0);
		}
		public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public ITerminalNode CHARSET_REVERSE_QOUTE_STRING() { return GetToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public UidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UidContext uid() {
		UidContext _localctx = new UidContext(Context, State);
		EnterRule(_localctx, 510, RULE_uid);
		try {
			State = 5203;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5200; simpleId();
				}
				break;
			case REVERSE_QUOTE_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5201; Match(REVERSE_QUOTE_ID);
				}
				break;
			case CHARSET_REVERSE_QOUTE_STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5202; Match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleIdContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return GetRuleContext<CharsetNameBaseContext>(0);
		}
		public TransactionLevelBaseContext transactionLevelBase() {
			return GetRuleContext<TransactionLevelBaseContext>(0);
		}
		public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		public PrivilegesBaseContext privilegesBase() {
			return GetRuleContext<PrivilegesBaseContext>(0);
		}
		public IntervalTypeBaseContext intervalTypeBase() {
			return GetRuleContext<IntervalTypeBaseContext>(0);
		}
		public DataTypeBaseContext dataTypeBase() {
			return GetRuleContext<DataTypeBaseContext>(0);
		}
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return GetRuleContext<KeywordsCanBeIdContext>(0);
		}
		public FunctionNameBaseContext functionNameBase() {
			return GetRuleContext<FunctionNameBaseContext>(0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleIdContext simpleId() {
		SimpleIdContext _localctx = new SimpleIdContext(Context, State);
		EnterRule(_localctx, 512, RULE_simpleId);
		try {
			State = 5214;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,751,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5205; Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5206; charsetNameBase();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5207; transactionLevelBase();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5208; engineName();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5209; privilegesBase();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5210; intervalTypeBase();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5211; dataTypeBase();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5212; keywordsCanBeId();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5213; functionNameBase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DottedIdContext : ParserRuleContext {
		public ITerminalNode DOT_ID() { return GetToken(MySqlParser.DOT_ID, 0); }
		public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DottedIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dottedId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDottedId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDottedId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDottedId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DottedIdContext dottedId() {
		DottedIdContext _localctx = new DottedIdContext(Context, State);
		EnterRule(_localctx, 514, RULE_dottedId);
		try {
			State = 5219;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5216; Match(DOT_ID);
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5217; Match(DOT);
				State = 5218; uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(MySqlParser.DECIMAL_LITERAL, 0); }
		public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		public ITerminalNode TWO_DECIMAL() { return GetToken(MySqlParser.TWO_DECIMAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 516, RULE_decimalLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5221;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 950)) & ~0x3f) == 0 && ((1L << (_la - 950)) & ((1L << (ZERO_DECIMAL - 950)) | (1L << (ONE_DECIMAL - 950)) | (1L << (TWO_DECIMAL - 950)) | (1L << (DECIMAL_LITERAL - 950)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileSizeLiteralContext : ParserRuleContext {
		public ITerminalNode FILESIZE_LITERAL() { return GetToken(MySqlParser.FILESIZE_LITERAL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public FileSizeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileSizeLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFileSizeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFileSizeLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileSizeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileSizeLiteralContext fileSizeLiteral() {
		FileSizeLiteralContext _localctx = new FileSizeLiteralContext(Context, State);
		EnterRule(_localctx, 518, RULE_fileSizeLiteral);
		try {
			State = 5225;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILESIZE_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5223; Match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5224; decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		public ITerminalNode START_NATIONAL_STRING_LITERAL() { return GetToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0); }
		public ITerminalNode STRING_CHARSET_NAME() { return GetToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 520, RULE_stringLiteral);
		int _la;
		try {
			int _alt;
			State = 5250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,760,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5232;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					State = 5228;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						State = 5227; Match(STRING_CHARSET_NAME);
						}
					}

					State = 5230; Match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					State = 5231; Match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5235;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 5234; Match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5237;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,756,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5244;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					State = 5240;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						State = 5239; Match(STRING_CHARSET_NAME);
						}
					}

					State = 5242; Match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					State = 5243; Match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5248;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,759,Context) ) {
				case 1:
					{
					State = 5246; Match(COLLATE);
					State = 5247; collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(MySqlParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(MySqlParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 522, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5252;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexadecimalLiteralContext : ParserRuleContext {
		public ITerminalNode HEXADECIMAL_LITERAL() { return GetToken(MySqlParser.HEXADECIMAL_LITERAL, 0); }
		public ITerminalNode STRING_CHARSET_NAME() { return GetToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexadecimalLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHexadecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHexadecimalLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexadecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HexadecimalLiteralContext hexadecimalLiteral() {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(Context, State);
		EnterRule(_localctx, 524, RULE_hexadecimalLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				State = 5254; Match(STRING_CHARSET_NAME);
				}
			}

			State = 5257; Match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullNotnullContext : ParserRuleContext {
		public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
		public ITerminalNode NULL_SPEC_LITERAL() { return GetToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullNotnull; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNullNotnull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNullNotnull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullNotnull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullNotnullContext nullNotnull() {
		NullNotnullContext _localctx = new NullNotnullContext(Context, State);
		EnterRule(_localctx, 526, RULE_nullNotnull);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 5259; Match(NOT);
				}
			}

			State = 5262;
			_la = TokenStream.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IToken nullLiteral;
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public HexadecimalLiteralContext hexadecimalLiteral() {
			return GetRuleContext<HexadecimalLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public ITerminalNode REAL_LITERAL() { return GetToken(MySqlParser.REAL_LITERAL, 0); }
		public ITerminalNode BIT_STRING() { return GetToken(MySqlParser.BIT_STRING, 0); }
		public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
		public ITerminalNode NULL_SPEC_LITERAL() { return GetToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 528, RULE_constant);
		int _la;
		try {
			State = 5276;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,764,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5264; stringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5265; decimalLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5266; Match(MINUS);
				State = 5267; decimalLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5268; hexadecimalLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5269; booleanLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5270; Match(REAL_LITERAL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5271; Match(BIT_STRING);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 5272; Match(NOT);
					}
				}

				State = 5275;
				_localctx.nullLiteral = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					_localctx.nullLiteral = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
	 
		public DataTypeContext() { }
		public virtual void CopyFrom(DataTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SpatialDataTypeContext : DataTypeContext {
		public IToken typeName;
		public ITerminalNode GEOMETRYCOLLECTION() { return GetToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public ITerminalNode LINESTRING() { return GetToken(MySqlParser.LINESTRING, 0); }
		public ITerminalNode MULTILINESTRING() { return GetToken(MySqlParser.MULTILINESTRING, 0); }
		public ITerminalNode MULTIPOINT() { return GetToken(MySqlParser.MULTIPOINT, 0); }
		public ITerminalNode MULTIPOLYGON() { return GetToken(MySqlParser.MULTIPOLYGON, 0); }
		public ITerminalNode POINT() { return GetToken(MySqlParser.POINT, 0); }
		public ITerminalNode POLYGON() { return GetToken(MySqlParser.POLYGON, 0); }
		public SpatialDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSpatialDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSpatialDataType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpatialDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CollectionDataTypeContext : DataTypeContext {
		public IToken typeName;
		public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		public ITerminalNode ENUM() { return GetToken(MySqlParser.ENUM, 0); }
		public ITerminalNode[] SET() { return GetTokens(MySqlParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(MySqlParser.SET, i);
		}
		public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public CollectionDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCollectionDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCollectionDataType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DimensionDataTypeContext : DataTypeContext {
		public IToken typeName;
		public ITerminalNode TINYINT() { return GetToken(MySqlParser.TINYINT, 0); }
		public ITerminalNode SMALLINT() { return GetToken(MySqlParser.SMALLINT, 0); }
		public ITerminalNode MEDIUMINT() { return GetToken(MySqlParser.MEDIUMINT, 0); }
		public ITerminalNode INT() { return GetToken(MySqlParser.INT, 0); }
		public ITerminalNode INTEGER() { return GetToken(MySqlParser.INTEGER, 0); }
		public ITerminalNode BIGINT() { return GetToken(MySqlParser.BIGINT, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		public ITerminalNode UNSIGNED() { return GetToken(MySqlParser.UNSIGNED, 0); }
		public ITerminalNode ZEROFILL() { return GetToken(MySqlParser.ZEROFILL, 0); }
		public ITerminalNode REAL() { return GetToken(MySqlParser.REAL, 0); }
		public ITerminalNode DOUBLE() { return GetToken(MySqlParser.DOUBLE, 0); }
		public ITerminalNode FLOAT() { return GetToken(MySqlParser.FLOAT, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return GetRuleContext<LengthTwoDimensionContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(MySqlParser.DECIMAL, 0); }
		public ITerminalNode NUMERIC() { return GetToken(MySqlParser.NUMERIC, 0); }
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return GetRuleContext<LengthTwoOptionalDimensionContext>(0);
		}
		public ITerminalNode BIT() { return GetToken(MySqlParser.BIT, 0); }
		public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		public ITerminalNode TIMESTAMP() { return GetToken(MySqlParser.TIMESTAMP, 0); }
		public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
		public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		public ITerminalNode VARBINARY() { return GetToken(MySqlParser.VARBINARY, 0); }
		public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
		public DimensionDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDimensionDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDimensionDataType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimensionDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringDataTypeContext : DataTypeContext {
		public IToken typeName;
		public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		public ITerminalNode VARCHAR() { return GetToken(MySqlParser.VARCHAR, 0); }
		public ITerminalNode TINYTEXT() { return GetToken(MySqlParser.TINYTEXT, 0); }
		public ITerminalNode TEXT() { return GetToken(MySqlParser.TEXT, 0); }
		public ITerminalNode MEDIUMTEXT() { return GetToken(MySqlParser.MEDIUMTEXT, 0); }
		public ITerminalNode LONGTEXT() { return GetToken(MySqlParser.LONGTEXT, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public StringDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStringDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStringDataType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleDataTypeContext : DataTypeContext {
		public IToken typeName;
		public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		public ITerminalNode TINYBLOB() { return GetToken(MySqlParser.TINYBLOB, 0); }
		public ITerminalNode BLOB() { return GetToken(MySqlParser.BLOB, 0); }
		public ITerminalNode MEDIUMBLOB() { return GetToken(MySqlParser.MEDIUMBLOB, 0); }
		public ITerminalNode LONGBLOB() { return GetToken(MySqlParser.LONGBLOB, 0); }
		public ITerminalNode BOOL() { return GetToken(MySqlParser.BOOL, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(MySqlParser.BOOLEAN, 0); }
		public SimpleDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleDataType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 530, RULE_dataType);
		int _la;
		try {
			State = 5353;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case VARCHAR:
			case TINYTEXT:
			case TEXT:
			case MEDIUMTEXT:
			case LONGTEXT:
				_localctx = new StringDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5278;
				((StringDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 185)) & ~0x3f) == 0 && ((1L << (_la - 185)) & ((1L << (CHAR - 185)) | (1L << (VARCHAR - 185)) | (1L << (TINYTEXT - 185)) | (1L << (TEXT - 185)) | (1L << (MEDIUMTEXT - 185)) | (1L << (LONGTEXT - 185)))) != 0)) ) {
					((StringDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5280;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,765,Context) ) {
				case 1:
					{
					State = 5279; lengthOneDimension();
					}
					break;
				}
				State = 5283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BINARY) {
					{
					State = 5282; Match(BINARY);
					}
				}

				State = 5288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CHARACTER) {
					{
					State = 5285; Match(CHARACTER);
					State = 5286; Match(SET);
					State = 5287; charsetName();
					}
				}

				State = 5292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE) {
					{
					State = 5290; Match(COLLATE);
					State = 5291; collationName();
					}
				}

				}
				break;
			case TINYINT:
			case SMALLINT:
			case MEDIUMINT:
			case INT:
			case INTEGER:
			case BIGINT:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5294;
				((DimensionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (TINYINT - 169)) | (1L << (SMALLINT - 169)) | (1L << (MEDIUMINT - 169)) | (1L << (INT - 169)) | (1L << (INTEGER - 169)) | (1L << (BIGINT - 169)))) != 0)) ) {
					((DimensionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5296;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,769,Context) ) {
				case 1:
					{
					State = 5295; lengthOneDimension();
					}
					break;
				}
				State = 5299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNSIGNED) {
					{
					State = 5298; Match(UNSIGNED);
					}
				}

				State = 5302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ZEROFILL) {
					{
					State = 5301; Match(ZEROFILL);
					}
				}

				}
				break;
			case REAL:
			case DOUBLE:
			case FLOAT:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5304;
				((DimensionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 175)) & ~0x3f) == 0 && ((1L << (_la - 175)) & ((1L << (REAL - 175)) | (1L << (DOUBLE - 175)) | (1L << (FLOAT - 175)))) != 0)) ) {
					((DimensionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5306;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,772,Context) ) {
				case 1:
					{
					State = 5305; lengthTwoDimension();
					}
					break;
				}
				State = 5309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNSIGNED) {
					{
					State = 5308; Match(UNSIGNED);
					}
				}

				State = 5312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ZEROFILL) {
					{
					State = 5311; Match(ZEROFILL);
					}
				}

				}
				break;
			case DECIMAL:
			case NUMERIC:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5314;
				((DimensionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DECIMAL || _la==NUMERIC) ) {
					((DimensionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5316;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,775,Context) ) {
				case 1:
					{
					State = 5315; lengthTwoOptionalDimension();
					}
					break;
				}
				State = 5319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNSIGNED) {
					{
					State = 5318; Match(UNSIGNED);
					}
				}

				State = 5322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ZEROFILL) {
					{
					State = 5321; Match(ZEROFILL);
					}
				}

				}
				break;
			case DATE:
			case TINYBLOB:
			case BLOB:
			case MEDIUMBLOB:
			case LONGBLOB:
			case BOOL:
			case BOOLEAN:
				_localctx = new SimpleDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 5324;
				((SimpleDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TINYBLOB - 180)) | (1L << (BLOB - 180)) | (1L << (MEDIUMBLOB - 180)) | (1L << (LONGBLOB - 180)))) != 0) || _la==BOOL || _la==BOOLEAN) ) {
					((SimpleDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case VARBINARY:
			case BIT:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 5325;
				((DimensionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (BINARY - 181)) | (1L << (VARBINARY - 181)))) != 0) || _la==BIT) ) {
					((DimensionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5327;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,778,Context) ) {
				case 1:
					{
					State = 5326; lengthOneDimension();
					}
					break;
				}
				}
				break;
			case SET:
			case ENUM:
				_localctx = new CollectionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 5329;
				((CollectionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
					((CollectionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5330; Match(LR_BRACKET);
				State = 5331; Match(STRING_LITERAL);
				State = 5336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5332; Match(COMMA);
					State = 5333; Match(STRING_LITERAL);
					}
					}
					State = 5338;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5339; Match(RR_BRACKET);
				State = 5341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BINARY) {
					{
					State = 5340; Match(BINARY);
					}
				}

				State = 5346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CHARACTER) {
					{
					State = 5343; Match(CHARACTER);
					State = 5344; Match(SET);
					State = 5345; charsetName();
					}
				}

				State = 5350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE) {
					{
					State = 5348; Match(COLLATE);
					State = 5349; collationName();
					}
				}

				}
				break;
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
				_localctx = new SpatialDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 5352;
				((SpatialDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (GEOMETRYCOLLECTION - 622)) | (1L << (LINESTRING - 622)) | (1L << (MULTILINESTRING - 622)) | (1L << (MULTIPOINT - 622)) | (1L << (MULTIPOLYGON - 622)) | (1L << (POINT - 622)) | (1L << (POLYGON - 622)))) != 0)) ) {
					((SpatialDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConvertedDataTypeContext : ParserRuleContext {
		public IToken typeName;
		public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		public ITerminalNode NCHAR() { return GetToken(MySqlParser.NCHAR, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
		public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		public ITerminalNode DECIMAL() { return GetToken(MySqlParser.DECIMAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return GetRuleContext<LengthTwoDimensionContext>(0);
		}
		public ITerminalNode SIGNED() { return GetToken(MySqlParser.SIGNED, 0); }
		public ITerminalNode UNSIGNED() { return GetToken(MySqlParser.UNSIGNED, 0); }
		public ITerminalNode INTEGER() { return GetToken(MySqlParser.INTEGER, 0); }
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_convertedDataType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConvertedDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConvertedDataType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConvertedDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConvertedDataTypeContext convertedDataType() {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(Context, State);
		EnterRule(_localctx, 532, RULE_convertedDataType);
		int _la;
		try {
			State = 5377;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY:
			case NCHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5355;
				_localctx.typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					_localctx.typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 5356; lengthOneDimension();
					}
				}

				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5359; _localctx.typeName = Match(CHAR);
				State = 5361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 5360; lengthOneDimension();
					}
				}

				State = 5366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CHARACTER) {
					{
					State = 5363; Match(CHARACTER);
					State = 5364; Match(SET);
					State = 5365; charsetName();
					}
				}

				}
				break;
			case DATE:
			case TIME:
			case DATETIME:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5368;
				_localctx.typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (DATETIME - 180)))) != 0)) ) {
					_localctx.typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5369; _localctx.typeName = Match(DECIMAL);
				State = 5371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 5370; lengthTwoDimension();
					}
				}

				}
				break;
			case UNSIGNED:
			case SIGNED:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5373;
				_la = TokenStream.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTEGER) {
					{
					State = 5374; Match(INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LengthOneDimensionContext : ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lengthOneDimension; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLengthOneDimension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLengthOneDimension(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthOneDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LengthOneDimensionContext lengthOneDimension() {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(Context, State);
		EnterRule(_localctx, 534, RULE_lengthOneDimension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5379; Match(LR_BRACKET);
			State = 5380; decimalLiteral();
			State = 5381; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LengthTwoDimensionContext : ParserRuleContext {
		public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lengthTwoDimension; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLengthTwoDimension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLengthTwoDimension(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthTwoDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LengthTwoDimensionContext lengthTwoDimension() {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(Context, State);
		EnterRule(_localctx, 536, RULE_lengthTwoDimension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5383; Match(LR_BRACKET);
			State = 5384; decimalLiteral();
			State = 5385; Match(COMMA);
			State = 5386; decimalLiteral();
			State = 5387; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LengthTwoOptionalDimensionContext : ParserRuleContext {
		public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lengthTwoOptionalDimension; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLengthTwoOptionalDimension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLengthTwoOptionalDimension(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthTwoOptionalDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(Context, State);
		EnterRule(_localctx, 538, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5389; Match(LR_BRACKET);
			State = 5390; decimalLiteral();
			State = 5393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 5391; Match(COMMA);
				State = 5392; decimalLiteral();
				}
			}

			State = 5395; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UidListContext : ParserRuleContext {
		public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public UidListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uidList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUidList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUidList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUidList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UidListContext uidList() {
		UidListContext _localctx = new UidListContext(Context, State);
		EnterRule(_localctx, 540, RULE_uidList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5397; uid();
			State = 5402;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,791,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5398; Match(COMMA);
					State = 5399; uid();
					}
					} 
				}
				State = 5404;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,791,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablesContext : ParserRuleContext {
		public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		public TablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tables; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTables(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTables(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablesContext tables() {
		TablesContext _localctx = new TablesContext(Context, State);
		EnterRule(_localctx, 542, RULE_tables);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5405; tableName();
			State = 5410;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,792,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5406; Match(COMMA);
					State = 5407; tableName();
					}
					} 
				}
				State = 5412;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,792,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexColumnNamesContext : ParserRuleContext {
		public IndexColumnNameContext[] indexColumnName() {
			return GetRuleContexts<IndexColumnNameContext>();
		}
		public IndexColumnNameContext indexColumnName(int i) {
			return GetRuleContext<IndexColumnNameContext>(i);
		}
		public IndexColumnNamesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexColumnNames; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexColumnNames(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexColumnNames(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexColumnNames(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexColumnNamesContext indexColumnNames() {
		IndexColumnNamesContext _localctx = new IndexColumnNamesContext(Context, State);
		EnterRule(_localctx, 544, RULE_indexColumnNames);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5413; Match(LR_BRACKET);
			State = 5414; indexColumnName();
			State = 5419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5415; Match(COMMA);
				State = 5416; indexColumnName();
				}
				}
				State = 5421;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 5422; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExpressions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExpressions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 546, RULE_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5424; expression(0);
			State = 5429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5425; Match(COMMA);
				State = 5426; expression(0);
				}
				}
				State = 5431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsWithDefaultsContext : ParserRuleContext {
		public ExpressionOrDefaultContext[] expressionOrDefault() {
			return GetRuleContexts<ExpressionOrDefaultContext>();
		}
		public ExpressionOrDefaultContext expressionOrDefault(int i) {
			return GetRuleContext<ExpressionOrDefaultContext>(i);
		}
		public ExpressionsWithDefaultsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionsWithDefaults; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExpressionsWithDefaults(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExpressionsWithDefaults(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionsWithDefaults(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsWithDefaultsContext expressionsWithDefaults() {
		ExpressionsWithDefaultsContext _localctx = new ExpressionsWithDefaultsContext(Context, State);
		EnterRule(_localctx, 548, RULE_expressionsWithDefaults);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5432; expressionOrDefault();
			State = 5437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5433; Match(COMMA);
				State = 5434; expressionOrDefault();
				}
				}
				State = 5439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantsContext : ParserRuleContext {
		public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public ConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constants; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConstants(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConstants(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantsContext constants() {
		ConstantsContext _localctx = new ConstantsContext(Context, State);
		EnterRule(_localctx, 550, RULE_constants);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5440; constant();
			State = 5445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5441; Match(COMMA);
				State = 5442; constant();
				}
				}
				State = 5447;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStringsContext : ParserRuleContext {
		public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		public SimpleStringsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStrings; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleStrings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleStrings(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStrings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStringsContext simpleStrings() {
		SimpleStringsContext _localctx = new SimpleStringsContext(Context, State);
		EnterRule(_localctx, 552, RULE_simpleStrings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5448; Match(STRING_LITERAL);
			State = 5453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5449; Match(COMMA);
				State = 5450; Match(STRING_LITERAL);
				}
				}
				State = 5455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserVariablesContext : ParserRuleContext {
		public ITerminalNode[] LOCAL_ID() { return GetTokens(MySqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(MySqlParser.LOCAL_ID, i);
		}
		public UserVariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userVariables; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserVariables(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserVariables(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserVariables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserVariablesContext userVariables() {
		UserVariablesContext _localctx = new UserVariablesContext(Context, State);
		EnterRule(_localctx, 554, RULE_userVariables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5456; Match(LOCAL_ID);
			State = 5461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5457; Match(COMMA);
				State = 5458; Match(LOCAL_ID);
				}
				}
				State = 5463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public CurrentTimestampContext[] currentTimestamp() {
			return GetRuleContexts<CurrentTimestampContext>();
		}
		public CurrentTimestampContext currentTimestamp(int i) {
			return GetRuleContext<CurrentTimestampContext>(i);
		}
		public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 556, RULE_defaultValue);
		int _la;
		try {
			State = 5472;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,800,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5464; Match(NULL_LITERAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5465; constant();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5466; currentTimestamp();
				State = 5470;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 5467; Match(ON);
					State = 5468; Match(UPDATE);
					State = 5469; currentTimestamp();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurrentTimestampContext : ParserRuleContext {
		public ITerminalNode NOW() { return GetToken(MySqlParser.NOW, 0); }
		public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public ITerminalNode LOCALTIME() { return GetToken(MySqlParser.LOCALTIME, 0); }
		public ITerminalNode LOCALTIMESTAMP() { return GetToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public CurrentTimestampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_currentTimestamp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCurrentTimestamp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCurrentTimestamp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentTimestamp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CurrentTimestampContext currentTimestamp() {
		CurrentTimestampContext _localctx = new CurrentTimestampContext(Context, State);
		EnterRule(_localctx, 558, RULE_currentTimestamp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5488;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
				{
				State = 5474;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (CURRENT_TIMESTAMP - 227)) | (1L << (LOCALTIME - 227)) | (1L << (LOCALTIMESTAMP - 227)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5480;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 5475; Match(LR_BRACKET);
					State = 5477;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 950)) & ~0x3f) == 0 && ((1L << (_la - 950)) & ((1L << (ZERO_DECIMAL - 950)) | (1L << (ONE_DECIMAL - 950)) | (1L << (TWO_DECIMAL - 950)) | (1L << (DECIMAL_LITERAL - 950)))) != 0)) {
						{
						State = 5476; decimalLiteral();
						}
					}

					State = 5479; Match(RR_BRACKET);
					}
				}

				}
				break;
			case NOW:
				{
				State = 5482; Match(NOW);
				State = 5483; Match(LR_BRACKET);
				State = 5485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 950)) & ~0x3f) == 0 && ((1L << (_la - 950)) & ((1L << (ZERO_DECIMAL - 950)) | (1L << (ONE_DECIMAL - 950)) | (1L << (TWO_DECIMAL - 950)) | (1L << (DECIMAL_LITERAL - 950)))) != 0)) {
					{
					State = 5484; decimalLiteral();
					}
				}

				State = 5487; Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOrDefaultContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOrDefault; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExpressionOrDefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExpressionOrDefault(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOrDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOrDefaultContext expressionOrDefault() {
		ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(Context, State);
		EnterRule(_localctx, 560, RULE_expressionOrDefault);
		try {
			State = 5492;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT_USER:
			case DATABASE:
			case EXISTS:
			case FALSE:
			case IF:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case NOT:
			case NULL_LITERAL:
			case REPLACE:
			case RIGHT:
			case TRUE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case PLUS:
			case MINUS:
			case EXCLAMATION_SYMBOL:
			case BIT_NOT_OP:
			case LR_BRACKET:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case CHARSET_REVERSE_QOUTE_STRING:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case NULL_SPEC_LITERAL:
			case BIT_STRING:
			case STRING_CHARSET_NAME:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5490; expression(0);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5491; Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExistsContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(MySqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(MySqlParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExists; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIfExists(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIfExists(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExistsContext ifExists() {
		IfExistsContext _localctx = new IfExistsContext(Context, State);
		EnterRule(_localctx, 562, RULE_ifExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5494; Match(IF);
			State = 5495; Match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfNotExistsContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(MySqlParser.IF, 0); }
		public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public ITerminalNode EXISTS() { return GetToken(MySqlParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifNotExists; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIfNotExists(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIfNotExists(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfNotExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfNotExistsContext ifNotExists() {
		IfNotExistsContext _localctx = new IfNotExistsContext(Context, State);
		EnterRule(_localctx, 564, RULE_ifNotExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5497; Match(IF);
			State = 5498; Match(NOT);
			State = 5499; Match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
	 
		public FunctionCallContext() { }
		public virtual void CopyFrom(FunctionCallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SpecificFunctionCallContext : FunctionCallContext {
		public SpecificFunctionContext specificFunction() {
			return GetRuleContext<SpecificFunctionContext>(0);
		}
		public SpecificFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSpecificFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSpecificFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecificFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PasswordFunctionCallContext : FunctionCallContext {
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return GetRuleContext<PasswordFunctionClauseContext>(0);
		}
		public PasswordFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPasswordFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPasswordFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPasswordFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UdfFunctionCallContext : FunctionCallContext {
		public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		public UdfFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUdfFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUdfFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdfFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AggregateFunctionCallContext : FunctionCallContext {
		public AggregateWindowedFunctionContext aggregateWindowedFunction() {
			return GetRuleContext<AggregateWindowedFunctionContext>(0);
		}
		public AggregateFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAggregateFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAggregateFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScalarFunctionCallContext : FunctionCallContext {
		public ScalarFunctionNameContext scalarFunctionName() {
			return GetRuleContext<ScalarFunctionNameContext>(0);
		}
		public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		public ScalarFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterScalarFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitScalarFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 566, RULE_functionCall);
		int _la;
		try {
			State = 5518;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,808,Context) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5501; specificFunction();
				}
				break;
			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5502; aggregateWindowedFunction();
				}
				break;
			case 3:
				_localctx = new ScalarFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5503; scalarFunctionName();
				State = 5504; Match(LR_BRACKET);
				State = 5506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (IF - 64)) | (1L << (INSERT - 64)) | (1L << (INTERVAL - 64)) | (1L << (LEFT - 64)) | (1L << (NOT - 64)) | (1L << (NULL_LITERAL - 64)) | (1L << (REPLACE - 64)) | (1L << (RIGHT - 64)))) != 0) || ((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & ((1L << (TRUE - 151)) | (1L << (VALUES - 151)) | (1L << (DATE - 151)) | (1L << (TIME - 151)) | (1L << (TIMESTAMP - 151)) | (1L << (DATETIME - 151)) | (1L << (YEAR - 151)) | (1L << (CHAR - 151)) | (1L << (BINARY - 151)) | (1L << (TEXT - 151)) | (1L << (ENUM - 151)) | (1L << (AVG - 151)) | (1L << (BIT_AND - 151)) | (1L << (BIT_OR - 151)) | (1L << (BIT_XOR - 151)) | (1L << (COUNT - 151)) | (1L << (GROUP_CONCAT - 151)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (MAX - 215)) | (1L << (MIN - 215)) | (1L << (STD - 215)) | (1L << (STDDEV - 215)) | (1L << (STDDEV_POP - 215)) | (1L << (STDDEV_SAMP - 215)) | (1L << (SUM - 215)) | (1L << (VAR_POP - 215)) | (1L << (VAR_SAMP - 215)) | (1L << (VARIANCE - 215)) | (1L << (CURRENT_DATE - 215)) | (1L << (CURRENT_TIME - 215)) | (1L << (CURRENT_TIMESTAMP - 215)) | (1L << (LOCALTIME - 215)) | (1L << (CURDATE - 215)) | (1L << (CURTIME - 215)) | (1L << (DATE_ADD - 215)) | (1L << (DATE_SUB - 215)) | (1L << (EXTRACT - 215)) | (1L << (LOCALTIMESTAMP - 215)) | (1L << (NOW - 215)) | (1L << (POSITION - 215)) | (1L << (SUBSTR - 215)) | (1L << (SUBSTRING - 215)) | (1L << (SYSDATE - 215)) | (1L << (TRIM - 215)) | (1L << (UTC_DATE - 215)) | (1L << (UTC_TIME - 215)) | (1L << (UTC_TIMESTAMP - 215)) | (1L << (ACCOUNT - 215)) | (1L << (ACTION - 215)) | (1L << (AFTER - 215)) | (1L << (AGGREGATE - 215)) | (1L << (ALGORITHM - 215)) | (1L << (ANY - 215)) | (1L << (AT - 215)) | (1L << (AUTHORS - 215)) | (1L << (AUTOCOMMIT - 215)) | (1L << (AUTOEXTEND_SIZE - 215)) | (1L << (AUTO_INCREMENT - 215)) | (1L << (AVG_ROW_LENGTH - 215)) | (1L << (BEGIN - 215)) | (1L << (BINLOG - 215)) | (1L << (BIT - 215)) | (1L << (BLOCK - 215)) | (1L << (BOOL - 215)) | (1L << (BOOLEAN - 215)) | (1L << (BTREE - 215)) | (1L << (CASCADED - 215)) | (1L << (CHAIN - 215)) | (1L << (CHANNEL - 215)) | (1L << (CHECKSUM - 215)) | (1L << (CIPHER - 215)) | (1L << (CLIENT - 215)) | (1L << (COALESCE - 215)) | (1L << (CODE - 215)) | (1L << (COLUMNS - 215)) | (1L << (COLUMN_FORMAT - 215)) | (1L << (COMMENT - 215)) | (1L << (COMMIT - 215)) | (1L << (COMPACT - 215)))) != 0) || ((((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & ((1L << (COMPLETION - 279)) | (1L << (COMPRESSED - 279)) | (1L << (COMPRESSION - 279)) | (1L << (CONCURRENT - 279)) | (1L << (CONNECTION - 279)) | (1L << (CONSISTENT - 279)) | (1L << (CONTAINS - 279)) | (1L << (CONTEXT - 279)) | (1L << (CONTRIBUTORS - 279)) | (1L << (COPY - 279)) | (1L << (CPU - 279)) | (1L << (DATA - 279)) | (1L << (DATAFILE - 279)) | (1L << (DEALLOCATE - 279)) | (1L << (DEFAULT_AUTH - 279)) | (1L << (DEFINER - 279)) | (1L << (DELAY_KEY_WRITE - 279)) | (1L << (DIRECTORY - 279)) | (1L << (DISABLE - 279)) | (1L << (DISCARD - 279)) | (1L << (DISK - 279)) | (1L << (DO - 279)) | (1L << (DUMPFILE - 279)) | (1L << (DUPLICATE - 279)) | (1L << (DYNAMIC - 279)) | (1L << (ENABLE - 279)) | (1L << (ENCRYPTION - 279)) | (1L << (ENDS - 279)) | (1L << (ENGINE - 279)) | (1L << (ENGINES - 279)) | (1L << (ERROR - 279)) | (1L << (ERRORS - 279)) | (1L << (ESCAPE - 279)) | (1L << (EVEN - 279)) | (1L << (EVENT - 279)) | (1L << (EVENTS - 279)) | (1L << (EVERY - 279)) | (1L << (EXCHANGE - 279)) | (1L << (EXCLUSIVE - 279)) | (1L << (EXPIRE - 279)) | (1L << (EXTENT_SIZE - 279)) | (1L << (FAULTS - 279)) | (1L << (FIELDS - 279)) | (1L << (FILE_BLOCK_SIZE - 279)) | (1L << (FILTER - 279)) | (1L << (FIRST - 279)) | (1L << (FIXED - 279)) | (1L << (FOLLOWS - 279)) | (1L << (FULL - 279)) | (1L << (FUNCTION - 279)) | (1L << (GLOBAL - 279)) | (1L << (GRANTS - 279)) | (1L << (GROUP_REPLICATION - 279)) | (1L << (HASH - 279)))) != 0) || ((((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & ((1L << (HOST - 343)) | (1L << (IDENTIFIED - 343)) | (1L << (IGNORE_SERVER_IDS - 343)) | (1L << (IMPORT - 343)) | (1L << (INDEXES - 343)) | (1L << (INITIAL_SIZE - 343)) | (1L << (INPLACE - 343)) | (1L << (INSERT_METHOD - 343)) | (1L << (INSTANCE - 343)) | (1L << (INVOKER - 343)) | (1L << (IO - 343)) | (1L << (IO_THREAD - 343)) | (1L << (IPC - 343)) | (1L << (ISOLATION - 343)) | (1L << (ISSUER - 343)) | (1L << (KEY_BLOCK_SIZE - 343)) | (1L << (LANGUAGE - 343)) | (1L << (LAST - 343)) | (1L << (LEAVES - 343)) | (1L << (LESS - 343)) | (1L << (LEVEL - 343)) | (1L << (LIST - 343)) | (1L << (LOCAL - 343)) | (1L << (LOGFILE - 343)) | (1L << (LOGS - 343)) | (1L << (MASTER - 343)) | (1L << (MASTER_AUTO_POSITION - 343)) | (1L << (MASTER_CONNECT_RETRY - 343)) | (1L << (MASTER_DELAY - 343)) | (1L << (MASTER_HEARTBEAT_PERIOD - 343)) | (1L << (MASTER_HOST - 343)) | (1L << (MASTER_LOG_FILE - 343)) | (1L << (MASTER_LOG_POS - 343)) | (1L << (MASTER_PASSWORD - 343)) | (1L << (MASTER_PORT - 343)) | (1L << (MASTER_RETRY_COUNT - 343)) | (1L << (MASTER_SSL - 343)) | (1L << (MASTER_SSL_CA - 343)) | (1L << (MASTER_SSL_CAPATH - 343)) | (1L << (MASTER_SSL_CERT - 343)) | (1L << (MASTER_SSL_CIPHER - 343)) | (1L << (MASTER_SSL_CRL - 343)) | (1L << (MASTER_SSL_CRLPATH - 343)) | (1L << (MASTER_SSL_KEY - 343)) | (1L << (MASTER_TLS_VERSION - 343)) | (1L << (MASTER_USER - 343)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 343)) | (1L << (MAX_QUERIES_PER_HOUR - 343)) | (1L << (MAX_ROWS - 343)) | (1L << (MAX_SIZE - 343)) | (1L << (MAX_UPDATES_PER_HOUR - 343)) | (1L << (MAX_USER_CONNECTIONS - 343)) | (1L << (MERGE - 343)) | (1L << (MID - 343)) | (1L << (MIGRATE - 343)) | (1L << (MIN_ROWS - 343)) | (1L << (MODIFY - 343)) | (1L << (MUTEX - 343)) | (1L << (MYSQL - 343)))) != 0) || ((((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & ((1L << (NAME - 407)) | (1L << (NAMES - 407)) | (1L << (NCHAR - 407)) | (1L << (NEVER - 407)) | (1L << (NO - 407)) | (1L << (NODEGROUP - 407)) | (1L << (NONE - 407)) | (1L << (OFFLINE - 407)) | (1L << (OFFSET - 407)) | (1L << (OJ - 407)) | (1L << (OLD_PASSWORD - 407)) | (1L << (ONE - 407)) | (1L << (ONLINE - 407)) | (1L << (ONLY - 407)) | (1L << (OPTIMIZER_COSTS - 407)) | (1L << (OPTIONS - 407)) | (1L << (OWNER - 407)) | (1L << (PACK_KEYS - 407)) | (1L << (PAGE - 407)) | (1L << (PARSER - 407)) | (1L << (PARTIAL - 407)) | (1L << (PARTITIONING - 407)) | (1L << (PARTITIONS - 407)) | (1L << (PASSWORD - 407)) | (1L << (PHASE - 407)) | (1L << (PLUGIN_DIR - 407)) | (1L << (PLUGINS - 407)) | (1L << (PORT - 407)) | (1L << (PRECEDES - 407)) | (1L << (PREPARE - 407)) | (1L << (PRESERVE - 407)) | (1L << (PREV - 407)) | (1L << (PROCESSLIST - 407)) | (1L << (PROFILE - 407)) | (1L << (PROFILES - 407)) | (1L << (PROXY - 407)) | (1L << (QUERY - 407)) | (1L << (QUICK - 407)) | (1L << (REBUILD - 407)) | (1L << (RECOVER - 407)) | (1L << (REDO_BUFFER_SIZE - 407)) | (1L << (REDUNDANT - 407)) | (1L << (RELAY_LOG_FILE - 407)) | (1L << (RELAY_LOG_POS - 407)) | (1L << (RELAYLOG - 407)) | (1L << (REMOVE - 407)) | (1L << (REORGANIZE - 407)) | (1L << (REPAIR - 407)) | (1L << (REPLICATE_DO_DB - 407)) | (1L << (REPLICATE_DO_TABLE - 407)) | (1L << (REPLICATE_IGNORE_DB - 407)) | (1L << (REPLICATE_IGNORE_TABLE - 407)) | (1L << (REPLICATE_REWRITE_DB - 407)) | (1L << (REPLICATE_WILD_DO_TABLE - 407)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 407)) | (1L << (REPLICATION - 407)) | (1L << (RESUME - 407)) | (1L << (RETURNS - 407)) | (1L << (ROLLBACK - 407)))) != 0) || ((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & ((1L << (ROLLUP - 471)) | (1L << (ROTATE - 471)) | (1L << (ROW - 471)) | (1L << (ROWS - 471)) | (1L << (ROW_FORMAT - 471)) | (1L << (SAVEPOINT - 471)) | (1L << (SCHEDULE - 471)) | (1L << (SECURITY - 471)) | (1L << (SERVER - 471)) | (1L << (SESSION - 471)) | (1L << (SHARE - 471)) | (1L << (SHARED - 471)) | (1L << (SIGNED - 471)) | (1L << (SIMPLE - 471)) | (1L << (SLAVE - 471)) | (1L << (SNAPSHOT - 471)) | (1L << (SOCKET - 471)) | (1L << (SOME - 471)) | (1L << (SOUNDS - 471)) | (1L << (SOURCE - 471)) | (1L << (SQL_AFTER_GTIDS - 471)) | (1L << (SQL_AFTER_MTS_GAPS - 471)) | (1L << (SQL_BEFORE_GTIDS - 471)) | (1L << (SQL_BUFFER_RESULT - 471)) | (1L << (SQL_CACHE - 471)) | (1L << (SQL_NO_CACHE - 471)) | (1L << (SQL_THREAD - 471)) | (1L << (START - 471)) | (1L << (STARTS - 471)) | (1L << (STATS_AUTO_RECALC - 471)) | (1L << (STATS_PERSISTENT - 471)) | (1L << (STATS_SAMPLE_PAGES - 471)) | (1L << (STATUS - 471)) | (1L << (STOP - 471)) | (1L << (STORAGE - 471)) | (1L << (STRING - 471)) | (1L << (SUBJECT - 471)) | (1L << (SUBPARTITION - 471)) | (1L << (SUBPARTITIONS - 471)) | (1L << (SUSPEND - 471)) | (1L << (SWAPS - 471)) | (1L << (SWITCHES - 471)) | (1L << (TABLESPACE - 471)) | (1L << (TEMPORARY - 471)) | (1L << (TEMPTABLE - 471)) | (1L << (THAN - 471)) | (1L << (TRANSACTION - 471)) | (1L << (TRUNCATE - 471)) | (1L << (UNDEFINED - 471)) | (1L << (UNDOFILE - 471)) | (1L << (UNDO_BUFFER_SIZE - 471)) | (1L << (UNKNOWN - 471)) | (1L << (UPGRADE - 471)) | (1L << (USER - 471)) | (1L << (VALIDATION - 471)) | (1L << (VALUE - 471)))) != 0) || ((((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & ((1L << (VARIABLES - 535)) | (1L << (VIEW - 535)) | (1L << (WAIT - 535)) | (1L << (WARNINGS - 535)) | (1L << (WITHOUT - 535)) | (1L << (WORK - 535)) | (1L << (WRAPPER - 535)) | (1L << (X509 - 535)) | (1L << (XA - 535)) | (1L << (XML - 535)) | (1L << (QUARTER - 535)) | (1L << (MONTH - 535)) | (1L << (DAY - 535)) | (1L << (HOUR - 535)) | (1L << (MINUTE - 535)) | (1L << (WEEK - 535)) | (1L << (SECOND - 535)) | (1L << (MICROSECOND - 535)) | (1L << (TABLES - 535)) | (1L << (ROUTINE - 535)) | (1L << (EXECUTE - 535)) | (1L << (FILE - 535)) | (1L << (PROCESS - 535)) | (1L << (RELOAD - 535)) | (1L << (SHUTDOWN - 535)) | (1L << (SUPER - 535)) | (1L << (PRIVILEGES - 535)) | (1L << (ARMSCII8 - 535)) | (1L << (ASCII - 535)) | (1L << (BIG5 - 535)) | (1L << (CP1250 - 535)) | (1L << (CP1251 - 535)) | (1L << (CP1256 - 535)) | (1L << (CP1257 - 535)) | (1L << (CP850 - 535)) | (1L << (CP852 - 535)) | (1L << (CP866 - 535)) | (1L << (CP932 - 535)) | (1L << (DEC8 - 535)) | (1L << (EUCJPMS - 535)) | (1L << (EUCKR - 535)) | (1L << (GB2312 - 535)) | (1L << (GBK - 535)) | (1L << (GEOSTD8 - 535)) | (1L << (GREEK - 535)) | (1L << (HEBREW - 535)) | (1L << (HP8 - 535)) | (1L << (KEYBCS2 - 535)) | (1L << (KOI8R - 535)) | (1L << (KOI8U - 535)) | (1L << (LATIN1 - 535)) | (1L << (LATIN2 - 535)) | (1L << (LATIN5 - 535)) | (1L << (LATIN7 - 535)) | (1L << (MACCE - 535)) | (1L << (MACROMAN - 535)) | (1L << (SJIS - 535)) | (1L << (SWE7 - 535)) | (1L << (TIS620 - 535)))) != 0) || ((((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & ((1L << (UCS2 - 599)) | (1L << (UJIS - 599)) | (1L << (UTF16 - 599)) | (1L << (UTF16LE - 599)) | (1L << (UTF32 - 599)) | (1L << (UTF8 - 599)) | (1L << (UTF8MB3 - 599)) | (1L << (UTF8MB4 - 599)) | (1L << (ARCHIVE - 599)) | (1L << (BLACKHOLE - 599)) | (1L << (CSV - 599)) | (1L << (FEDERATED - 599)) | (1L << (INNODB - 599)) | (1L << (MEMORY - 599)) | (1L << (MRG_MYISAM - 599)) | (1L << (MYISAM - 599)) | (1L << (NDB - 599)) | (1L << (NDBCLUSTER - 599)) | (1L << (PERFOMANCE_SCHEMA - 599)) | (1L << (REPEATABLE - 599)) | (1L << (COMMITTED - 599)) | (1L << (UNCOMMITTED - 599)) | (1L << (SERIALIZABLE - 599)) | (1L << (GEOMETRYCOLLECTION - 599)) | (1L << (LINESTRING - 599)) | (1L << (MULTILINESTRING - 599)) | (1L << (MULTIPOINT - 599)) | (1L << (MULTIPOLYGON - 599)) | (1L << (POINT - 599)) | (1L << (POLYGON - 599)) | (1L << (ABS - 599)) | (1L << (ACOS - 599)) | (1L << (ADDDATE - 599)) | (1L << (ADDTIME - 599)) | (1L << (AES_DECRYPT - 599)) | (1L << (AES_ENCRYPT - 599)) | (1L << (AREA - 599)) | (1L << (ASBINARY - 599)) | (1L << (ASIN - 599)) | (1L << (ASTEXT - 599)) | (1L << (ASWKB - 599)) | (1L << (ASWKT - 599)) | (1L << (ASYMMETRIC_DECRYPT - 599)) | (1L << (ASYMMETRIC_DERIVE - 599)) | (1L << (ASYMMETRIC_ENCRYPT - 599)) | (1L << (ASYMMETRIC_SIGN - 599)) | (1L << (ASYMMETRIC_VERIFY - 599)) | (1L << (ATAN - 599)) | (1L << (ATAN2 - 599)) | (1L << (BENCHMARK - 599)) | (1L << (BIN - 599)) | (1L << (BIT_COUNT - 599)) | (1L << (BIT_LENGTH - 599)) | (1L << (BUFFER - 599)) | (1L << (CEIL - 599)) | (1L << (CEILING - 599)) | (1L << (CENTROID - 599)) | (1L << (CHARACTER_LENGTH - 599)) | (1L << (CHARSET - 599)) | (1L << (CHAR_LENGTH - 599)) | (1L << (COERCIBILITY - 599)) | (1L << (COLLATION - 599)) | (1L << (COMPRESS - 599)) | (1L << (CONCAT - 599)))) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & ((1L << (CONCAT_WS - 663)) | (1L << (CONNECTION_ID - 663)) | (1L << (CONV - 663)) | (1L << (CONVERT_TZ - 663)) | (1L << (COS - 663)) | (1L << (COT - 663)) | (1L << (CRC32 - 663)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 663)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 663)) | (1L << (CREATE_DH_PARAMETERS - 663)) | (1L << (CREATE_DIGEST - 663)) | (1L << (CROSSES - 663)) | (1L << (DATEDIFF - 663)) | (1L << (DATE_FORMAT - 663)) | (1L << (DAYNAME - 663)) | (1L << (DAYOFMONTH - 663)) | (1L << (DAYOFWEEK - 663)) | (1L << (DAYOFYEAR - 663)) | (1L << (DECODE - 663)) | (1L << (DEGREES - 663)) | (1L << (DES_DECRYPT - 663)) | (1L << (DES_ENCRYPT - 663)) | (1L << (DIMENSION - 663)) | (1L << (DISJOINT - 663)) | (1L << (ELT - 663)) | (1L << (ENCODE - 663)) | (1L << (ENCRYPT - 663)) | (1L << (ENDPOINT - 663)) | (1L << (ENVELOPE - 663)) | (1L << (EQUALS - 663)) | (1L << (EXP - 663)) | (1L << (EXPORT_SET - 663)) | (1L << (EXTERIORRING - 663)) | (1L << (EXTRACTVALUE - 663)) | (1L << (FIELD - 663)) | (1L << (FIND_IN_SET - 663)) | (1L << (FLOOR - 663)) | (1L << (FORMAT - 663)) | (1L << (FOUND_ROWS - 663)) | (1L << (FROM_BASE64 - 663)) | (1L << (FROM_DAYS - 663)) | (1L << (FROM_UNIXTIME - 663)) | (1L << (GEOMCOLLFROMTEXT - 663)) | (1L << (GEOMCOLLFROMWKB - 663)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 663)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 663)) | (1L << (GEOMETRYFROMTEXT - 663)) | (1L << (GEOMETRYFROMWKB - 663)) | (1L << (GEOMETRYN - 663)) | (1L << (GEOMETRYTYPE - 663)) | (1L << (GEOMFROMTEXT - 663)) | (1L << (GEOMFROMWKB - 663)) | (1L << (GET_FORMAT - 663)) | (1L << (GET_LOCK - 663)) | (1L << (GLENGTH - 663)) | (1L << (GREATEST - 663)) | (1L << (GTID_SUBSET - 663)) | (1L << (GTID_SUBTRACT - 663)) | (1L << (HEX - 663)) | (1L << (IFNULL - 663)) | (1L << (INET6_ATON - 663)) | (1L << (INET6_NTOA - 663)) | (1L << (INET_ATON - 663)) | (1L << (INET_NTOA - 663)))) != 0) || ((((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & ((1L << (INSTR - 727)) | (1L << (INTERIORRINGN - 727)) | (1L << (INTERSECTS - 727)) | (1L << (ISCLOSED - 727)) | (1L << (ISEMPTY - 727)) | (1L << (ISNULL - 727)) | (1L << (ISSIMPLE - 727)) | (1L << (IS_FREE_LOCK - 727)) | (1L << (IS_IPV4 - 727)) | (1L << (IS_IPV4_COMPAT - 727)) | (1L << (IS_IPV4_MAPPED - 727)) | (1L << (IS_IPV6 - 727)) | (1L << (IS_USED_LOCK - 727)) | (1L << (LAST_INSERT_ID - 727)) | (1L << (LCASE - 727)) | (1L << (LEAST - 727)) | (1L << (LENGTH - 727)) | (1L << (LINEFROMTEXT - 727)) | (1L << (LINEFROMWKB - 727)) | (1L << (LINESTRINGFROMTEXT - 727)) | (1L << (LINESTRINGFROMWKB - 727)) | (1L << (LN - 727)) | (1L << (LOAD_FILE - 727)) | (1L << (LOCATE - 727)) | (1L << (LOG - 727)) | (1L << (LOG10 - 727)) | (1L << (LOG2 - 727)) | (1L << (LOWER - 727)) | (1L << (LPAD - 727)) | (1L << (LTRIM - 727)) | (1L << (MAKEDATE - 727)) | (1L << (MAKETIME - 727)) | (1L << (MAKE_SET - 727)) | (1L << (MASTER_POS_WAIT - 727)) | (1L << (MBRCONTAINS - 727)) | (1L << (MBRDISJOINT - 727)) | (1L << (MBREQUAL - 727)) | (1L << (MBRINTERSECTS - 727)) | (1L << (MBROVERLAPS - 727)) | (1L << (MBRTOUCHES - 727)) | (1L << (MBRWITHIN - 727)) | (1L << (MD5 - 727)) | (1L << (MLINEFROMTEXT - 727)) | (1L << (MLINEFROMWKB - 727)) | (1L << (MONTHNAME - 727)) | (1L << (MPOINTFROMTEXT - 727)) | (1L << (MPOINTFROMWKB - 727)) | (1L << (MPOLYFROMTEXT - 727)) | (1L << (MPOLYFROMWKB - 727)) | (1L << (MULTILINESTRINGFROMTEXT - 727)) | (1L << (MULTILINESTRINGFROMWKB - 727)) | (1L << (MULTIPOINTFROMTEXT - 727)) | (1L << (MULTIPOINTFROMWKB - 727)) | (1L << (MULTIPOLYGONFROMTEXT - 727)) | (1L << (MULTIPOLYGONFROMWKB - 727)) | (1L << (NAME_CONST - 727)) | (1L << (NULLIF - 727)) | (1L << (NUMGEOMETRIES - 727)) | (1L << (NUMINTERIORRINGS - 727)) | (1L << (NUMPOINTS - 727)) | (1L << (OCT - 727)) | (1L << (OCTET_LENGTH - 727)) | (1L << (ORD - 727)) | (1L << (OVERLAPS - 727)))) != 0) || ((((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & ((1L << (PERIOD_ADD - 791)) | (1L << (PERIOD_DIFF - 791)) | (1L << (PI - 791)) | (1L << (POINTFROMTEXT - 791)) | (1L << (POINTFROMWKB - 791)) | (1L << (POINTN - 791)) | (1L << (POLYFROMTEXT - 791)) | (1L << (POLYFROMWKB - 791)) | (1L << (POLYGONFROMTEXT - 791)) | (1L << (POLYGONFROMWKB - 791)) | (1L << (POW - 791)) | (1L << (POWER - 791)) | (1L << (QUOTE - 791)) | (1L << (RADIANS - 791)) | (1L << (RAND - 791)) | (1L << (RANDOM_BYTES - 791)) | (1L << (RELEASE_LOCK - 791)) | (1L << (REVERSE - 791)) | (1L << (ROUND - 791)) | (1L << (ROW_COUNT - 791)) | (1L << (RPAD - 791)) | (1L << (RTRIM - 791)) | (1L << (SEC_TO_TIME - 791)) | (1L << (SESSION_USER - 791)) | (1L << (SHA - 791)) | (1L << (SHA1 - 791)) | (1L << (SHA2 - 791)) | (1L << (SIGN - 791)) | (1L << (SIN - 791)) | (1L << (SLEEP - 791)) | (1L << (SOUNDEX - 791)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 791)) | (1L << (SQRT - 791)) | (1L << (SRID - 791)) | (1L << (STARTPOINT - 791)) | (1L << (STRCMP - 791)) | (1L << (STR_TO_DATE - 791)) | (1L << (ST_AREA - 791)) | (1L << (ST_ASBINARY - 791)) | (1L << (ST_ASTEXT - 791)) | (1L << (ST_ASWKB - 791)) | (1L << (ST_ASWKT - 791)) | (1L << (ST_BUFFER - 791)) | (1L << (ST_CENTROID - 791)) | (1L << (ST_CONTAINS - 791)) | (1L << (ST_CROSSES - 791)) | (1L << (ST_DIFFERENCE - 791)) | (1L << (ST_DIMENSION - 791)) | (1L << (ST_DISJOINT - 791)) | (1L << (ST_DISTANCE - 791)) | (1L << (ST_ENDPOINT - 791)) | (1L << (ST_ENVELOPE - 791)) | (1L << (ST_EQUALS - 791)) | (1L << (ST_EXTERIORRING - 791)) | (1L << (ST_GEOMCOLLFROMTEXT - 791)) | (1L << (ST_GEOMCOLLFROMTXT - 791)) | (1L << (ST_GEOMCOLLFROMWKB - 791)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 791)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 791)) | (1L << (ST_GEOMETRYFROMTEXT - 791)) | (1L << (ST_GEOMETRYFROMWKB - 791)) | (1L << (ST_GEOMETRYN - 791)) | (1L << (ST_GEOMETRYTYPE - 791)) | (1L << (ST_GEOMFROMTEXT - 791)))) != 0) || ((((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & ((1L << (ST_GEOMFROMWKB - 855)) | (1L << (ST_INTERIORRINGN - 855)) | (1L << (ST_INTERSECTION - 855)) | (1L << (ST_INTERSECTS - 855)) | (1L << (ST_ISCLOSED - 855)) | (1L << (ST_ISEMPTY - 855)) | (1L << (ST_ISSIMPLE - 855)) | (1L << (ST_LINEFROMTEXT - 855)) | (1L << (ST_LINEFROMWKB - 855)) | (1L << (ST_LINESTRINGFROMTEXT - 855)) | (1L << (ST_LINESTRINGFROMWKB - 855)) | (1L << (ST_NUMGEOMETRIES - 855)) | (1L << (ST_NUMINTERIORRING - 855)) | (1L << (ST_NUMINTERIORRINGS - 855)) | (1L << (ST_NUMPOINTS - 855)) | (1L << (ST_OVERLAPS - 855)) | (1L << (ST_POINTFROMTEXT - 855)) | (1L << (ST_POINTFROMWKB - 855)) | (1L << (ST_POINTN - 855)) | (1L << (ST_POLYFROMTEXT - 855)) | (1L << (ST_POLYFROMWKB - 855)) | (1L << (ST_POLYGONFROMTEXT - 855)) | (1L << (ST_POLYGONFROMWKB - 855)) | (1L << (ST_SRID - 855)) | (1L << (ST_STARTPOINT - 855)) | (1L << (ST_SYMDIFFERENCE - 855)) | (1L << (ST_TOUCHES - 855)) | (1L << (ST_UNION - 855)) | (1L << (ST_WITHIN - 855)) | (1L << (ST_X - 855)) | (1L << (ST_Y - 855)) | (1L << (SUBDATE - 855)) | (1L << (SUBSTRING_INDEX - 855)) | (1L << (SUBTIME - 855)) | (1L << (SYSTEM_USER - 855)) | (1L << (TAN - 855)) | (1L << (TIMEDIFF - 855)) | (1L << (TIMESTAMPADD - 855)) | (1L << (TIMESTAMPDIFF - 855)) | (1L << (TIME_FORMAT - 855)) | (1L << (TIME_TO_SEC - 855)) | (1L << (TOUCHES - 855)) | (1L << (TO_BASE64 - 855)) | (1L << (TO_DAYS - 855)) | (1L << (TO_SECONDS - 855)) | (1L << (UCASE - 855)) | (1L << (UNCOMPRESS - 855)) | (1L << (UNCOMPRESSED_LENGTH - 855)) | (1L << (UNHEX - 855)) | (1L << (UNIX_TIMESTAMP - 855)) | (1L << (UPDATEXML - 855)) | (1L << (UPPER - 855)) | (1L << (UUID - 855)) | (1L << (UUID_SHORT - 855)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 855)) | (1L << (VERSION - 855)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 855)) | (1L << (WEEKDAY - 855)) | (1L << (WEEKOFYEAR - 855)) | (1L << (WEIGHT_STRING - 855)) | (1L << (WITHIN - 855)) | (1L << (YEARWEEK - 855)) | (1L << (Y_FUNCTION - 855)) | (1L << (X_FUNCTION - 855)))) != 0) || ((((_la - 931)) & ~0x3f) == 0 && ((1L << (_la - 931)) & ((1L << (PLUS - 931)) | (1L << (MINUS - 931)) | (1L << (EXCLAMATION_SYMBOL - 931)) | (1L << (BIT_NOT_OP - 931)) | (1L << (LR_BRACKET - 931)) | (1L << (ZERO_DECIMAL - 931)) | (1L << (ONE_DECIMAL - 931)) | (1L << (TWO_DECIMAL - 931)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 931)) | (1L << (START_NATIONAL_STRING_LITERAL - 931)) | (1L << (STRING_LITERAL - 931)) | (1L << (DECIMAL_LITERAL - 931)) | (1L << (HEXADECIMAL_LITERAL - 931)) | (1L << (REAL_LITERAL - 931)) | (1L << (NULL_SPEC_LITERAL - 931)) | (1L << (BIT_STRING - 931)) | (1L << (STRING_CHARSET_NAME - 931)) | (1L << (ID - 931)) | (1L << (REVERSE_QUOTE_ID - 931)) | (1L << (LOCAL_ID - 931)) | (1L << (GLOBAL_ID - 931)))) != 0)) {
					{
					State = 5505; functionArgs();
					}
				}

				State = 5508; Match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new UdfFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5510; fullId();
				State = 5511; Match(LR_BRACKET);
				State = 5513;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (IF - 64)) | (1L << (INSERT - 64)) | (1L << (INTERVAL - 64)) | (1L << (LEFT - 64)) | (1L << (NOT - 64)) | (1L << (NULL_LITERAL - 64)) | (1L << (REPLACE - 64)) | (1L << (RIGHT - 64)))) != 0) || ((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & ((1L << (TRUE - 151)) | (1L << (VALUES - 151)) | (1L << (DATE - 151)) | (1L << (TIME - 151)) | (1L << (TIMESTAMP - 151)) | (1L << (DATETIME - 151)) | (1L << (YEAR - 151)) | (1L << (CHAR - 151)) | (1L << (BINARY - 151)) | (1L << (TEXT - 151)) | (1L << (ENUM - 151)) | (1L << (AVG - 151)) | (1L << (BIT_AND - 151)) | (1L << (BIT_OR - 151)) | (1L << (BIT_XOR - 151)) | (1L << (COUNT - 151)) | (1L << (GROUP_CONCAT - 151)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (MAX - 215)) | (1L << (MIN - 215)) | (1L << (STD - 215)) | (1L << (STDDEV - 215)) | (1L << (STDDEV_POP - 215)) | (1L << (STDDEV_SAMP - 215)) | (1L << (SUM - 215)) | (1L << (VAR_POP - 215)) | (1L << (VAR_SAMP - 215)) | (1L << (VARIANCE - 215)) | (1L << (CURRENT_DATE - 215)) | (1L << (CURRENT_TIME - 215)) | (1L << (CURRENT_TIMESTAMP - 215)) | (1L << (LOCALTIME - 215)) | (1L << (CURDATE - 215)) | (1L << (CURTIME - 215)) | (1L << (DATE_ADD - 215)) | (1L << (DATE_SUB - 215)) | (1L << (EXTRACT - 215)) | (1L << (LOCALTIMESTAMP - 215)) | (1L << (NOW - 215)) | (1L << (POSITION - 215)) | (1L << (SUBSTR - 215)) | (1L << (SUBSTRING - 215)) | (1L << (SYSDATE - 215)) | (1L << (TRIM - 215)) | (1L << (UTC_DATE - 215)) | (1L << (UTC_TIME - 215)) | (1L << (UTC_TIMESTAMP - 215)) | (1L << (ACCOUNT - 215)) | (1L << (ACTION - 215)) | (1L << (AFTER - 215)) | (1L << (AGGREGATE - 215)) | (1L << (ALGORITHM - 215)) | (1L << (ANY - 215)) | (1L << (AT - 215)) | (1L << (AUTHORS - 215)) | (1L << (AUTOCOMMIT - 215)) | (1L << (AUTOEXTEND_SIZE - 215)) | (1L << (AUTO_INCREMENT - 215)) | (1L << (AVG_ROW_LENGTH - 215)) | (1L << (BEGIN - 215)) | (1L << (BINLOG - 215)) | (1L << (BIT - 215)) | (1L << (BLOCK - 215)) | (1L << (BOOL - 215)) | (1L << (BOOLEAN - 215)) | (1L << (BTREE - 215)) | (1L << (CASCADED - 215)) | (1L << (CHAIN - 215)) | (1L << (CHANNEL - 215)) | (1L << (CHECKSUM - 215)) | (1L << (CIPHER - 215)) | (1L << (CLIENT - 215)) | (1L << (COALESCE - 215)) | (1L << (CODE - 215)) | (1L << (COLUMNS - 215)) | (1L << (COLUMN_FORMAT - 215)) | (1L << (COMMENT - 215)) | (1L << (COMMIT - 215)) | (1L << (COMPACT - 215)))) != 0) || ((((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & ((1L << (COMPLETION - 279)) | (1L << (COMPRESSED - 279)) | (1L << (COMPRESSION - 279)) | (1L << (CONCURRENT - 279)) | (1L << (CONNECTION - 279)) | (1L << (CONSISTENT - 279)) | (1L << (CONTAINS - 279)) | (1L << (CONTEXT - 279)) | (1L << (CONTRIBUTORS - 279)) | (1L << (COPY - 279)) | (1L << (CPU - 279)) | (1L << (DATA - 279)) | (1L << (DATAFILE - 279)) | (1L << (DEALLOCATE - 279)) | (1L << (DEFAULT_AUTH - 279)) | (1L << (DEFINER - 279)) | (1L << (DELAY_KEY_WRITE - 279)) | (1L << (DIRECTORY - 279)) | (1L << (DISABLE - 279)) | (1L << (DISCARD - 279)) | (1L << (DISK - 279)) | (1L << (DO - 279)) | (1L << (DUMPFILE - 279)) | (1L << (DUPLICATE - 279)) | (1L << (DYNAMIC - 279)) | (1L << (ENABLE - 279)) | (1L << (ENCRYPTION - 279)) | (1L << (ENDS - 279)) | (1L << (ENGINE - 279)) | (1L << (ENGINES - 279)) | (1L << (ERROR - 279)) | (1L << (ERRORS - 279)) | (1L << (ESCAPE - 279)) | (1L << (EVEN - 279)) | (1L << (EVENT - 279)) | (1L << (EVENTS - 279)) | (1L << (EVERY - 279)) | (1L << (EXCHANGE - 279)) | (1L << (EXCLUSIVE - 279)) | (1L << (EXPIRE - 279)) | (1L << (EXTENT_SIZE - 279)) | (1L << (FAULTS - 279)) | (1L << (FIELDS - 279)) | (1L << (FILE_BLOCK_SIZE - 279)) | (1L << (FILTER - 279)) | (1L << (FIRST - 279)) | (1L << (FIXED - 279)) | (1L << (FOLLOWS - 279)) | (1L << (FULL - 279)) | (1L << (FUNCTION - 279)) | (1L << (GLOBAL - 279)) | (1L << (GRANTS - 279)) | (1L << (GROUP_REPLICATION - 279)) | (1L << (HASH - 279)))) != 0) || ((((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & ((1L << (HOST - 343)) | (1L << (IDENTIFIED - 343)) | (1L << (IGNORE_SERVER_IDS - 343)) | (1L << (IMPORT - 343)) | (1L << (INDEXES - 343)) | (1L << (INITIAL_SIZE - 343)) | (1L << (INPLACE - 343)) | (1L << (INSERT_METHOD - 343)) | (1L << (INSTANCE - 343)) | (1L << (INVOKER - 343)) | (1L << (IO - 343)) | (1L << (IO_THREAD - 343)) | (1L << (IPC - 343)) | (1L << (ISOLATION - 343)) | (1L << (ISSUER - 343)) | (1L << (KEY_BLOCK_SIZE - 343)) | (1L << (LANGUAGE - 343)) | (1L << (LAST - 343)) | (1L << (LEAVES - 343)) | (1L << (LESS - 343)) | (1L << (LEVEL - 343)) | (1L << (LIST - 343)) | (1L << (LOCAL - 343)) | (1L << (LOGFILE - 343)) | (1L << (LOGS - 343)) | (1L << (MASTER - 343)) | (1L << (MASTER_AUTO_POSITION - 343)) | (1L << (MASTER_CONNECT_RETRY - 343)) | (1L << (MASTER_DELAY - 343)) | (1L << (MASTER_HEARTBEAT_PERIOD - 343)) | (1L << (MASTER_HOST - 343)) | (1L << (MASTER_LOG_FILE - 343)) | (1L << (MASTER_LOG_POS - 343)) | (1L << (MASTER_PASSWORD - 343)) | (1L << (MASTER_PORT - 343)) | (1L << (MASTER_RETRY_COUNT - 343)) | (1L << (MASTER_SSL - 343)) | (1L << (MASTER_SSL_CA - 343)) | (1L << (MASTER_SSL_CAPATH - 343)) | (1L << (MASTER_SSL_CERT - 343)) | (1L << (MASTER_SSL_CIPHER - 343)) | (1L << (MASTER_SSL_CRL - 343)) | (1L << (MASTER_SSL_CRLPATH - 343)) | (1L << (MASTER_SSL_KEY - 343)) | (1L << (MASTER_TLS_VERSION - 343)) | (1L << (MASTER_USER - 343)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 343)) | (1L << (MAX_QUERIES_PER_HOUR - 343)) | (1L << (MAX_ROWS - 343)) | (1L << (MAX_SIZE - 343)) | (1L << (MAX_UPDATES_PER_HOUR - 343)) | (1L << (MAX_USER_CONNECTIONS - 343)) | (1L << (MERGE - 343)) | (1L << (MID - 343)) | (1L << (MIGRATE - 343)) | (1L << (MIN_ROWS - 343)) | (1L << (MODIFY - 343)) | (1L << (MUTEX - 343)) | (1L << (MYSQL - 343)))) != 0) || ((((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & ((1L << (NAME - 407)) | (1L << (NAMES - 407)) | (1L << (NCHAR - 407)) | (1L << (NEVER - 407)) | (1L << (NO - 407)) | (1L << (NODEGROUP - 407)) | (1L << (NONE - 407)) | (1L << (OFFLINE - 407)) | (1L << (OFFSET - 407)) | (1L << (OJ - 407)) | (1L << (OLD_PASSWORD - 407)) | (1L << (ONE - 407)) | (1L << (ONLINE - 407)) | (1L << (ONLY - 407)) | (1L << (OPTIMIZER_COSTS - 407)) | (1L << (OPTIONS - 407)) | (1L << (OWNER - 407)) | (1L << (PACK_KEYS - 407)) | (1L << (PAGE - 407)) | (1L << (PARSER - 407)) | (1L << (PARTIAL - 407)) | (1L << (PARTITIONING - 407)) | (1L << (PARTITIONS - 407)) | (1L << (PASSWORD - 407)) | (1L << (PHASE - 407)) | (1L << (PLUGIN_DIR - 407)) | (1L << (PLUGINS - 407)) | (1L << (PORT - 407)) | (1L << (PRECEDES - 407)) | (1L << (PREPARE - 407)) | (1L << (PRESERVE - 407)) | (1L << (PREV - 407)) | (1L << (PROCESSLIST - 407)) | (1L << (PROFILE - 407)) | (1L << (PROFILES - 407)) | (1L << (PROXY - 407)) | (1L << (QUERY - 407)) | (1L << (QUICK - 407)) | (1L << (REBUILD - 407)) | (1L << (RECOVER - 407)) | (1L << (REDO_BUFFER_SIZE - 407)) | (1L << (REDUNDANT - 407)) | (1L << (RELAY_LOG_FILE - 407)) | (1L << (RELAY_LOG_POS - 407)) | (1L << (RELAYLOG - 407)) | (1L << (REMOVE - 407)) | (1L << (REORGANIZE - 407)) | (1L << (REPAIR - 407)) | (1L << (REPLICATE_DO_DB - 407)) | (1L << (REPLICATE_DO_TABLE - 407)) | (1L << (REPLICATE_IGNORE_DB - 407)) | (1L << (REPLICATE_IGNORE_TABLE - 407)) | (1L << (REPLICATE_REWRITE_DB - 407)) | (1L << (REPLICATE_WILD_DO_TABLE - 407)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 407)) | (1L << (REPLICATION - 407)) | (1L << (RESUME - 407)) | (1L << (RETURNS - 407)) | (1L << (ROLLBACK - 407)))) != 0) || ((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & ((1L << (ROLLUP - 471)) | (1L << (ROTATE - 471)) | (1L << (ROW - 471)) | (1L << (ROWS - 471)) | (1L << (ROW_FORMAT - 471)) | (1L << (SAVEPOINT - 471)) | (1L << (SCHEDULE - 471)) | (1L << (SECURITY - 471)) | (1L << (SERVER - 471)) | (1L << (SESSION - 471)) | (1L << (SHARE - 471)) | (1L << (SHARED - 471)) | (1L << (SIGNED - 471)) | (1L << (SIMPLE - 471)) | (1L << (SLAVE - 471)) | (1L << (SNAPSHOT - 471)) | (1L << (SOCKET - 471)) | (1L << (SOME - 471)) | (1L << (SOUNDS - 471)) | (1L << (SOURCE - 471)) | (1L << (SQL_AFTER_GTIDS - 471)) | (1L << (SQL_AFTER_MTS_GAPS - 471)) | (1L << (SQL_BEFORE_GTIDS - 471)) | (1L << (SQL_BUFFER_RESULT - 471)) | (1L << (SQL_CACHE - 471)) | (1L << (SQL_NO_CACHE - 471)) | (1L << (SQL_THREAD - 471)) | (1L << (START - 471)) | (1L << (STARTS - 471)) | (1L << (STATS_AUTO_RECALC - 471)) | (1L << (STATS_PERSISTENT - 471)) | (1L << (STATS_SAMPLE_PAGES - 471)) | (1L << (STATUS - 471)) | (1L << (STOP - 471)) | (1L << (STORAGE - 471)) | (1L << (STRING - 471)) | (1L << (SUBJECT - 471)) | (1L << (SUBPARTITION - 471)) | (1L << (SUBPARTITIONS - 471)) | (1L << (SUSPEND - 471)) | (1L << (SWAPS - 471)) | (1L << (SWITCHES - 471)) | (1L << (TABLESPACE - 471)) | (1L << (TEMPORARY - 471)) | (1L << (TEMPTABLE - 471)) | (1L << (THAN - 471)) | (1L << (TRANSACTION - 471)) | (1L << (TRUNCATE - 471)) | (1L << (UNDEFINED - 471)) | (1L << (UNDOFILE - 471)) | (1L << (UNDO_BUFFER_SIZE - 471)) | (1L << (UNKNOWN - 471)) | (1L << (UPGRADE - 471)) | (1L << (USER - 471)) | (1L << (VALIDATION - 471)) | (1L << (VALUE - 471)))) != 0) || ((((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & ((1L << (VARIABLES - 535)) | (1L << (VIEW - 535)) | (1L << (WAIT - 535)) | (1L << (WARNINGS - 535)) | (1L << (WITHOUT - 535)) | (1L << (WORK - 535)) | (1L << (WRAPPER - 535)) | (1L << (X509 - 535)) | (1L << (XA - 535)) | (1L << (XML - 535)) | (1L << (QUARTER - 535)) | (1L << (MONTH - 535)) | (1L << (DAY - 535)) | (1L << (HOUR - 535)) | (1L << (MINUTE - 535)) | (1L << (WEEK - 535)) | (1L << (SECOND - 535)) | (1L << (MICROSECOND - 535)) | (1L << (TABLES - 535)) | (1L << (ROUTINE - 535)) | (1L << (EXECUTE - 535)) | (1L << (FILE - 535)) | (1L << (PROCESS - 535)) | (1L << (RELOAD - 535)) | (1L << (SHUTDOWN - 535)) | (1L << (SUPER - 535)) | (1L << (PRIVILEGES - 535)) | (1L << (ARMSCII8 - 535)) | (1L << (ASCII - 535)) | (1L << (BIG5 - 535)) | (1L << (CP1250 - 535)) | (1L << (CP1251 - 535)) | (1L << (CP1256 - 535)) | (1L << (CP1257 - 535)) | (1L << (CP850 - 535)) | (1L << (CP852 - 535)) | (1L << (CP866 - 535)) | (1L << (CP932 - 535)) | (1L << (DEC8 - 535)) | (1L << (EUCJPMS - 535)) | (1L << (EUCKR - 535)) | (1L << (GB2312 - 535)) | (1L << (GBK - 535)) | (1L << (GEOSTD8 - 535)) | (1L << (GREEK - 535)) | (1L << (HEBREW - 535)) | (1L << (HP8 - 535)) | (1L << (KEYBCS2 - 535)) | (1L << (KOI8R - 535)) | (1L << (KOI8U - 535)) | (1L << (LATIN1 - 535)) | (1L << (LATIN2 - 535)) | (1L << (LATIN5 - 535)) | (1L << (LATIN7 - 535)) | (1L << (MACCE - 535)) | (1L << (MACROMAN - 535)) | (1L << (SJIS - 535)) | (1L << (SWE7 - 535)) | (1L << (TIS620 - 535)))) != 0) || ((((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & ((1L << (UCS2 - 599)) | (1L << (UJIS - 599)) | (1L << (UTF16 - 599)) | (1L << (UTF16LE - 599)) | (1L << (UTF32 - 599)) | (1L << (UTF8 - 599)) | (1L << (UTF8MB3 - 599)) | (1L << (UTF8MB4 - 599)) | (1L << (ARCHIVE - 599)) | (1L << (BLACKHOLE - 599)) | (1L << (CSV - 599)) | (1L << (FEDERATED - 599)) | (1L << (INNODB - 599)) | (1L << (MEMORY - 599)) | (1L << (MRG_MYISAM - 599)) | (1L << (MYISAM - 599)) | (1L << (NDB - 599)) | (1L << (NDBCLUSTER - 599)) | (1L << (PERFOMANCE_SCHEMA - 599)) | (1L << (REPEATABLE - 599)) | (1L << (COMMITTED - 599)) | (1L << (UNCOMMITTED - 599)) | (1L << (SERIALIZABLE - 599)) | (1L << (GEOMETRYCOLLECTION - 599)) | (1L << (LINESTRING - 599)) | (1L << (MULTILINESTRING - 599)) | (1L << (MULTIPOINT - 599)) | (1L << (MULTIPOLYGON - 599)) | (1L << (POINT - 599)) | (1L << (POLYGON - 599)) | (1L << (ABS - 599)) | (1L << (ACOS - 599)) | (1L << (ADDDATE - 599)) | (1L << (ADDTIME - 599)) | (1L << (AES_DECRYPT - 599)) | (1L << (AES_ENCRYPT - 599)) | (1L << (AREA - 599)) | (1L << (ASBINARY - 599)) | (1L << (ASIN - 599)) | (1L << (ASTEXT - 599)) | (1L << (ASWKB - 599)) | (1L << (ASWKT - 599)) | (1L << (ASYMMETRIC_DECRYPT - 599)) | (1L << (ASYMMETRIC_DERIVE - 599)) | (1L << (ASYMMETRIC_ENCRYPT - 599)) | (1L << (ASYMMETRIC_SIGN - 599)) | (1L << (ASYMMETRIC_VERIFY - 599)) | (1L << (ATAN - 599)) | (1L << (ATAN2 - 599)) | (1L << (BENCHMARK - 599)) | (1L << (BIN - 599)) | (1L << (BIT_COUNT - 599)) | (1L << (BIT_LENGTH - 599)) | (1L << (BUFFER - 599)) | (1L << (CEIL - 599)) | (1L << (CEILING - 599)) | (1L << (CENTROID - 599)) | (1L << (CHARACTER_LENGTH - 599)) | (1L << (CHARSET - 599)) | (1L << (CHAR_LENGTH - 599)) | (1L << (COERCIBILITY - 599)) | (1L << (COLLATION - 599)) | (1L << (COMPRESS - 599)) | (1L << (CONCAT - 599)))) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & ((1L << (CONCAT_WS - 663)) | (1L << (CONNECTION_ID - 663)) | (1L << (CONV - 663)) | (1L << (CONVERT_TZ - 663)) | (1L << (COS - 663)) | (1L << (COT - 663)) | (1L << (CRC32 - 663)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 663)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 663)) | (1L << (CREATE_DH_PARAMETERS - 663)) | (1L << (CREATE_DIGEST - 663)) | (1L << (CROSSES - 663)) | (1L << (DATEDIFF - 663)) | (1L << (DATE_FORMAT - 663)) | (1L << (DAYNAME - 663)) | (1L << (DAYOFMONTH - 663)) | (1L << (DAYOFWEEK - 663)) | (1L << (DAYOFYEAR - 663)) | (1L << (DECODE - 663)) | (1L << (DEGREES - 663)) | (1L << (DES_DECRYPT - 663)) | (1L << (DES_ENCRYPT - 663)) | (1L << (DIMENSION - 663)) | (1L << (DISJOINT - 663)) | (1L << (ELT - 663)) | (1L << (ENCODE - 663)) | (1L << (ENCRYPT - 663)) | (1L << (ENDPOINT - 663)) | (1L << (ENVELOPE - 663)) | (1L << (EQUALS - 663)) | (1L << (EXP - 663)) | (1L << (EXPORT_SET - 663)) | (1L << (EXTERIORRING - 663)) | (1L << (EXTRACTVALUE - 663)) | (1L << (FIELD - 663)) | (1L << (FIND_IN_SET - 663)) | (1L << (FLOOR - 663)) | (1L << (FORMAT - 663)) | (1L << (FOUND_ROWS - 663)) | (1L << (FROM_BASE64 - 663)) | (1L << (FROM_DAYS - 663)) | (1L << (FROM_UNIXTIME - 663)) | (1L << (GEOMCOLLFROMTEXT - 663)) | (1L << (GEOMCOLLFROMWKB - 663)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 663)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 663)) | (1L << (GEOMETRYFROMTEXT - 663)) | (1L << (GEOMETRYFROMWKB - 663)) | (1L << (GEOMETRYN - 663)) | (1L << (GEOMETRYTYPE - 663)) | (1L << (GEOMFROMTEXT - 663)) | (1L << (GEOMFROMWKB - 663)) | (1L << (GET_FORMAT - 663)) | (1L << (GET_LOCK - 663)) | (1L << (GLENGTH - 663)) | (1L << (GREATEST - 663)) | (1L << (GTID_SUBSET - 663)) | (1L << (GTID_SUBTRACT - 663)) | (1L << (HEX - 663)) | (1L << (IFNULL - 663)) | (1L << (INET6_ATON - 663)) | (1L << (INET6_NTOA - 663)) | (1L << (INET_ATON - 663)) | (1L << (INET_NTOA - 663)))) != 0) || ((((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & ((1L << (INSTR - 727)) | (1L << (INTERIORRINGN - 727)) | (1L << (INTERSECTS - 727)) | (1L << (ISCLOSED - 727)) | (1L << (ISEMPTY - 727)) | (1L << (ISNULL - 727)) | (1L << (ISSIMPLE - 727)) | (1L << (IS_FREE_LOCK - 727)) | (1L << (IS_IPV4 - 727)) | (1L << (IS_IPV4_COMPAT - 727)) | (1L << (IS_IPV4_MAPPED - 727)) | (1L << (IS_IPV6 - 727)) | (1L << (IS_USED_LOCK - 727)) | (1L << (LAST_INSERT_ID - 727)) | (1L << (LCASE - 727)) | (1L << (LEAST - 727)) | (1L << (LENGTH - 727)) | (1L << (LINEFROMTEXT - 727)) | (1L << (LINEFROMWKB - 727)) | (1L << (LINESTRINGFROMTEXT - 727)) | (1L << (LINESTRINGFROMWKB - 727)) | (1L << (LN - 727)) | (1L << (LOAD_FILE - 727)) | (1L << (LOCATE - 727)) | (1L << (LOG - 727)) | (1L << (LOG10 - 727)) | (1L << (LOG2 - 727)) | (1L << (LOWER - 727)) | (1L << (LPAD - 727)) | (1L << (LTRIM - 727)) | (1L << (MAKEDATE - 727)) | (1L << (MAKETIME - 727)) | (1L << (MAKE_SET - 727)) | (1L << (MASTER_POS_WAIT - 727)) | (1L << (MBRCONTAINS - 727)) | (1L << (MBRDISJOINT - 727)) | (1L << (MBREQUAL - 727)) | (1L << (MBRINTERSECTS - 727)) | (1L << (MBROVERLAPS - 727)) | (1L << (MBRTOUCHES - 727)) | (1L << (MBRWITHIN - 727)) | (1L << (MD5 - 727)) | (1L << (MLINEFROMTEXT - 727)) | (1L << (MLINEFROMWKB - 727)) | (1L << (MONTHNAME - 727)) | (1L << (MPOINTFROMTEXT - 727)) | (1L << (MPOINTFROMWKB - 727)) | (1L << (MPOLYFROMTEXT - 727)) | (1L << (MPOLYFROMWKB - 727)) | (1L << (MULTILINESTRINGFROMTEXT - 727)) | (1L << (MULTILINESTRINGFROMWKB - 727)) | (1L << (MULTIPOINTFROMTEXT - 727)) | (1L << (MULTIPOINTFROMWKB - 727)) | (1L << (MULTIPOLYGONFROMTEXT - 727)) | (1L << (MULTIPOLYGONFROMWKB - 727)) | (1L << (NAME_CONST - 727)) | (1L << (NULLIF - 727)) | (1L << (NUMGEOMETRIES - 727)) | (1L << (NUMINTERIORRINGS - 727)) | (1L << (NUMPOINTS - 727)) | (1L << (OCT - 727)) | (1L << (OCTET_LENGTH - 727)) | (1L << (ORD - 727)) | (1L << (OVERLAPS - 727)))) != 0) || ((((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & ((1L << (PERIOD_ADD - 791)) | (1L << (PERIOD_DIFF - 791)) | (1L << (PI - 791)) | (1L << (POINTFROMTEXT - 791)) | (1L << (POINTFROMWKB - 791)) | (1L << (POINTN - 791)) | (1L << (POLYFROMTEXT - 791)) | (1L << (POLYFROMWKB - 791)) | (1L << (POLYGONFROMTEXT - 791)) | (1L << (POLYGONFROMWKB - 791)) | (1L << (POW - 791)) | (1L << (POWER - 791)) | (1L << (QUOTE - 791)) | (1L << (RADIANS - 791)) | (1L << (RAND - 791)) | (1L << (RANDOM_BYTES - 791)) | (1L << (RELEASE_LOCK - 791)) | (1L << (REVERSE - 791)) | (1L << (ROUND - 791)) | (1L << (ROW_COUNT - 791)) | (1L << (RPAD - 791)) | (1L << (RTRIM - 791)) | (1L << (SEC_TO_TIME - 791)) | (1L << (SESSION_USER - 791)) | (1L << (SHA - 791)) | (1L << (SHA1 - 791)) | (1L << (SHA2 - 791)) | (1L << (SIGN - 791)) | (1L << (SIN - 791)) | (1L << (SLEEP - 791)) | (1L << (SOUNDEX - 791)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 791)) | (1L << (SQRT - 791)) | (1L << (SRID - 791)) | (1L << (STARTPOINT - 791)) | (1L << (STRCMP - 791)) | (1L << (STR_TO_DATE - 791)) | (1L << (ST_AREA - 791)) | (1L << (ST_ASBINARY - 791)) | (1L << (ST_ASTEXT - 791)) | (1L << (ST_ASWKB - 791)) | (1L << (ST_ASWKT - 791)) | (1L << (ST_BUFFER - 791)) | (1L << (ST_CENTROID - 791)) | (1L << (ST_CONTAINS - 791)) | (1L << (ST_CROSSES - 791)) | (1L << (ST_DIFFERENCE - 791)) | (1L << (ST_DIMENSION - 791)) | (1L << (ST_DISJOINT - 791)) | (1L << (ST_DISTANCE - 791)) | (1L << (ST_ENDPOINT - 791)) | (1L << (ST_ENVELOPE - 791)) | (1L << (ST_EQUALS - 791)) | (1L << (ST_EXTERIORRING - 791)) | (1L << (ST_GEOMCOLLFROMTEXT - 791)) | (1L << (ST_GEOMCOLLFROMTXT - 791)) | (1L << (ST_GEOMCOLLFROMWKB - 791)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 791)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 791)) | (1L << (ST_GEOMETRYFROMTEXT - 791)) | (1L << (ST_GEOMETRYFROMWKB - 791)) | (1L << (ST_GEOMETRYN - 791)) | (1L << (ST_GEOMETRYTYPE - 791)) | (1L << (ST_GEOMFROMTEXT - 791)))) != 0) || ((((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & ((1L << (ST_GEOMFROMWKB - 855)) | (1L << (ST_INTERIORRINGN - 855)) | (1L << (ST_INTERSECTION - 855)) | (1L << (ST_INTERSECTS - 855)) | (1L << (ST_ISCLOSED - 855)) | (1L << (ST_ISEMPTY - 855)) | (1L << (ST_ISSIMPLE - 855)) | (1L << (ST_LINEFROMTEXT - 855)) | (1L << (ST_LINEFROMWKB - 855)) | (1L << (ST_LINESTRINGFROMTEXT - 855)) | (1L << (ST_LINESTRINGFROMWKB - 855)) | (1L << (ST_NUMGEOMETRIES - 855)) | (1L << (ST_NUMINTERIORRING - 855)) | (1L << (ST_NUMINTERIORRINGS - 855)) | (1L << (ST_NUMPOINTS - 855)) | (1L << (ST_OVERLAPS - 855)) | (1L << (ST_POINTFROMTEXT - 855)) | (1L << (ST_POINTFROMWKB - 855)) | (1L << (ST_POINTN - 855)) | (1L << (ST_POLYFROMTEXT - 855)) | (1L << (ST_POLYFROMWKB - 855)) | (1L << (ST_POLYGONFROMTEXT - 855)) | (1L << (ST_POLYGONFROMWKB - 855)) | (1L << (ST_SRID - 855)) | (1L << (ST_STARTPOINT - 855)) | (1L << (ST_SYMDIFFERENCE - 855)) | (1L << (ST_TOUCHES - 855)) | (1L << (ST_UNION - 855)) | (1L << (ST_WITHIN - 855)) | (1L << (ST_X - 855)) | (1L << (ST_Y - 855)) | (1L << (SUBDATE - 855)) | (1L << (SUBSTRING_INDEX - 855)) | (1L << (SUBTIME - 855)) | (1L << (SYSTEM_USER - 855)) | (1L << (TAN - 855)) | (1L << (TIMEDIFF - 855)) | (1L << (TIMESTAMPADD - 855)) | (1L << (TIMESTAMPDIFF - 855)) | (1L << (TIME_FORMAT - 855)) | (1L << (TIME_TO_SEC - 855)) | (1L << (TOUCHES - 855)) | (1L << (TO_BASE64 - 855)) | (1L << (TO_DAYS - 855)) | (1L << (TO_SECONDS - 855)) | (1L << (UCASE - 855)) | (1L << (UNCOMPRESS - 855)) | (1L << (UNCOMPRESSED_LENGTH - 855)) | (1L << (UNHEX - 855)) | (1L << (UNIX_TIMESTAMP - 855)) | (1L << (UPDATEXML - 855)) | (1L << (UPPER - 855)) | (1L << (UUID - 855)) | (1L << (UUID_SHORT - 855)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 855)) | (1L << (VERSION - 855)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 855)) | (1L << (WEEKDAY - 855)) | (1L << (WEEKOFYEAR - 855)) | (1L << (WEIGHT_STRING - 855)) | (1L << (WITHIN - 855)) | (1L << (YEARWEEK - 855)) | (1L << (Y_FUNCTION - 855)) | (1L << (X_FUNCTION - 855)))) != 0) || ((((_la - 931)) & ~0x3f) == 0 && ((1L << (_la - 931)) & ((1L << (PLUS - 931)) | (1L << (MINUS - 931)) | (1L << (EXCLAMATION_SYMBOL - 931)) | (1L << (BIT_NOT_OP - 931)) | (1L << (LR_BRACKET - 931)) | (1L << (ZERO_DECIMAL - 931)) | (1L << (ONE_DECIMAL - 931)) | (1L << (TWO_DECIMAL - 931)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 931)) | (1L << (START_NATIONAL_STRING_LITERAL - 931)) | (1L << (STRING_LITERAL - 931)) | (1L << (DECIMAL_LITERAL - 931)) | (1L << (HEXADECIMAL_LITERAL - 931)) | (1L << (REAL_LITERAL - 931)) | (1L << (NULL_SPEC_LITERAL - 931)) | (1L << (BIT_STRING - 931)) | (1L << (STRING_CHARSET_NAME - 931)) | (1L << (ID - 931)) | (1L << (REVERSE_QUOTE_ID - 931)) | (1L << (LOCAL_ID - 931)) | (1L << (GLOBAL_ID - 931)))) != 0)) {
					{
					State = 5512; functionArgs();
					}
				}

				State = 5515; Match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new PasswordFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 5517; passwordFunctionClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecificFunctionContext : ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specificFunction; } }
	 
		public SpecificFunctionContext() { }
		public virtual void CopyFrom(SpecificFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PositionFunctionCallContext : SpecificFunctionContext {
		public StringLiteralContext positionString;
		public ExpressionContext positionExpression;
		public StringLiteralContext inString;
		public ExpressionContext inExpression;
		public ITerminalNode POSITION() { return GetToken(MySqlParser.POSITION, 0); }
		public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		public StringLiteralContext[] stringLiteral() {
			return GetRuleContexts<StringLiteralContext>();
		}
		public StringLiteralContext stringLiteral(int i) {
			return GetRuleContext<StringLiteralContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PositionFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPositionFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPositionFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrimFunctionCallContext : SpecificFunctionContext {
		public IToken positioinForm;
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public StringLiteralContext fromString;
		public ExpressionContext fromExpression;
		public ITerminalNode TRIM() { return GetToken(MySqlParser.TRIM, 0); }
		public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		public ITerminalNode BOTH() { return GetToken(MySqlParser.BOTH, 0); }
		public ITerminalNode LEADING() { return GetToken(MySqlParser.LEADING, 0); }
		public ITerminalNode TRAILING() { return GetToken(MySqlParser.TRAILING, 0); }
		public StringLiteralContext[] stringLiteral() {
			return GetRuleContexts<StringLiteralContext>();
		}
		public StringLiteralContext stringLiteral(int i) {
			return GetRuleContext<StringLiteralContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TrimFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTrimFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTrimFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrimFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleFunctionCallContext : SpecificFunctionContext {
		public ITerminalNode CURRENT_DATE() { return GetToken(MySqlParser.CURRENT_DATE, 0); }
		public ITerminalNode CURRENT_TIME() { return GetToken(MySqlParser.CURRENT_TIME, 0); }
		public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public ITerminalNode CURRENT_USER() { return GetToken(MySqlParser.CURRENT_USER, 0); }
		public ITerminalNode LOCALTIME() { return GetToken(MySqlParser.LOCALTIME, 0); }
		public SimpleFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharFunctionCallContext : SpecificFunctionContext {
		public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public CharFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCharFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCharFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WeightFunctionCallContext : SpecificFunctionContext {
		public IToken stringFormat;
		public ITerminalNode WEIGHT_STRING() { return GetToken(MySqlParser.WEIGHT_STRING, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public LevelsInWeightStringContext levelsInWeightString() {
			return GetRuleContext<LevelsInWeightStringContext>(0);
		}
		public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWeightFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWeightFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeightFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetFormatFunctionCallContext : SpecificFunctionContext {
		public IToken datetimeFormat;
		public ITerminalNode GET_FORMAT() { return GetToken(MySqlParser.GET_FORMAT, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGetFormatFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGetFormatFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetFormatFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseFunctionCallContext : SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public ITerminalNode CASE() { return GetToken(MySqlParser.CASE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		public CaseFuncAlternativeContext[] caseFuncAlternative() {
			return GetRuleContexts<CaseFuncAlternativeContext>();
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return GetRuleContext<CaseFuncAlternativeContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(MySqlParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		public CaseFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCaseFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCaseFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExtractFunctionCallContext : SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public ITerminalNode EXTRACT() { return GetToken(MySqlParser.EXTRACT, 0); }
		public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExtractFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExtractFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExtractFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtractFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DataTypeFunctionCallContext : SpecificFunctionContext {
		public IToken separator;
		public ITerminalNode CONVERT() { return GetToken(MySqlParser.CONVERT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConvertedDataTypeContext convertedDataType() {
			return GetRuleContext<ConvertedDataTypeContext>(0);
		}
		public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public ITerminalNode CAST() { return GetToken(MySqlParser.CAST, 0); }
		public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDataTypeFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDataTypeFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataTypeFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValuesFunctionCallContext : SpecificFunctionContext {
		public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		public ValuesFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterValuesFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitValuesFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValuesFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubstrFunctionCallContext : SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public DecimalLiteralContext fromDecimal;
		public ExpressionContext fromExpression;
		public DecimalLiteralContext forDecimal;
		public ExpressionContext forExpression;
		public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		public ITerminalNode SUBSTR() { return GetToken(MySqlParser.SUBSTR, 0); }
		public ITerminalNode SUBSTRING() { return GetToken(MySqlParser.SUBSTRING, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubstrFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubstrFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstrFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecificFunctionContext specificFunction() {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(Context, State);
		EnterRule(_localctx, 568, RULE_specificFunction);
		int _la;
		try {
			State = 5677;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,828,Context) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5520;
				_la = TokenStream.LA(1);
				if ( !(_la==CURRENT_USER || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (CURRENT_DATE - 225)) | (1L << (CURRENT_TIME - 225)) | (1L << (CURRENT_TIMESTAMP - 225)) | (1L << (LOCALTIME - 225)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5521; Match(CONVERT);
				State = 5522; Match(LR_BRACKET);
				State = 5523; expression(0);
				State = 5524; ((DataTypeFunctionCallContext)_localctx).separator = Match(COMMA);
				State = 5525; convertedDataType();
				State = 5526; Match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5528; Match(CONVERT);
				State = 5529; Match(LR_BRACKET);
				State = 5530; expression(0);
				State = 5531; Match(USING);
				State = 5532; charsetName();
				State = 5533; Match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5535; Match(CAST);
				State = 5536; Match(LR_BRACKET);
				State = 5537; expression(0);
				State = 5538; Match(AS);
				State = 5539; convertedDataType();
				State = 5540; Match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 5542; Match(VALUES);
				State = 5543; Match(LR_BRACKET);
				State = 5544; fullColumnName();
				State = 5545; Match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CaseFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 5547; Match(CASE);
				State = 5548; expression(0);
				State = 5550;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 5549; caseFuncAlternative();
					}
					}
					State = 5552;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 5556;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 5554; Match(ELSE);
					State = 5555; ((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				State = 5558; Match(END);
				}
				break;
			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 5560; Match(CASE);
				State = 5562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 5561; caseFuncAlternative();
					}
					}
					State = 5564;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 5568;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 5566; Match(ELSE);
					State = 5567; ((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				State = 5570; Match(END);
				}
				break;
			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 5572; Match(CHAR);
				State = 5573; Match(LR_BRACKET);
				State = 5574; functionArgs();
				State = 5577;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 5575; Match(USING);
					State = 5576; charsetName();
					}
				}

				State = 5579; Match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 5581; Match(POSITION);
				State = 5582; Match(LR_BRACKET);
				State = 5585;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,814,Context) ) {
				case 1:
					{
					State = 5583; ((PositionFunctionCallContext)_localctx).positionString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 5584; ((PositionFunctionCallContext)_localctx).positionExpression = expression(0);
					}
					break;
				}
				State = 5587; Match(IN);
				State = 5590;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,815,Context) ) {
				case 1:
					{
					State = 5588; ((PositionFunctionCallContext)_localctx).inString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 5589; ((PositionFunctionCallContext)_localctx).inExpression = expression(0);
					}
					break;
				}
				State = 5592; Match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 5594;
				_la = TokenStream.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5595; Match(LR_BRACKET);
				State = 5598;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,816,Context) ) {
				case 1:
					{
					State = 5596; ((SubstrFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 5597; ((SubstrFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 5600; Match(FROM);
				State = 5603;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,817,Context) ) {
				case 1:
					{
					State = 5601; ((SubstrFunctionCallContext)_localctx).fromDecimal = decimalLiteral();
					}
					break;
				case 2:
					{
					State = 5602; ((SubstrFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				State = 5610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 5605; Match(FOR);
					State = 5608;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,818,Context) ) {
					case 1:
						{
						State = 5606; ((SubstrFunctionCallContext)_localctx).forDecimal = decimalLiteral();
						}
						break;
					case 2:
						{
						State = 5607; ((SubstrFunctionCallContext)_localctx).forExpression = expression(0);
						}
						break;
					}
					}
				}

				State = 5612; Match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 5614; Match(TRIM);
				State = 5615; Match(LR_BRACKET);
				State = 5616;
				((TrimFunctionCallContext)_localctx).positioinForm = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5619;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,820,Context) ) {
				case 1:
					{
					State = 5617; ((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 5618; ((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 5621; Match(FROM);
				State = 5624;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,821,Context) ) {
				case 1:
					{
					State = 5622; ((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 5623; ((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				State = 5626; Match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 5628; Match(TRIM);
				State = 5629; Match(LR_BRACKET);
				State = 5632;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,822,Context) ) {
				case 1:
					{
					State = 5630; ((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 5631; ((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 5634; Match(FROM);
				State = 5637;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,823,Context) ) {
				case 1:
					{
					State = 5635; ((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 5636; ((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				State = 5639; Match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 5641; Match(WEIGHT_STRING);
				State = 5642; Match(LR_BRACKET);
				State = 5645;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,824,Context) ) {
				case 1:
					{
					State = 5643; stringLiteral();
					}
					break;
				case 2:
					{
					State = 5644; expression(0);
					}
					break;
				}
				State = 5653;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 5647; Match(AS);
					State = 5648;
					((WeightFunctionCallContext)_localctx).stringFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5649; Match(LR_BRACKET);
					State = 5650; decimalLiteral();
					State = 5651; Match(RR_BRACKET);
					}
				}

				State = 5656;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEVEL) {
					{
					State = 5655; levelsInWeightString();
					}
				}

				State = 5658; Match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 5660; Match(EXTRACT);
				State = 5661; Match(LR_BRACKET);
				State = 5662; intervalType();
				State = 5663; Match(FROM);
				State = 5666;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,827,Context) ) {
				case 1:
					{
					State = 5664; ((ExtractFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 5665; ((ExtractFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 5668; Match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 5670; Match(GET_FORMAT);
				State = 5671; Match(LR_BRACKET);
				State = 5672;
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (DATETIME - 180)))) != 0)) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5673; Match(COMMA);
				State = 5674; stringLiteral();
				State = 5675; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseFuncAlternativeContext : ParserRuleContext {
		public FunctionArgContext condition;
		public FunctionArgContext consequent;
		public ITerminalNode WHEN() { return GetToken(MySqlParser.WHEN, 0); }
		public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
		public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseFuncAlternative; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCaseFuncAlternative(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCaseFuncAlternative(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseFuncAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseFuncAlternativeContext caseFuncAlternative() {
		CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(Context, State);
		EnterRule(_localctx, 570, RULE_caseFuncAlternative);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5679; Match(WHEN);
			State = 5680; _localctx.condition = functionArg();
			State = 5681; Match(THEN);
			State = 5682; _localctx.consequent = functionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelsInWeightStringContext : ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_levelsInWeightString; } }
	 
		public LevelsInWeightStringContext() { }
		public virtual void CopyFrom(LevelsInWeightStringContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LevelWeightRangeContext : LevelsInWeightStringContext {
		public DecimalLiteralContext firstLevel;
		public DecimalLiteralContext lastLevel;
		public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
		public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		public LevelWeightRangeContext(LevelsInWeightStringContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLevelWeightRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLevelWeightRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevelWeightRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LevelWeightListContext : LevelsInWeightStringContext {
		public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
		public LevelInWeightListElementContext[] levelInWeightListElement() {
			return GetRuleContexts<LevelInWeightListElementContext>();
		}
		public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return GetRuleContext<LevelInWeightListElementContext>(i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLevelWeightList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLevelWeightList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevelWeightList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelsInWeightStringContext levelsInWeightString() {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(Context, State);
		EnterRule(_localctx, 572, RULE_levelsInWeightString);
		int _la;
		try {
			State = 5698;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,830,Context) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5684; Match(LEVEL);
				State = 5685; levelInWeightListElement();
				State = 5690;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5686; Match(COMMA);
					State = 5687; levelInWeightListElement();
					}
					}
					State = 5692;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5693; Match(LEVEL);
				State = 5694; ((LevelWeightRangeContext)_localctx).firstLevel = decimalLiteral();
				State = 5695; Match(MINUS);
				State = 5696; ((LevelWeightRangeContext)_localctx).lastLevel = decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelInWeightListElementContext : ParserRuleContext {
		public IToken orderType;
		public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		public ITerminalNode REVERSE() { return GetToken(MySqlParser.REVERSE, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_levelInWeightListElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLevelInWeightListElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLevelInWeightListElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevelInWeightListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelInWeightListElementContext levelInWeightListElement() {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(Context, State);
		EnterRule(_localctx, 574, RULE_levelInWeightListElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5700; decimalLiteral();
			State = 5702;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				State = 5701;
				_localctx.orderType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					_localctx.orderType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateWindowedFunctionContext : ParserRuleContext {
		public IToken aggregator;
		public IToken starArg;
		public IToken separator;
		public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		public ITerminalNode AVG() { return GetToken(MySqlParser.AVG, 0); }
		public ITerminalNode MAX() { return GetToken(MySqlParser.MAX, 0); }
		public ITerminalNode MIN() { return GetToken(MySqlParser.MIN, 0); }
		public ITerminalNode SUM() { return GetToken(MySqlParser.SUM, 0); }
		public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		public ITerminalNode COUNT() { return GetToken(MySqlParser.COUNT, 0); }
		public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		public ITerminalNode BIT_AND() { return GetToken(MySqlParser.BIT_AND, 0); }
		public ITerminalNode BIT_OR() { return GetToken(MySqlParser.BIT_OR, 0); }
		public ITerminalNode BIT_XOR() { return GetToken(MySqlParser.BIT_XOR, 0); }
		public ITerminalNode STD() { return GetToken(MySqlParser.STD, 0); }
		public ITerminalNode STDDEV() { return GetToken(MySqlParser.STDDEV, 0); }
		public ITerminalNode STDDEV_POP() { return GetToken(MySqlParser.STDDEV_POP, 0); }
		public ITerminalNode STDDEV_SAMP() { return GetToken(MySqlParser.STDDEV_SAMP, 0); }
		public ITerminalNode VAR_POP() { return GetToken(MySqlParser.VAR_POP, 0); }
		public ITerminalNode VAR_SAMP() { return GetToken(MySqlParser.VAR_SAMP, 0); }
		public ITerminalNode VARIANCE() { return GetToken(MySqlParser.VARIANCE, 0); }
		public ITerminalNode GROUP_CONCAT() { return GetToken(MySqlParser.GROUP_CONCAT, 0); }
		public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		public OrderByExpressionContext[] orderByExpression() {
			return GetRuleContexts<OrderByExpressionContext>();
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return GetRuleContext<OrderByExpressionContext>(i);
		}
		public ITerminalNode SEPARATOR() { return GetToken(MySqlParser.SEPARATOR, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregateWindowedFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAggregateWindowedFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAggregateWindowedFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateWindowedFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregateWindowedFunctionContext aggregateWindowedFunction() {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(Context, State);
		EnterRule(_localctx, 576, RULE_aggregateWindowedFunction);
		int _la;
		try {
			State = 5760;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,840,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5704;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & ((1L << (AVG - 209)) | (1L << (MAX - 209)) | (1L << (MIN - 209)) | (1L << (SUM - 209)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5705; Match(LR_BRACKET);
				State = 5707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					State = 5706;
					_localctx.aggregator = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						_localctx.aggregator = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 5709; functionArg();
				State = 5710; Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5712; Match(COUNT);
				State = 5713; Match(LR_BRACKET);
				State = 5719;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STAR:
					{
					State = 5714; _localctx.starArg = Match(STAR);
					}
					break;
				case ALL:
				case CASE:
				case CAST:
				case CONVERT:
				case CURRENT_USER:
				case DATABASE:
				case EXISTS:
				case FALSE:
				case IF:
				case INSERT:
				case INTERVAL:
				case LEFT:
				case NOT:
				case NULL_LITERAL:
				case REPLACE:
				case RIGHT:
				case TRUE:
				case VALUES:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case CHAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case EXTRACT:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CASCADED:
				case CHAIN:
				case CHANNEL:
				case CHECKSUM:
				case CIPHER:
				case CLIENT:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXTENT_SIZE:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FOLLOWS:
				case FULL:
				case FUNCTION:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HASH:
				case HOST:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRANSACTION:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNKNOWN:
				case UPGRADE:
				case USER:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFOMANCE_SCHEMA:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case PLUS:
				case MINUS:
				case EXCLAMATION_SYMBOL:
				case BIT_NOT_OP:
				case LR_BRACKET:
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case CHARSET_REVERSE_QOUTE_STRING:
				case START_NATIONAL_STRING_LITERAL:
				case STRING_LITERAL:
				case DECIMAL_LITERAL:
				case HEXADECIMAL_LITERAL:
				case REAL_LITERAL:
				case NULL_SPEC_LITERAL:
				case BIT_STRING:
				case STRING_CHARSET_NAME:
				case ID:
				case REVERSE_QUOTE_ID:
				case LOCAL_ID:
				case GLOBAL_ID:
					{
					State = 5716;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL) {
						{
						State = 5715; _localctx.aggregator = Match(ALL);
						}
					}

					State = 5718; functionArg();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5721; Match(RR_BRACKET);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5722; Match(COUNT);
				State = 5723; Match(LR_BRACKET);
				State = 5724; _localctx.aggregator = Match(DISTINCT);
				State = 5725; functionArgs();
				State = 5726; Match(RR_BRACKET);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5728;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (BIT_AND - 210)) | (1L << (BIT_OR - 210)) | (1L << (BIT_XOR - 210)) | (1L << (STD - 210)) | (1L << (STDDEV - 210)) | (1L << (STDDEV_POP - 210)) | (1L << (STDDEV_SAMP - 210)) | (1L << (VAR_POP - 210)) | (1L << (VAR_SAMP - 210)) | (1L << (VARIANCE - 210)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5729; Match(LR_BRACKET);
				State = 5731;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL) {
					{
					State = 5730; _localctx.aggregator = Match(ALL);
					}
				}

				State = 5733; functionArg();
				State = 5734; Match(RR_BRACKET);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5736; Match(GROUP_CONCAT);
				State = 5737; Match(LR_BRACKET);
				State = 5739;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DISTINCT) {
					{
					State = 5738; _localctx.aggregator = Match(DISTINCT);
					}
				}

				State = 5741; functionArgs();
				State = 5752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 5742; Match(ORDER);
					State = 5743; Match(BY);
					State = 5744; orderByExpression();
					State = 5749;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 5745; Match(COMMA);
						State = 5746; orderByExpression();
						}
						}
						State = 5751;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 5756;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEPARATOR) {
					{
					State = 5754; Match(SEPARATOR);
					State = 5755; _localctx.separator = Match(STRING_LITERAL);
					}
				}

				State = 5758; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarFunctionNameContext : ParserRuleContext {
		public FunctionNameBaseContext functionNameBase() {
			return GetRuleContext<FunctionNameBaseContext>(0);
		}
		public ITerminalNode ASCII() { return GetToken(MySqlParser.ASCII, 0); }
		public ITerminalNode CURDATE() { return GetToken(MySqlParser.CURDATE, 0); }
		public ITerminalNode CURRENT_DATE() { return GetToken(MySqlParser.CURRENT_DATE, 0); }
		public ITerminalNode CURRENT_TIME() { return GetToken(MySqlParser.CURRENT_TIME, 0); }
		public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public ITerminalNode CURTIME() { return GetToken(MySqlParser.CURTIME, 0); }
		public ITerminalNode DATE_ADD() { return GetToken(MySqlParser.DATE_ADD, 0); }
		public ITerminalNode DATE_SUB() { return GetToken(MySqlParser.DATE_SUB, 0); }
		public ITerminalNode IF() { return GetToken(MySqlParser.IF, 0); }
		public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
		public ITerminalNode LOCALTIME() { return GetToken(MySqlParser.LOCALTIME, 0); }
		public ITerminalNode LOCALTIMESTAMP() { return GetToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public ITerminalNode MID() { return GetToken(MySqlParser.MID, 0); }
		public ITerminalNode NOW() { return GetToken(MySqlParser.NOW, 0); }
		public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		public ITerminalNode SUBSTR() { return GetToken(MySqlParser.SUBSTR, 0); }
		public ITerminalNode SUBSTRING() { return GetToken(MySqlParser.SUBSTRING, 0); }
		public ITerminalNode SYSDATE() { return GetToken(MySqlParser.SYSDATE, 0); }
		public ITerminalNode TRIM() { return GetToken(MySqlParser.TRIM, 0); }
		public ITerminalNode UTC_DATE() { return GetToken(MySqlParser.UTC_DATE, 0); }
		public ITerminalNode UTC_TIME() { return GetToken(MySqlParser.UTC_TIME, 0); }
		public ITerminalNode UTC_TIMESTAMP() { return GetToken(MySqlParser.UTC_TIMESTAMP, 0); }
		public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarFunctionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterScalarFunctionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitScalarFunctionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarFunctionNameContext scalarFunctionName() {
		ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(Context, State);
		EnterRule(_localctx, 578, RULE_scalarFunctionName);
		try {
			State = 5785;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case COUNT:
			case POSITION:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5762; functionNameBase();
				}
				break;
			case ASCII:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5763; Match(ASCII);
				}
				break;
			case CURDATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5764; Match(CURDATE);
				}
				break;
			case CURRENT_DATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5765; Match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5766; Match(CURRENT_TIME);
				}
				break;
			case CURRENT_TIMESTAMP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5767; Match(CURRENT_TIMESTAMP);
				}
				break;
			case CURTIME:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5768; Match(CURTIME);
				}
				break;
			case DATE_ADD:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5769; Match(DATE_ADD);
				}
				break;
			case DATE_SUB:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5770; Match(DATE_SUB);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5771; Match(IF);
				}
				break;
			case INSERT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5772; Match(INSERT);
				}
				break;
			case LOCALTIME:
				EnterOuterAlt(_localctx, 12);
				{
				State = 5773; Match(LOCALTIME);
				}
				break;
			case LOCALTIMESTAMP:
				EnterOuterAlt(_localctx, 13);
				{
				State = 5774; Match(LOCALTIMESTAMP);
				}
				break;
			case MID:
				EnterOuterAlt(_localctx, 14);
				{
				State = 5775; Match(MID);
				}
				break;
			case NOW:
				EnterOuterAlt(_localctx, 15);
				{
				State = 5776; Match(NOW);
				}
				break;
			case REPLACE:
				EnterOuterAlt(_localctx, 16);
				{
				State = 5777; Match(REPLACE);
				}
				break;
			case SUBSTR:
				EnterOuterAlt(_localctx, 17);
				{
				State = 5778; Match(SUBSTR);
				}
				break;
			case SUBSTRING:
				EnterOuterAlt(_localctx, 18);
				{
				State = 5779; Match(SUBSTRING);
				}
				break;
			case SYSDATE:
				EnterOuterAlt(_localctx, 19);
				{
				State = 5780; Match(SYSDATE);
				}
				break;
			case TRIM:
				EnterOuterAlt(_localctx, 20);
				{
				State = 5781; Match(TRIM);
				}
				break;
			case UTC_DATE:
				EnterOuterAlt(_localctx, 21);
				{
				State = 5782; Match(UTC_DATE);
				}
				break;
			case UTC_TIME:
				EnterOuterAlt(_localctx, 22);
				{
				State = 5783; Match(UTC_TIME);
				}
				break;
			case UTC_TIMESTAMP:
				EnterOuterAlt(_localctx, 23);
				{
				State = 5784; Match(UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PasswordFunctionClauseContext : ParserRuleContext {
		public IToken functionName;
		public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(MySqlParser.OLD_PASSWORD, 0); }
		public PasswordFunctionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_passwordFunctionClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPasswordFunctionClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPasswordFunctionClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPasswordFunctionClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PasswordFunctionClauseContext passwordFunctionClause() {
		PasswordFunctionClauseContext _localctx = new PasswordFunctionClauseContext(Context, State);
		EnterRule(_localctx, 580, RULE_passwordFunctionClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5787;
			_localctx.functionName = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==OLD_PASSWORD || _la==PASSWORD) ) {
				_localctx.functionName = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5788; Match(LR_BRACKET);
			State = 5789; functionArg();
			State = 5790; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgsContext : ParserRuleContext {
		public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public FullColumnNameContext[] fullColumnName() {
			return GetRuleContexts<FullColumnNameContext>();
		}
		public FullColumnNameContext fullColumnName(int i) {
			return GetRuleContext<FullColumnNameContext>(i);
		}
		public FunctionCallContext[] functionCall() {
			return GetRuleContexts<FunctionCallContext>();
		}
		public FunctionCallContext functionCall(int i) {
			return GetRuleContext<FunctionCallContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgsContext functionArgs() {
		FunctionArgsContext _localctx = new FunctionArgsContext(Context, State);
		EnterRule(_localctx, 582, RULE_functionArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5796;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,842,Context) ) {
			case 1:
				{
				State = 5792; constant();
				}
				break;
			case 2:
				{
				State = 5793; fullColumnName();
				}
				break;
			case 3:
				{
				State = 5794; functionCall();
				}
				break;
			case 4:
				{
				State = 5795; expression(0);
				}
				break;
			}
			State = 5807;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5798; Match(COMMA);
				State = 5803;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,843,Context) ) {
				case 1:
					{
					State = 5799; constant();
					}
					break;
				case 2:
					{
					State = 5800; fullColumnName();
					}
					break;
				case 3:
					{
					State = 5801; functionCall();
					}
					break;
				case 4:
					{
					State = 5802; expression(0);
					}
					break;
				}
				}
				}
				State = 5809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 584, RULE_functionArg);
		try {
			State = 5814;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,845,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5810; constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5811; fullColumnName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5812; functionCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5813; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IsExpressionContext : ExpressionContext {
		public IToken testValue;
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode IS() { return GetToken(MySqlParser.IS, 0); }
		public ITerminalNode TRUE() { return GetToken(MySqlParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(MySqlParser.FALSE, 0); }
		public ITerminalNode UNKNOWN() { return GetToken(MySqlParser.UNKNOWN, 0); }
		public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public IsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public IToken notOperator;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalOperatorContext logicalOperator() {
			return GetRuleContext<LogicalOperatorContext>(0);
		}
		public LogicalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLogicalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLogicalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredicateExpressionContext : ExpressionContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PredicateExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPredicateExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPredicateExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 586;
		EnterRecursionRule(_localctx, 586, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5827;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,847,Context) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 5817;
				((NotExpressionContext)_localctx).notOperator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((NotExpressionContext)_localctx).notOperator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5818; expression(4);
				}
				break;
			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5819; predicate(0);
				State = 5820; Match(IS);
				State = 5822;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 5821; Match(NOT);
					}
				}

				State = 5824;
				((IsExpressionContext)_localctx).testValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((IsExpressionContext)_localctx).testValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5826; predicate(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5835;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,848,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 5829;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 5830; logicalOperator();
					State = 5831; expression(4);
					}
					} 
				}
				State = 5837;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,848,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
	 
		public PredicateContext() { }
		public virtual void CopyFrom(PredicateContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SoundsLikePredicateContext : PredicateContext {
		public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public ITerminalNode SOUNDS() { return GetToken(MySqlParser.SOUNDS, 0); }
		public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
		public SoundsLikePredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSoundsLikePredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSoundsLikePredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoundsLikePredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionAtomPredicateContext : PredicateContext {
		public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		public ITerminalNode VAR_ASSIGN() { return GetToken(MySqlParser.VAR_ASSIGN, 0); }
		public ExpressionAtomPredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExpressionAtomPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExpressionAtomPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionAtomPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InPredicateContext : PredicateContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public InPredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubqueryComparasionPredicateContext : PredicateContext {
		public IToken quantifier;
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public ITerminalNode ANY() { return GetToken(MySqlParser.ANY, 0); }
		public ITerminalNode SOME() { return GetToken(MySqlParser.SOME, 0); }
		public SubqueryComparasionPredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubqueryComparasionPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubqueryComparasionPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryComparasionPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BetweenPredicateContext : PredicateContext {
		public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public ITerminalNode BETWEEN() { return GetToken(MySqlParser.BETWEEN, 0); }
		public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public BetweenPredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBetweenPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBetweenPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetweenPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryComparasionPredicateContext : PredicateContext {
		public PredicateContext left;
		public PredicateContext right;
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public BinaryComparasionPredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBinaryComparasionPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBinaryComparasionPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryComparasionPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsNullPredicateContext : PredicateContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode IS() { return GetToken(MySqlParser.IS, 0); }
		public NullNotnullContext nullNotnull() {
			return GetRuleContext<NullNotnullContext>(0);
		}
		public IsNullPredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIsNullPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIsNullPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsNullPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LikePredicateContext : PredicateContext {
		public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
		public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public ITerminalNode ESCAPE() { return GetToken(MySqlParser.ESCAPE, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public LikePredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLikePredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLikePredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikePredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegexpPredicateContext : PredicateContext {
		public IToken regex;
		public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public ITerminalNode REGEXP() { return GetToken(MySqlParser.REGEXP, 0); }
		public ITerminalNode RLIKE() { return GetToken(MySqlParser.RLIKE, 0); }
		public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public RegexpPredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRegexpPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRegexpPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexpPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PredicateContext _localctx = new PredicateContext(Context, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 588;
		EnterRecursionRule(_localctx, 588, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 5841;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,849,Context) ) {
			case 1:
				{
				State = 5839; Match(LOCAL_ID);
				State = 5840; Match(VAR_ASSIGN);
				}
				break;
			}
			State = 5843; expressionAtom(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5902;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,857,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 5900;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,856,Context) ) {
					case 1:
						{
						_localctx = new BinaryComparasionPredicateContext(new PredicateContext(_parentctx, _parentState));
						((BinaryComparasionPredicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 5845;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 5846; comparisonOperator();
						State = 5847; ((BinaryComparasionPredicateContext)_localctx).right = predicate(8);
						}
						break;
					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 5849;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 5851;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 5850; Match(NOT);
							}
						}

						State = 5853; Match(BETWEEN);
						State = 5854; predicate(0);
						State = 5855; Match(AND);
						State = 5856; predicate(6);
						}
						break;
					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 5858;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 5859; Match(SOUNDS);
						State = 5860; Match(LIKE);
						State = 5861; predicate(5);
						}
						break;
					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 5862;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 5864;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 5863; Match(NOT);
							}
						}

						State = 5866;
						((RegexpPredicateContext)_localctx).regex = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==REGEXP || _la==RLIKE) ) {
							((RegexpPredicateContext)_localctx).regex = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5867; predicate(3);
						}
						break;
					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 5868;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 5870;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 5869; Match(NOT);
							}
						}

						State = 5872; Match(IN);
						State = 5873; Match(LR_BRACKET);
						State = 5876;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,853,Context) ) {
						case 1:
							{
							State = 5874; selectStatement();
							}
							break;
						case 2:
							{
							State = 5875; expressions();
							}
							break;
						}
						State = 5878; Match(RR_BRACKET);
						}
						break;
					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 5880;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 5881; Match(IS);
						State = 5882; nullNotnull();
						}
						break;
					case 7:
						{
						_localctx = new SubqueryComparasionPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 5883;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 5884; comparisonOperator();
						State = 5885;
						((SubqueryComparasionPredicateContext)_localctx).quantifier = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
							((SubqueryComparasionPredicateContext)_localctx).quantifier = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5886; Match(LR_BRACKET);
						State = 5887; selectStatement();
						State = 5888; Match(RR_BRACKET);
						}
						break;
					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 5890;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 5892;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 5891; Match(NOT);
							}
						}

						State = 5894; Match(LIKE);
						State = 5895; predicate(0);
						State = 5898;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,855,Context) ) {
						case 1:
							{
							State = 5896; Match(ESCAPE);
							State = 5897; Match(STRING_LITERAL);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 5904;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,857,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionAtomContext : ParserRuleContext {
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionAtom; } }
	 
		public ExpressionAtomContext() { }
		public virtual void CopyFrom(ExpressionAtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryExpressionAtomContext : ExpressionAtomContext {
		public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		public UnaryExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpressionAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpressionAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CollateExpressionAtomContext : ExpressionAtomContext {
		public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public CollateExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCollateExpressionAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCollateExpressionAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollateExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubqueryExpessionAtomContext : ExpressionAtomContext {
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public SubqueryExpessionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubqueryExpessionAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubqueryExpessionAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryExpessionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MysqlVariableExpressionAtomContext : ExpressionAtomContext {
		public MysqlVariableContext mysqlVariable() {
			return GetRuleContext<MysqlVariableContext>(0);
		}
		public MysqlVariableExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMysqlVariableExpressionAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMysqlVariableExpressionAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMysqlVariableExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedExpressionAtomContext : ExpressionAtomContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NestedExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNestedExpressionAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNestedExpressionAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedRowExpressionAtomContext : ExpressionAtomContext {
		public ITerminalNode ROW() { return GetToken(MySqlParser.ROW, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NestedRowExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNestedRowExpressionAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNestedRowExpressionAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedRowExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MathExpressionAtomContext : ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public MathOperatorContext mathOperator() {
			return GetRuleContext<MathOperatorContext>(0);
		}
		public ExpressionAtomContext[] expressionAtom() {
			return GetRuleContexts<ExpressionAtomContext>();
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return GetRuleContext<ExpressionAtomContext>(i);
		}
		public MathExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMathExpressionAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMathExpressionAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntervalExpressionAtomContext : ExpressionAtomContext {
		public ITerminalNode INTERVAL() { return GetToken(MySqlParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		public IntervalExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIntervalExpressionAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIntervalExpressionAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExistsExpessionAtomContext : ExpressionAtomContext {
		public ITerminalNode EXISTS() { return GetToken(MySqlParser.EXISTS, 0); }
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public ExistsExpessionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExistsExpessionAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExistsExpessionAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExistsExpessionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionAtomContext : ExpressionAtomContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConstantExpressionAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConstantExpressionAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionAtomContext : ExpressionAtomContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpressionAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpressionAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryExpressionAtomContext : ExpressionAtomContext {
		public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		public BinaryExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBinaryExpressionAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBinaryExpressionAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FullColumnNameExpressionAtomContext : ExpressionAtomContext {
		public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		public FullColumnNameExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFullColumnNameExpressionAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFullColumnNameExpressionAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullColumnNameExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitExpressionAtomContext : ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public BitOperatorContext bitOperator() {
			return GetRuleContext<BitOperatorContext>(0);
		}
		public ExpressionAtomContext[] expressionAtom() {
			return GetRuleContexts<ExpressionAtomContext>();
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return GetRuleContext<ExpressionAtomContext>(i);
		}
		public BitExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBitExpressionAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBitExpressionAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionAtomContext expressionAtom() {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionAtomContext _localctx = new ExpressionAtomContext(Context, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 590;
		EnterRecursionRule(_localctx, 590, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5950;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,860,Context) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 5906; constant();
				}
				break;
			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5907; fullColumnName();
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5908; functionCall();
				}
				break;
			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5909; mysqlVariable();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5910; unaryOperator();
				State = 5911; expressionAtom(9);
				}
				break;
			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5913; Match(BINARY);
				State = 5914; expressionAtom(8);
				}
				break;
			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5915; Match(LR_BRACKET);
				State = 5916; expression(0);
				State = 5921;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5917; Match(COMMA);
					State = 5918; expression(0);
					}
					}
					State = 5923;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5924; Match(RR_BRACKET);
				}
				break;
			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5926; Match(ROW);
				State = 5927; Match(LR_BRACKET);
				State = 5928; expression(0);
				State = 5931;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 5929; Match(COMMA);
					State = 5930; expression(0);
					}
					}
					State = 5933;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				State = 5935; Match(RR_BRACKET);
				}
				break;
			case 9:
				{
				_localctx = new ExistsExpessionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5937; Match(EXISTS);
				State = 5938; Match(LR_BRACKET);
				State = 5939; selectStatement();
				State = 5940; Match(RR_BRACKET);
				}
				break;
			case 10:
				{
				_localctx = new SubqueryExpessionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5942; Match(LR_BRACKET);
				State = 5943; selectStatement();
				State = 5944; Match(RR_BRACKET);
				}
				break;
			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5946; Match(INTERVAL);
				State = 5947; expression(0);
				State = 5948; intervalType();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5965;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,862,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 5963;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,861,Context) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((BitExpressionAtomContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 5952;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 5953; bitOperator();
						State = 5954; ((BitExpressionAtomContext)_localctx).right = expressionAtom(3);
						}
						break;
					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((MathExpressionAtomContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 5956;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 5957; mathOperator();
						State = 5958; ((MathExpressionAtomContext)_localctx).right = expressionAtom(2);
						}
						break;
					case 3:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 5960;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 5961; Match(COLLATE);
						State = 5962; collationName();
						}
						break;
					}
					} 
				}
				State = 5967;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,862,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 592, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5968;
			_la = TokenStream.LA(1);
			if ( !(_la==NOT || ((((_la - 931)) & ~0x3f) == 0 && ((1L << (_la - 931)) & ((1L << (PLUS - 931)) | (1L << (MINUS - 931)) | (1L << (EXCLAMATION_SYMBOL - 931)) | (1L << (BIT_NOT_OP - 931)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 594, RULE_comparisonOperator);
		try {
			State = 5984;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,863,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5970; Match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5971; Match(GREATER_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5972; Match(LESS_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5973; Match(LESS_SYMBOL);
				State = 5974; Match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5975; Match(GREATER_SYMBOL);
				State = 5976; Match(EQUAL_SYMBOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5977; Match(LESS_SYMBOL);
				State = 5978; Match(GREATER_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5979; Match(EXCLAMATION_SYMBOL);
				State = 5980; Match(EQUAL_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5981; Match(LESS_SYMBOL);
				State = 5982; Match(EQUAL_SYMBOL);
				State = 5983; Match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOperatorContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		public ITerminalNode XOR() { return GetToken(MySqlParser.XOR, 0); }
		public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLogicalOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLogicalOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperatorContext logicalOperator() {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(Context, State);
		EnterRule(_localctx, 596, RULE_logicalOperator);
		try {
			State = 5993;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5986; Match(AND);
				}
				break;
			case BIT_AND_OP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5987; Match(BIT_AND_OP);
				State = 5988; Match(BIT_AND_OP);
				}
				break;
			case XOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5989; Match(XOR);
				}
				break;
			case OR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5990; Match(OR);
				}
				break;
			case BIT_OR_OP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5991; Match(BIT_OR_OP);
				State = 5992; Match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitOperatorContext : ParserRuleContext {
		public BitOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBitOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitOperatorContext bitOperator() {
		BitOperatorContext _localctx = new BitOperatorContext(Context, State);
		EnterRule(_localctx, 598, RULE_bitOperator);
		try {
			State = 6002;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LESS_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5995; Match(LESS_SYMBOL);
				State = 5996; Match(LESS_SYMBOL);
				}
				break;
			case GREATER_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5997; Match(GREATER_SYMBOL);
				State = 5998; Match(GREATER_SYMBOL);
				}
				break;
			case BIT_AND_OP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5999; Match(BIT_AND_OP);
				}
				break;
			case BIT_XOR_OP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6000; Match(BIT_XOR_OP);
				}
				break;
			case BIT_OR_OP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6001; Match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathOperatorContext : ParserRuleContext {
		public ITerminalNode DIV() { return GetToken(MySqlParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(MySqlParser.MOD, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMathOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMathOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathOperatorContext mathOperator() {
		MathOperatorContext _localctx = new MathOperatorContext(Context, State);
		EnterRule(_localctx, 600, RULE_mathOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6004;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 928)) & ~0x3f) == 0 && ((1L << (_la - 928)) & ((1L << (STAR - 928)) | (1L << (DIVIDE - 928)) | (1L << (MODULE - 928)) | (1L << (PLUS - 928)) | (1L << (MINUSMINUS - 928)) | (1L << (MINUS - 928)) | (1L << (DIV - 928)) | (1L << (MOD - 928)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetNameBaseContext : ParserRuleContext {
		public ITerminalNode ARMSCII8() { return GetToken(MySqlParser.ARMSCII8, 0); }
		public ITerminalNode ASCII() { return GetToken(MySqlParser.ASCII, 0); }
		public ITerminalNode BIG5() { return GetToken(MySqlParser.BIG5, 0); }
		public ITerminalNode CP1250() { return GetToken(MySqlParser.CP1250, 0); }
		public ITerminalNode CP1251() { return GetToken(MySqlParser.CP1251, 0); }
		public ITerminalNode CP1256() { return GetToken(MySqlParser.CP1256, 0); }
		public ITerminalNode CP1257() { return GetToken(MySqlParser.CP1257, 0); }
		public ITerminalNode CP850() { return GetToken(MySqlParser.CP850, 0); }
		public ITerminalNode CP852() { return GetToken(MySqlParser.CP852, 0); }
		public ITerminalNode CP866() { return GetToken(MySqlParser.CP866, 0); }
		public ITerminalNode CP932() { return GetToken(MySqlParser.CP932, 0); }
		public ITerminalNode DEC8() { return GetToken(MySqlParser.DEC8, 0); }
		public ITerminalNode EUCJPMS() { return GetToken(MySqlParser.EUCJPMS, 0); }
		public ITerminalNode EUCKR() { return GetToken(MySqlParser.EUCKR, 0); }
		public ITerminalNode GB2312() { return GetToken(MySqlParser.GB2312, 0); }
		public ITerminalNode GBK() { return GetToken(MySqlParser.GBK, 0); }
		public ITerminalNode GEOSTD8() { return GetToken(MySqlParser.GEOSTD8, 0); }
		public ITerminalNode GREEK() { return GetToken(MySqlParser.GREEK, 0); }
		public ITerminalNode HEBREW() { return GetToken(MySqlParser.HEBREW, 0); }
		public ITerminalNode HP8() { return GetToken(MySqlParser.HP8, 0); }
		public ITerminalNode KEYBCS2() { return GetToken(MySqlParser.KEYBCS2, 0); }
		public ITerminalNode KOI8R() { return GetToken(MySqlParser.KOI8R, 0); }
		public ITerminalNode KOI8U() { return GetToken(MySqlParser.KOI8U, 0); }
		public ITerminalNode LATIN1() { return GetToken(MySqlParser.LATIN1, 0); }
		public ITerminalNode LATIN2() { return GetToken(MySqlParser.LATIN2, 0); }
		public ITerminalNode LATIN5() { return GetToken(MySqlParser.LATIN5, 0); }
		public ITerminalNode LATIN7() { return GetToken(MySqlParser.LATIN7, 0); }
		public ITerminalNode MACCE() { return GetToken(MySqlParser.MACCE, 0); }
		public ITerminalNode MACROMAN() { return GetToken(MySqlParser.MACROMAN, 0); }
		public ITerminalNode SJIS() { return GetToken(MySqlParser.SJIS, 0); }
		public ITerminalNode SWE7() { return GetToken(MySqlParser.SWE7, 0); }
		public ITerminalNode TIS620() { return GetToken(MySqlParser.TIS620, 0); }
		public ITerminalNode UCS2() { return GetToken(MySqlParser.UCS2, 0); }
		public ITerminalNode UJIS() { return GetToken(MySqlParser.UJIS, 0); }
		public ITerminalNode UTF16() { return GetToken(MySqlParser.UTF16, 0); }
		public ITerminalNode UTF16LE() { return GetToken(MySqlParser.UTF16LE, 0); }
		public ITerminalNode UTF32() { return GetToken(MySqlParser.UTF32, 0); }
		public ITerminalNode UTF8() { return GetToken(MySqlParser.UTF8, 0); }
		public ITerminalNode UTF8MB3() { return GetToken(MySqlParser.UTF8MB3, 0); }
		public ITerminalNode UTF8MB4() { return GetToken(MySqlParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetNameBase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCharsetNameBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCharsetNameBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharsetNameBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharsetNameBaseContext charsetNameBase() {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(Context, State);
		EnterRule(_localctx, 602, RULE_charsetNameBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6006;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & ((1L << (ARMSCII8 - 567)) | (1L << (ASCII - 567)) | (1L << (BIG5 - 567)) | (1L << (CP1250 - 567)) | (1L << (CP1251 - 567)) | (1L << (CP1256 - 567)) | (1L << (CP1257 - 567)) | (1L << (CP850 - 567)) | (1L << (CP852 - 567)) | (1L << (CP866 - 567)) | (1L << (CP932 - 567)) | (1L << (DEC8 - 567)) | (1L << (EUCJPMS - 567)) | (1L << (EUCKR - 567)) | (1L << (GB2312 - 567)) | (1L << (GBK - 567)) | (1L << (GEOSTD8 - 567)) | (1L << (GREEK - 567)) | (1L << (HEBREW - 567)) | (1L << (HP8 - 567)) | (1L << (KEYBCS2 - 567)) | (1L << (KOI8R - 567)) | (1L << (KOI8U - 567)) | (1L << (LATIN1 - 567)) | (1L << (LATIN2 - 567)) | (1L << (LATIN5 - 567)) | (1L << (LATIN7 - 567)) | (1L << (MACCE - 567)) | (1L << (MACROMAN - 567)) | (1L << (SJIS - 567)) | (1L << (SWE7 - 567)) | (1L << (TIS620 - 567)) | (1L << (UCS2 - 567)) | (1L << (UJIS - 567)) | (1L << (UTF16 - 567)) | (1L << (UTF16LE - 567)) | (1L << (UTF32 - 567)) | (1L << (UTF8 - 567)) | (1L << (UTF8MB3 - 567)) | (1L << (UTF8MB4 - 567)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionLevelBaseContext : ParserRuleContext {
		public ITerminalNode REPEATABLE() { return GetToken(MySqlParser.REPEATABLE, 0); }
		public ITerminalNode COMMITTED() { return GetToken(MySqlParser.COMMITTED, 0); }
		public ITerminalNode UNCOMMITTED() { return GetToken(MySqlParser.UNCOMMITTED, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionLevelBase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionLevelBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionLevelBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionLevelBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionLevelBaseContext transactionLevelBase() {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(Context, State);
		EnterRule(_localctx, 604, RULE_transactionLevelBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6008;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & ((1L << (REPEATABLE - 618)) | (1L << (COMMITTED - 618)) | (1L << (UNCOMMITTED - 618)) | (1L << (SERIALIZABLE - 618)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegesBaseContext : ParserRuleContext {
		public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		public ITerminalNode ROUTINE() { return GetToken(MySqlParser.ROUTINE, 0); }
		public ITerminalNode EXECUTE() { return GetToken(MySqlParser.EXECUTE, 0); }
		public ITerminalNode FILE() { return GetToken(MySqlParser.FILE, 0); }
		public ITerminalNode PROCESS() { return GetToken(MySqlParser.PROCESS, 0); }
		public ITerminalNode RELOAD() { return GetToken(MySqlParser.RELOAD, 0); }
		public ITerminalNode SHUTDOWN() { return GetToken(MySqlParser.SHUTDOWN, 0); }
		public ITerminalNode SUPER() { return GetToken(MySqlParser.SUPER, 0); }
		public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilegesBase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrivilegesBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrivilegesBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivilegesBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegesBaseContext privilegesBase() {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(Context, State);
		EnterRule(_localctx, 606, RULE_privilegesBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6010;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (TABLES - 558)) | (1L << (ROUTINE - 558)) | (1L << (EXECUTE - 558)) | (1L << (FILE - 558)) | (1L << (PROCESS - 558)) | (1L << (RELOAD - 558)) | (1L << (SHUTDOWN - 558)) | (1L << (SUPER - 558)) | (1L << (PRIVILEGES - 558)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalTypeBaseContext : ParserRuleContext {
		public ITerminalNode QUARTER() { return GetToken(MySqlParser.QUARTER, 0); }
		public ITerminalNode MONTH() { return GetToken(MySqlParser.MONTH, 0); }
		public ITerminalNode DAY() { return GetToken(MySqlParser.DAY, 0); }
		public ITerminalNode HOUR() { return GetToken(MySqlParser.HOUR, 0); }
		public ITerminalNode MINUTE() { return GetToken(MySqlParser.MINUTE, 0); }
		public ITerminalNode WEEK() { return GetToken(MySqlParser.WEEK, 0); }
		public ITerminalNode SECOND() { return GetToken(MySqlParser.SECOND, 0); }
		public ITerminalNode MICROSECOND() { return GetToken(MySqlParser.MICROSECOND, 0); }
		public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalTypeBase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIntervalTypeBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIntervalTypeBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalTypeBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalTypeBaseContext intervalTypeBase() {
		IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(Context, State);
		EnterRule(_localctx, 608, RULE_intervalTypeBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6012;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 550)) & ~0x3f) == 0 && ((1L << (_la - 550)) & ((1L << (QUARTER - 550)) | (1L << (MONTH - 550)) | (1L << (DAY - 550)) | (1L << (HOUR - 550)) | (1L << (MINUTE - 550)) | (1L << (WEEK - 550)) | (1L << (SECOND - 550)) | (1L << (MICROSECOND - 550)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeBaseContext : ParserRuleContext {
		public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		public ITerminalNode TIMESTAMP() { return GetToken(MySqlParser.TIMESTAMP, 0); }
		public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
		public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
		public ITerminalNode ENUM() { return GetToken(MySqlParser.ENUM, 0); }
		public ITerminalNode TEXT() { return GetToken(MySqlParser.TEXT, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataTypeBase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDataTypeBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDataTypeBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataTypeBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeBaseContext dataTypeBase() {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(Context, State);
		EnterRule(_localctx, 610, RULE_dataTypeBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6014;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (DATETIME - 180)) | (1L << (YEAR - 180)) | (1L << (TEXT - 180)) | (1L << (ENUM - 180)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordsCanBeIdContext : ParserRuleContext {
		public ITerminalNode ACCOUNT() { return GetToken(MySqlParser.ACCOUNT, 0); }
		public ITerminalNode ACTION() { return GetToken(MySqlParser.ACTION, 0); }
		public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(MySqlParser.AGGREGATE, 0); }
		public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		public ITerminalNode ANY() { return GetToken(MySqlParser.ANY, 0); }
		public ITerminalNode AT() { return GetToken(MySqlParser.AT, 0); }
		public ITerminalNode AUTHORS() { return GetToken(MySqlParser.AUTHORS, 0); }
		public ITerminalNode AUTOCOMMIT() { return GetToken(MySqlParser.AUTOCOMMIT, 0); }
		public ITerminalNode AUTOEXTEND_SIZE() { return GetToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public ITerminalNode AUTO_INCREMENT() { return GetToken(MySqlParser.AUTO_INCREMENT, 0); }
		public ITerminalNode AVG_ROW_LENGTH() { return GetToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
		public ITerminalNode BINLOG() { return GetToken(MySqlParser.BINLOG, 0); }
		public ITerminalNode BIT() { return GetToken(MySqlParser.BIT, 0); }
		public ITerminalNode BLOCK() { return GetToken(MySqlParser.BLOCK, 0); }
		public ITerminalNode BOOL() { return GetToken(MySqlParser.BOOL, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(MySqlParser.BOOLEAN, 0); }
		public ITerminalNode BTREE() { return GetToken(MySqlParser.BTREE, 0); }
		public ITerminalNode CASCADED() { return GetToken(MySqlParser.CASCADED, 0); }
		public ITerminalNode CHAIN() { return GetToken(MySqlParser.CHAIN, 0); }
		public ITerminalNode CHANNEL() { return GetToken(MySqlParser.CHANNEL, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(MySqlParser.CHECKSUM, 0); }
		public ITerminalNode CIPHER() { return GetToken(MySqlParser.CIPHER, 0); }
		public ITerminalNode CLIENT() { return GetToken(MySqlParser.CLIENT, 0); }
		public ITerminalNode COALESCE() { return GetToken(MySqlParser.COALESCE, 0); }
		public ITerminalNode CODE() { return GetToken(MySqlParser.CODE, 0); }
		public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		public ITerminalNode COLUMN_FORMAT() { return GetToken(MySqlParser.COLUMN_FORMAT, 0); }
		public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		public ITerminalNode COMMIT() { return GetToken(MySqlParser.COMMIT, 0); }
		public ITerminalNode COMPACT() { return GetToken(MySqlParser.COMPACT, 0); }
		public ITerminalNode COMPLETION() { return GetToken(MySqlParser.COMPLETION, 0); }
		public ITerminalNode COMPRESSED() { return GetToken(MySqlParser.COMPRESSED, 0); }
		public ITerminalNode COMPRESSION() { return GetToken(MySqlParser.COMPRESSION, 0); }
		public ITerminalNode CONCURRENT() { return GetToken(MySqlParser.CONCURRENT, 0); }
		public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
		public ITerminalNode CONSISTENT() { return GetToken(MySqlParser.CONSISTENT, 0); }
		public ITerminalNode CONTAINS() { return GetToken(MySqlParser.CONTAINS, 0); }
		public ITerminalNode CONTEXT() { return GetToken(MySqlParser.CONTEXT, 0); }
		public ITerminalNode CONTRIBUTORS() { return GetToken(MySqlParser.CONTRIBUTORS, 0); }
		public ITerminalNode COPY() { return GetToken(MySqlParser.COPY, 0); }
		public ITerminalNode CPU() { return GetToken(MySqlParser.CPU, 0); }
		public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
		public ITerminalNode DEALLOCATE() { return GetToken(MySqlParser.DEALLOCATE, 0); }
		public ITerminalNode DEFAULT_AUTH() { return GetToken(MySqlParser.DEFAULT_AUTH, 0); }
		public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		public ITerminalNode DELAY_KEY_WRITE() { return GetToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		public ITerminalNode DISABLE() { return GetToken(MySqlParser.DISABLE, 0); }
		public ITerminalNode DISCARD() { return GetToken(MySqlParser.DISCARD, 0); }
		public ITerminalNode DISK() { return GetToken(MySqlParser.DISK, 0); }
		public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		public ITerminalNode DUMPFILE() { return GetToken(MySqlParser.DUMPFILE, 0); }
		public ITerminalNode DUPLICATE() { return GetToken(MySqlParser.DUPLICATE, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(MySqlParser.DYNAMIC, 0); }
		public ITerminalNode ENABLE() { return GetToken(MySqlParser.ENABLE, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(MySqlParser.ENCRYPTION, 0); }
		public ITerminalNode ENDS() { return GetToken(MySqlParser.ENDS, 0); }
		public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		public ITerminalNode ENGINES() { return GetToken(MySqlParser.ENGINES, 0); }
		public ITerminalNode ERROR() { return GetToken(MySqlParser.ERROR, 0); }
		public ITerminalNode ERRORS() { return GetToken(MySqlParser.ERRORS, 0); }
		public ITerminalNode ESCAPE() { return GetToken(MySqlParser.ESCAPE, 0); }
		public ITerminalNode EVEN() { return GetToken(MySqlParser.EVEN, 0); }
		public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		public ITerminalNode EVENTS() { return GetToken(MySqlParser.EVENTS, 0); }
		public ITerminalNode EVERY() { return GetToken(MySqlParser.EVERY, 0); }
		public ITerminalNode EXCHANGE() { return GetToken(MySqlParser.EXCHANGE, 0); }
		public ITerminalNode EXCLUSIVE() { return GetToken(MySqlParser.EXCLUSIVE, 0); }
		public ITerminalNode EXPIRE() { return GetToken(MySqlParser.EXPIRE, 0); }
		public ITerminalNode EXTENT_SIZE() { return GetToken(MySqlParser.EXTENT_SIZE, 0); }
		public ITerminalNode FAULTS() { return GetToken(MySqlParser.FAULTS, 0); }
		public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
		public ITerminalNode FILE_BLOCK_SIZE() { return GetToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		public ITerminalNode FILTER() { return GetToken(MySqlParser.FILTER, 0); }
		public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
		public ITerminalNode FOLLOWS() { return GetToken(MySqlParser.FOLLOWS, 0); }
		public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
		public ITerminalNode GRANTS() { return GetToken(MySqlParser.GRANTS, 0); }
		public ITerminalNode GROUP_REPLICATION() { return GetToken(MySqlParser.GROUP_REPLICATION, 0); }
		public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
		public ITerminalNode HOST() { return GetToken(MySqlParser.HOST, 0); }
		public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		public ITerminalNode IGNORE_SERVER_IDS() { return GetToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		public ITerminalNode IMPORT() { return GetToken(MySqlParser.IMPORT, 0); }
		public ITerminalNode INDEXES() { return GetToken(MySqlParser.INDEXES, 0); }
		public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		public ITerminalNode INPLACE() { return GetToken(MySqlParser.INPLACE, 0); }
		public ITerminalNode INSERT_METHOD() { return GetToken(MySqlParser.INSERT_METHOD, 0); }
		public ITerminalNode INSTANCE() { return GetToken(MySqlParser.INSTANCE, 0); }
		public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
		public ITerminalNode IO() { return GetToken(MySqlParser.IO, 0); }
		public ITerminalNode IO_THREAD() { return GetToken(MySqlParser.IO_THREAD, 0); }
		public ITerminalNode IPC() { return GetToken(MySqlParser.IPC, 0); }
		public ITerminalNode ISOLATION() { return GetToken(MySqlParser.ISOLATION, 0); }
		public ITerminalNode ISSUER() { return GetToken(MySqlParser.ISSUER, 0); }
		public ITerminalNode KEY_BLOCK_SIZE() { return GetToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public ITerminalNode LANGUAGE() { return GetToken(MySqlParser.LANGUAGE, 0); }
		public ITerminalNode LAST() { return GetToken(MySqlParser.LAST, 0); }
		public ITerminalNode LEAVES() { return GetToken(MySqlParser.LEAVES, 0); }
		public ITerminalNode LESS() { return GetToken(MySqlParser.LESS, 0); }
		public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
		public ITerminalNode LIST() { return GetToken(MySqlParser.LIST, 0); }
		public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		public ITerminalNode MASTER_AUTO_POSITION() { return GetToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		public ITerminalNode MASTER_CONNECT_RETRY() { return GetToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		public ITerminalNode MASTER_DELAY() { return GetToken(MySqlParser.MASTER_DELAY, 0); }
		public ITerminalNode MASTER_HEARTBEAT_PERIOD() { return GetToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public ITerminalNode MASTER_HOST() { return GetToken(MySqlParser.MASTER_HOST, 0); }
		public ITerminalNode MASTER_LOG_FILE() { return GetToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public ITerminalNode MASTER_LOG_POS() { return GetToken(MySqlParser.MASTER_LOG_POS, 0); }
		public ITerminalNode MASTER_PASSWORD() { return GetToken(MySqlParser.MASTER_PASSWORD, 0); }
		public ITerminalNode MASTER_PORT() { return GetToken(MySqlParser.MASTER_PORT, 0); }
		public ITerminalNode MASTER_RETRY_COUNT() { return GetToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		public ITerminalNode MASTER_SSL() { return GetToken(MySqlParser.MASTER_SSL, 0); }
		public ITerminalNode MASTER_SSL_CA() { return GetToken(MySqlParser.MASTER_SSL_CA, 0); }
		public ITerminalNode MASTER_SSL_CAPATH() { return GetToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		public ITerminalNode MASTER_SSL_CERT() { return GetToken(MySqlParser.MASTER_SSL_CERT, 0); }
		public ITerminalNode MASTER_SSL_CIPHER() { return GetToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		public ITerminalNode MASTER_SSL_CRL() { return GetToken(MySqlParser.MASTER_SSL_CRL, 0); }
		public ITerminalNode MASTER_SSL_CRLPATH() { return GetToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		public ITerminalNode MASTER_SSL_KEY() { return GetToken(MySqlParser.MASTER_SSL_KEY, 0); }
		public ITerminalNode MASTER_TLS_VERSION() { return GetToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public ITerminalNode MASTER_USER() { return GetToken(MySqlParser.MASTER_USER, 0); }
		public ITerminalNode MAX_CONNECTIONS_PER_HOUR() { return GetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public ITerminalNode MAX_QUERIES_PER_HOUR() { return GetToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public ITerminalNode MAX_ROWS() { return GetToken(MySqlParser.MAX_ROWS, 0); }
		public ITerminalNode MAX_SIZE() { return GetToken(MySqlParser.MAX_SIZE, 0); }
		public ITerminalNode MAX_UPDATES_PER_HOUR() { return GetToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public ITerminalNode MAX_USER_CONNECTIONS() { return GetToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		public ITerminalNode MERGE() { return GetToken(MySqlParser.MERGE, 0); }
		public ITerminalNode MID() { return GetToken(MySqlParser.MID, 0); }
		public ITerminalNode MIGRATE() { return GetToken(MySqlParser.MIGRATE, 0); }
		public ITerminalNode MIN_ROWS() { return GetToken(MySqlParser.MIN_ROWS, 0); }
		public ITerminalNode MODIFY() { return GetToken(MySqlParser.MODIFY, 0); }
		public ITerminalNode MUTEX() { return GetToken(MySqlParser.MUTEX, 0); }
		public ITerminalNode MYSQL() { return GetToken(MySqlParser.MYSQL, 0); }
		public ITerminalNode NAME() { return GetToken(MySqlParser.NAME, 0); }
		public ITerminalNode NAMES() { return GetToken(MySqlParser.NAMES, 0); }
		public ITerminalNode NCHAR() { return GetToken(MySqlParser.NCHAR, 0); }
		public ITerminalNode NEVER() { return GetToken(MySqlParser.NEVER, 0); }
		public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
		public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
		public ITerminalNode OFFSET() { return GetToken(MySqlParser.OFFSET, 0); }
		public ITerminalNode OJ() { return GetToken(MySqlParser.OJ, 0); }
		public ITerminalNode OLD_PASSWORD() { return GetToken(MySqlParser.OLD_PASSWORD, 0); }
		public ITerminalNode ONE() { return GetToken(MySqlParser.ONE, 0); }
		public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
		public ITerminalNode ONLY() { return GetToken(MySqlParser.ONLY, 0); }
		public ITerminalNode OPTIMIZER_COSTS() { return GetToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		public ITerminalNode OPTIONS() { return GetToken(MySqlParser.OPTIONS, 0); }
		public ITerminalNode OWNER() { return GetToken(MySqlParser.OWNER, 0); }
		public ITerminalNode PACK_KEYS() { return GetToken(MySqlParser.PACK_KEYS, 0); }
		public ITerminalNode PAGE() { return GetToken(MySqlParser.PAGE, 0); }
		public ITerminalNode PARSER() { return GetToken(MySqlParser.PARSER, 0); }
		public ITerminalNode PARTIAL() { return GetToken(MySqlParser.PARTIAL, 0); }
		public ITerminalNode PARTITIONING() { return GetToken(MySqlParser.PARTITIONING, 0); }
		public ITerminalNode PARTITIONS() { return GetToken(MySqlParser.PARTITIONS, 0); }
		public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		public ITerminalNode PHASE() { return GetToken(MySqlParser.PHASE, 0); }
		public ITerminalNode PLUGINS() { return GetToken(MySqlParser.PLUGINS, 0); }
		public ITerminalNode PLUGIN_DIR() { return GetToken(MySqlParser.PLUGIN_DIR, 0); }
		public ITerminalNode PORT() { return GetToken(MySqlParser.PORT, 0); }
		public ITerminalNode PRECEDES() { return GetToken(MySqlParser.PRECEDES, 0); }
		public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
		public ITerminalNode PRESERVE() { return GetToken(MySqlParser.PRESERVE, 0); }
		public ITerminalNode PREV() { return GetToken(MySqlParser.PREV, 0); }
		public ITerminalNode PROCESSLIST() { return GetToken(MySqlParser.PROCESSLIST, 0); }
		public ITerminalNode PROFILE() { return GetToken(MySqlParser.PROFILE, 0); }
		public ITerminalNode PROFILES() { return GetToken(MySqlParser.PROFILES, 0); }
		public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
		public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		public ITerminalNode REBUILD() { return GetToken(MySqlParser.REBUILD, 0); }
		public ITerminalNode RECOVER() { return GetToken(MySqlParser.RECOVER, 0); }
		public ITerminalNode REDO_BUFFER_SIZE() { return GetToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		public ITerminalNode REDUNDANT() { return GetToken(MySqlParser.REDUNDANT, 0); }
		public ITerminalNode RELAYLOG() { return GetToken(MySqlParser.RELAYLOG, 0); }
		public ITerminalNode RELAY_LOG_FILE() { return GetToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public ITerminalNode RELAY_LOG_POS() { return GetToken(MySqlParser.RELAY_LOG_POS, 0); }
		public ITerminalNode REMOVE() { return GetToken(MySqlParser.REMOVE, 0); }
		public ITerminalNode REORGANIZE() { return GetToken(MySqlParser.REORGANIZE, 0); }
		public ITerminalNode REPAIR() { return GetToken(MySqlParser.REPAIR, 0); }
		public ITerminalNode REPLICATE_DO_DB() { return GetToken(MySqlParser.REPLICATE_DO_DB, 0); }
		public ITerminalNode REPLICATE_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		public ITerminalNode REPLICATE_IGNORE_DB() { return GetToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		public ITerminalNode REPLICATE_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public ITerminalNode REPLICATE_REWRITE_DB() { return GetToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		public ITerminalNode REPLICATE_WILD_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public ITerminalNode REPLICATE_WILD_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public ITerminalNode REPLICATION() { return GetToken(MySqlParser.REPLICATION, 0); }
		public ITerminalNode RESUME() { return GetToken(MySqlParser.RESUME, 0); }
		public ITerminalNode RETURNS() { return GetToken(MySqlParser.RETURNS, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
		public ITerminalNode ROLLUP() { return GetToken(MySqlParser.ROLLUP, 0); }
		public ITerminalNode ROTATE() { return GetToken(MySqlParser.ROTATE, 0); }
		public ITerminalNode ROW() { return GetToken(MySqlParser.ROW, 0); }
		public ITerminalNode ROWS() { return GetToken(MySqlParser.ROWS, 0); }
		public ITerminalNode ROW_FORMAT() { return GetToken(MySqlParser.ROW_FORMAT, 0); }
		public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
		public ITerminalNode SCHEDULE() { return GetToken(MySqlParser.SCHEDULE, 0); }
		public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
		public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
		public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
		public ITerminalNode SHARE() { return GetToken(MySqlParser.SHARE, 0); }
		public ITerminalNode SHARED() { return GetToken(MySqlParser.SHARED, 0); }
		public ITerminalNode SIGNED() { return GetToken(MySqlParser.SIGNED, 0); }
		public ITerminalNode SIMPLE() { return GetToken(MySqlParser.SIMPLE, 0); }
		public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(MySqlParser.SNAPSHOT, 0); }
		public ITerminalNode SOCKET() { return GetToken(MySqlParser.SOCKET, 0); }
		public ITerminalNode SOME() { return GetToken(MySqlParser.SOME, 0); }
		public ITerminalNode SOUNDS() { return GetToken(MySqlParser.SOUNDS, 0); }
		public ITerminalNode SOURCE() { return GetToken(MySqlParser.SOURCE, 0); }
		public ITerminalNode SQL_AFTER_GTIDS() { return GetToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public ITerminalNode SQL_AFTER_MTS_GAPS() { return GetToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public ITerminalNode SQL_BEFORE_GTIDS() { return GetToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		public ITerminalNode SQL_BUFFER_RESULT() { return GetToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public ITerminalNode SQL_CACHE() { return GetToken(MySqlParser.SQL_CACHE, 0); }
		public ITerminalNode SQL_NO_CACHE() { return GetToken(MySqlParser.SQL_NO_CACHE, 0); }
		public ITerminalNode SQL_THREAD() { return GetToken(MySqlParser.SQL_THREAD, 0); }
		public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		public ITerminalNode STARTS() { return GetToken(MySqlParser.STARTS, 0); }
		public ITerminalNode STATS_AUTO_RECALC() { return GetToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		public ITerminalNode STATS_PERSISTENT() { return GetToken(MySqlParser.STATS_PERSISTENT, 0); }
		public ITerminalNode STATS_SAMPLE_PAGES() { return GetToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		public ITerminalNode STOP() { return GetToken(MySqlParser.STOP, 0); }
		public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		public ITerminalNode STRING() { return GetToken(MySqlParser.STRING, 0); }
		public ITerminalNode SUBJECT() { return GetToken(MySqlParser.SUBJECT, 0); }
		public ITerminalNode SUBPARTITION() { return GetToken(MySqlParser.SUBPARTITION, 0); }
		public ITerminalNode SUBPARTITIONS() { return GetToken(MySqlParser.SUBPARTITIONS, 0); }
		public ITerminalNode SUSPEND() { return GetToken(MySqlParser.SUSPEND, 0); }
		public ITerminalNode SWAPS() { return GetToken(MySqlParser.SWAPS, 0); }
		public ITerminalNode SWITCHES() { return GetToken(MySqlParser.SWITCHES, 0); }
		public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		public ITerminalNode TEMPTABLE() { return GetToken(MySqlParser.TEMPTABLE, 0); }
		public ITerminalNode THAN() { return GetToken(MySqlParser.THAN, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(MySqlParser.TRANSACTION, 0); }
		public ITerminalNode TRUNCATE() { return GetToken(MySqlParser.TRUNCATE, 0); }
		public ITerminalNode UNDEFINED() { return GetToken(MySqlParser.UNDEFINED, 0); }
		public ITerminalNode UNDOFILE() { return GetToken(MySqlParser.UNDOFILE, 0); }
		public ITerminalNode UNDO_BUFFER_SIZE() { return GetToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		public ITerminalNode UNKNOWN() { return GetToken(MySqlParser.UNKNOWN, 0); }
		public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
		public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		public ITerminalNode VALIDATION() { return GetToken(MySqlParser.VALIDATION, 0); }
		public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public ITerminalNode VARIABLES() { return GetToken(MySqlParser.VARIABLES, 0); }
		public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		public ITerminalNode WARNINGS() { return GetToken(MySqlParser.WARNINGS, 0); }
		public ITerminalNode WITHOUT() { return GetToken(MySqlParser.WITHOUT, 0); }
		public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		public ITerminalNode WRAPPER() { return GetToken(MySqlParser.WRAPPER, 0); }
		public ITerminalNode X509() { return GetToken(MySqlParser.X509, 0); }
		public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		public ITerminalNode XML() { return GetToken(MySqlParser.XML, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordsCanBeId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKeywordsCanBeId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKeywordsCanBeId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeywordsCanBeId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordsCanBeIdContext keywordsCanBeId() {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(Context, State);
		EnterRule(_localctx, 612, RULE_keywordsCanBeId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6016;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (ACCOUNT - 244)) | (1L << (ACTION - 244)) | (1L << (AFTER - 244)) | (1L << (AGGREGATE - 244)) | (1L << (ALGORITHM - 244)) | (1L << (ANY - 244)) | (1L << (AT - 244)) | (1L << (AUTHORS - 244)) | (1L << (AUTOCOMMIT - 244)) | (1L << (AUTOEXTEND_SIZE - 244)) | (1L << (AUTO_INCREMENT - 244)) | (1L << (AVG_ROW_LENGTH - 244)) | (1L << (BEGIN - 244)) | (1L << (BINLOG - 244)) | (1L << (BIT - 244)) | (1L << (BLOCK - 244)) | (1L << (BOOL - 244)) | (1L << (BOOLEAN - 244)) | (1L << (BTREE - 244)) | (1L << (CASCADED - 244)) | (1L << (CHAIN - 244)) | (1L << (CHANNEL - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CIPHER - 244)) | (1L << (CLIENT - 244)) | (1L << (COALESCE - 244)) | (1L << (CODE - 244)) | (1L << (COLUMNS - 244)) | (1L << (COLUMN_FORMAT - 244)) | (1L << (COMMENT - 244)) | (1L << (COMMIT - 244)) | (1L << (COMPACT - 244)) | (1L << (COMPLETION - 244)) | (1L << (COMPRESSED - 244)) | (1L << (COMPRESSION - 244)) | (1L << (CONCURRENT - 244)) | (1L << (CONNECTION - 244)) | (1L << (CONSISTENT - 244)) | (1L << (CONTAINS - 244)) | (1L << (CONTEXT - 244)) | (1L << (CONTRIBUTORS - 244)) | (1L << (COPY - 244)) | (1L << (CPU - 244)) | (1L << (DATA - 244)) | (1L << (DATAFILE - 244)) | (1L << (DEALLOCATE - 244)) | (1L << (DEFAULT_AUTH - 244)) | (1L << (DEFINER - 244)) | (1L << (DELAY_KEY_WRITE - 244)) | (1L << (DIRECTORY - 244)) | (1L << (DISABLE - 244)) | (1L << (DISCARD - 244)) | (1L << (DISK - 244)) | (1L << (DO - 244)) | (1L << (DUMPFILE - 244)) | (1L << (DUPLICATE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENABLE - 244)) | (1L << (ENCRYPTION - 244)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (ENDS - 308)) | (1L << (ENGINE - 308)) | (1L << (ENGINES - 308)) | (1L << (ERROR - 308)) | (1L << (ERRORS - 308)) | (1L << (ESCAPE - 308)) | (1L << (EVEN - 308)) | (1L << (EVENT - 308)) | (1L << (EVENTS - 308)) | (1L << (EVERY - 308)) | (1L << (EXCHANGE - 308)) | (1L << (EXCLUSIVE - 308)) | (1L << (EXPIRE - 308)) | (1L << (EXTENT_SIZE - 308)) | (1L << (FAULTS - 308)) | (1L << (FIELDS - 308)) | (1L << (FILE_BLOCK_SIZE - 308)) | (1L << (FILTER - 308)) | (1L << (FIRST - 308)) | (1L << (FIXED - 308)) | (1L << (FOLLOWS - 308)) | (1L << (FULL - 308)) | (1L << (FUNCTION - 308)) | (1L << (GLOBAL - 308)) | (1L << (GRANTS - 308)) | (1L << (GROUP_REPLICATION - 308)) | (1L << (HASH - 308)) | (1L << (HOST - 308)) | (1L << (IDENTIFIED - 308)) | (1L << (IGNORE_SERVER_IDS - 308)) | (1L << (IMPORT - 308)) | (1L << (INDEXES - 308)) | (1L << (INITIAL_SIZE - 308)) | (1L << (INPLACE - 308)) | (1L << (INSERT_METHOD - 308)) | (1L << (INSTANCE - 308)) | (1L << (INVOKER - 308)) | (1L << (IO - 308)) | (1L << (IO_THREAD - 308)) | (1L << (IPC - 308)) | (1L << (ISOLATION - 308)) | (1L << (ISSUER - 308)) | (1L << (KEY_BLOCK_SIZE - 308)) | (1L << (LANGUAGE - 308)) | (1L << (LAST - 308)) | (1L << (LEAVES - 308)) | (1L << (LESS - 308)) | (1L << (LEVEL - 308)) | (1L << (LIST - 308)) | (1L << (LOCAL - 308)) | (1L << (LOGFILE - 308)) | (1L << (LOGS - 308)) | (1L << (MASTER - 308)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_AUTO_POSITION - 372)) | (1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_HEARTBEAT_PERIOD - 372)) | (1L << (MASTER_HOST - 372)) | (1L << (MASTER_LOG_FILE - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PASSWORD - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)) | (1L << (MASTER_SSL - 372)) | (1L << (MASTER_SSL_CA - 372)) | (1L << (MASTER_SSL_CAPATH - 372)) | (1L << (MASTER_SSL_CERT - 372)) | (1L << (MASTER_SSL_CIPHER - 372)) | (1L << (MASTER_SSL_CRL - 372)) | (1L << (MASTER_SSL_CRLPATH - 372)) | (1L << (MASTER_SSL_KEY - 372)) | (1L << (MASTER_TLS_VERSION - 372)) | (1L << (MASTER_USER - 372)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 372)) | (1L << (MAX_QUERIES_PER_HOUR - 372)) | (1L << (MAX_ROWS - 372)) | (1L << (MAX_SIZE - 372)) | (1L << (MAX_UPDATES_PER_HOUR - 372)) | (1L << (MAX_USER_CONNECTIONS - 372)) | (1L << (MERGE - 372)) | (1L << (MID - 372)) | (1L << (MIGRATE - 372)) | (1L << (MIN_ROWS - 372)) | (1L << (MODIFY - 372)) | (1L << (MUTEX - 372)) | (1L << (MYSQL - 372)) | (1L << (NAME - 372)) | (1L << (NAMES - 372)) | (1L << (NCHAR - 372)) | (1L << (NEVER - 372)) | (1L << (NO - 372)) | (1L << (NODEGROUP - 372)) | (1L << (NONE - 372)) | (1L << (OFFLINE - 372)) | (1L << (OFFSET - 372)) | (1L << (OJ - 372)) | (1L << (OLD_PASSWORD - 372)) | (1L << (ONE - 372)) | (1L << (ONLINE - 372)) | (1L << (ONLY - 372)) | (1L << (OPTIMIZER_COSTS - 372)) | (1L << (OPTIONS - 372)) | (1L << (OWNER - 372)) | (1L << (PACK_KEYS - 372)) | (1L << (PAGE - 372)) | (1L << (PARSER - 372)) | (1L << (PARTIAL - 372)) | (1L << (PARTITIONING - 372)) | (1L << (PARTITIONS - 372)) | (1L << (PASSWORD - 372)) | (1L << (PHASE - 372)) | (1L << (PLUGIN_DIR - 372)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (PLUGINS - 436)) | (1L << (PORT - 436)) | (1L << (PRECEDES - 436)) | (1L << (PREPARE - 436)) | (1L << (PRESERVE - 436)) | (1L << (PREV - 436)) | (1L << (PROCESSLIST - 436)) | (1L << (PROFILE - 436)) | (1L << (PROFILES - 436)) | (1L << (PROXY - 436)) | (1L << (QUERY - 436)) | (1L << (QUICK - 436)) | (1L << (REBUILD - 436)) | (1L << (RECOVER - 436)) | (1L << (REDO_BUFFER_SIZE - 436)) | (1L << (REDUNDANT - 436)) | (1L << (RELAY_LOG_FILE - 436)) | (1L << (RELAY_LOG_POS - 436)) | (1L << (RELAYLOG - 436)) | (1L << (REMOVE - 436)) | (1L << (REORGANIZE - 436)) | (1L << (REPAIR - 436)) | (1L << (REPLICATE_DO_DB - 436)) | (1L << (REPLICATE_DO_TABLE - 436)) | (1L << (REPLICATE_IGNORE_DB - 436)) | (1L << (REPLICATE_IGNORE_TABLE - 436)) | (1L << (REPLICATE_REWRITE_DB - 436)) | (1L << (REPLICATE_WILD_DO_TABLE - 436)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 436)) | (1L << (REPLICATION - 436)) | (1L << (RESUME - 436)) | (1L << (RETURNS - 436)) | (1L << (ROLLBACK - 436)) | (1L << (ROLLUP - 436)) | (1L << (ROTATE - 436)) | (1L << (ROW - 436)) | (1L << (ROWS - 436)) | (1L << (ROW_FORMAT - 436)) | (1L << (SAVEPOINT - 436)) | (1L << (SCHEDULE - 436)) | (1L << (SECURITY - 436)) | (1L << (SERVER - 436)) | (1L << (SESSION - 436)) | (1L << (SHARE - 436)) | (1L << (SHARED - 436)) | (1L << (SIGNED - 436)) | (1L << (SIMPLE - 436)) | (1L << (SLAVE - 436)) | (1L << (SNAPSHOT - 436)) | (1L << (SOCKET - 436)) | (1L << (SOME - 436)) | (1L << (SOUNDS - 436)) | (1L << (SOURCE - 436)) | (1L << (SQL_AFTER_GTIDS - 436)) | (1L << (SQL_AFTER_MTS_GAPS - 436)) | (1L << (SQL_BEFORE_GTIDS - 436)) | (1L << (SQL_BUFFER_RESULT - 436)) | (1L << (SQL_CACHE - 436)) | (1L << (SQL_NO_CACHE - 436)) | (1L << (SQL_THREAD - 436)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (START - 500)) | (1L << (STARTS - 500)) | (1L << (STATS_AUTO_RECALC - 500)) | (1L << (STATS_PERSISTENT - 500)) | (1L << (STATS_SAMPLE_PAGES - 500)) | (1L << (STATUS - 500)) | (1L << (STOP - 500)) | (1L << (STORAGE - 500)) | (1L << (STRING - 500)) | (1L << (SUBJECT - 500)) | (1L << (SUBPARTITION - 500)) | (1L << (SUBPARTITIONS - 500)) | (1L << (SUSPEND - 500)) | (1L << (SWAPS - 500)) | (1L << (SWITCHES - 500)) | (1L << (TABLESPACE - 500)) | (1L << (TEMPORARY - 500)) | (1L << (TEMPTABLE - 500)) | (1L << (THAN - 500)) | (1L << (TRANSACTION - 500)) | (1L << (TRUNCATE - 500)) | (1L << (UNDEFINED - 500)) | (1L << (UNDOFILE - 500)) | (1L << (UNDO_BUFFER_SIZE - 500)) | (1L << (UNKNOWN - 500)) | (1L << (UPGRADE - 500)) | (1L << (USER - 500)) | (1L << (VALIDATION - 500)) | (1L << (VALUE - 500)) | (1L << (VARIABLES - 500)) | (1L << (VIEW - 500)) | (1L << (WAIT - 500)) | (1L << (WARNINGS - 500)) | (1L << (WITHOUT - 500)) | (1L << (WORK - 500)) | (1L << (WRAPPER - 500)) | (1L << (X509 - 500)) | (1L << (XA - 500)) | (1L << (XML - 500)))) != 0) || _la==MEMORY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameBaseContext : ParserRuleContext {
		public ITerminalNode ABS() { return GetToken(MySqlParser.ABS, 0); }
		public ITerminalNode ACOS() { return GetToken(MySqlParser.ACOS, 0); }
		public ITerminalNode ADDDATE() { return GetToken(MySqlParser.ADDDATE, 0); }
		public ITerminalNode ADDTIME() { return GetToken(MySqlParser.ADDTIME, 0); }
		public ITerminalNode AES_DECRYPT() { return GetToken(MySqlParser.AES_DECRYPT, 0); }
		public ITerminalNode AES_ENCRYPT() { return GetToken(MySqlParser.AES_ENCRYPT, 0); }
		public ITerminalNode AREA() { return GetToken(MySqlParser.AREA, 0); }
		public ITerminalNode ASBINARY() { return GetToken(MySqlParser.ASBINARY, 0); }
		public ITerminalNode ASIN() { return GetToken(MySqlParser.ASIN, 0); }
		public ITerminalNode ASTEXT() { return GetToken(MySqlParser.ASTEXT, 0); }
		public ITerminalNode ASWKB() { return GetToken(MySqlParser.ASWKB, 0); }
		public ITerminalNode ASWKT() { return GetToken(MySqlParser.ASWKT, 0); }
		public ITerminalNode ASYMMETRIC_DECRYPT() { return GetToken(MySqlParser.ASYMMETRIC_DECRYPT, 0); }
		public ITerminalNode ASYMMETRIC_DERIVE() { return GetToken(MySqlParser.ASYMMETRIC_DERIVE, 0); }
		public ITerminalNode ASYMMETRIC_ENCRYPT() { return GetToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0); }
		public ITerminalNode ASYMMETRIC_SIGN() { return GetToken(MySqlParser.ASYMMETRIC_SIGN, 0); }
		public ITerminalNode ASYMMETRIC_VERIFY() { return GetToken(MySqlParser.ASYMMETRIC_VERIFY, 0); }
		public ITerminalNode ATAN() { return GetToken(MySqlParser.ATAN, 0); }
		public ITerminalNode ATAN2() { return GetToken(MySqlParser.ATAN2, 0); }
		public ITerminalNode BENCHMARK() { return GetToken(MySqlParser.BENCHMARK, 0); }
		public ITerminalNode BIN() { return GetToken(MySqlParser.BIN, 0); }
		public ITerminalNode BIT_COUNT() { return GetToken(MySqlParser.BIT_COUNT, 0); }
		public ITerminalNode BIT_LENGTH() { return GetToken(MySqlParser.BIT_LENGTH, 0); }
		public ITerminalNode BUFFER() { return GetToken(MySqlParser.BUFFER, 0); }
		public ITerminalNode CEIL() { return GetToken(MySqlParser.CEIL, 0); }
		public ITerminalNode CEILING() { return GetToken(MySqlParser.CEILING, 0); }
		public ITerminalNode CENTROID() { return GetToken(MySqlParser.CENTROID, 0); }
		public ITerminalNode CHARACTER_LENGTH() { return GetToken(MySqlParser.CHARACTER_LENGTH, 0); }
		public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
		public ITerminalNode CHAR_LENGTH() { return GetToken(MySqlParser.CHAR_LENGTH, 0); }
		public ITerminalNode COERCIBILITY() { return GetToken(MySqlParser.COERCIBILITY, 0); }
		public ITerminalNode COLLATION() { return GetToken(MySqlParser.COLLATION, 0); }
		public ITerminalNode COMPRESS() { return GetToken(MySqlParser.COMPRESS, 0); }
		public ITerminalNode CONCAT() { return GetToken(MySqlParser.CONCAT, 0); }
		public ITerminalNode CONCAT_WS() { return GetToken(MySqlParser.CONCAT_WS, 0); }
		public ITerminalNode CONNECTION_ID() { return GetToken(MySqlParser.CONNECTION_ID, 0); }
		public ITerminalNode CONV() { return GetToken(MySqlParser.CONV, 0); }
		public ITerminalNode CONVERT_TZ() { return GetToken(MySqlParser.CONVERT_TZ, 0); }
		public ITerminalNode COS() { return GetToken(MySqlParser.COS, 0); }
		public ITerminalNode COT() { return GetToken(MySqlParser.COT, 0); }
		public ITerminalNode COUNT() { return GetToken(MySqlParser.COUNT, 0); }
		public ITerminalNode CRC32() { return GetToken(MySqlParser.CRC32, 0); }
		public ITerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return GetToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		public ITerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return GetToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		public ITerminalNode CREATE_DH_PARAMETERS() { return GetToken(MySqlParser.CREATE_DH_PARAMETERS, 0); }
		public ITerminalNode CREATE_DIGEST() { return GetToken(MySqlParser.CREATE_DIGEST, 0); }
		public ITerminalNode CROSSES() { return GetToken(MySqlParser.CROSSES, 0); }
		public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		public ITerminalNode DATEDIFF() { return GetToken(MySqlParser.DATEDIFF, 0); }
		public ITerminalNode DATE_FORMAT() { return GetToken(MySqlParser.DATE_FORMAT, 0); }
		public ITerminalNode DAY() { return GetToken(MySqlParser.DAY, 0); }
		public ITerminalNode DAYNAME() { return GetToken(MySqlParser.DAYNAME, 0); }
		public ITerminalNode DAYOFMONTH() { return GetToken(MySqlParser.DAYOFMONTH, 0); }
		public ITerminalNode DAYOFWEEK() { return GetToken(MySqlParser.DAYOFWEEK, 0); }
		public ITerminalNode DAYOFYEAR() { return GetToken(MySqlParser.DAYOFYEAR, 0); }
		public ITerminalNode DECODE() { return GetToken(MySqlParser.DECODE, 0); }
		public ITerminalNode DEGREES() { return GetToken(MySqlParser.DEGREES, 0); }
		public ITerminalNode DES_DECRYPT() { return GetToken(MySqlParser.DES_DECRYPT, 0); }
		public ITerminalNode DES_ENCRYPT() { return GetToken(MySqlParser.DES_ENCRYPT, 0); }
		public ITerminalNode DIMENSION() { return GetToken(MySqlParser.DIMENSION, 0); }
		public ITerminalNode DISJOINT() { return GetToken(MySqlParser.DISJOINT, 0); }
		public ITerminalNode ELT() { return GetToken(MySqlParser.ELT, 0); }
		public ITerminalNode ENCODE() { return GetToken(MySqlParser.ENCODE, 0); }
		public ITerminalNode ENCRYPT() { return GetToken(MySqlParser.ENCRYPT, 0); }
		public ITerminalNode ENDPOINT() { return GetToken(MySqlParser.ENDPOINT, 0); }
		public ITerminalNode ENVELOPE() { return GetToken(MySqlParser.ENVELOPE, 0); }
		public ITerminalNode EQUALS() { return GetToken(MySqlParser.EQUALS, 0); }
		public ITerminalNode EXP() { return GetToken(MySqlParser.EXP, 0); }
		public ITerminalNode EXPORT_SET() { return GetToken(MySqlParser.EXPORT_SET, 0); }
		public ITerminalNode EXTERIORRING() { return GetToken(MySqlParser.EXTERIORRING, 0); }
		public ITerminalNode EXTRACTVALUE() { return GetToken(MySqlParser.EXTRACTVALUE, 0); }
		public ITerminalNode FIELD() { return GetToken(MySqlParser.FIELD, 0); }
		public ITerminalNode FIND_IN_SET() { return GetToken(MySqlParser.FIND_IN_SET, 0); }
		public ITerminalNode FLOOR() { return GetToken(MySqlParser.FLOOR, 0); }
		public ITerminalNode FORMAT() { return GetToken(MySqlParser.FORMAT, 0); }
		public ITerminalNode FOUND_ROWS() { return GetToken(MySqlParser.FOUND_ROWS, 0); }
		public ITerminalNode FROM_BASE64() { return GetToken(MySqlParser.FROM_BASE64, 0); }
		public ITerminalNode FROM_DAYS() { return GetToken(MySqlParser.FROM_DAYS, 0); }
		public ITerminalNode FROM_UNIXTIME() { return GetToken(MySqlParser.FROM_UNIXTIME, 0); }
		public ITerminalNode GEOMCOLLFROMTEXT() { return GetToken(MySqlParser.GEOMCOLLFROMTEXT, 0); }
		public ITerminalNode GEOMCOLLFROMWKB() { return GetToken(MySqlParser.GEOMCOLLFROMWKB, 0); }
		public ITerminalNode GEOMETRYCOLLECTION() { return GetToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public ITerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return GetToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public ITerminalNode GEOMETRYCOLLECTIONFROMWKB() { return GetToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		public ITerminalNode GEOMETRYFROMTEXT() { return GetToken(MySqlParser.GEOMETRYFROMTEXT, 0); }
		public ITerminalNode GEOMETRYFROMWKB() { return GetToken(MySqlParser.GEOMETRYFROMWKB, 0); }
		public ITerminalNode GEOMETRYN() { return GetToken(MySqlParser.GEOMETRYN, 0); }
		public ITerminalNode GEOMETRYTYPE() { return GetToken(MySqlParser.GEOMETRYTYPE, 0); }
		public ITerminalNode GEOMFROMTEXT() { return GetToken(MySqlParser.GEOMFROMTEXT, 0); }
		public ITerminalNode GEOMFROMWKB() { return GetToken(MySqlParser.GEOMFROMWKB, 0); }
		public ITerminalNode GET_FORMAT() { return GetToken(MySqlParser.GET_FORMAT, 0); }
		public ITerminalNode GET_LOCK() { return GetToken(MySqlParser.GET_LOCK, 0); }
		public ITerminalNode GLENGTH() { return GetToken(MySqlParser.GLENGTH, 0); }
		public ITerminalNode GREATEST() { return GetToken(MySqlParser.GREATEST, 0); }
		public ITerminalNode GTID_SUBSET() { return GetToken(MySqlParser.GTID_SUBSET, 0); }
		public ITerminalNode GTID_SUBTRACT() { return GetToken(MySqlParser.GTID_SUBTRACT, 0); }
		public ITerminalNode HEX() { return GetToken(MySqlParser.HEX, 0); }
		public ITerminalNode HOUR() { return GetToken(MySqlParser.HOUR, 0); }
		public ITerminalNode IFNULL() { return GetToken(MySqlParser.IFNULL, 0); }
		public ITerminalNode INET6_ATON() { return GetToken(MySqlParser.INET6_ATON, 0); }
		public ITerminalNode INET6_NTOA() { return GetToken(MySqlParser.INET6_NTOA, 0); }
		public ITerminalNode INET_ATON() { return GetToken(MySqlParser.INET_ATON, 0); }
		public ITerminalNode INET_NTOA() { return GetToken(MySqlParser.INET_NTOA, 0); }
		public ITerminalNode INSTR() { return GetToken(MySqlParser.INSTR, 0); }
		public ITerminalNode INTERIORRINGN() { return GetToken(MySqlParser.INTERIORRINGN, 0); }
		public ITerminalNode INTERSECTS() { return GetToken(MySqlParser.INTERSECTS, 0); }
		public ITerminalNode ISCLOSED() { return GetToken(MySqlParser.ISCLOSED, 0); }
		public ITerminalNode ISEMPTY() { return GetToken(MySqlParser.ISEMPTY, 0); }
		public ITerminalNode ISNULL() { return GetToken(MySqlParser.ISNULL, 0); }
		public ITerminalNode ISSIMPLE() { return GetToken(MySqlParser.ISSIMPLE, 0); }
		public ITerminalNode IS_FREE_LOCK() { return GetToken(MySqlParser.IS_FREE_LOCK, 0); }
		public ITerminalNode IS_IPV4() { return GetToken(MySqlParser.IS_IPV4, 0); }
		public ITerminalNode IS_IPV4_COMPAT() { return GetToken(MySqlParser.IS_IPV4_COMPAT, 0); }
		public ITerminalNode IS_IPV4_MAPPED() { return GetToken(MySqlParser.IS_IPV4_MAPPED, 0); }
		public ITerminalNode IS_IPV6() { return GetToken(MySqlParser.IS_IPV6, 0); }
		public ITerminalNode IS_USED_LOCK() { return GetToken(MySqlParser.IS_USED_LOCK, 0); }
		public ITerminalNode LAST_INSERT_ID() { return GetToken(MySqlParser.LAST_INSERT_ID, 0); }
		public ITerminalNode LCASE() { return GetToken(MySqlParser.LCASE, 0); }
		public ITerminalNode LEAST() { return GetToken(MySqlParser.LEAST, 0); }
		public ITerminalNode LEFT() { return GetToken(MySqlParser.LEFT, 0); }
		public ITerminalNode LENGTH() { return GetToken(MySqlParser.LENGTH, 0); }
		public ITerminalNode LINEFROMTEXT() { return GetToken(MySqlParser.LINEFROMTEXT, 0); }
		public ITerminalNode LINEFROMWKB() { return GetToken(MySqlParser.LINEFROMWKB, 0); }
		public ITerminalNode LINESTRING() { return GetToken(MySqlParser.LINESTRING, 0); }
		public ITerminalNode LINESTRINGFROMTEXT() { return GetToken(MySqlParser.LINESTRINGFROMTEXT, 0); }
		public ITerminalNode LINESTRINGFROMWKB() { return GetToken(MySqlParser.LINESTRINGFROMWKB, 0); }
		public ITerminalNode LN() { return GetToken(MySqlParser.LN, 0); }
		public ITerminalNode LOAD_FILE() { return GetToken(MySqlParser.LOAD_FILE, 0); }
		public ITerminalNode LOCATE() { return GetToken(MySqlParser.LOCATE, 0); }
		public ITerminalNode LOG() { return GetToken(MySqlParser.LOG, 0); }
		public ITerminalNode LOG10() { return GetToken(MySqlParser.LOG10, 0); }
		public ITerminalNode LOG2() { return GetToken(MySqlParser.LOG2, 0); }
		public ITerminalNode LOWER() { return GetToken(MySqlParser.LOWER, 0); }
		public ITerminalNode LPAD() { return GetToken(MySqlParser.LPAD, 0); }
		public ITerminalNode LTRIM() { return GetToken(MySqlParser.LTRIM, 0); }
		public ITerminalNode MAKEDATE() { return GetToken(MySqlParser.MAKEDATE, 0); }
		public ITerminalNode MAKETIME() { return GetToken(MySqlParser.MAKETIME, 0); }
		public ITerminalNode MAKE_SET() { return GetToken(MySqlParser.MAKE_SET, 0); }
		public ITerminalNode MASTER_POS_WAIT() { return GetToken(MySqlParser.MASTER_POS_WAIT, 0); }
		public ITerminalNode MBRCONTAINS() { return GetToken(MySqlParser.MBRCONTAINS, 0); }
		public ITerminalNode MBRDISJOINT() { return GetToken(MySqlParser.MBRDISJOINT, 0); }
		public ITerminalNode MBREQUAL() { return GetToken(MySqlParser.MBREQUAL, 0); }
		public ITerminalNode MBRINTERSECTS() { return GetToken(MySqlParser.MBRINTERSECTS, 0); }
		public ITerminalNode MBROVERLAPS() { return GetToken(MySqlParser.MBROVERLAPS, 0); }
		public ITerminalNode MBRTOUCHES() { return GetToken(MySqlParser.MBRTOUCHES, 0); }
		public ITerminalNode MBRWITHIN() { return GetToken(MySqlParser.MBRWITHIN, 0); }
		public ITerminalNode MD5() { return GetToken(MySqlParser.MD5, 0); }
		public ITerminalNode MICROSECOND() { return GetToken(MySqlParser.MICROSECOND, 0); }
		public ITerminalNode MINUTE() { return GetToken(MySqlParser.MINUTE, 0); }
		public ITerminalNode MLINEFROMTEXT() { return GetToken(MySqlParser.MLINEFROMTEXT, 0); }
		public ITerminalNode MLINEFROMWKB() { return GetToken(MySqlParser.MLINEFROMWKB, 0); }
		public ITerminalNode MONTH() { return GetToken(MySqlParser.MONTH, 0); }
		public ITerminalNode MONTHNAME() { return GetToken(MySqlParser.MONTHNAME, 0); }
		public ITerminalNode MPOINTFROMTEXT() { return GetToken(MySqlParser.MPOINTFROMTEXT, 0); }
		public ITerminalNode MPOINTFROMWKB() { return GetToken(MySqlParser.MPOINTFROMWKB, 0); }
		public ITerminalNode MPOLYFROMTEXT() { return GetToken(MySqlParser.MPOLYFROMTEXT, 0); }
		public ITerminalNode MPOLYFROMWKB() { return GetToken(MySqlParser.MPOLYFROMWKB, 0); }
		public ITerminalNode MULTILINESTRING() { return GetToken(MySqlParser.MULTILINESTRING, 0); }
		public ITerminalNode MULTILINESTRINGFROMTEXT() { return GetToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0); }
		public ITerminalNode MULTILINESTRINGFROMWKB() { return GetToken(MySqlParser.MULTILINESTRINGFROMWKB, 0); }
		public ITerminalNode MULTIPOINT() { return GetToken(MySqlParser.MULTIPOINT, 0); }
		public ITerminalNode MULTIPOINTFROMTEXT() { return GetToken(MySqlParser.MULTIPOINTFROMTEXT, 0); }
		public ITerminalNode MULTIPOINTFROMWKB() { return GetToken(MySqlParser.MULTIPOINTFROMWKB, 0); }
		public ITerminalNode MULTIPOLYGON() { return GetToken(MySqlParser.MULTIPOLYGON, 0); }
		public ITerminalNode MULTIPOLYGONFROMTEXT() { return GetToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0); }
		public ITerminalNode MULTIPOLYGONFROMWKB() { return GetToken(MySqlParser.MULTIPOLYGONFROMWKB, 0); }
		public ITerminalNode NAME_CONST() { return GetToken(MySqlParser.NAME_CONST, 0); }
		public ITerminalNode NULLIF() { return GetToken(MySqlParser.NULLIF, 0); }
		public ITerminalNode NUMGEOMETRIES() { return GetToken(MySqlParser.NUMGEOMETRIES, 0); }
		public ITerminalNode NUMINTERIORRINGS() { return GetToken(MySqlParser.NUMINTERIORRINGS, 0); }
		public ITerminalNode NUMPOINTS() { return GetToken(MySqlParser.NUMPOINTS, 0); }
		public ITerminalNode OCT() { return GetToken(MySqlParser.OCT, 0); }
		public ITerminalNode OCTET_LENGTH() { return GetToken(MySqlParser.OCTET_LENGTH, 0); }
		public ITerminalNode ORD() { return GetToken(MySqlParser.ORD, 0); }
		public ITerminalNode OVERLAPS() { return GetToken(MySqlParser.OVERLAPS, 0); }
		public ITerminalNode PERIOD_ADD() { return GetToken(MySqlParser.PERIOD_ADD, 0); }
		public ITerminalNode PERIOD_DIFF() { return GetToken(MySqlParser.PERIOD_DIFF, 0); }
		public ITerminalNode PI() { return GetToken(MySqlParser.PI, 0); }
		public ITerminalNode POINT() { return GetToken(MySqlParser.POINT, 0); }
		public ITerminalNode POINTFROMTEXT() { return GetToken(MySqlParser.POINTFROMTEXT, 0); }
		public ITerminalNode POINTFROMWKB() { return GetToken(MySqlParser.POINTFROMWKB, 0); }
		public ITerminalNode POINTN() { return GetToken(MySqlParser.POINTN, 0); }
		public ITerminalNode POLYFROMTEXT() { return GetToken(MySqlParser.POLYFROMTEXT, 0); }
		public ITerminalNode POLYFROMWKB() { return GetToken(MySqlParser.POLYFROMWKB, 0); }
		public ITerminalNode POLYGON() { return GetToken(MySqlParser.POLYGON, 0); }
		public ITerminalNode POLYGONFROMTEXT() { return GetToken(MySqlParser.POLYGONFROMTEXT, 0); }
		public ITerminalNode POLYGONFROMWKB() { return GetToken(MySqlParser.POLYGONFROMWKB, 0); }
		public ITerminalNode POSITION() { return GetToken(MySqlParser.POSITION, 0); }
		public ITerminalNode POW() { return GetToken(MySqlParser.POW, 0); }
		public ITerminalNode POWER() { return GetToken(MySqlParser.POWER, 0); }
		public ITerminalNode QUARTER() { return GetToken(MySqlParser.QUARTER, 0); }
		public ITerminalNode QUOTE() { return GetToken(MySqlParser.QUOTE, 0); }
		public ITerminalNode RADIANS() { return GetToken(MySqlParser.RADIANS, 0); }
		public ITerminalNode RAND() { return GetToken(MySqlParser.RAND, 0); }
		public ITerminalNode RANDOM_BYTES() { return GetToken(MySqlParser.RANDOM_BYTES, 0); }
		public ITerminalNode RELEASE_LOCK() { return GetToken(MySqlParser.RELEASE_LOCK, 0); }
		public ITerminalNode REVERSE() { return GetToken(MySqlParser.REVERSE, 0); }
		public ITerminalNode RIGHT() { return GetToken(MySqlParser.RIGHT, 0); }
		public ITerminalNode ROUND() { return GetToken(MySqlParser.ROUND, 0); }
		public ITerminalNode ROW_COUNT() { return GetToken(MySqlParser.ROW_COUNT, 0); }
		public ITerminalNode RPAD() { return GetToken(MySqlParser.RPAD, 0); }
		public ITerminalNode RTRIM() { return GetToken(MySqlParser.RTRIM, 0); }
		public ITerminalNode SECOND() { return GetToken(MySqlParser.SECOND, 0); }
		public ITerminalNode SEC_TO_TIME() { return GetToken(MySqlParser.SEC_TO_TIME, 0); }
		public ITerminalNode SESSION_USER() { return GetToken(MySqlParser.SESSION_USER, 0); }
		public ITerminalNode SHA() { return GetToken(MySqlParser.SHA, 0); }
		public ITerminalNode SHA1() { return GetToken(MySqlParser.SHA1, 0); }
		public ITerminalNode SHA2() { return GetToken(MySqlParser.SHA2, 0); }
		public ITerminalNode SIGN() { return GetToken(MySqlParser.SIGN, 0); }
		public ITerminalNode SIN() { return GetToken(MySqlParser.SIN, 0); }
		public ITerminalNode SLEEP() { return GetToken(MySqlParser.SLEEP, 0); }
		public ITerminalNode SOUNDEX() { return GetToken(MySqlParser.SOUNDEX, 0); }
		public ITerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return GetToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		public ITerminalNode SQRT() { return GetToken(MySqlParser.SQRT, 0); }
		public ITerminalNode SRID() { return GetToken(MySqlParser.SRID, 0); }
		public ITerminalNode STARTPOINT() { return GetToken(MySqlParser.STARTPOINT, 0); }
		public ITerminalNode STRCMP() { return GetToken(MySqlParser.STRCMP, 0); }
		public ITerminalNode STR_TO_DATE() { return GetToken(MySqlParser.STR_TO_DATE, 0); }
		public ITerminalNode ST_AREA() { return GetToken(MySqlParser.ST_AREA, 0); }
		public ITerminalNode ST_ASBINARY() { return GetToken(MySqlParser.ST_ASBINARY, 0); }
		public ITerminalNode ST_ASTEXT() { return GetToken(MySqlParser.ST_ASTEXT, 0); }
		public ITerminalNode ST_ASWKB() { return GetToken(MySqlParser.ST_ASWKB, 0); }
		public ITerminalNode ST_ASWKT() { return GetToken(MySqlParser.ST_ASWKT, 0); }
		public ITerminalNode ST_BUFFER() { return GetToken(MySqlParser.ST_BUFFER, 0); }
		public ITerminalNode ST_CENTROID() { return GetToken(MySqlParser.ST_CENTROID, 0); }
		public ITerminalNode ST_CONTAINS() { return GetToken(MySqlParser.ST_CONTAINS, 0); }
		public ITerminalNode ST_CROSSES() { return GetToken(MySqlParser.ST_CROSSES, 0); }
		public ITerminalNode ST_DIFFERENCE() { return GetToken(MySqlParser.ST_DIFFERENCE, 0); }
		public ITerminalNode ST_DIMENSION() { return GetToken(MySqlParser.ST_DIMENSION, 0); }
		public ITerminalNode ST_DISJOINT() { return GetToken(MySqlParser.ST_DISJOINT, 0); }
		public ITerminalNode ST_DISTANCE() { return GetToken(MySqlParser.ST_DISTANCE, 0); }
		public ITerminalNode ST_ENDPOINT() { return GetToken(MySqlParser.ST_ENDPOINT, 0); }
		public ITerminalNode ST_ENVELOPE() { return GetToken(MySqlParser.ST_ENVELOPE, 0); }
		public ITerminalNode ST_EQUALS() { return GetToken(MySqlParser.ST_EQUALS, 0); }
		public ITerminalNode ST_EXTERIORRING() { return GetToken(MySqlParser.ST_EXTERIORRING, 0); }
		public ITerminalNode ST_GEOMCOLLFROMTEXT() { return GetToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0); }
		public ITerminalNode ST_GEOMCOLLFROMTXT() { return GetToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0); }
		public ITerminalNode ST_GEOMCOLLFROMWKB() { return GetToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0); }
		public ITerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return GetToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public ITerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return GetToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		public ITerminalNode ST_GEOMETRYFROMTEXT() { return GetToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0); }
		public ITerminalNode ST_GEOMETRYFROMWKB() { return GetToken(MySqlParser.ST_GEOMETRYFROMWKB, 0); }
		public ITerminalNode ST_GEOMETRYN() { return GetToken(MySqlParser.ST_GEOMETRYN, 0); }
		public ITerminalNode ST_GEOMETRYTYPE() { return GetToken(MySqlParser.ST_GEOMETRYTYPE, 0); }
		public ITerminalNode ST_GEOMFROMTEXT() { return GetToken(MySqlParser.ST_GEOMFROMTEXT, 0); }
		public ITerminalNode ST_GEOMFROMWKB() { return GetToken(MySqlParser.ST_GEOMFROMWKB, 0); }
		public ITerminalNode ST_INTERIORRINGN() { return GetToken(MySqlParser.ST_INTERIORRINGN, 0); }
		public ITerminalNode ST_INTERSECTION() { return GetToken(MySqlParser.ST_INTERSECTION, 0); }
		public ITerminalNode ST_INTERSECTS() { return GetToken(MySqlParser.ST_INTERSECTS, 0); }
		public ITerminalNode ST_ISCLOSED() { return GetToken(MySqlParser.ST_ISCLOSED, 0); }
		public ITerminalNode ST_ISEMPTY() { return GetToken(MySqlParser.ST_ISEMPTY, 0); }
		public ITerminalNode ST_ISSIMPLE() { return GetToken(MySqlParser.ST_ISSIMPLE, 0); }
		public ITerminalNode ST_LINEFROMTEXT() { return GetToken(MySqlParser.ST_LINEFROMTEXT, 0); }
		public ITerminalNode ST_LINEFROMWKB() { return GetToken(MySqlParser.ST_LINEFROMWKB, 0); }
		public ITerminalNode ST_LINESTRINGFROMTEXT() { return GetToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0); }
		public ITerminalNode ST_LINESTRINGFROMWKB() { return GetToken(MySqlParser.ST_LINESTRINGFROMWKB, 0); }
		public ITerminalNode ST_NUMGEOMETRIES() { return GetToken(MySqlParser.ST_NUMGEOMETRIES, 0); }
		public ITerminalNode ST_NUMINTERIORRING() { return GetToken(MySqlParser.ST_NUMINTERIORRING, 0); }
		public ITerminalNode ST_NUMINTERIORRINGS() { return GetToken(MySqlParser.ST_NUMINTERIORRINGS, 0); }
		public ITerminalNode ST_NUMPOINTS() { return GetToken(MySqlParser.ST_NUMPOINTS, 0); }
		public ITerminalNode ST_OVERLAPS() { return GetToken(MySqlParser.ST_OVERLAPS, 0); }
		public ITerminalNode ST_POINTFROMTEXT() { return GetToken(MySqlParser.ST_POINTFROMTEXT, 0); }
		public ITerminalNode ST_POINTFROMWKB() { return GetToken(MySqlParser.ST_POINTFROMWKB, 0); }
		public ITerminalNode ST_POINTN() { return GetToken(MySqlParser.ST_POINTN, 0); }
		public ITerminalNode ST_POLYFROMTEXT() { return GetToken(MySqlParser.ST_POLYFROMTEXT, 0); }
		public ITerminalNode ST_POLYFROMWKB() { return GetToken(MySqlParser.ST_POLYFROMWKB, 0); }
		public ITerminalNode ST_POLYGONFROMTEXT() { return GetToken(MySqlParser.ST_POLYGONFROMTEXT, 0); }
		public ITerminalNode ST_POLYGONFROMWKB() { return GetToken(MySqlParser.ST_POLYGONFROMWKB, 0); }
		public ITerminalNode ST_SRID() { return GetToken(MySqlParser.ST_SRID, 0); }
		public ITerminalNode ST_STARTPOINT() { return GetToken(MySqlParser.ST_STARTPOINT, 0); }
		public ITerminalNode ST_SYMDIFFERENCE() { return GetToken(MySqlParser.ST_SYMDIFFERENCE, 0); }
		public ITerminalNode ST_TOUCHES() { return GetToken(MySqlParser.ST_TOUCHES, 0); }
		public ITerminalNode ST_UNION() { return GetToken(MySqlParser.ST_UNION, 0); }
		public ITerminalNode ST_WITHIN() { return GetToken(MySqlParser.ST_WITHIN, 0); }
		public ITerminalNode ST_X() { return GetToken(MySqlParser.ST_X, 0); }
		public ITerminalNode ST_Y() { return GetToken(MySqlParser.ST_Y, 0); }
		public ITerminalNode SUBDATE() { return GetToken(MySqlParser.SUBDATE, 0); }
		public ITerminalNode SUBSTRING_INDEX() { return GetToken(MySqlParser.SUBSTRING_INDEX, 0); }
		public ITerminalNode SUBTIME() { return GetToken(MySqlParser.SUBTIME, 0); }
		public ITerminalNode SYSTEM_USER() { return GetToken(MySqlParser.SYSTEM_USER, 0); }
		public ITerminalNode TAN() { return GetToken(MySqlParser.TAN, 0); }
		public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		public ITerminalNode TIMEDIFF() { return GetToken(MySqlParser.TIMEDIFF, 0); }
		public ITerminalNode TIMESTAMP() { return GetToken(MySqlParser.TIMESTAMP, 0); }
		public ITerminalNode TIMESTAMPADD() { return GetToken(MySqlParser.TIMESTAMPADD, 0); }
		public ITerminalNode TIMESTAMPDIFF() { return GetToken(MySqlParser.TIMESTAMPDIFF, 0); }
		public ITerminalNode TIME_FORMAT() { return GetToken(MySqlParser.TIME_FORMAT, 0); }
		public ITerminalNode TIME_TO_SEC() { return GetToken(MySqlParser.TIME_TO_SEC, 0); }
		public ITerminalNode TOUCHES() { return GetToken(MySqlParser.TOUCHES, 0); }
		public ITerminalNode TO_BASE64() { return GetToken(MySqlParser.TO_BASE64, 0); }
		public ITerminalNode TO_DAYS() { return GetToken(MySqlParser.TO_DAYS, 0); }
		public ITerminalNode TO_SECONDS() { return GetToken(MySqlParser.TO_SECONDS, 0); }
		public ITerminalNode UCASE() { return GetToken(MySqlParser.UCASE, 0); }
		public ITerminalNode UNCOMPRESS() { return GetToken(MySqlParser.UNCOMPRESS, 0); }
		public ITerminalNode UNCOMPRESSED_LENGTH() { return GetToken(MySqlParser.UNCOMPRESSED_LENGTH, 0); }
		public ITerminalNode UNHEX() { return GetToken(MySqlParser.UNHEX, 0); }
		public ITerminalNode UNIX_TIMESTAMP() { return GetToken(MySqlParser.UNIX_TIMESTAMP, 0); }
		public ITerminalNode UPDATEXML() { return GetToken(MySqlParser.UPDATEXML, 0); }
		public ITerminalNode UPPER() { return GetToken(MySqlParser.UPPER, 0); }
		public ITerminalNode UUID() { return GetToken(MySqlParser.UUID, 0); }
		public ITerminalNode UUID_SHORT() { return GetToken(MySqlParser.UUID_SHORT, 0); }
		public ITerminalNode VALIDATE_PASSWORD_STRENGTH() { return GetToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		public ITerminalNode VERSION() { return GetToken(MySqlParser.VERSION, 0); }
		public ITerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return GetToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		public ITerminalNode WEEK() { return GetToken(MySqlParser.WEEK, 0); }
		public ITerminalNode WEEKDAY() { return GetToken(MySqlParser.WEEKDAY, 0); }
		public ITerminalNode WEEKOFYEAR() { return GetToken(MySqlParser.WEEKOFYEAR, 0); }
		public ITerminalNode WEIGHT_STRING() { return GetToken(MySqlParser.WEIGHT_STRING, 0); }
		public ITerminalNode WITHIN() { return GetToken(MySqlParser.WITHIN, 0); }
		public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
		public ITerminalNode YEARWEEK() { return GetToken(MySqlParser.YEARWEEK, 0); }
		public ITerminalNode Y_FUNCTION() { return GetToken(MySqlParser.Y_FUNCTION, 0); }
		public ITerminalNode X_FUNCTION() { return GetToken(MySqlParser.X_FUNCTION, 0); }
		public FunctionNameBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionNameBase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionNameBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionNameBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMySqlParserVisitor<TResult> typedVisitor = visitor as IMySqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionNameBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameBaseContext functionNameBase() {
		FunctionNameBaseContext _localctx = new FunctionNameBaseContext(Context, State);
		EnterRule(_localctx, 614, RULE_functionNameBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6018;
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TIME - 180)) | (1L << (TIMESTAMP - 180)) | (1L << (YEAR - 180)) | (1L << (COUNT - 180)) | (1L << (POSITION - 180)))) != 0) || ((((_la - 550)) & ~0x3f) == 0 && ((1L << (_la - 550)) & ((1L << (QUARTER - 550)) | (1L << (MONTH - 550)) | (1L << (DAY - 550)) | (1L << (HOUR - 550)) | (1L << (MINUTE - 550)) | (1L << (WEEK - 550)) | (1L << (SECOND - 550)) | (1L << (MICROSECOND - 550)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (GEOMETRYCOLLECTION - 622)) | (1L << (LINESTRING - 622)) | (1L << (MULTILINESTRING - 622)) | (1L << (MULTIPOINT - 622)) | (1L << (MULTIPOLYGON - 622)) | (1L << (POINT - 622)) | (1L << (POLYGON - 622)) | (1L << (ABS - 622)) | (1L << (ACOS - 622)) | (1L << (ADDDATE - 622)) | (1L << (ADDTIME - 622)) | (1L << (AES_DECRYPT - 622)) | (1L << (AES_ENCRYPT - 622)) | (1L << (AREA - 622)) | (1L << (ASBINARY - 622)) | (1L << (ASIN - 622)) | (1L << (ASTEXT - 622)) | (1L << (ASWKB - 622)) | (1L << (ASWKT - 622)) | (1L << (ASYMMETRIC_DECRYPT - 622)) | (1L << (ASYMMETRIC_DERIVE - 622)) | (1L << (ASYMMETRIC_ENCRYPT - 622)) | (1L << (ASYMMETRIC_SIGN - 622)) | (1L << (ASYMMETRIC_VERIFY - 622)) | (1L << (ATAN - 622)) | (1L << (ATAN2 - 622)) | (1L << (BENCHMARK - 622)) | (1L << (BIN - 622)) | (1L << (BIT_COUNT - 622)) | (1L << (BIT_LENGTH - 622)) | (1L << (BUFFER - 622)) | (1L << (CEIL - 622)) | (1L << (CEILING - 622)) | (1L << (CENTROID - 622)) | (1L << (CHARACTER_LENGTH - 622)) | (1L << (CHARSET - 622)) | (1L << (CHAR_LENGTH - 622)) | (1L << (COERCIBILITY - 622)) | (1L << (COLLATION - 622)) | (1L << (COMPRESS - 622)) | (1L << (CONCAT - 622)) | (1L << (CONCAT_WS - 622)) | (1L << (CONNECTION_ID - 622)) | (1L << (CONV - 622)) | (1L << (CONVERT_TZ - 622)) | (1L << (COS - 622)) | (1L << (COT - 622)) | (1L << (CRC32 - 622)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 622)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 622)) | (1L << (CREATE_DH_PARAMETERS - 622)) | (1L << (CREATE_DIGEST - 622)) | (1L << (CROSSES - 622)) | (1L << (DATEDIFF - 622)) | (1L << (DATE_FORMAT - 622)) | (1L << (DAYNAME - 622)) | (1L << (DAYOFMONTH - 622)) | (1L << (DAYOFWEEK - 622)) | (1L << (DAYOFYEAR - 622)) | (1L << (DECODE - 622)) | (1L << (DEGREES - 622)) | (1L << (DES_DECRYPT - 622)) | (1L << (DES_ENCRYPT - 622)) | (1L << (DIMENSION - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (DISJOINT - 686)) | (1L << (ELT - 686)) | (1L << (ENCODE - 686)) | (1L << (ENCRYPT - 686)) | (1L << (ENDPOINT - 686)) | (1L << (ENVELOPE - 686)) | (1L << (EQUALS - 686)) | (1L << (EXP - 686)) | (1L << (EXPORT_SET - 686)) | (1L << (EXTERIORRING - 686)) | (1L << (EXTRACTVALUE - 686)) | (1L << (FIELD - 686)) | (1L << (FIND_IN_SET - 686)) | (1L << (FLOOR - 686)) | (1L << (FORMAT - 686)) | (1L << (FOUND_ROWS - 686)) | (1L << (FROM_BASE64 - 686)) | (1L << (FROM_DAYS - 686)) | (1L << (FROM_UNIXTIME - 686)) | (1L << (GEOMCOLLFROMTEXT - 686)) | (1L << (GEOMCOLLFROMWKB - 686)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 686)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 686)) | (1L << (GEOMETRYFROMTEXT - 686)) | (1L << (GEOMETRYFROMWKB - 686)) | (1L << (GEOMETRYN - 686)) | (1L << (GEOMETRYTYPE - 686)) | (1L << (GEOMFROMTEXT - 686)) | (1L << (GEOMFROMWKB - 686)) | (1L << (GET_FORMAT - 686)) | (1L << (GET_LOCK - 686)) | (1L << (GLENGTH - 686)) | (1L << (GREATEST - 686)) | (1L << (GTID_SUBSET - 686)) | (1L << (GTID_SUBTRACT - 686)) | (1L << (HEX - 686)) | (1L << (IFNULL - 686)) | (1L << (INET6_ATON - 686)) | (1L << (INET6_NTOA - 686)) | (1L << (INET_ATON - 686)) | (1L << (INET_NTOA - 686)) | (1L << (INSTR - 686)) | (1L << (INTERIORRINGN - 686)) | (1L << (INTERSECTS - 686)) | (1L << (ISCLOSED - 686)) | (1L << (ISEMPTY - 686)) | (1L << (ISNULL - 686)) | (1L << (ISSIMPLE - 686)) | (1L << (IS_FREE_LOCK - 686)) | (1L << (IS_IPV4 - 686)) | (1L << (IS_IPV4_COMPAT - 686)) | (1L << (IS_IPV4_MAPPED - 686)) | (1L << (IS_IPV6 - 686)) | (1L << (IS_USED_LOCK - 686)) | (1L << (LAST_INSERT_ID - 686)) | (1L << (LCASE - 686)) | (1L << (LEAST - 686)) | (1L << (LENGTH - 686)) | (1L << (LINEFROMTEXT - 686)) | (1L << (LINEFROMWKB - 686)) | (1L << (LINESTRINGFROMTEXT - 686)) | (1L << (LINESTRINGFROMWKB - 686)) | (1L << (LN - 686)) | (1L << (LOAD_FILE - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (LOCATE - 750)) | (1L << (LOG - 750)) | (1L << (LOG10 - 750)) | (1L << (LOG2 - 750)) | (1L << (LOWER - 750)) | (1L << (LPAD - 750)) | (1L << (LTRIM - 750)) | (1L << (MAKEDATE - 750)) | (1L << (MAKETIME - 750)) | (1L << (MAKE_SET - 750)) | (1L << (MASTER_POS_WAIT - 750)) | (1L << (MBRCONTAINS - 750)) | (1L << (MBRDISJOINT - 750)) | (1L << (MBREQUAL - 750)) | (1L << (MBRINTERSECTS - 750)) | (1L << (MBROVERLAPS - 750)) | (1L << (MBRTOUCHES - 750)) | (1L << (MBRWITHIN - 750)) | (1L << (MD5 - 750)) | (1L << (MLINEFROMTEXT - 750)) | (1L << (MLINEFROMWKB - 750)) | (1L << (MONTHNAME - 750)) | (1L << (MPOINTFROMTEXT - 750)) | (1L << (MPOINTFROMWKB - 750)) | (1L << (MPOLYFROMTEXT - 750)) | (1L << (MPOLYFROMWKB - 750)) | (1L << (MULTILINESTRINGFROMTEXT - 750)) | (1L << (MULTILINESTRINGFROMWKB - 750)) | (1L << (MULTIPOINTFROMTEXT - 750)) | (1L << (MULTIPOINTFROMWKB - 750)) | (1L << (MULTIPOLYGONFROMTEXT - 750)) | (1L << (MULTIPOLYGONFROMWKB - 750)) | (1L << (NAME_CONST - 750)) | (1L << (NULLIF - 750)) | (1L << (NUMGEOMETRIES - 750)) | (1L << (NUMINTERIORRINGS - 750)) | (1L << (NUMPOINTS - 750)) | (1L << (OCT - 750)) | (1L << (OCTET_LENGTH - 750)) | (1L << (ORD - 750)) | (1L << (OVERLAPS - 750)) | (1L << (PERIOD_ADD - 750)) | (1L << (PERIOD_DIFF - 750)) | (1L << (PI - 750)) | (1L << (POINTFROMTEXT - 750)) | (1L << (POINTFROMWKB - 750)) | (1L << (POINTN - 750)) | (1L << (POLYFROMTEXT - 750)) | (1L << (POLYFROMWKB - 750)) | (1L << (POLYGONFROMTEXT - 750)) | (1L << (POLYGONFROMWKB - 750)) | (1L << (POW - 750)) | (1L << (POWER - 750)) | (1L << (QUOTE - 750)) | (1L << (RADIANS - 750)) | (1L << (RAND - 750)) | (1L << (RANDOM_BYTES - 750)) | (1L << (RELEASE_LOCK - 750)) | (1L << (REVERSE - 750)) | (1L << (ROUND - 750)) | (1L << (ROW_COUNT - 750)) | (1L << (RPAD - 750)) | (1L << (RTRIM - 750)) | (1L << (SEC_TO_TIME - 750)))) != 0) || ((((_la - 814)) & ~0x3f) == 0 && ((1L << (_la - 814)) & ((1L << (SESSION_USER - 814)) | (1L << (SHA - 814)) | (1L << (SHA1 - 814)) | (1L << (SHA2 - 814)) | (1L << (SIGN - 814)) | (1L << (SIN - 814)) | (1L << (SLEEP - 814)) | (1L << (SOUNDEX - 814)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 814)) | (1L << (SQRT - 814)) | (1L << (SRID - 814)) | (1L << (STARTPOINT - 814)) | (1L << (STRCMP - 814)) | (1L << (STR_TO_DATE - 814)) | (1L << (ST_AREA - 814)) | (1L << (ST_ASBINARY - 814)) | (1L << (ST_ASTEXT - 814)) | (1L << (ST_ASWKB - 814)) | (1L << (ST_ASWKT - 814)) | (1L << (ST_BUFFER - 814)) | (1L << (ST_CENTROID - 814)) | (1L << (ST_CONTAINS - 814)) | (1L << (ST_CROSSES - 814)) | (1L << (ST_DIFFERENCE - 814)) | (1L << (ST_DIMENSION - 814)) | (1L << (ST_DISJOINT - 814)) | (1L << (ST_DISTANCE - 814)) | (1L << (ST_ENDPOINT - 814)) | (1L << (ST_ENVELOPE - 814)) | (1L << (ST_EQUALS - 814)) | (1L << (ST_EXTERIORRING - 814)) | (1L << (ST_GEOMCOLLFROMTEXT - 814)) | (1L << (ST_GEOMCOLLFROMTXT - 814)) | (1L << (ST_GEOMCOLLFROMWKB - 814)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 814)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 814)) | (1L << (ST_GEOMETRYFROMTEXT - 814)) | (1L << (ST_GEOMETRYFROMWKB - 814)) | (1L << (ST_GEOMETRYN - 814)) | (1L << (ST_GEOMETRYTYPE - 814)) | (1L << (ST_GEOMFROMTEXT - 814)) | (1L << (ST_GEOMFROMWKB - 814)) | (1L << (ST_INTERIORRINGN - 814)) | (1L << (ST_INTERSECTION - 814)) | (1L << (ST_INTERSECTS - 814)) | (1L << (ST_ISCLOSED - 814)) | (1L << (ST_ISEMPTY - 814)) | (1L << (ST_ISSIMPLE - 814)) | (1L << (ST_LINEFROMTEXT - 814)) | (1L << (ST_LINEFROMWKB - 814)) | (1L << (ST_LINESTRINGFROMTEXT - 814)) | (1L << (ST_LINESTRINGFROMWKB - 814)) | (1L << (ST_NUMGEOMETRIES - 814)) | (1L << (ST_NUMINTERIORRING - 814)) | (1L << (ST_NUMINTERIORRINGS - 814)) | (1L << (ST_NUMPOINTS - 814)) | (1L << (ST_OVERLAPS - 814)) | (1L << (ST_POINTFROMTEXT - 814)) | (1L << (ST_POINTFROMWKB - 814)) | (1L << (ST_POINTN - 814)) | (1L << (ST_POLYFROMTEXT - 814)) | (1L << (ST_POLYFROMWKB - 814)) | (1L << (ST_POLYGONFROMTEXT - 814)) | (1L << (ST_POLYGONFROMWKB - 814)))) != 0) || ((((_la - 878)) & ~0x3f) == 0 && ((1L << (_la - 878)) & ((1L << (ST_SRID - 878)) | (1L << (ST_STARTPOINT - 878)) | (1L << (ST_SYMDIFFERENCE - 878)) | (1L << (ST_TOUCHES - 878)) | (1L << (ST_UNION - 878)) | (1L << (ST_WITHIN - 878)) | (1L << (ST_X - 878)) | (1L << (ST_Y - 878)) | (1L << (SUBDATE - 878)) | (1L << (SUBSTRING_INDEX - 878)) | (1L << (SUBTIME - 878)) | (1L << (SYSTEM_USER - 878)) | (1L << (TAN - 878)) | (1L << (TIMEDIFF - 878)) | (1L << (TIMESTAMPADD - 878)) | (1L << (TIMESTAMPDIFF - 878)) | (1L << (TIME_FORMAT - 878)) | (1L << (TIME_TO_SEC - 878)) | (1L << (TOUCHES - 878)) | (1L << (TO_BASE64 - 878)) | (1L << (TO_DAYS - 878)) | (1L << (TO_SECONDS - 878)) | (1L << (UCASE - 878)) | (1L << (UNCOMPRESS - 878)) | (1L << (UNCOMPRESSED_LENGTH - 878)) | (1L << (UNHEX - 878)) | (1L << (UNIX_TIMESTAMP - 878)) | (1L << (UPDATEXML - 878)) | (1L << (UPPER - 878)) | (1L << (UUID - 878)) | (1L << (UUID_SHORT - 878)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 878)) | (1L << (VERSION - 878)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 878)) | (1L << (WEEKDAY - 878)) | (1L << (WEEKOFYEAR - 878)) | (1L << (WEIGHT_STRING - 878)) | (1L << (WITHIN - 878)) | (1L << (YEARWEEK - 878)) | (1L << (Y_FUNCTION - 878)) | (1L << (X_FUNCTION - 878)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 293: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 294: return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 295: return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 9);
		case 6: return Precpred(Context, 8);
		case 7: return Precpred(Context, 6);
		case 8: return Precpred(Context, 3);
		}
		return true;
	}
	private bool expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		case 11: return Precpred(Context, 11);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x3CF', '\x1787', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1', 
		'\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3', 
		'\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6', 
		'\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8', 
		'\x4', '\xC9', '\t', '\xC9', '\x4', '\xCA', '\t', '\xCA', '\x4', '\xCB', 
		'\t', '\xCB', '\x4', '\xCC', '\t', '\xCC', '\x4', '\xCD', '\t', '\xCD', 
		'\x4', '\xCE', '\t', '\xCE', '\x4', '\xCF', '\t', '\xCF', '\x4', '\xD0', 
		'\t', '\xD0', '\x4', '\xD1', '\t', '\xD1', '\x4', '\xD2', '\t', '\xD2', 
		'\x4', '\xD3', '\t', '\xD3', '\x4', '\xD4', '\t', '\xD4', '\x4', '\xD5', 
		'\t', '\xD5', '\x4', '\xD6', '\t', '\xD6', '\x4', '\xD7', '\t', '\xD7', 
		'\x4', '\xD8', '\t', '\xD8', '\x4', '\xD9', '\t', '\xD9', '\x4', '\xDA', 
		'\t', '\xDA', '\x4', '\xDB', '\t', '\xDB', '\x4', '\xDC', '\t', '\xDC', 
		'\x4', '\xDD', '\t', '\xDD', '\x4', '\xDE', '\t', '\xDE', '\x4', '\xDF', 
		'\t', '\xDF', '\x4', '\xE0', '\t', '\xE0', '\x4', '\xE1', '\t', '\xE1', 
		'\x4', '\xE2', '\t', '\xE2', '\x4', '\xE3', '\t', '\xE3', '\x4', '\xE4', 
		'\t', '\xE4', '\x4', '\xE5', '\t', '\xE5', '\x4', '\xE6', '\t', '\xE6', 
		'\x4', '\xE7', '\t', '\xE7', '\x4', '\xE8', '\t', '\xE8', '\x4', '\xE9', 
		'\t', '\xE9', '\x4', '\xEA', '\t', '\xEA', '\x4', '\xEB', '\t', '\xEB', 
		'\x4', '\xEC', '\t', '\xEC', '\x4', '\xED', '\t', '\xED', '\x4', '\xEE', 
		'\t', '\xEE', '\x4', '\xEF', '\t', '\xEF', '\x4', '\xF0', '\t', '\xF0', 
		'\x4', '\xF1', '\t', '\xF1', '\x4', '\xF2', '\t', '\xF2', '\x4', '\xF3', 
		'\t', '\xF3', '\x4', '\xF4', '\t', '\xF4', '\x4', '\xF5', '\t', '\xF5', 
		'\x4', '\xF6', '\t', '\xF6', '\x4', '\xF7', '\t', '\xF7', '\x4', '\xF8', 
		'\t', '\xF8', '\x4', '\xF9', '\t', '\xF9', '\x4', '\xFA', '\t', '\xFA', 
		'\x4', '\xFB', '\t', '\xFB', '\x4', '\xFC', '\t', '\xFC', '\x4', '\xFD', 
		'\t', '\xFD', '\x4', '\xFE', '\t', '\xFE', '\x4', '\xFF', '\t', '\xFF', 
		'\x4', '\x100', '\t', '\x100', '\x4', '\x101', '\t', '\x101', '\x4', '\x102', 
		'\t', '\x102', '\x4', '\x103', '\t', '\x103', '\x4', '\x104', '\t', '\x104', 
		'\x4', '\x105', '\t', '\x105', '\x4', '\x106', '\t', '\x106', '\x4', '\x107', 
		'\t', '\x107', '\x4', '\x108', '\t', '\x108', '\x4', '\x109', '\t', '\x109', 
		'\x4', '\x10A', '\t', '\x10A', '\x4', '\x10B', '\t', '\x10B', '\x4', '\x10C', 
		'\t', '\x10C', '\x4', '\x10D', '\t', '\x10D', '\x4', '\x10E', '\t', '\x10E', 
		'\x4', '\x10F', '\t', '\x10F', '\x4', '\x110', '\t', '\x110', '\x4', '\x111', 
		'\t', '\x111', '\x4', '\x112', '\t', '\x112', '\x4', '\x113', '\t', '\x113', 
		'\x4', '\x114', '\t', '\x114', '\x4', '\x115', '\t', '\x115', '\x4', '\x116', 
		'\t', '\x116', '\x4', '\x117', '\t', '\x117', '\x4', '\x118', '\t', '\x118', 
		'\x4', '\x119', '\t', '\x119', '\x4', '\x11A', '\t', '\x11A', '\x4', '\x11B', 
		'\t', '\x11B', '\x4', '\x11C', '\t', '\x11C', '\x4', '\x11D', '\t', '\x11D', 
		'\x4', '\x11E', '\t', '\x11E', '\x4', '\x11F', '\t', '\x11F', '\x4', '\x120', 
		'\t', '\x120', '\x4', '\x121', '\t', '\x121', '\x4', '\x122', '\t', '\x122', 
		'\x4', '\x123', '\t', '\x123', '\x4', '\x124', '\t', '\x124', '\x4', '\x125', 
		'\t', '\x125', '\x4', '\x126', '\t', '\x126', '\x4', '\x127', '\t', '\x127', 
		'\x4', '\x128', '\t', '\x128', '\x4', '\x129', '\t', '\x129', '\x4', '\x12A', 
		'\t', '\x12A', '\x4', '\x12B', '\t', '\x12B', '\x4', '\x12C', '\t', '\x12C', 
		'\x4', '\x12D', '\t', '\x12D', '\x4', '\x12E', '\t', '\x12E', '\x4', '\x12F', 
		'\t', '\x12F', '\x4', '\x130', '\t', '\x130', '\x4', '\x131', '\t', '\x131', 
		'\x4', '\x132', '\t', '\x132', '\x4', '\x133', '\t', '\x133', '\x4', '\x134', 
		'\t', '\x134', '\x4', '\x135', '\t', '\x135', '\x3', '\x2', '\x5', '\x2', 
		'\x26C', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '\x26F', '\n', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\x275', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', 
		'\x3', '\x27A', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x27D', '\v', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x281', '\n', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x284', '\n', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x287', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'\x290', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x2B7', 
		'\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x2C3', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\x2CE', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', '\x2DF', '\n', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\x2E4', '\n', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x2F0', '\n', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x30B', '\n', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x311', 
		'\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x316', 
		'\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x31A', '\n', '\xE', 
		'\f', '\xE', '\xE', '\xE', '\x31D', '\v', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\x321', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\x325', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x32E', '\n', '\xF', '\x3', '\xF', '\x5', '\xF', '\x331', '\n', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x334', '\n', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\x338', '\n', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x33F', 
		'\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\x342', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x347', '\n', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', 
		'\x34D', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x350', '\v', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x354', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x359', '\n', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\x35C', '\n', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x367', '\n', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x36A', '\n', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x36E', '\n', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\x371', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x375', 
		'\n', '\x11', '\x3', '\x11', '\x5', '\x11', '\x378', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\x37C', '\n', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x37F', '\n', '\x11', '\x3', '\x11', '\x5', '\x11', '\x382', 
		'\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x386', '\n', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\x389', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x38D', '\n', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x393', '\n', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\x399', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\x39D', 
		'\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x3A0', '\v', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\a', '\x12', '\x3A4', '\n', '\x12', '\f', '\x12', 
		'\xE', '\x12', '\x3A7', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\x3AD', '\n', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x3B3', '\n', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\x3B7', '\n', '\x13', 
		'\f', '\x13', '\xE', '\x13', '\x3BA', '\v', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\x3C0', '\n', '\x13', 
		'\f', '\x13', '\xE', '\x13', '\x3C3', '\v', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x3D3', '\n', '\x14', 
		'\f', '\x14', '\xE', '\x14', '\x3D6', '\v', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x3DC', '\n', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x3E0', '\n', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x3EA', '\n', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x3EE', '\n', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x3F2', '\n', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x5', '\x15', '\x3F6', '\n', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\x3FA', '\n', '\x15', '\x3', '\x15', '\a', '\x15', 
		'\x3FD', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x400', '\v', '\x15', 
		'\x5', '\x15', '\x402', '\n', '\x15', '\x3', '\x15', '\x5', '\x15', '\x405', 
		'\n', '\x15', '\x3', '\x15', '\x5', '\x15', '\x408', '\n', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\x40B', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x411', '\n', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x415', '\n', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x41B', '\n', 
		'\x15', '\x3', '\x15', '\a', '\x15', '\x41E', '\n', '\x15', '\f', '\x15', 
		'\xE', '\x15', '\x421', '\v', '\x15', '\x5', '\x15', '\x423', '\n', '\x15', 
		'\x3', '\x15', '\x5', '\x15', '\x426', '\n', '\x15', '\x5', '\x15', '\x428', 
		'\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x433', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', 
		'\x16', '\x437', '\n', '\x16', '\x3', '\x16', '\x5', '\x16', '\x43A', 
		'\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x448', '\n', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x44B', '\n', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x5', '\x17', '\x44F', '\n', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\x452', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\x456', '\n', '\x17', '\x3', '\x17', '\x5', '\x17', '\x459', '\n', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x45D', '\n', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x460', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x464', '\n', '\x17', '\x3', '\x17', '\x5', '\x17', '\x467', 
		'\n', '\x17', '\x3', '\x17', '\x5', '\x17', '\x46A', '\n', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x46E', '\n', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x471', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\x475', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\x47B', '\n', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x488', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x48F', '\n', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x494', '\n', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\x497', '\n', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x5', '\x19', '\x49C', '\n', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x5', '\x19', '\x4A4', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x5', '\x19', '\x4AA', '\n', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\x4AE', '\n', '\x19', '\x3', '\x1A', '\x5', 
		'\x1A', '\x4B1', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x5', '\x1A', '\x4B6', '\n', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x4B9', 
		'\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x4BD', '\n', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x4C1', '\n', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\x4C4', '\n', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\x4CC', '\n', '\x1B', '\x5', '\x1B', '\x4CE', '\n', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x4D3', '\n', '\x1C', 
		'\f', '\x1C', '\xE', '\x1C', '\x4D6', '\v', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x4DB', '\n', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x4E1', '\n', 
		'\x1C', '\f', '\x1C', '\xE', '\x1C', '\x4E4', '\v', '\x1C', '\x5', '\x1C', 
		'\x4E6', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', 
		'\x1C', '\x4EB', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x4EE', '\v', 
		'\x1C', '\x5', '\x1C', '\x4F0', '\n', '\x1C', '\x5', '\x1C', '\x4F2', 
		'\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x5', '\x1D', '\x4F8', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x4FE', '\n', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', 
		'\x50F', '\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x5', ' ', '\x516', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x51D', '\n', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x5', '\"', '\x526', '\n', '\"', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x534', '\n', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', 
		'%', '\x541', '\n', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', 
		'\x546', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x556', '\n', '&', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\a', '\'', '\x55C', 
		'\n', '\'', '\f', '\'', '\xE', '\'', '\x55F', '\v', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x5', '(', '\x568', '\n', '(', '\x3', ')', '\x3', ')', '\a', ')', '\x56C', 
		'\n', ')', '\f', ')', '\xE', ')', '\x56F', '\v', ')', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x576', '\n', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x57B', '\n', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x5', '*', '\x584', '\n', '*', '\x3', '+', '\x3', '+', '\x5', '+', 
		'\x588', '\n', '+', '\x5', '+', '\x58A', '\n', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x5', '+', '\x58F', '\n', '+', '\x3', '+', '\x3', '+', 
		'\a', '+', '\x593', '\n', '+', '\f', '+', '\xE', '+', '\x596', '\v', '+', 
		'\x3', '+', '\x3', '+', '\x5', '+', '\x59A', '\n', '+', '\x5', '+', '\x59C', 
		'\n', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x5A0', '\n', '+', '\x3', 
		'+', '\x5', '+', '\x5A3', '\n', '+', '\x3', '+', '\x5', '+', '\x5A6', 
		'\n', '+', '\x3', '+', '\x3', '+', '\a', '+', '\x5AA', '\n', '+', '\f', 
		'+', '\xE', '+', '\x5AD', '\v', '+', '\x3', '+', '\x3', '+', '\x5', '+', 
		'\x5B1', '\n', '+', '\x5', '+', '\x5B3', '\n', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x5', '+', '\x5B8', '\n', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x5BF', '\n', '+', '\x5', 
		'+', '\x5C1', '\n', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x5', '+', '\x5C8', '\n', '+', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x5', ',', '\x5CF', '\n', ',', '\x3', ',', 
		'\x5', ',', '\x5D2', '\n', ',', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x5', '-', '\x5DA', '\n', '-', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', 
		'\x5E2', '\n', '-', '\x5', '-', '\x5E4', '\n', '-', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x5EC', 
		'\n', '.', '\x3', '/', '\x3', '/', '\x5', '/', '\x5F0', '\n', '/', '\x3', 
		'/', '\x5', '/', '\x5F3', '\n', '/', '\x3', '/', '\x3', '/', '\a', '/', 
		'\x5F7', '\n', '/', '\f', '/', '\xE', '/', '\x5FA', '\v', '/', '\x3', 
		'/', '\x3', '/', '\x5', '/', '\x5FE', '\n', '/', '\x3', '/', '\x5', '/', 
		'\x601', '\n', '/', '\x3', '/', '\x3', '/', '\a', '/', '\x605', '\n', 
		'/', '\f', '/', '\xE', '/', '\x608', '\v', '/', '\x5', '/', '\x60A', '\n', 
		'/', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x60E', '\n', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x613', '\n', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x618', 
		'\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x61C', '\n', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x621', 
		'\n', '\x30', '\x3', '\x30', '\x5', '\x30', '\x624', '\n', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x629', '\n', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x62D', '\n', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x5', '\x30', '\x631', '\n', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x636', '\n', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x63B', '\n', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x640', '\n', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', 
		'\x30', '\x646', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x5', '\x30', '\x64B', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x5', '\x30', '\x650', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x656', '\n', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x65B', '\n', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x660', '\n', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x665', 
		'\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', 
		'\x66A', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', 
		'\x30', '\x66F', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x5', '\x30', '\x674', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x5', '\x30', '\x679', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x5', '\x30', '\x67E', '\n', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x5', '\x30', '\x683', '\n', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x688', '\n', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x68E', 
		'\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x692', '\n', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', 
		'\x30', '\x698', '\n', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x5', '\x32', '\x6A2', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x6A9', '\n', '\x32', 
		'\x5', '\x32', '\x6AB', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\a', '\x32', '\x6B1', '\n', '\x32', '\f', '\x32', 
		'\xE', '\x32', '\x6B4', '\v', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', 
		'\x32', '\x6B8', '\n', '\x32', '\x3', '\x33', '\x5', '\x33', '\x6BB', 
		'\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x6C3', '\n', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x6C9', 
		'\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x5', '\x33', '\x6D9', '\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x6E5', '\n', '\x33', 
		'\x5', '\x33', '\x6E7', '\n', '\x33', '\x3', '\x34', '\x5', '\x34', '\x6EA', 
		'\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x6F2', '\n', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x6F8', 
		'\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x5', '\x34', '\x6FE', '\n', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\a', '\x35', '\x709', '\n', '\x35', '\f', '\x35', 
		'\xE', '\x35', '\x70C', '\v', '\x35', '\x3', '\x35', '\x3', '\x35', '\a', 
		'\x35', '\x710', '\n', '\x35', '\f', '\x35', '\xE', '\x35', '\x713', '\v', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\a', '\x35', '\x718', 
		'\n', '\x35', '\f', '\x35', '\xE', '\x35', '\x71B', '\v', '\x35', '\x5', 
		'\x35', '\x71D', '\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\a', '\x35', '\x727', '\n', '\x35', '\f', '\x35', '\xE', '\x35', '\x72A', 
		'\v', '\x35', '\x3', '\x35', '\x3', '\x35', '\a', '\x35', '\x72E', '\n', 
		'\x35', '\f', '\x35', '\xE', '\x35', '\x731', '\v', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\a', '\x35', '\x736', '\n', '\x35', '\f', 
		'\x35', '\xE', '\x35', '\x739', '\v', '\x35', '\x5', '\x35', '\x73B', 
		'\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\a', '\x35', 
		'\x745', '\n', '\x35', '\f', '\x35', '\xE', '\x35', '\x748', '\v', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\a', '\x35', '\x74C', '\n', '\x35', '\f', 
		'\x35', '\xE', '\x35', '\x74F', '\v', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\a', '\x35', '\x754', '\n', '\x35', '\f', '\x35', '\xE', 
		'\x35', '\x757', '\v', '\x35', '\x5', '\x35', '\x759', '\n', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\a', '\x35', '\x75E', '\n', '\x35', 
		'\f', '\x35', '\xE', '\x35', '\x761', '\v', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\a', '\x35', '\x766', '\n', '\x35', '\f', '\x35', 
		'\xE', '\x35', '\x769', '\v', '\x35', '\x5', '\x35', '\x76B', '\n', '\x35', 
		'\x5', '\x35', '\x76D', '\n', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x5', '\x36', '\x772', '\n', '\x36', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x6', '\x37', '\x778', '\n', '\x37', '\r', 
		'\x37', '\xE', '\x37', '\x779', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\a', '\x38', '\x781', '\n', '\x38', '\f', 
		'\x38', '\xE', '\x38', '\x784', '\v', '\x38', '\x3', '\x39', '\x5', '\x39', 
		'\x787', '\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x78B', 
		'\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', 
		'\x790', '\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x5', '\x39', '\x796', '\n', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x79C', '\n', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x7A1', '\n', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x7A6', '\n', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x7AB', 
		'\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', 
		'\x7B0', '\n', '\x39', '\x3', '\x39', '\x5', '\x39', '\x7B3', '\n', '\x39', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x7B8', '\n', ':', '\x3', 
		':', '\x6', ':', '\x7BB', '\n', ':', '\r', ':', '\xE', ':', '\x7BC', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x5', ':', '\x7C7', '\n', ':', '\x3', ';', '\x3', ';', 
		'\x5', ';', '\x7CB', '\n', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x5', ';', '\x7D2', '\n', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x5', ';', '\x7D7', '\n', ';', '\x3', ';', '\x5', ';', '\x7DA', 
		'\n', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x7DF', '\n', 
		';', '\x3', ';', '\x5', ';', '\x7E2', '\n', ';', '\x3', ';', '\x3', ';', 
		'\x5', ';', '\x7E6', '\n', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x7EA', 
		'\n', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\a', '<', 
		'\x7F0', '\n', '<', '\f', '<', '\xE', '<', '\x7F3', '\v', '<', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x3', '>', '\x5', '>', '\x805', '\n', '>', 
		'\x3', '>', '\x5', '>', '\x808', '\n', '>', '\x3', '>', '\x5', '>', '\x80B', 
		'\n', '>', '\x3', '>', '\x3', '>', '\x5', '>', '\x80F', '\n', '>', '\x3', 
		'>', '\x3', '>', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\a', 
		'?', '\x817', '\n', '?', '\f', '?', '\xE', '?', '\x81A', '\v', '?', '\x3', 
		'@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', 
		'@', '\x3', '@', '\a', '@', '\x824', '\n', '@', '\f', '@', '\xE', '@', 
		'\x827', '\v', '@', '\x3', '@', '\x3', '@', '\x3', '\x41', '\x3', '\x41', 
		'\x5', '\x41', '\x82D', '\n', '\x41', '\x3', '\x41', '\x5', '\x41', '\x830', 
		'\n', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\a', '\x41', '\x837', '\n', '\x41', '\f', '\x41', '\xE', 
		'\x41', '\x83A', '\v', '\x41', '\x3', '\x41', '\x5', '\x41', '\x83D', 
		'\n', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x5', '\x42', '\x848', '\n', '\x42', '\x3', '\x42', '\x5', '\x42', '\x84B', 
		'\n', '\x42', '\x3', '\x42', '\x3', '\x42', '\x5', '\x42', '\x84F', '\n', 
		'\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x5', '\x43', '\x857', '\n', '\x43', '\x3', '\x43', 
		'\x5', '\x43', '\x85A', '\n', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x5', '\x43', '\x85F', '\n', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', 
		'\x867', '\n', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x5', '\x43', '\x86D', '\n', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x5', '\x43', '\x871', '\n', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x5', '\x44', '\x876', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x87D', '\n', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x881', '\n', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\a', '\x44', '\x88A', '\n', '\x44', '\f', 
		'\x44', '\xE', '\x44', '\x88D', '\v', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x894', '\n', 
		'\x44', '\x3', '\x44', '\x5', '\x44', '\x897', '\n', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\a', '\x44', '\x89B', '\n', '\x44', '\f', '\x44', '\xE', 
		'\x44', '\x89E', '\v', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x5', '\x44', '\x8A3', '\n', '\x44', '\x5', '\x44', '\x8A5', '\n', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x8AA', '\n', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\a', '\x44', '\x8AE', '\n', '\x44', 
		'\f', '\x44', '\xE', '\x44', '\x8B1', '\v', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x5', '\x44', '\x8B6', '\n', '\x44', '\x5', '\x44', 
		'\x8B8', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x8BC', 
		'\n', '\x44', '\x3', '\x44', '\x5', '\x44', '\x8BF', '\n', '\x44', '\x3', 
		'\x44', '\x5', '\x44', '\x8C2', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\a', '\x44', '\x8C6', '\n', '\x44', '\f', '\x44', '\xE', '\x44', '\x8C9', 
		'\v', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', 
		'\x8CE', '\n', '\x44', '\x3', '\x44', '\x5', '\x44', '\x8D1', '\n', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\a', '\x44', '\x8D5', '\n', '\x44', '\f', 
		'\x44', '\xE', '\x44', '\x8D8', '\v', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x5', '\x44', '\x8DD', '\n', '\x44', '\x5', '\x44', '\x8DF', 
		'\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', 
		'\x8E4', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x8EC', '\n', '\x44', 
		'\x5', '\x44', '\x8EE', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', 
		'\x44', '\x8F7', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x5', '\x44', '\x8FC', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x904', 
		'\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x908', '\n', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x5', '\x44', '\x910', '\n', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x5', '\x44', '\x914', '\n', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x5', '\x44', '\x919', '\n', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', 
		'\x920', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x924', 
		'\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x937', '\n', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x5', '\x44', '\x944', '\n', '\x44', '\x3', '\x44', 
		'\x5', '\x44', '\x947', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', 
		'\x44', '\x950', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', 
		'\x963', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x5', '\x44', '\x96A', '\n', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', 
		'\x971', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\a', '\x44', '\x97E', '\n', '\x44', 
		'\f', '\x44', '\xE', '\x44', '\x981', '\v', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x98D', 
		'\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x5', '\x44', '\x993', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x5', '\x44', '\x999', '\n', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x99F', '\n', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', 
		'\x44', '\x9A5', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x5', '\x44', '\x9AB', '\n', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x9B1', '\n', '\x44', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x9B6', '\n', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x5', '\x46', '\x9BD', '\n', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x9C4', '\n', 'G', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x9CB', 
		'\n', 'G', '\x3', 'G', '\x5', 'G', '\x9CE', '\n', 'G', '\x3', 'G', '\x3', 
		'G', '\x5', 'G', '\x9D2', '\n', 'G', '\x3', 'G', '\x5', 'G', '\x9D5', 
		'\n', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', 
		'\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\x5', 'I', '\x9E2', '\n', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'J', '\x3', 
		'J', '\x3', 'J', '\x5', 'J', '\x9E9', '\n', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'K', '\x3', 'K', '\x3', 'K', '\x5', 'K', '\x9F0', '\n', 'K', '\x3', 
		'K', '\x3', 'K', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x9F6', '\n', 'L', 
		'\x3', 'L', '\x3', 'L', '\x5', 'L', '\x9FA', '\n', 'L', '\x3', 'L', '\x3', 
		'L', '\x5', 'L', '\x9FE', '\n', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', 
		'\x3', 'M', '\x3', 'M', '\x5', 'M', '\xA05', '\n', 'M', '\x3', 'M', '\x5', 
		'M', '\xA08', '\n', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', 
		'\xA0D', '\n', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', '\x3', 
		'O', '\x5', 'O', '\xA14', '\n', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', 
		'\a', 'O', '\xA19', '\n', 'O', '\f', 'O', '\xE', 'O', '\xA1C', '\v', 'O', 
		'\x3', 'O', '\x5', 'O', '\xA1F', '\n', 'O', '\x3', 'P', '\x3', 'P', '\x3', 
		'P', '\x3', 'P', '\x3', 'P', '\a', 'P', '\xA26', '\n', 'P', '\f', 'P', 
		'\xE', 'P', '\xA29', '\v', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 
		'Q', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\xA31', '\n', 'R', '\x3', 'R', 
		'\x3', 'R', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', 
		'\x5', 'S', '\xA3A', '\n', 'S', '\x3', 'S', '\x5', 'S', '\xA3D', '\n', 
		'S', '\x3', 'T', '\x3', 'T', '\x5', 'T', '\xA41', '\n', 'T', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x5', 'V', '\xA4A', '\n', 'V', '\x3', 'W', '\x3', 'W', '\x5', 'W', '\xA4E', 
		'\n', 'W', '\x3', 'W', '\x5', 'W', '\xA51', '\n', 'W', '\x3', 'W', '\x5', 
		'W', '\xA54', '\n', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', 
		'\x3', 'W', '\x3', 'W', '\x5', 'W', '\xA5C', '\n', 'W', '\x3', 'W', '\x3', 
		'W', '\x3', 'W', '\x3', 'W', '\x5', 'W', '\xA62', '\n', 'W', '\x3', 'W', 
		'\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\a', 'W', '\xA69', '\n', 
		'W', '\f', 'W', '\xE', 'W', '\xA6C', '\v', 'W', '\x5', 'W', '\xA6E', '\n', 
		'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 
		'W', '\x3', 'W', '\a', 'W', '\xA77', '\n', 'W', '\f', 'W', '\xE', 'W', 
		'\xA7A', '\v', 'W', '\x5', 'W', '\xA7C', '\n', 'W', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x5', 'X', '\xA81', '\n', 'X', '\x3', 'X', '\x5', 'X', 
		'\xA84', '\n', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\xA89', 
		'\n', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', 
		'\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\xA93', '\n', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\xA98', '\n', 'X', '\x3', 'X', 
		'\x3', 'X', '\x6', 'X', '\xA9C', '\n', 'X', '\r', 'X', '\xE', 'X', '\xA9D', 
		'\x5', 'X', '\xAA0', '\n', 'X', '\x3', 'X', '\x3', 'X', '\x6', 'X', '\xAA4', 
		'\n', 'X', '\r', 'X', '\xE', 'X', '\xAA5', '\x5', 'X', '\xAA8', '\n', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\xAAE', 
		'\n', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\a', 'X', 
		'\xAB4', '\n', 'X', '\f', 'X', '\xE', 'X', '\xAB7', '\v', 'X', '\x3', 
		'X', '\x3', 'X', '\x5', 'X', '\xABB', '\n', 'X', '\x3', 'X', '\x3', 'X', 
		'\x3', 'X', '\x3', 'X', '\a', 'X', '\xAC1', '\n', 'X', '\f', 'X', '\xE', 
		'X', '\xAC4', '\v', 'X', '\x5', 'X', '\xAC6', '\n', 'X', '\x3', 'Y', '\x3', 
		'Y', '\x3', 'Y', '\x5', 'Y', '\xACB', '\n', 'Y', '\x3', 'Y', '\x5', 'Y', 
		'\xACE', '\n', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', '\xAD3', 
		'\n', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Y', '\x5', 'Y', '\xADB', '\n', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 
		'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', '\xAE3', '\n', 'Y', 
		'\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', '\xAE9', '\n', 
		'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\a', 'Y', '\xAEF', 
		'\n', 'Y', '\f', 'Y', '\xE', 'Y', '\xAF2', '\v', 'Y', '\x3', 'Y', '\x3', 
		'Y', '\x5', 'Y', '\xAF6', '\n', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Y', '\a', 'Y', '\xAFC', '\n', 'Y', '\f', 'Y', '\xE', 'Y', '\xAFF', 
		'\v', 'Y', '\x5', 'Y', '\xB01', '\n', 'Y', '\x3', 'Z', '\x3', 'Z', '\x5', 
		'Z', '\xB05', '\n', 'Z', '\x3', 'Z', '\x5', 'Z', '\xB08', '\n', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x5', 
		'Z', '\xB10', '\n', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', 
		'\x5', 'Z', '\xB16', '\n', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\a', 'Z', '\xB1D', '\n', 'Z', '\f', 'Z', '\xE', 'Z', 
		'\xB20', '\v', 'Z', '\x5', 'Z', '\xB22', '\n', 'Z', '\x3', '[', '\x3', 
		'[', '\x5', '[', '\xB26', '\n', '[', '\x3', '[', '\x3', '[', '\x5', '[', 
		'\xB2A', '\n', '[', '\x3', '[', '\x3', '[', '\x6', '[', '\xB2E', '\n', 
		'[', '\r', '[', '\xE', '[', '\xB2F', '\x3', '[', '\x3', '[', '\x5', '[', 
		'\xB34', '\n', '[', '\x3', '[', '\x3', '[', '\x5', '[', '\xB38', '\n', 
		'[', '\x5', '[', '\xB3A', '\n', '[', '\x3', '[', '\x5', '[', '\xB3D', 
		'\n', '[', '\x3', '[', '\x5', '[', '\xB40', '\n', '[', '\x3', '[', '\x5', 
		'[', '\xB43', '\n', '[', '\x3', '[', '\x3', '[', '\x6', '[', '\xB47', 
		'\n', '[', '\r', '[', '\xE', '[', '\xB48', '\x3', '[', '\x3', '[', '\x5', 
		'[', '\xB4D', '\n', '[', '\x3', '[', '\x5', '[', '\xB50', '\n', '[', '\x3', 
		'[', '\x5', '[', '\xB53', '\n', '[', '\x3', '[', '\x5', '[', '\xB56', 
		'\n', '[', '\x3', '[', '\x5', '[', '\xB59', '\n', '[', '\x5', '[', '\xB5B', 
		'\n', '[', '\x3', '\\', '\x3', '\\', '\x5', '\\', '\xB5F', '\n', '\\', 
		'\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', 
		'\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\a', ']', '\xB6B', '\n', 
		']', '\f', ']', '\xE', ']', '\xB6E', '\v', ']', '\x5', ']', '\xB70', '\n', 
		']', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x5', '^', '\xB76', 
		'\n', '^', '\x3', '_', '\x3', '_', '\x5', '_', '\xB7A', '\n', '_', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x5', 
		'`', '\xB82', '\n', '`', '\x3', '\x61', '\x3', '\x61', '\x5', '\x61', 
		'\xB86', '\n', '\x61', '\x3', '\x61', '\x5', '\x61', '\xB89', '\n', '\x61', 
		'\x3', '\x61', '\x5', '\x61', '\xB8C', '\n', '\x61', '\x3', '\x61', '\x3', 
		'\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', 
		'\x61', '\x5', '\x61', '\xB95', '\n', '\x61', '\x3', '\x61', '\x3', '\x61', 
		'\x5', '\x61', '\xB99', '\n', '\x61', '\x3', '\x61', '\x5', '\x61', '\xB9C', 
		'\n', '\x61', '\x3', '\x61', '\x3', '\x61', '\x5', '\x61', '\xBA0', '\n', 
		'\x61', '\x3', '\x62', '\x3', '\x62', '\x5', '\x62', '\xBA4', '\n', '\x62', 
		'\x3', '\x62', '\x5', '\x62', '\xBA7', '\n', '\x62', '\x3', '\x62', '\x5', 
		'\x62', '\xBAA', '\n', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', 
		'\x5', '\x62', '\xBAF', '\n', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', 
		'\x62', '\x3', '\x62', '\x5', '\x62', '\xBB5', '\n', '\x62', '\a', '\x62', 
		'\xBB7', '\n', '\x62', '\f', '\x62', '\xE', '\x62', '\xBBA', '\v', '\x62', 
		'\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', 
		'\x3', '\x62', '\x3', '\x62', '\x5', '\x62', '\xBC3', '\n', '\x62', '\x3', 
		'\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x5', '\x62', '\xBC9', 
		'\n', '\x62', '\a', '\x62', '\xBCB', '\n', '\x62', '\f', '\x62', '\xE', 
		'\x62', '\xBCE', '\v', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', 
		'\x5', '\x62', '\xBD3', '\n', '\x62', '\x3', '\x62', '\x3', '\x62', '\x5', 
		'\x62', '\xBD7', '\n', '\x62', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', 
		'\x3', '\x63', '\x5', '\x63', '\xBDD', '\n', '\x63', '\x3', '\x63', '\x5', 
		'\x63', '\xBE0', '\n', '\x63', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x5', '\x64', '\xBEC', '\n', '\x64', '\x3', 
		'\x64', '\x3', '\x64', '\x5', '\x64', '\xBF0', '\n', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x5', '\x64', '\xBF4', '\n', '\x64', '\x3', '\x65', '\x3', 
		'\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x5', 
		'\x65', '\xBFC', '\n', '\x65', '\x3', '\x65', '\x3', '\x65', '\x5', '\x65', 
		'\xC00', '\n', '\x65', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', 
		'\x66', '\x3', 'g', '\x3', 'g', '\x5', 'g', '\xC08', '\n', 'g', '\x3', 
		'g', '\x5', 'g', '\xC0B', '\n', 'g', '\x3', 'g', '\x3', 'g', '\x5', 'g', 
		'\xC0F', '\n', 'g', '\x3', 'g', '\x5', 'g', '\xC12', '\n', 'g', '\x3', 
		'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\a', 'g', '\xC18', '\n', 'g', 
		'\f', 'g', '\xE', 'g', '\xC1B', '\v', 'g', '\x3', 'g', '\x3', 'g', '\x5', 
		'g', '\xC1F', '\n', 'g', '\x3', 'g', '\x5', 'g', '\xC22', '\n', 'g', '\x3', 
		'g', '\x5', 'g', '\xC25', '\n', 'g', '\x3', 'h', '\x3', 'h', '\x5', 'h', 
		'\xC29', '\n', 'h', '\x3', 'h', '\x5', 'h', '\xC2C', '\n', 'h', '\x3', 
		'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\a', 'h', '\xC33', 
		'\n', 'h', '\f', 'h', '\xE', 'h', '\xC36', '\v', 'h', '\x3', 'h', '\x3', 
		'h', '\x5', 'h', '\xC3A', '\n', 'h', '\x3', 'i', '\x3', 'i', '\x3', 'i', 
		'\x3', 'i', '\x3', 'i', '\a', 'i', '\xC41', '\n', 'i', '\f', 'i', '\xE', 
		'i', '\xC44', '\v', 'i', '\x3', 'j', '\x3', 'j', '\x5', 'j', '\xC48', 
		'\n', 'j', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\a', 'k', '\xC4D', '\n', 
		'k', '\f', 'k', '\xE', 'k', '\xC50', '\v', 'k', '\x3', 'l', '\x3', 'l', 
		'\a', 'l', '\xC54', '\n', 'l', '\f', 'l', '\xE', 'l', '\xC57', '\v', 'l', 
		'\x3', 'l', '\x3', 'l', '\x3', 'l', '\a', 'l', '\xC5C', '\n', 'l', '\f', 
		'l', '\xE', 'l', '\xC5F', '\v', 'l', '\x3', 'l', '\x3', 'l', '\x5', 'l', 
		'\xC63', '\n', 'l', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 
		'm', '\x3', 'm', '\x5', 'm', '\xC6B', '\n', 'm', '\x3', 'm', '\x5', 'm', 
		'\xC6E', '\n', 'm', '\x3', 'm', '\x5', 'm', '\xC71', '\n', 'm', '\x3', 
		'm', '\x3', 'm', '\x3', 'm', '\a', 'm', '\xC76', '\n', 'm', '\f', 'm', 
		'\xE', 'm', '\xC79', '\v', 'm', '\x5', 'm', '\xC7B', '\n', 'm', '\x3', 
		'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x5', 'm', '\xC82', 
		'\n', 'm', '\x3', 'm', '\x5', 'm', '\xC85', '\n', 'm', '\x3', 'm', '\x3', 
		'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x5', 'm', '\xC8D', 
		'\n', 'm', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x5', 'n', 
		'\xC93', '\n', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 
		'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x5', 'o', '\xC9E', 
		'\n', 'o', '\x3', 'p', '\x5', 'p', '\xCA1', '\n', 'p', '\x3', 'p', '\x3', 
		'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 
		'p', '\x3', 'p', '\x5', 'p', '\xCAC', '\n', 'p', '\x3', 'p', '\x3', 'p', 
		'\x3', 'p', '\x3', 'p', '\x5', 'p', '\xCB2', '\n', 'p', '\x3', 'p', '\x3', 
		'p', '\x5', 'p', '\xCB6', '\n', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', 
		'\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', 
		'\x5', 'p', '\xCC1', '\n', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x5', 
		'p', '\xCC6', '\n', 'p', '\x5', 'p', '\xCC8', '\n', 'p', '\x3', 'p', '\x3', 
		'p', '\x5', 'p', '\xCCC', '\n', 'p', '\x3', 'q', '\x3', 'q', '\x3', 'q', 
		'\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x5', 'q', 
		'\xCD6', '\n', 'q', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 
		'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x5', 'r', '\xCE0', '\n', 'r', 
		'\x3', 's', '\x3', 's', '\a', 's', '\xCE4', '\n', 's', '\f', 's', '\xE', 
		's', '\xCE7', '\v', 's', '\x3', 's', '\x3', 's', '\x5', 's', '\xCEB', 
		'\n', 's', '\x3', 's', '\x5', 's', '\xCEE', '\n', 's', '\x3', 's', '\x5', 
		's', '\xCF1', '\n', 's', '\x3', 's', '\x5', 's', '\xCF4', '\n', 's', '\x3', 
		's', '\x3', 's', '\a', 's', '\xCF8', '\n', 's', '\f', 's', '\xE', 's', 
		'\xCFB', '\v', 's', '\x3', 's', '\x3', 's', '\x5', 's', '\xCFF', '\n', 
		's', '\x3', 's', '\x5', 's', '\xD02', '\n', 's', '\x3', 's', '\x5', 's', 
		'\xD05', '\n', 's', '\x3', 's', '\x5', 's', '\xD08', '\n', 's', '\x5', 
		's', '\xD0A', '\n', 's', '\x3', 't', '\x3', 't', '\a', 't', '\xD0E', '\n', 
		't', '\f', 't', '\xE', 't', '\xD11', '\v', 't', '\x3', 't', '\x3', 't', 
		'\x5', 't', '\xD15', '\n', 't', '\x3', 't', '\x5', 't', '\xD18', '\n', 
		't', '\x3', 't', '\x5', 't', '\xD1B', '\n', 't', '\x3', 'u', '\x3', 'u', 
		'\x5', 'u', '\xD1F', '\n', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'v', '\x3', 
		'v', '\x5', 'v', '\xD25', '\n', 'v', '\x3', 'v', '\x3', 'v', '\x5', 'v', 
		'\xD29', '\n', 'v', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 
		'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x5', 'w', '\xD33', '\n', 'w', 
		'\x3', 'x', '\x3', 'x', '\x5', 'x', '\xD37', '\n', 'x', '\x3', 'x', '\x3', 
		'x', '\a', 'x', '\xD3B', '\n', 'x', '\f', 'x', '\xE', 'x', '\xD3E', '\v', 
		'x', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 
		'y', '\x5', 'y', '\xD46', '\n', 'y', '\x3', 'y', '\x5', 'y', '\xD49', 
		'\n', 'y', '\x3', 'y', '\x3', 'y', '\x5', 'y', '\xD4D', '\n', 'y', '\x3', 
		'y', '\x5', 'y', '\xD50', '\n', 'y', '\x3', 'y', '\x3', 'y', '\x5', 'y', 
		'\xD54', '\n', 'y', '\x3', 'y', '\x3', 'y', '\x5', 'y', '\xD58', '\n', 
		'y', '\x3', 'y', '\x5', 'y', '\xD5B', '\n', 'y', '\x5', 'y', '\xD5D', 
		'\n', 'y', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\a', 'z', 
		'\xD63', '\n', 'z', '\f', 'z', '\xE', 'z', '\xD66', '\v', 'z', '\x3', 
		'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 
		'z', '\x3', 'z', '\x3', 'z', '\x5', 'z', '\xD71', '\n', 'z', '\x3', 'z', 
		'\x3', 'z', '\x6', 'z', '\xD75', '\n', 'z', '\r', 'z', '\xE', 'z', '\xD76', 
		'\x5', 'z', '\xD79', '\n', 'z', '\x3', 'z', '\x3', 'z', '\x6', 'z', '\xD7D', 
		'\n', 'z', '\r', 'z', '\xE', 'z', '\xD7E', '\x5', 'z', '\xD81', '\n', 
		'z', '\x5', 'z', '\xD83', '\n', 'z', '\x3', '{', '\x3', '{', '\x3', '{', 
		'\x3', '{', '\x5', '{', '\xD89', '\n', '{', '\x3', '{', '\x3', '{', '\x3', 
		'{', '\x3', '{', '\x3', '{', '\x3', '{', '\x5', '{', '\xD91', '\n', '{', 
		'\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', 
		'\x5', '|', '\xD99', '\n', '|', '\x3', '}', '\x3', '}', '\x3', '}', '\x3', 
		'}', '\x5', '}', '\xD9F', '\n', '}', '\x3', '}', '\x3', '}', '\x3', '}', 
		'\x3', '}', '\x3', '}', '\a', '}', '\xDA6', '\n', '}', '\f', '}', '\xE', 
		'}', '\xDA9', '\v', '}', '\x3', '}', '\x3', '}', '\x5', '}', '\xDAD', 
		'\n', '}', '\x5', '}', '\xDAF', '\n', '}', '\x3', '}', '\x3', '}', '\x5', 
		'}', '\xDB3', '\n', '}', '\x3', '~', '\x3', '~', '\x5', '~', '\xDB7', 
		'\n', '~', '\x3', '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x3', '\x7F', 
		'\x5', '\x7F', '\xDBD', '\n', '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x3', 
		'\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x5', '\x7F', '\xDC4', '\n', '\x7F', 
		'\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', 
		'\a', '\x80', '\xDCB', '\n', '\x80', '\f', '\x80', '\xE', '\x80', '\xDCE', 
		'\v', '\x80', '\x5', '\x80', '\xDD0', '\n', '\x80', '\x3', '\x81', '\x3', 
		'\x81', '\x5', '\x81', '\xDD4', '\n', '\x81', '\x3', '\x82', '\x3', '\x82', 
		'\x5', '\x82', '\xDD8', '\n', '\x82', '\x3', '\x82', '\x3', '\x82', '\x5', 
		'\x82', '\xDDC', '\n', '\x82', '\x3', '\x82', '\x5', '\x82', '\xDDF', 
		'\n', '\x82', '\x3', '\x82', '\x5', '\x82', '\xDE2', '\n', '\x82', '\x3', 
		'\x82', '\x5', '\x82', '\xDE5', '\n', '\x82', '\x3', '\x83', '\x3', '\x83', 
		'\x5', '\x83', '\xDE9', '\n', '\x83', '\x3', '\x83', '\x3', '\x83', '\x5', 
		'\x83', '\xDED', '\n', '\x83', '\x3', '\x83', '\x5', '\x83', '\xDF0', 
		'\n', '\x83', '\x3', '\x83', '\x5', '\x83', '\xDF3', '\n', '\x83', '\x3', 
		'\x83', '\x5', '\x83', '\xDF6', '\n', '\x83', '\x3', '\x84', '\x3', '\x84', 
		'\x3', '\x84', '\x3', '\x85', '\x3', '\x85', '\x5', '\x85', '\xDFD', '\n', 
		'\x85', '\x3', '\x85', '\x3', '\x85', '\x5', '\x85', '\xE01', '\n', '\x85', 
		'\x3', '\x85', '\x3', '\x85', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', 
		'\x3', '\x86', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', 
		'\x3', '\x87', '\a', '\x87', '\xE0E', '\n', '\x87', '\f', '\x87', '\xE', 
		'\x87', '\xE11', '\v', '\x87', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', 
		'\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', 
		'\x3', '\x8A', '\x3', '\x8A', '\x5', '\x8A', '\xE1D', '\n', '\x8A', '\x3', 
		'\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\a', '\x8A', '\xE23', 
		'\n', '\x8A', '\f', '\x8A', '\xE', '\x8A', '\xE26', '\v', '\x8A', '\x3', 
		'\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', 
		'\x8B', '\x3', '\x8B', '\x5', '\x8B', '\xE2F', '\n', '\x8B', '\x3', '\x8C', 
		'\x3', '\x8C', '\x5', '\x8C', '\xE33', '\n', '\x8C', '\x3', '\x8C', '\x5', 
		'\x8C', '\xE36', '\n', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8D', 
		'\x3', '\x8D', '\x5', '\x8D', '\xE3C', '\n', '\x8D', '\x3', '\x8D', '\x5', 
		'\x8D', '\xE3F', '\n', '\x8D', '\x3', '\x8D', '\x5', '\x8D', '\xE42', 
		'\n', '\x8D', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', 
		'\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x5', '\x8E', '\xE4B', '\n', 
		'\x8E', '\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x3', 
		'\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x5', '\x8F', '\xE54', '\n', '\x8F', 
		'\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', 
		'\x3', '\x90', '\a', '\x90', '\xE5C', '\n', '\x90', '\f', '\x90', '\xE', 
		'\x90', '\xE5F', '\v', '\x90', '\x3', '\x90', '\x5', '\x90', '\xE62', 
		'\n', '\x90', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', 
		'\x3', '\x91', '\x3', '\x91', '\a', '\x91', '\xE6A', '\n', '\x91', '\f', 
		'\x91', '\xE', '\x91', '\xE6D', '\v', '\x91', '\x3', '\x92', '\x3', '\x92', 
		'\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', 
		'\x5', '\x92', '\xE76', '\n', '\x92', '\x3', '\x93', '\x3', '\x93', '\x3', 
		'\x93', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x5', '\x94', '\xE7E', 
		'\n', '\x94', '\x3', '\x94', '\x5', '\x94', '\xE81', '\n', '\x94', '\x3', 
		'\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\a', 
		'\x95', '\xE88', '\n', '\x95', '\f', '\x95', '\xE', '\x95', '\xE8B', '\v', 
		'\x95', '\x5', '\x95', '\xE8D', '\n', '\x95', '\x3', '\x95', '\x3', '\x95', 
		'\x5', '\x95', '\xE91', '\n', '\x95', '\x3', '\x95', '\a', '\x95', '\xE94', 
		'\n', '\x95', '\f', '\x95', '\xE', '\x95', '\xE97', '\v', '\x95', '\x3', 
		'\x95', '\x5', '\x95', '\xE9A', '\n', '\x95', '\x3', '\x96', '\x3', '\x96', 
		'\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\a', '\x96', '\xEA1', '\n', 
		'\x96', '\f', '\x96', '\xE', '\x96', '\xEA4', '\v', '\x96', '\x5', '\x96', 
		'\xEA6', '\n', '\x96', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', '\x3', 
		'\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x99', '\x3', '\x99', '\x3', 
		'\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', 
		'\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', 
		'\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', 
		'\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\a', '\x99', '\xEC3', 
		'\n', '\x99', '\f', '\x99', '\xE', '\x99', '\xEC6', '\v', '\x99', '\x5', 
		'\x99', '\xEC8', '\n', '\x99', '\x3', '\x99', '\x5', '\x99', '\xECB', 
		'\n', '\x99', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9B', '\x3', '\x9B', 
		'\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', 
		'\x3', '\x9D', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', 
		'\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', 
		'\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', 
		'\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', 
		'\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', 
		'\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', 
		'\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', 
		'\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', 
		'\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\a', '\x9E', '\xF01', '\n', 
		'\x9E', '\f', '\x9E', '\xE', '\x9E', '\xF04', '\v', '\x9E', '\x3', '\x9E', 
		'\x3', '\x9E', '\x5', '\x9E', '\xF08', '\n', '\x9E', '\x3', '\x9F', '\x3', 
		'\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', 
		'\xA0', '\x3', '\xA0', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', 
		'\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', 
		'\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', 
		'\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x5', 
		'\xA1', '\xF24', '\n', '\xA1', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', 
		'\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', 
		'\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x5', '\xA2', 
		'\xF32', '\n', '\xA2', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\a', 
		'\xA3', '\xF37', '\n', '\xA3', '\f', '\xA3', '\xE', '\xA3', '\xF3A', '\v', 
		'\xA3', '\x3', '\xA3', '\x5', '\xA3', '\xF3D', '\n', '\xA3', '\x3', '\xA4', 
		'\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x5', '\xA4', '\xF43', '\n', 
		'\xA4', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', 
		'\xA5', '\x3', '\xA5', '\x5', '\xA5', '\xF4B', '\n', '\xA5', '\x5', '\xA5', 
		'\xF4D', '\n', '\xA5', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', 
		'\xA7', '\x5', '\xA7', '\xF58', '\n', '\xA7', '\x3', '\xA8', '\x3', '\xA8', 
		'\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', 
		'\x3', '\xA9', '\x5', '\xA9', '\xF62', '\n', '\xA9', '\x3', '\xAA', '\x3', 
		'\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x5', '\xAA', '\xF69', 
		'\n', '\xAA', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', 
		'\x5', '\xAB', '\xF6F', '\n', '\xAB', '\x3', '\xAC', '\x3', '\xAC', '\x3', 
		'\xAC', '\x3', '\xAC', '\x3', '\xAD', '\x3', '\xAD', '\x5', '\xAD', '\xF77', 
		'\n', '\xAD', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x5', '\xAE', 
		'\xF7C', '\n', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', 
		'\xAE', '\a', '\xAE', '\xF82', '\n', '\xAE', '\f', '\xAE', '\xE', '\xAE', 
		'\xF85', '\v', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\a', 
		'\xAE', '\xF8A', '\n', '\xAE', '\f', '\xAE', '\xE', '\xAE', '\xF8D', '\v', 
		'\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\a', '\xAE', '\xF92', 
		'\n', '\xAE', '\f', '\xAE', '\xE', '\xAE', '\xF95', '\v', '\xAE', '\x3', 
		'\xAE', '\x3', '\xAE', '\x3', '\xAE', '\a', '\xAE', '\xF9A', '\n', '\xAE', 
		'\f', '\xAE', '\xE', '\xAE', '\xF9D', '\v', '\xAE', '\x3', '\xAE', '\x6', 
		'\xAE', '\xFA0', '\n', '\xAE', '\r', '\xAE', '\xE', '\xAE', '\xFA1', '\x5', 
		'\xAE', '\xFA4', '\n', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x5', '\xAE', 
		'\xFA8', '\n', '\xAE', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x5', 
		'\xAF', '\xFAD', '\n', '\xAF', '\x3', '\xAF', '\x6', '\xAF', '\xFB0', 
		'\n', '\xAF', '\r', '\xAF', '\xE', '\xAF', '\xFB1', '\x3', '\xAF', '\x3', 
		'\xAF', '\x6', '\xAF', '\xFB6', '\n', '\xAF', '\r', '\xAF', '\xE', '\xAF', 
		'\xFB7', '\x5', '\xAF', '\xFBA', '\n', '\xAF', '\x3', '\xAF', '\x3', '\xAF', 
		'\x3', '\xAF', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', 
		'\x6', '\xB0', '\xFC3', '\n', '\xB0', '\r', '\xB0', '\xE', '\xB0', '\xFC4', 
		'\x3', '\xB0', '\a', '\xB0', '\xFC8', '\n', '\xB0', '\f', '\xB0', '\xE', 
		'\xB0', '\xFCB', '\v', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x6', '\xB0', 
		'\xFCF', '\n', '\xB0', '\r', '\xB0', '\xE', '\xB0', '\xFD0', '\x5', '\xB0', 
		'\xFD3', '\n', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', 
		'\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB2', '\x3', '\xB2', '\x3', 
		'\xB2', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x5', '\xB3', '\xFE1', 
		'\n', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x6', '\xB3', '\xFE5', '\n', 
		'\xB3', '\r', '\xB3', '\xE', '\xB3', '\xFE6', '\x3', '\xB3', '\x3', '\xB3', 
		'\x3', '\xB3', '\x5', '\xB3', '\xFEC', '\n', '\xB3', '\x3', '\xB4', '\x3', 
		'\xB4', '\x3', '\xB4', '\x5', '\xB4', '\xFF1', '\n', '\xB4', '\x3', '\xB4', 
		'\x3', '\xB4', '\x6', '\xB4', '\xFF5', '\n', '\xB4', '\r', '\xB4', '\xE', 
		'\xB4', '\xFF6', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', 
		'\x3', '\xB4', '\x5', '\xB4', '\xFFE', '\n', '\xB4', '\x3', '\xB5', '\x3', 
		'\xB5', '\x3', '\xB5', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x5', 
		'\xB6', '\x1006', '\n', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', 
		'\x3', '\xB6', '\x6', '\xB6', '\x100C', '\n', '\xB6', '\r', '\xB6', '\xE', 
		'\xB6', '\x100D', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x5', 
		'\xB6', '\x1013', '\n', '\xB6', '\x3', '\xB7', '\x3', '\xB7', '\x3', '\xB7', 
		'\x3', '\xB7', '\x5', '\xB7', '\x1019', '\n', '\xB7', '\x3', '\xB7', '\x5', 
		'\xB7', '\x101C', '\n', '\xB7', '\x3', '\xB7', '\x3', '\xB7', '\x3', '\xB7', 
		'\x3', '\xB7', '\x3', '\xB7', '\x3', '\xB7', '\x5', '\xB7', '\x1024', 
		'\n', '\xB7', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', 
		'\x3', '\xB8', '\x5', '\xB8', '\x102B', '\n', '\xB8', '\x3', '\xB9', '\x3', 
		'\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', 
		'\xB9', '\x5', '\xB9', '\x1034', '\n', '\xB9', '\x3', '\xB9', '\x5', '\xB9', 
		'\x1037', '\n', '\xB9', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', 
		'\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBB', '\x3', '\xBB', '\x3', 
		'\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\a', 
		'\xBB', '\x1046', '\n', '\xBB', '\f', '\xBB', '\xE', '\xBB', '\x1049', 
		'\v', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBC', '\x3', '\xBC', 
		'\x3', '\xBC', '\x5', '\xBC', '\x1050', '\n', '\xBC', '\x3', '\xBC', '\x3', 
		'\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x5', 
		'\xBC', '\x1058', '\n', '\xBC', '\x3', '\xBD', '\x3', '\xBD', '\x5', '\xBD', 
		'\x105C', '\n', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBE', '\x3', 
		'\xBE', '\x3', '\xBE', '\x5', '\xBE', '\x1063', '\n', '\xBE', '\x3', '\xBE', 
		'\x3', '\xBE', '\x6', '\xBE', '\x1067', '\n', '\xBE', '\r', '\xBE', '\xE', 
		'\xBE', '\x1068', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', 
		'\xBF', '\x6', '\xBF', '\x106F', '\n', '\xBF', '\r', '\xBF', '\xE', '\xBF', 
		'\x1070', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', 
		'\x3', '\xC0', '\a', '\xC0', '\x1078', '\n', '\xC0', '\f', '\xC0', '\xE', 
		'\xC0', '\x107B', '\v', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', 
		'\x5', '\xC0', '\x1080', '\n', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', 
		'\xC0', '\a', '\xC0', '\x1085', '\n', '\xC0', '\f', '\xC0', '\xE', '\xC0', 
		'\x1088', '\v', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', 
		'\xC0', '\x5', '\xC0', '\x108E', '\n', '\xC0', '\x3', '\xC0', '\a', '\xC0', 
		'\x1091', '\n', '\xC0', '\f', '\xC0', '\xE', '\xC0', '\x1094', '\v', '\xC0', 
		'\x5', '\xC0', '\x1096', '\n', '\xC0', '\x5', '\xC0', '\x1098', '\n', 
		'\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x6', '\xC0', '\x109C', '\n', '\xC0', 
		'\r', '\xC0', '\xE', '\xC0', '\x109D', '\x5', '\xC0', '\x10A0', '\n', 
		'\xC0', '\x3', '\xC0', '\x3', '\xC0', '\a', '\xC0', '\x10A4', '\n', '\xC0', 
		'\f', '\xC0', '\xE', '\xC0', '\x10A7', '\v', '\xC0', '\x5', '\xC0', '\x10A9', 
		'\n', '\xC0', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', 
		'\x3', '\xC1', '\a', '\xC1', '\x10B0', '\n', '\xC1', '\f', '\xC1', '\xE', 
		'\xC1', '\x10B3', '\v', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', 
		'\x5', '\xC1', '\x10B8', '\n', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', 
		'\xC1', '\a', '\xC1', '\x10BD', '\n', '\xC1', '\f', '\xC1', '\xE', '\xC1', 
		'\x10C0', '\v', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', 
		'\xC1', '\x5', '\xC1', '\x10C6', '\n', '\xC1', '\x3', '\xC1', '\a', '\xC1', 
		'\x10C9', '\n', '\xC1', '\f', '\xC1', '\xE', '\xC1', '\x10CC', '\v', '\xC1', 
		'\x5', '\xC1', '\x10CE', '\n', '\xC1', '\x5', '\xC1', '\x10D0', '\n', 
		'\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x6', '\xC1', '\x10D4', '\n', '\xC1', 
		'\r', '\xC1', '\xE', '\xC1', '\x10D5', '\x5', '\xC1', '\x10D8', '\n', 
		'\xC1', '\x3', '\xC1', '\x3', '\xC1', '\a', '\xC1', '\x10DC', '\n', '\xC1', 
		'\f', '\xC1', '\xE', '\xC1', '\x10DF', '\v', '\xC1', '\x5', '\xC1', '\x10E1', 
		'\n', '\xC1', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x5', '\xC2', 
		'\x10E6', '\n', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\a', 
		'\xC2', '\x10EB', '\n', '\xC2', '\f', '\xC2', '\xE', '\xC2', '\x10EE', 
		'\v', '\xC2', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', 
		'\a', '\xC3', '\x10F4', '\n', '\xC3', '\f', '\xC3', '\xE', '\xC3', '\x10F7', 
		'\v', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x5', '\xC3', '\x10FB', '\n', 
		'\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', 
		'\xC3', '\a', '\xC3', '\x1102', '\n', '\xC3', '\f', '\xC3', '\xE', '\xC3', 
		'\x1105', '\v', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', 
		'\xC3', '\x5', '\xC3', '\x110B', '\n', '\xC3', '\x3', '\xC3', '\a', '\xC3', 
		'\x110E', '\n', '\xC3', '\f', '\xC3', '\xE', '\xC3', '\x1111', '\v', '\xC3', 
		'\x5', '\xC3', '\x1113', '\n', '\xC3', '\x5', '\xC3', '\x1115', '\n', 
		'\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\a', 
		'\xC3', '\x111B', '\n', '\xC3', '\f', '\xC3', '\xE', '\xC3', '\x111E', 
		'\v', '\xC3', '\x5', '\xC3', '\x1120', '\n', '\xC3', '\x3', '\xC4', '\x3', 
		'\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', 
		'\xC4', '\x3', '\xC4', '\a', '\xC4', '\x112A', '\n', '\xC4', '\f', '\xC4', 
		'\xE', '\xC4', '\x112D', '\v', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', 
		'\xC4', '\x5', '\xC4', '\x1132', '\n', '\xC4', '\x3', '\xC5', '\x3', '\xC5', 
		'\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\a', '\xC5', '\x1139', '\n', 
		'\xC5', '\f', '\xC5', '\xE', '\xC5', '\x113C', '\v', '\xC5', '\x3', '\xC6', 
		'\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\a', '\xC6', '\x1142', '\n', 
		'\xC6', '\f', '\xC6', '\xE', '\xC6', '\x1145', '\v', '\xC6', '\x3', '\xC6', 
		'\x3', '\xC6', '\x5', '\xC6', '\x1149', '\n', '\xC6', '\x3', '\xC6', '\x3', 
		'\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\a', '\xC6', '\x1150', 
		'\n', '\xC6', '\f', '\xC6', '\xE', '\xC6', '\x1153', '\v', '\xC6', '\x3', 
		'\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x5', '\xC6', '\x1158', '\n', '\xC6', 
		'\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', 
		'\x3', '\xC6', '\x3', '\xC6', '\a', '\xC6', '\x1161', '\n', '\xC6', '\f', 
		'\xC6', '\xE', '\xC6', '\x1164', '\v', '\xC6', '\x5', '\xC6', '\x1166', 
		'\n', '\xC6', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', 
		'\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\a', '\xC7', 
		'\x1170', '\n', '\xC7', '\f', '\xC7', '\xE', '\xC7', '\x1173', '\v', '\xC7', 
		'\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x5', '\xC8', 
		'\x1179', '\n', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x5', 
		'\xC8', '\x117E', '\n', '\xC8', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', 
		'\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', 
		'\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', 
		'\x5', '\xCA', '\x118D', '\n', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', 
		'\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', 
		'\xCA', '\x3', '\xCA', '\x5', '\xCA', '\x1198', '\n', '\xCA', '\x3', '\xCA', 
		'\x5', '\xCA', '\x119B', '\n', '\xCA', '\x3', '\xCB', '\x3', '\xCB', '\x3', 
		'\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', 
		'\xCB', '\x5', '\xCB', '\x11A5', '\n', '\xCB', '\x3', '\xCC', '\x3', '\xCC', 
		'\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', 
		'\x3', '\xCC', '\x5', '\xCC', '\x11AF', '\n', '\xCC', '\x3', '\xCD', '\x3', 
		'\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', 
		'\xCD', '\x3', '\xCD', '\x5', '\xCD', '\x11B9', '\n', '\xCD', '\x3', '\xCE', 
		'\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', 
		'\x3', '\xCF', '\x3', '\xCF', '\x5', '\xCF', '\x11C3', '\n', '\xCF', '\x3', 
		'\xD0', '\x3', '\xD0', '\x5', '\xD0', '\x11C7', '\n', '\xD0', '\x3', '\xD0', 
		'\x3', '\xD0', '\x5', '\xD0', '\x11CB', '\n', '\xD0', '\x3', '\xD0', '\x3', 
		'\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', 
		'\xD0', '\x5', '\xD0', '\x11D4', '\n', '\xD0', '\x3', '\xD0', '\x3', '\xD0', 
		'\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', 
		'\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', 
		'\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', 
		'\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', 
		'\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x5', '\xD0', '\x11EF', 
		'\n', '\xD0', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', 
		'\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', 
		'\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x5', '\xD1', 
		'\x11FE', '\n', '\xD1', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', 
		'\xD2', '\x3', '\xD3', '\x3', '\xD3', '\x5', '\xD3', '\x1206', '\n', '\xD3', 
		'\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD4', '\x3', '\xD4', 
		'\x3', '\xD4', '\x3', '\xD4', '\a', '\xD4', '\x120F', '\n', '\xD4', '\f', 
		'\xD4', '\xE', '\xD4', '\x1212', '\v', '\xD4', '\x3', '\xD5', '\x3', '\xD5', 
		'\x3', '\xD5', '\x3', '\xD5', '\x5', '\xD5', '\x1218', '\n', '\xD5', '\x3', 
		'\xD6', '\x3', '\xD6', '\x5', '\xD6', '\x121C', '\n', '\xD6', '\x3', '\xD6', 
		'\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD7', '\x3', '\xD7', '\x5', '\xD7', 
		'\x1223', '\n', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x5', 
		'\xD7', '\x1228', '\n', '\xD7', '\x3', '\xD7', '\x5', '\xD7', '\x122B', 
		'\n', '\xD7', '\x3', '\xD7', '\x5', '\xD7', '\x122E', '\n', '\xD7', '\x3', 
		'\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', 
		'\xD8', '\x3', '\xD8', '\x5', '\xD8', '\x1237', '\n', '\xD8', '\x3', '\xD9', 
		'\x3', '\xD9', '\x5', '\xD9', '\x123B', '\n', '\xD9', '\x3', '\xD9', '\x3', 
		'\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', 
		'\xD9', '\x3', '\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x3', 
		'\xDA', '\x3', '\xDA', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', 
		'\xDB', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', 
		'\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\a', 
		'\xDC', '\x1257', '\n', '\xDC', '\f', '\xDC', '\xE', '\xDC', '\x125A', 
		'\v', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', 
		'\x5', '\xDC', '\x1260', '\n', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x5', 
		'\xDC', '\x1264', '\n', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', 
		'\x3', '\xDC', '\x3', '\xDC', '\x5', '\xDC', '\x126B', '\n', '\xDC', '\x3', 
		'\xDC', '\x5', '\xDC', '\x126E', '\n', '\xDC', '\x3', '\xDC', '\x3', '\xDC', 
		'\x3', '\xDC', '\x5', '\xDC', '\x1273', '\n', '\xDC', '\x3', '\xDD', '\x3', 
		'\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', 
		'\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x127D', '\n', '\xDD', '\x3', '\xDD', 
		'\x3', '\xDD', '\x5', '\xDD', '\x1281', '\n', '\xDD', '\x3', '\xDD', '\x3', 
		'\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x1287', '\n', '\xDD', 
		'\x3', '\xDD', '\x5', '\xDD', '\x128A', '\n', '\xDD', '\x3', '\xDD', '\x3', 
		'\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x128F', '\n', '\xDD', '\x3', '\xDD', 
		'\x3', '\xDD', '\x5', '\xDD', '\x1293', '\n', '\xDD', '\x3', '\xDD', '\x3', 
		'\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x129A', 
		'\n', '\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x129D', '\n', '\xDD', '\x3', 
		'\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x12A3', 
		'\n', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', 
		'\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', 
		'\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', 
		'\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', 
		'\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x12BB', 
		'\n', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', 
		'\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', 
		'\x3', '\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x12C8', '\n', '\xDD', '\x3', 
		'\xDD', '\x5', '\xDD', '\x12CB', '\n', '\xDD', '\x3', '\xDD', '\x3', '\xDD', 
		'\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', 
		'\x3', '\xDD', '\x5', '\xDD', '\x12D5', '\n', '\xDD', '\x3', '\xDD', '\x3', 
		'\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x5', 
		'\xDD', '\x12DD', '\n', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x5', '\xDD', 
		'\x12E1', '\n', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', 
		'\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x12E8', '\n', '\xDD', '\x3', '\xDD', 
		'\x5', '\xDD', '\x12EB', '\n', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', 
		'\xDD', '\x3', '\xDD', '\x3', '\xDD', '\a', '\xDD', '\x12F2', '\n', '\xDD', 
		'\f', '\xDD', '\xE', '\xDD', '\x12F5', '\v', '\xDD', '\x3', '\xDD', '\x3', 
		'\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x12FA', '\n', '\xDD', '\x3', '\xDD', 
		'\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x1300', 
		'\n', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', 
		'\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x5', '\xDD', 
		'\x130A', '\n', '\xDD', '\x5', '\xDD', '\x130C', '\n', '\xDD', '\x3', 
		'\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x5', '\xDE', '\x1312', 
		'\n', '\xDE', '\x3', '\xDE', '\x5', '\xDE', '\x1315', '\n', '\xDE', '\x3', 
		'\xDE', '\x5', '\xDE', '\x1318', '\n', '\xDE', '\x3', '\xDF', '\x3', '\xDF', 
		'\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', 
		'\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x5', '\xDF', '\x1324', 
		'\n', '\xDF', '\x3', '\xDF', '\x5', '\xDF', '\x1327', '\n', '\xDF', '\x3', 
		'\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x5', '\xE0', '\x132D', 
		'\n', '\xE0', '\x3', '\xE1', '\x5', '\xE1', '\x1330', '\n', '\xE1', '\x3', 
		'\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', 
		'\xE1', '\x5', '\xE1', '\x1338', '\n', '\xE1', '\x3', '\xE1', '\x3', '\xE1', 
		'\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x5', '\xE1', 
		'\x1340', '\n', '\xE1', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', 
		'\xE2', '\x5', '\xE2', '\x1346', '\n', '\xE2', '\x3', '\xE2', '\x3', '\xE2', 
		'\x5', '\xE2', '\x134A', '\n', '\xE2', '\x3', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x5', 
		'\xE3', '\x1358', '\n', '\xE3', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', 
		'\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', 
		'\a', '\xE5', '\x1362', '\n', '\xE5', '\f', '\xE5', '\xE', '\xE5', '\x1365', 
		'\v', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', 
		'\x5', '\xE5', '\x136B', '\n', '\xE5', '\x3', '\xE5', '\x5', '\xE5', '\x136E', 
		'\n', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE6', 
		'\x3', '\xE6', '\x5', '\xE6', '\x1375', '\n', '\xE6', '\x3', '\xE6', '\x3', 
		'\xE6', '\x3', '\xE6', '\a', '\xE6', '\x137A', '\n', '\xE6', '\f', '\xE6', 
		'\xE', '\xE6', '\x137D', '\v', '\xE6', '\x3', '\xE7', '\x3', '\xE7', '\x5', 
		'\xE7', '\x1381', '\n', '\xE7', '\x3', '\xE7', '\x6', '\xE7', '\x1384', 
		'\n', '\xE7', '\r', '\xE7', '\xE', '\xE7', '\x1385', '\x3', '\xE8', '\x3', 
		'\xE8', '\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE8', '\x3', 
		'\xE8', '\a', '\xE8', '\x138F', '\n', '\xE8', '\f', '\xE8', '\xE', '\xE8', 
		'\x1392', '\v', '\xE8', '\x3', '\xE9', '\x3', '\xE9', '\x3', '\xE9', '\x3', 
		'\xE9', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEB', '\x3', '\xEB', '\x5', 
		'\xEB', '\x139C', '\n', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', 
		'\x3', '\xEB', '\x5', '\xEB', '\x13A2', '\n', '\xEB', '\x3', '\xEC', '\x3', 
		'\xEC', '\x3', '\xEC', '\x5', '\xEC', '\x13A7', '\n', '\xEC', '\x3', '\xEC', 
		'\x3', '\xEC', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xEC', 
		'\x3', '\xEC', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xEC', 
		'\x5', '\xEC', '\x13B4', '\n', '\xEC', '\x5', '\xEC', '\x13B6', '\n', 
		'\xEC', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xEC', '\x5', '\xEC', '\x13BB', 
		'\n', '\xEC', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xEC', '\x5', '\xEC', 
		'\x13C0', '\n', '\xEC', '\x5', '\xEC', '\x13C2', '\n', '\xEC', '\x3', 
		'\xED', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', '\x5', 
		'\xED', '\x13C9', '\n', '\xED', '\x3', '\xEE', '\x3', '\xEE', '\x3', '\xEE', 
		'\x3', '\xEE', '\x3', '\xEE', '\x5', '\xEE', '\x13D0', '\n', '\xEE', '\x3', 
		'\xEE', '\x5', '\xEE', '\x13D3', '\n', '\xEE', '\x3', '\xEE', '\x5', '\xEE', 
		'\x13D6', '\n', '\xEE', '\x3', '\xEE', '\x3', '\xEE', '\x3', '\xEE', '\x3', 
		'\xEE', '\x5', '\xEE', '\x13DC', '\n', '\xEE', '\x3', '\xEE', '\x3', '\xEE', 
		'\x5', '\xEE', '\x13E0', '\n', '\xEE', '\x3', '\xEF', '\x3', '\xEF', '\x3', 
		'\xEF', '\x3', '\xEF', '\x5', '\xEF', '\x13E6', '\n', '\xEF', '\x3', '\xF0', 
		'\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0', '\x5', '\xF0', '\x13EC', 
		'\n', '\xF0', '\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF1', '\x3', '\xF1', 
		'\x3', '\xF1', '\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF3', 
		'\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x5', '\xF3', 
		'\x13FB', '\n', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x5', 
		'\xF3', '\x1400', '\n', '\xF3', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', 
		'\x3', '\xF4', '\x5', '\xF4', '\x1406', '\n', '\xF4', '\x3', '\xF5', '\x3', 
		'\xF5', '\x3', '\xF6', '\x3', '\xF6', '\x3', '\xF6', '\x5', '\xF6', '\x140D', 
		'\n', '\xF6', '\x5', '\xF6', '\x140F', '\n', '\xF6', '\x3', '\xF7', '\x3', 
		'\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x5', '\xF7', '\x1416', 
		'\n', '\xF7', '\x3', '\xF7', '\x5', '\xF7', '\x1419', '\n', '\xF7', '\x3', 
		'\xF8', '\x3', '\xF8', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xFA', '\x3', 
		'\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x5', '\xFA', '\x1423', '\n', '\xFA', 
		'\x3', '\xFB', '\x3', '\xFB', '\x5', '\xFB', '\x1427', '\n', '\xFB', '\x3', 
		'\xFC', '\x3', '\xFC', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', 
		'\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', 
		'\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', 
		'\xFD', '\x6', '\xFD', '\x1439', '\n', '\xFD', '\r', '\xFD', '\xE', '\xFD', 
		'\x143A', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', 
		'\x3', '\xFE', '\x5', '\xFE', '\x1442', '\n', '\xFE', '\x5', '\xFE', '\x1444', 
		'\n', '\xFE', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x6', '\xFF', 
		'\x1449', '\n', '\xFF', '\r', '\xFF', '\xE', '\xFF', '\x144A', '\x5', 
		'\xFF', '\x144D', '\n', '\xFF', '\x3', '\x100', '\x3', '\x100', '\x5', 
		'\x100', '\x1451', '\n', '\x100', '\x3', '\x101', '\x3', '\x101', '\x3', 
		'\x101', '\x5', '\x101', '\x1456', '\n', '\x101', '\x3', '\x102', '\x3', 
		'\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', 
		'\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x5', '\x102', '\x1461', 
		'\n', '\x102', '\x3', '\x103', '\x3', '\x103', '\x3', '\x103', '\x5', 
		'\x103', '\x1466', '\n', '\x103', '\x3', '\x104', '\x3', '\x104', '\x3', 
		'\x105', '\x3', '\x105', '\x5', '\x105', '\x146C', '\n', '\x105', '\x3', 
		'\x106', '\x5', '\x106', '\x146F', '\n', '\x106', '\x3', '\x106', '\x3', 
		'\x106', '\x5', '\x106', '\x1473', '\n', '\x106', '\x3', '\x106', '\x6', 
		'\x106', '\x1476', '\n', '\x106', '\r', '\x106', '\xE', '\x106', '\x1477', 
		'\x3', '\x106', '\x5', '\x106', '\x147B', '\n', '\x106', '\x3', '\x106', 
		'\x3', '\x106', '\x5', '\x106', '\x147F', '\n', '\x106', '\x3', '\x106', 
		'\x3', '\x106', '\x5', '\x106', '\x1483', '\n', '\x106', '\x5', '\x106', 
		'\x1485', '\n', '\x106', '\x3', '\x107', '\x3', '\x107', '\x3', '\x108', 
		'\x5', '\x108', '\x148A', '\n', '\x108', '\x3', '\x108', '\x3', '\x108', 
		'\x3', '\x109', '\x5', '\x109', '\x148F', '\n', '\x109', '\x3', '\x109', 
		'\x3', '\x109', '\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x3', 
		'\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', 
		'\x3', '\x10A', '\x5', '\x10A', '\x149C', '\n', '\x10A', '\x3', '\x10A', 
		'\x5', '\x10A', '\x149F', '\n', '\x10A', '\x3', '\x10B', '\x3', '\x10B', 
		'\x5', '\x10B', '\x14A3', '\n', '\x10B', '\x3', '\x10B', '\x5', '\x10B', 
		'\x14A6', '\n', '\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x3', '\x10B', 
		'\x5', '\x10B', '\x14AB', '\n', '\x10B', '\x3', '\x10B', '\x3', '\x10B', 
		'\x5', '\x10B', '\x14AF', '\n', '\x10B', '\x3', '\x10B', '\x3', '\x10B', 
		'\x5', '\x10B', '\x14B3', '\n', '\x10B', '\x3', '\x10B', '\x5', '\x10B', 
		'\x14B6', '\n', '\x10B', '\x3', '\x10B', '\x5', '\x10B', '\x14B9', '\n', 
		'\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x5', '\x10B', '\x14BD', '\n', 
		'\x10B', '\x3', '\x10B', '\x5', '\x10B', '\x14C0', '\n', '\x10B', '\x3', 
		'\x10B', '\x5', '\x10B', '\x14C3', '\n', '\x10B', '\x3', '\x10B', '\x3', 
		'\x10B', '\x5', '\x10B', '\x14C7', '\n', '\x10B', '\x3', '\x10B', '\x5', 
		'\x10B', '\x14CA', '\n', '\x10B', '\x3', '\x10B', '\x5', '\x10B', '\x14CD', 
		'\n', '\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x5', 
		'\x10B', '\x14D2', '\n', '\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x3', 
		'\x10B', '\x3', '\x10B', '\x3', '\x10B', '\a', '\x10B', '\x14D9', '\n', 
		'\x10B', '\f', '\x10B', '\xE', '\x10B', '\x14DC', '\v', '\x10B', '\x3', 
		'\x10B', '\x3', '\x10B', '\x5', '\x10B', '\x14E0', '\n', '\x10B', '\x3', 
		'\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x5', '\x10B', '\x14E5', '\n', 
		'\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x5', '\x10B', '\x14E9', '\n', 
		'\x10B', '\x3', '\x10B', '\x5', '\x10B', '\x14EC', '\n', '\x10B', '\x3', 
		'\x10C', '\x3', '\x10C', '\x5', '\x10C', '\x14F0', '\n', '\x10C', '\x3', 
		'\x10C', '\x3', '\x10C', '\x5', '\x10C', '\x14F4', '\n', '\x10C', '\x3', 
		'\x10C', '\x3', '\x10C', '\x3', '\x10C', '\x5', '\x10C', '\x14F9', '\n', 
		'\x10C', '\x3', '\x10C', '\x3', '\x10C', '\x3', '\x10C', '\x5', '\x10C', 
		'\x14FE', '\n', '\x10C', '\x3', '\x10C', '\x3', '\x10C', '\x5', '\x10C', 
		'\x1502', '\n', '\x10C', '\x5', '\x10C', '\x1504', '\n', '\x10C', '\x3', 
		'\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10E', 
		'\x3', '\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x3', 
		'\x10E', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', 
		'\x5', '\x10F', '\x1514', '\n', '\x10F', '\x3', '\x10F', '\x3', '\x10F', 
		'\x3', '\x110', '\x3', '\x110', '\x3', '\x110', '\a', '\x110', '\x151B', 
		'\n', '\x110', '\f', '\x110', '\xE', '\x110', '\x151E', '\v', '\x110', 
		'\x3', '\x111', '\x3', '\x111', '\x3', '\x111', '\a', '\x111', '\x1523', 
		'\n', '\x111', '\f', '\x111', '\xE', '\x111', '\x1526', '\v', '\x111', 
		'\x3', '\x112', '\x3', '\x112', '\x3', '\x112', '\x3', '\x112', '\a', 
		'\x112', '\x152C', '\n', '\x112', '\f', '\x112', '\xE', '\x112', '\x152F', 
		'\v', '\x112', '\x3', '\x112', '\x3', '\x112', '\x3', '\x113', '\x3', 
		'\x113', '\x3', '\x113', '\a', '\x113', '\x1536', '\n', '\x113', '\f', 
		'\x113', '\xE', '\x113', '\x1539', '\v', '\x113', '\x3', '\x114', '\x3', 
		'\x114', '\x3', '\x114', '\a', '\x114', '\x153E', '\n', '\x114', '\f', 
		'\x114', '\xE', '\x114', '\x1541', '\v', '\x114', '\x3', '\x115', '\x3', 
		'\x115', '\x3', '\x115', '\a', '\x115', '\x1546', '\n', '\x115', '\f', 
		'\x115', '\xE', '\x115', '\x1549', '\v', '\x115', '\x3', '\x116', '\x3', 
		'\x116', '\x3', '\x116', '\a', '\x116', '\x154E', '\n', '\x116', '\f', 
		'\x116', '\xE', '\x116', '\x1551', '\v', '\x116', '\x3', '\x117', '\x3', 
		'\x117', '\x3', '\x117', '\a', '\x117', '\x1556', '\n', '\x117', '\f', 
		'\x117', '\xE', '\x117', '\x1559', '\v', '\x117', '\x3', '\x118', '\x3', 
		'\x118', '\x3', '\x118', '\x3', '\x118', '\x3', '\x118', '\x3', '\x118', 
		'\x5', '\x118', '\x1561', '\n', '\x118', '\x5', '\x118', '\x1563', '\n', 
		'\x118', '\x3', '\x119', '\x3', '\x119', '\x3', '\x119', '\x5', '\x119', 
		'\x1568', '\n', '\x119', '\x3', '\x119', '\x5', '\x119', '\x156B', '\n', 
		'\x119', '\x3', '\x119', '\x3', '\x119', '\x3', '\x119', '\x5', '\x119', 
		'\x1570', '\n', '\x119', '\x3', '\x119', '\x5', '\x119', '\x1573', '\n', 
		'\x119', '\x3', '\x11A', '\x3', '\x11A', '\x5', '\x11A', '\x1577', '\n', 
		'\x11A', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11C', 
		'\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11D', '\x3', 
		'\x11D', '\x3', '\x11D', '\x3', '\x11D', '\x3', '\x11D', '\x5', '\x11D', 
		'\x1585', '\n', '\x11D', '\x3', '\x11D', '\x3', '\x11D', '\x3', '\x11D', 
		'\x3', '\x11D', '\x3', '\x11D', '\x5', '\x11D', '\x158C', '\n', '\x11D', 
		'\x3', '\x11D', '\x3', '\x11D', '\x3', '\x11D', '\x5', '\x11D', '\x1591', 
		'\n', '\x11D', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', 
		'\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', 
		'\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', 
		'\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', 
		'\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', 
		'\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', 
		'\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x6', 
		'\x11E', '\x15B1', '\n', '\x11E', '\r', '\x11E', '\xE', '\x11E', '\x15B2', 
		'\x3', '\x11E', '\x3', '\x11E', '\x5', '\x11E', '\x15B7', '\n', '\x11E', 
		'\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x6', 
		'\x11E', '\x15BD', '\n', '\x11E', '\r', '\x11E', '\xE', '\x11E', '\x15BE', 
		'\x3', '\x11E', '\x3', '\x11E', '\x5', '\x11E', '\x15C3', '\n', '\x11E', 
		'\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', 
		'\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x5', '\x11E', '\x15CC', '\n', 
		'\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', 
		'\x3', '\x11E', '\x3', '\x11E', '\x5', '\x11E', '\x15D4', '\n', '\x11E', 
		'\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x5', '\x11E', '\x15D9', 
		'\n', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', 
		'\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x5', '\x11E', '\x15E1', '\n', 
		'\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x5', '\x11E', 
		'\x15E6', '\n', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', 
		'\x5', '\x11E', '\x15EB', '\n', '\x11E', '\x5', '\x11E', '\x15ED', '\n', 
		'\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', 
		'\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x5', '\x11E', '\x15F6', 
		'\n', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x5', 
		'\x11E', '\x15FB', '\n', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', 
		'\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x5', '\x11E', 
		'\x1603', '\n', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', 
		'\x5', '\x11E', '\x1608', '\n', '\x11E', '\x3', '\x11E', '\x3', '\x11E', 
		'\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x5', 
		'\x11E', '\x1610', '\n', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', 
		'\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x5', '\x11E', 
		'\x1618', '\n', '\x11E', '\x3', '\x11E', '\x5', '\x11E', '\x161B', '\n', 
		'\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', 
		'\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x5', 
		'\x11E', '\x1625', '\n', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', 
		'\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', 
		'\x3', '\x11E', '\x3', '\x11E', '\x5', '\x11E', '\x1630', '\n', '\x11E', 
		'\x3', '\x11F', '\x3', '\x11F', '\x3', '\x11F', '\x3', '\x11F', '\x3', 
		'\x11F', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', 
		'\a', '\x120', '\x163B', '\n', '\x120', '\f', '\x120', '\xE', '\x120', 
		'\x163E', '\v', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', 
		'\x3', '\x120', '\x3', '\x120', '\x5', '\x120', '\x1645', '\n', '\x120', 
		'\x3', '\x121', '\x3', '\x121', '\x5', '\x121', '\x1649', '\n', '\x121', 
		'\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x5', '\x122', '\x164E', 
		'\n', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', 
		'\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x5', '\x122', 
		'\x1657', '\n', '\x122', '\x3', '\x122', '\x5', '\x122', '\x165A', '\n', 
		'\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', 
		'\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', 
		'\x122', '\x3', '\x122', '\x5', '\x122', '\x1666', '\n', '\x122', '\x3', 
		'\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', 
		'\x3', '\x122', '\x5', '\x122', '\x166E', '\n', '\x122', '\x3', '\x122', 
		'\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', 
		'\x122', '\a', '\x122', '\x1676', '\n', '\x122', '\f', '\x122', '\xE', 
		'\x122', '\x1679', '\v', '\x122', '\x5', '\x122', '\x167B', '\n', '\x122', 
		'\x3', '\x122', '\x3', '\x122', '\x5', '\x122', '\x167F', '\n', '\x122', 
		'\x3', '\x122', '\x3', '\x122', '\x5', '\x122', '\x1683', '\n', '\x122', 
		'\x3', '\x123', '\x3', '\x123', '\x3', '\x123', '\x3', '\x123', '\x3', 
		'\x123', '\x3', '\x123', '\x3', '\x123', '\x3', '\x123', '\x3', '\x123', 
		'\x3', '\x123', '\x3', '\x123', '\x3', '\x123', '\x3', '\x123', '\x3', 
		'\x123', '\x3', '\x123', '\x3', '\x123', '\x3', '\x123', '\x3', '\x123', 
		'\x3', '\x123', '\x3', '\x123', '\x3', '\x123', '\x3', '\x123', '\x3', 
		'\x123', '\x5', '\x123', '\x169C', '\n', '\x123', '\x3', '\x124', '\x3', 
		'\x124', '\x3', '\x124', '\x3', '\x124', '\x3', '\x124', '\x3', '\x125', 
		'\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x5', '\x125', '\x16A7', 
		'\n', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', 
		'\x125', '\x3', '\x125', '\x5', '\x125', '\x16AE', '\n', '\x125', '\a', 
		'\x125', '\x16B0', '\n', '\x125', '\f', '\x125', '\xE', '\x125', '\x16B3', 
		'\v', '\x125', '\x3', '\x126', '\x3', '\x126', '\x3', '\x126', '\x3', 
		'\x126', '\x5', '\x126', '\x16B9', '\n', '\x126', '\x3', '\x127', '\x3', 
		'\x127', '\x3', '\x127', '\x3', '\x127', '\x3', '\x127', '\x3', '\x127', 
		'\x5', '\x127', '\x16C1', '\n', '\x127', '\x3', '\x127', '\x3', '\x127', 
		'\x3', '\x127', '\x5', '\x127', '\x16C6', '\n', '\x127', '\x3', '\x127', 
		'\x3', '\x127', '\x3', '\x127', '\x3', '\x127', '\a', '\x127', '\x16CC', 
		'\n', '\x127', '\f', '\x127', '\xE', '\x127', '\x16CF', '\v', '\x127', 
		'\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x5', '\x128', '\x16D4', 
		'\n', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', 
		'\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', 
		'\x5', '\x128', '\x16DE', '\n', '\x128', '\x3', '\x128', '\x3', '\x128', 
		'\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', 
		'\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', 
		'\x5', '\x128', '\x16EB', '\n', '\x128', '\x3', '\x128', '\x3', '\x128', 
		'\x3', '\x128', '\x3', '\x128', '\x5', '\x128', '\x16F1', '\n', '\x128', 
		'\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x5', 
		'\x128', '\x16F7', '\n', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', 
		'\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', 
		'\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', 
		'\x128', '\x3', '\x128', '\x3', '\x128', '\x5', '\x128', '\x1707', '\n', 
		'\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', 
		'\x5', '\x128', '\x170D', '\n', '\x128', '\a', '\x128', '\x170F', '\n', 
		'\x128', '\f', '\x128', '\xE', '\x128', '\x1712', '\v', '\x128', '\x3', 
		'\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', 
		'\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', 
		'\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', 
		'\a', '\x129', '\x1722', '\n', '\x129', '\f', '\x129', '\xE', '\x129', 
		'\x1725', '\v', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', 
		'\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x6', 
		'\x129', '\x172E', '\n', '\x129', '\r', '\x129', '\xE', '\x129', '\x172F', 
		'\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', 
		'\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', 
		'\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', 
		'\x129', '\x3', '\x129', '\x5', '\x129', '\x1741', '\n', '\x129', '\x3', 
		'\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', 
		'\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', 
		'\x129', '\x3', '\x129', '\a', '\x129', '\x174E', '\n', '\x129', '\f', 
		'\x129', '\xE', '\x129', '\x1751', '\v', '\x129', '\x3', '\x12A', '\x3', 
		'\x12A', '\x3', '\x12B', '\x3', '\x12B', '\x3', '\x12B', '\x3', '\x12B', 
		'\x3', '\x12B', '\x3', '\x12B', '\x3', '\x12B', '\x3', '\x12B', '\x3', 
		'\x12B', '\x3', '\x12B', '\x3', '\x12B', '\x3', '\x12B', '\x3', '\x12B', 
		'\x3', '\x12B', '\x5', '\x12B', '\x1763', '\n', '\x12B', '\x3', '\x12C', 
		'\x3', '\x12C', '\x3', '\x12C', '\x3', '\x12C', '\x3', '\x12C', '\x3', 
		'\x12C', '\x3', '\x12C', '\x5', '\x12C', '\x176C', '\n', '\x12C', '\x3', 
		'\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', 
		'\x3', '\x12D', '\x3', '\x12D', '\x5', '\x12D', '\x1775', '\n', '\x12D', 
		'\x3', '\x12E', '\x3', '\x12E', '\x3', '\x12F', '\x3', '\x12F', '\x3', 
		'\x130', '\x3', '\x130', '\x3', '\x131', '\x3', '\x131', '\x3', '\x132', 
		'\x3', '\x132', '\x3', '\x133', '\x3', '\x133', '\x3', '\x134', '\x3', 
		'\x134', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x2', '\x5', 
		'\x24C', '\x24E', '\x250', '\x136', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 
		'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', 
		'\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', 
		'\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', 
		'\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', 
		'\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', 
		'\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', '\xDC', 
		'\xDE', '\xE0', '\xE2', '\xE4', '\xE6', '\xE8', '\xEA', '\xEC', '\xEE', 
		'\xF0', '\xF2', '\xF4', '\xF6', '\xF8', '\xFA', '\xFC', '\xFE', '\x100', 
		'\x102', '\x104', '\x106', '\x108', '\x10A', '\x10C', '\x10E', '\x110', 
		'\x112', '\x114', '\x116', '\x118', '\x11A', '\x11C', '\x11E', '\x120', 
		'\x122', '\x124', '\x126', '\x128', '\x12A', '\x12C', '\x12E', '\x130', 
		'\x132', '\x134', '\x136', '\x138', '\x13A', '\x13C', '\x13E', '\x140', 
		'\x142', '\x144', '\x146', '\x148', '\x14A', '\x14C', '\x14E', '\x150', 
		'\x152', '\x154', '\x156', '\x158', '\x15A', '\x15C', '\x15E', '\x160', 
		'\x162', '\x164', '\x166', '\x168', '\x16A', '\x16C', '\x16E', '\x170', 
		'\x172', '\x174', '\x176', '\x178', '\x17A', '\x17C', '\x17E', '\x180', 
		'\x182', '\x184', '\x186', '\x188', '\x18A', '\x18C', '\x18E', '\x190', 
		'\x192', '\x194', '\x196', '\x198', '\x19A', '\x19C', '\x19E', '\x1A0', 
		'\x1A2', '\x1A4', '\x1A6', '\x1A8', '\x1AA', '\x1AC', '\x1AE', '\x1B0', 
		'\x1B2', '\x1B4', '\x1B6', '\x1B8', '\x1BA', '\x1BC', '\x1BE', '\x1C0', 
		'\x1C2', '\x1C4', '\x1C6', '\x1C8', '\x1CA', '\x1CC', '\x1CE', '\x1D0', 
		'\x1D2', '\x1D4', '\x1D6', '\x1D8', '\x1DA', '\x1DC', '\x1DE', '\x1E0', 
		'\x1E2', '\x1E4', '\x1E6', '\x1E8', '\x1EA', '\x1EC', '\x1EE', '\x1F0', 
		'\x1F2', '\x1F4', '\x1F6', '\x1F8', '\x1FA', '\x1FC', '\x1FE', '\x200', 
		'\x202', '\x204', '\x206', '\x208', '\x20A', '\x20C', '\x20E', '\x210', 
		'\x212', '\x214', '\x216', '\x218', '\x21A', '\x21C', '\x21E', '\x220', 
		'\x222', '\x224', '\x226', '\x228', '\x22A', '\x22C', '\x22E', '\x230', 
		'\x232', '\x234', '\x236', '\x238', '\x23A', '\x23C', '\x23E', '\x240', 
		'\x242', '\x244', '\x246', '\x248', '\x24A', '\x24C', '\x24E', '\x250', 
		'\x252', '\x254', '\x256', '\x258', '\x25A', '\x25C', '\x25E', '\x260', 
		'\x262', '\x264', '\x266', '\x268', '\x2', 't', '\x4', '\x2', '#', '#', 
		'\x82', '\x82', '\x4', '\x2', '\x1A1', '\x1A1', '\x1A6', '\x1A6', '\x5', 
		'\x2', '=', '=', '\x88', '\x88', '\x9C', '\x9C', '\x5', '\x2', '&', '&', 
		'\x122', '\x122', '\x160', '\x160', '\x6', '\x2', '&', '&', '\x141', '\x141', 
		'\x1A0', '\x1A0', '\x1E4', '\x1E4', '\x4', '\x2', '\x198', '\x198', '\x3C2', 
		'\x3C2', '\x4', '\x2', '\x43', '\x43', '{', '{', '\x4', '\x2', '\xE', 
		'\xE', '\xF8', '\xF8', '\x5', '\x2', '(', '(', 'I', 'I', '\x9F', '\x9F', 
		'\x4', '\x2', '\x14E', '\x14E', '\x1B8', '\x1B8', '\x5', '\x2', '\x191', 
		'\x191', '\x207', '\x207', '\x20D', '\x20D', '\x4', '\x2', '\x128', '\x128', 
		'\x164', '\x164', '\x4', '\x2', '\x10A', '\x10A', '\x172', '\x172', '\x4', 
		'\x2', '\x108', '\x108', '\x157', '\x157', '\x5', '\x2', '\x44', '\x44', 
		'H', 'H', 'l', 'l', '\x5', '\x2', '&', '&', '\x132', '\x132', '\x14C', 
		'\x14C', '\x5', '\x2', '&', '&', '\x12E', '\x12E', '\x266', '\x266', '\x4', 
		'\x2', '\x45', '\x45', 'O', 'O', '\x5', '\x2', '\x150', '\x150', '\x1AF', 
		'\x1AF', '\x1E6', '\x1E6', '\x4', '\x2', '=', '=', '\x88', '\x88', '\x3', 
		'\x2', '\x3B8', '\x3B9', '\x5', '\x2', '\x14B', '\x14B', '\x16D', '\x16D', 
		'\x19E', '\x19E', '\x4', '\x2', '&', '&', '\x3B8', '\x3B9', '\b', '\x2', 
		'&', '&', '\x118', '\x118', '\x11A', '\x11A', '\x132', '\x132', '\x14C', 
		'\x14C', '\x1C5', '\x1C5', '\x3', '\x2', '\x3B9', '\x3BA', '\x4', '\x2', 
		'\a', '\a', '.', '.', '\x4', '\x2', '\f', '\f', '\x96', '\x96', '\x4', 
		'\x2', '\xA7', '\xA7', '\x21D', '\x21D', '\x4', '\x2', '\x13', '\x13', 
		'}', '}', '\x5', '\x2', '\'', '\'', '\x41', '\x41', '\\', '\\', '\x4', 
		'\x2', '\\', '\\', '\x11C', '\x11C', '\x4', '\x2', '\x114', '\x114', '\x148', 
		'\x148', '\x4', '\x2', 'X', 'X', '\x1DC', '\x1DC', '\x4', '\x2', '\'', 
		'\'', '\\', '\\', '\x4', '\x2', '\b', '\b', ',', ',', '\x4', '\x2', '\xA3', 
		'\xA3', '\x218', '\x218', '\x6', '\x2', '\x14B', '\x14B', '\x16D', '\x16D', 
		'\x19D', '\x19D', '\x1BB', '\x1BB', '\x4', '\x2', '\x14B', '\x14B', '\x19D', 
		'\x19D', '\x4', '\x2', '\r', '\r', ')', ')', '\x5', '\x2', ':', ':', '\x43', 
		'\x43', '\xA1', '\xA1', '\x4', '\x2', ' ', ' ', 'G', 'G', '\x4', '\x2', 
		'T', 'T', '\x80', '\x80', '\x4', '\x2', '\b', '\b', ',', '-', '\x3', '\x2', 
		'\x1F3', '\x1F4', '\x4', '\x2', '\x153', '\x153', '\x1E2', '\x1E2', '\x4', 
		'\x2', '\xBD', '\xBD', '\x175', '\x175', '\a', '\x2', ']', ']', '\x17A', 
		'\x17B', '\x17D', '\x17D', '\x181', '\x189', '\x1C7', '\x1C7', '\x6', 
		'\x2', '\x177', '\x178', '\x17C', '\x17C', '\x17E', '\x17F', '\x1C8', 
		'\x1C8', '\x5', '\x2', '^', '^', '\x176', '\x176', '\x180', '\x180', '\x4', 
		'\x2', '\x166', '\x166', '\x1F5', '\x1F5', '\x4', '\x2', '\x1EF', '\x1EF', 
		'\x1F1', '\x1F1', '\x4', '\x2', '\x102', '\x102', '\x1F6', '\x1F6', '\x4', 
		'\x2', 'N', 'N', '\x1D6', '\x1D6', '\x4', '\x2', '.', '.', '\x126', '\x126', 
		'\x5', '\x2', '\x1D', '\x1D', '\x35', '\x35', '\x9A', '\x9A', '\x5', '\x2', 
		'q', 'q', '\x93', '\x93', '\x151', '\x151', '\x4', '\x2', 'Z', 'Z', '\x9D', 
		'\x9D', '\x4', '\x2', '\x110', '\x110', '\x1E7', '\x1E7', '\x4', '\x2', 
		'$', '$', '\x21A', '\x21A', '\x4', '\x2', '\x64', '\x64', '\x172', '\x172', 
		'\x4', '\x2', '\x144', '\x144', '\x1C1', '\x1C1', '\x6', '\x2', '\xAF', 
		'\xAF', '\xB1', '\xB1', '\xB4', '\xB4', '\x1FE', '\x1FE', '\x4', '\x2', 
		'\x103', '\x103', '\x1C9', '\x1C9', '\x4', '\x2', '<', '<', '\x44', '\x44', 
		'\b', '\x2', 'q', 'q', '\x93', '\x93', '\x98', '\x98', '\x13D', '\x13D', 
		'\x151', '\x151', '\x21A', '\x21A', '\x4', '\x2', '\x197', '\x197', '\x1FB', 
		'\x1FB', '\x4', '\x2', '\x13A', '\x13A', '\x21C', '\x21C', '\x4', '\x2', 
		'q', 'q', '\x151', '\x151', '\x5', '\x2', '\x45', '\x45', 'P', 'P', '\x15E', 
		'\x15E', '\x4', '\x2', '\x1FB', '\x1FB', '\x219', '\x219', '\x4', '\x2', 
		'\x11D', '\x11D', '\x1C0', '\x1C0', '\b', '\x2', '\xBD', '\xBD', '\x137', 
		'\x137', '\x139', '\x139', '\x152', '\x152', '\x1C6', '\x1C6', '\x1E8', 
		'\x1E8', '\x4', '\x2', ')', '*', '\x36', '\x36', '\x5', '\x2', '\x144', 
		'\x144', '\x1B1', '\x1B1', '\x2BE', '\x2BE', '\x4', '\x2', '\x16A', '\x16A', 
		'\x209', '\x209', '\x4', '\x2', '\x3CA', '\x3CA', '\x3CC', '\x3CC', '\x3', 
		'\x2', '\x3CD', '\x3CE', '\x3', '\x2', '\x261', '\x26B', '\x4', '\x2', 
		'\x3B8', '\x3BA', '\x3C3', '\x3C3', '\x4', '\x2', '\x37', '\x37', '\x99', 
		'\x99', '\x4', '\x2', '\x65', '\x65', '\x3C6', '\x3C6', '\x4', '\x2', 
		'\xBB', '\xBC', '\xC3', '\xC6', '\x3', '\x2', '\xAB', '\xB0', '\x3', '\x2', 
		'\xB1', '\xB3', '\x3', '\x2', '\xB4', '\xB5', '\x5', '\x2', '\xB6', '\xB6', 
		'\xBF', '\xC2', '\x106', '\x107', '\x5', '\x2', '\xB7', '\xBA', '\xBD', 
		'\xBE', '\x104', '\x104', '\x4', '\x2', '\x85', '\x85', '\xC7', '\xC7', 
		'\x3', '\x2', '\x270', '\x276', '\x4', '\x2', '\xBD', '\xBD', '\x19B', 
		'\x19B', '\x4', '\x2', '\xB6', '\xB7', '\xB9', '\xB9', '\x4', '\x2', '\x9E', 
		'\x9E', '\x1E5', '\x1E5', '\x4', '\x2', '\xE5', '\xE6', '\xEC', '\xEC', 
		'\x4', '\x2', '!', '!', '\xE3', '\xE6', '\x3', '\x2', '\xEF', '\xF0', 
		'\x5', '\x2', '\x10', '\x10', 'R', 'R', '\x97', '\x97', '\x4', '\x2', 
		'\xBB', '\xBB', '\xBD', '\xBD', '\x5', '\x2', '\r', '\r', ')', ')', '\x32A', 
		'\x32A', '\x5', '\x2', '\xD3', '\xD3', '\xD9', '\xDA', '\xDF', '\xDF', 
		'\x5', '\x2', '\xD4', '\xD6', '\xDB', '\xDE', '\xE0', '\xE2', '\x4', '\x2', 
		'\x1A4', '\x1A4', '\x1B2', '\x1B2', '\x4', '\x2', '\x63', '\x63', '\x3AD', 
		'\x3AD', '\x5', '\x2', '\x37', '\x37', '\x99', '\x99', '\x211', '\x211', 
		'\x4', '\x2', 'w', 'w', '\x81', '\x81', '\x5', '\x2', '\b', '\b', '\xFB', 
		'\xFB', '\x1EB', '\x1EB', '\x6', '\x2', '\x63', '\x63', '\x3A5', '\x3A5', 
		'\x3A7', '\x3A7', '\x3AD', '\x3AE', '\x3', '\x2', '\x3A2', '\x3A9', '\x3', 
		'\x2', '\x239', '\x260', '\x3', '\x2', '\x26C', '\x26F', '\x3', '\x2', 
		'\x230', '\x238', '\x3', '\x2', '\x228', '\x22F', '\x5', '\x2', '\xB6', 
		'\xBA', '\xC4', '\xC4', '\xC7', '\xC7', '!', '\x2', '\xF6', '\x108', '\x10A', 
		'\x10B', '\x10D', '\x110', '\x112', '\x129', '\x12B', '\x134', '\x136', 
		'\x142', '\x145', '\x145', '\x147', '\x14C', '\x14E', '\x14E', '\x150', 
		'\x151', '\x153', '\x155', '\x157', '\x157', '\x159', '\x159', '\x15B', 
		'\x161', '\x163', '\x169', '\x16B', '\x18F', '\x191', '\x194', '\x196', 
		'\x19C', '\x19E', '\x1A7', '\x1A9', '\x1B3', '\x1B5', '\x1C5', '\x1C7', 
		'\x1D4', '\x1D6', '\x1E7', '\x1E9', '\x1EB', '\x1ED', '\x208', '\x20A', 
		'\x20A', '\x20C', '\x20F', '\x211', '\x211', '\x213', '\x214', '\x217', 
		'\x222', '\x266', '\x266', '\v', '\x2', '#', '#', 'T', 'T', '\x80', '\x80', 
		'\xB6', '\xB8', '\xBA', '\xBA', '\xD7', '\xD7', '\xEE', '\xEE', '\x228', 
		'\x22F', '\x270', '\x398', '\x2', '\x1B80', '\x2', '\x26B', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x6', '\x28F', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x291', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x2B6', '\x3', '\x2', '\x2', '\x2', '\f', '\x2C2', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x10', '\x2DE', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x2E3', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x2EF', '\x3', '\x2', '\x2', '\x2', '\x16', '\x30A', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x310', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x312', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x31E', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x33C', '\x3', '\x2', '\x2', '\x2', ' ', '\x35D', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\x390', '\x3', '\x2', '\x2', '\x2', '$', '\x3AA', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x3C6', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x427', '\x3', '\x2', '\x2', '\x2', '*', '\x429', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x43B', '\x3', '\x2', '\x2', '\x2', '.', '\x478', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x48B', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x4C3', '\x3', '\x2', '\x2', '\x2', '\x34', '\x4C5', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x4F1', '\x3', '\x2', '\x2', '\x2', '\x38', '\x4F7', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x4F9', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x50E', '\x3', '\x2', '\x2', '\x2', '>', '\x515', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x517', '\x3', '\x2', '\x2', '\x2', '\x42', '\x525', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x527', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x52B', '\x3', '\x2', '\x2', '\x2', 'H', '\x545', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x555', '\x3', '\x2', '\x2', '\x2', 'L', '\x557', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x567', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x569', '\x3', '\x2', '\x2', '\x2', 'R', '\x583', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x5C7', '\x3', '\x2', '\x2', '\x2', 'V', '\x5C9', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x5E3', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x5EB', '\x3', '\x2', '\x2', '\x2', '\\', '\x609', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x697', '\x3', '\x2', '\x2', '\x2', '`', '\x699', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x69C', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x6E6', '\x3', '\x2', '\x2', '\x2', '\x66', '\x6FD', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\x76C', '\x3', '\x2', '\x2', '\x2', 'j', '\x771', 
		'\x3', '\x2', '\x2', '\x2', 'l', '\x773', '\x3', '\x2', '\x2', '\x2', 
		'n', '\x77D', '\x3', '\x2', '\x2', '\x2', 'p', '\x7B2', '\x3', '\x2', 
		'\x2', '\x2', 'r', '\x7C6', '\x3', '\x2', '\x2', '\x2', 't', '\x7C8', 
		'\x3', '\x2', '\x2', '\x2', 'v', '\x7EB', '\x3', '\x2', '\x2', '\x2', 
		'x', '\x7F4', '\x3', '\x2', '\x2', '\x2', 'z', '\x7FB', '\x3', '\x2', 
		'\x2', '\x2', '|', '\x812', '\x3', '\x2', '\x2', '\x2', '~', '\x81B', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x82A', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x83E', '\x3', '\x2', '\x2', '\x2', '\x84', '\x852', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x9B0', '\x3', '\x2', '\x2', '\x2', '\x88', '\x9B2', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x9B9', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x9C0', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x9D6', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x9DE', '\x3', '\x2', '\x2', '\x2', '\x92', '\x9E5', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x9EC', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x9F3', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9FF', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\xA09', '\x3', '\x2', '\x2', '\x2', '\x9C', '\xA10', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\xA20', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\xA2A', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA2E', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\xA34', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA40', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\xA42', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\xA49', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xA4B', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\xA7D', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xAC7', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xB02', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\xB5A', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB5E', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\xB6F', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB71', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\xB79', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\xB81', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xB83', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\xBA1', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xBD8', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\xBE1', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\xBF5', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xC01', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xC05', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xC26', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\xC3B', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\xC45', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xC49', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\xC62', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xC8C', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\xC8E', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\xC9D', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xCCB', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\xCD5', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xCDF', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\xD09', '\x3', '\x2', '\x2', '\x2', 
		'\xE6', '\xD0B', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xD1C', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\xD22', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xD32', 
		'\x3', '\x2', '\x2', '\x2', '\xEE', '\xD36', '\x3', '\x2', '\x2', '\x2', 
		'\xF0', '\xD5C', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xD82', '\x3', '\x2', 
		'\x2', '\x2', '\xF4', '\xD90', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xD98', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\xD9A', '\x3', '\x2', '\x2', '\x2', 
		'\xFA', '\xDB4', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xDB8', '\x3', '\x2', 
		'\x2', '\x2', '\xFE', '\xDC5', '\x3', '\x2', '\x2', '\x2', '\x100', '\xDD1', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\xDD5', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\xDE6', '\x3', '\x2', '\x2', '\x2', '\x106', '\xDF7', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\xDFA', '\x3', '\x2', '\x2', '\x2', '\x10A', 
		'\xE04', '\x3', '\x2', '\x2', '\x2', '\x10C', '\xE08', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\xE12', '\x3', '\x2', '\x2', '\x2', '\x110', '\xE15', 
		'\x3', '\x2', '\x2', '\x2', '\x112', '\xE1A', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\xE2E', '\x3', '\x2', '\x2', '\x2', '\x116', '\xE30', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\xE41', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\xE4A', '\x3', '\x2', '\x2', '\x2', '\x11C', '\xE53', '\x3', '\x2', '\x2', 
		'\x2', '\x11E', '\xE55', '\x3', '\x2', '\x2', '\x2', '\x120', '\xE63', 
		'\x3', '\x2', '\x2', '\x2', '\x122', '\xE6E', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\xE77', '\x3', '\x2', '\x2', '\x2', '\x126', '\xE7A', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\xE82', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\xE9B', '\x3', '\x2', '\x2', '\x2', '\x12C', '\xEA7', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\xEAA', '\x3', '\x2', '\x2', '\x2', '\x130', '\xECA', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '\xECC', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\xECE', '\x3', '\x2', '\x2', '\x2', '\x136', '\xED0', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\xED2', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\xF07', '\x3', '\x2', '\x2', '\x2', '\x13C', '\xF09', '\x3', '\x2', '\x2', 
		'\x2', '\x13E', '\xF0F', '\x3', '\x2', '\x2', '\x2', '\x140', '\xF23', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '\xF31', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\xF3C', '\x3', '\x2', '\x2', '\x2', '\x146', '\xF3E', '\x3', 
		'\x2', '\x2', '\x2', '\x148', '\xF44', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\xF4E', '\x3', '\x2', '\x2', '\x2', '\x14C', '\xF52', '\x3', '\x2', '\x2', 
		'\x2', '\x14E', '\xF59', '\x3', '\x2', '\x2', '\x2', '\x150', '\xF5D', 
		'\x3', '\x2', '\x2', '\x2', '\x152', '\xF63', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\xF6A', '\x3', '\x2', '\x2', '\x2', '\x156', '\xF70', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\xF76', '\x3', '\x2', '\x2', '\x2', '\x15A', 
		'\xF7B', '\x3', '\x2', '\x2', '\x2', '\x15C', '\xFA9', '\x3', '\x2', '\x2', 
		'\x2', '\x15E', '\xFBE', '\x3', '\x2', '\x2', '\x2', '\x160', '\xFD7', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\xFDA', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\xFE0', '\x3', '\x2', '\x2', '\x2', '\x166', '\xFF0', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\xFFF', '\x3', '\x2', '\x2', '\x2', '\x16A', 
		'\x1005', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x1023', '\x3', '\x2', 
		'\x2', '\x2', '\x16E', '\x1025', '\x3', '\x2', '\x2', '\x2', '\x170', 
		'\x102C', '\x3', '\x2', '\x2', '\x2', '\x172', '\x1038', '\x3', '\x2', 
		'\x2', '\x2', '\x174', '\x103E', '\x3', '\x2', '\x2', '\x2', '\x176', 
		'\x1057', '\x3', '\x2', '\x2', '\x2', '\x178', '\x105B', '\x3', '\x2', 
		'\x2', '\x2', '\x17A', '\x105F', '\x3', '\x2', '\x2', '\x2', '\x17C', 
		'\x106A', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x10A8', '\x3', '\x2', 
		'\x2', '\x2', '\x180', '\x10E0', '\x3', '\x2', '\x2', '\x2', '\x182', 
		'\x10E2', '\x3', '\x2', '\x2', '\x2', '\x184', '\x10EF', '\x3', '\x2', 
		'\x2', '\x2', '\x186', '\x1121', '\x3', '\x2', '\x2', '\x2', '\x188', 
		'\x1133', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x1165', '\x3', '\x2', 
		'\x2', '\x2', '\x18C', '\x1167', '\x3', '\x2', '\x2', '\x2', '\x18E', 
		'\x1174', '\x3', '\x2', '\x2', '\x2', '\x190', '\x117F', '\x3', '\x2', 
		'\x2', '\x2', '\x192', '\x119A', '\x3', '\x2', '\x2', '\x2', '\x194', 
		'\x11A4', '\x3', '\x2', '\x2', '\x2', '\x196', '\x11AE', '\x3', '\x2', 
		'\x2', '\x2', '\x198', '\x11B0', '\x3', '\x2', '\x2', '\x2', '\x19A', 
		'\x11BA', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x11BD', '\x3', '\x2', 
		'\x2', '\x2', '\x19E', '\x11EE', '\x3', '\x2', '\x2', '\x2', '\x1A0', 
		'\x11FD', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x11FF', '\x3', '\x2', 
		'\x2', '\x2', '\x1A4', '\x1203', '\x3', '\x2', '\x2', '\x2', '\x1A6', 
		'\x120A', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1213', '\x3', '\x2', 
		'\x2', '\x2', '\x1AA', '\x1219', '\x3', '\x2', '\x2', '\x2', '\x1AC', 
		'\x1220', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1236', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0', '\x1238', '\x3', '\x2', '\x2', '\x2', '\x1B2', 
		'\x1243', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1249', '\x3', '\x2', 
		'\x2', '\x2', '\x1B6', '\x1272', '\x3', '\x2', '\x2', '\x2', '\x1B8', 
		'\x130B', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1317', '\x3', '\x2', 
		'\x2', '\x2', '\x1BC', '\x1326', '\x3', '\x2', '\x2', '\x2', '\x1BE', 
		'\x132C', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x133F', '\x3', '\x2', 
		'\x2', '\x2', '\x1C2', '\x1349', '\x3', '\x2', '\x2', '\x2', '\x1C4', 
		'\x1357', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1359', '\x3', '\x2', 
		'\x2', '\x2', '\x1C8', '\x135C', '\x3', '\x2', '\x2', '\x2', '\x1CA', 
		'\x1372', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x137E', '\x3', '\x2', 
		'\x2', '\x2', '\x1CE', '\x1387', '\x3', '\x2', '\x2', '\x2', '\x1D0', 
		'\x1393', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1397', '\x3', '\x2', 
		'\x2', '\x2', '\x1D4', '\x1399', '\x3', '\x2', '\x2', '\x2', '\x1D6', 
		'\x13C1', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x13C8', '\x3', '\x2', 
		'\x2', '\x2', '\x1DA', '\x13CA', '\x3', '\x2', '\x2', '\x2', '\x1DC', 
		'\x13E1', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x13E7', '\x3', '\x2', 
		'\x2', '\x2', '\x1E0', '\x13EF', '\x3', '\x2', '\x2', '\x2', '\x1E2', 
		'\x13F2', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x13FF', '\x3', '\x2', 
		'\x2', '\x2', '\x1E6', '\x1401', '\x3', '\x2', '\x2', '\x2', '\x1E8', 
		'\x1407', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1409', '\x3', '\x2', 
		'\x2', '\x2', '\x1EC', '\x1410', '\x3', '\x2', '\x2', '\x2', '\x1EE', 
		'\x141A', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x141C', '\x3', '\x2', 
		'\x2', '\x2', '\x1F2', '\x1422', '\x3', '\x2', '\x2', '\x2', '\x1F4', 
		'\x1426', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1428', '\x3', '\x2', 
		'\x2', '\x2', '\x1F8', '\x142A', '\x3', '\x2', '\x2', '\x2', '\x1FA', 
		'\x143C', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x144C', '\x3', '\x2', 
		'\x2', '\x2', '\x1FE', '\x1450', '\x3', '\x2', '\x2', '\x2', '\x200', 
		'\x1455', '\x3', '\x2', '\x2', '\x2', '\x202', '\x1460', '\x3', '\x2', 
		'\x2', '\x2', '\x204', '\x1465', '\x3', '\x2', '\x2', '\x2', '\x206', 
		'\x1467', '\x3', '\x2', '\x2', '\x2', '\x208', '\x146B', '\x3', '\x2', 
		'\x2', '\x2', '\x20A', '\x1484', '\x3', '\x2', '\x2', '\x2', '\x20C', 
		'\x1486', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x1489', '\x3', '\x2', 
		'\x2', '\x2', '\x210', '\x148E', '\x3', '\x2', '\x2', '\x2', '\x212', 
		'\x149E', '\x3', '\x2', '\x2', '\x2', '\x214', '\x14EB', '\x3', '\x2', 
		'\x2', '\x2', '\x216', '\x1503', '\x3', '\x2', '\x2', '\x2', '\x218', 
		'\x1505', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x1509', '\x3', '\x2', 
		'\x2', '\x2', '\x21C', '\x150F', '\x3', '\x2', '\x2', '\x2', '\x21E', 
		'\x1517', '\x3', '\x2', '\x2', '\x2', '\x220', '\x151F', '\x3', '\x2', 
		'\x2', '\x2', '\x222', '\x1527', '\x3', '\x2', '\x2', '\x2', '\x224', 
		'\x1532', '\x3', '\x2', '\x2', '\x2', '\x226', '\x153A', '\x3', '\x2', 
		'\x2', '\x2', '\x228', '\x1542', '\x3', '\x2', '\x2', '\x2', '\x22A', 
		'\x154A', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x1552', '\x3', '\x2', 
		'\x2', '\x2', '\x22E', '\x1562', '\x3', '\x2', '\x2', '\x2', '\x230', 
		'\x1572', '\x3', '\x2', '\x2', '\x2', '\x232', '\x1576', '\x3', '\x2', 
		'\x2', '\x2', '\x234', '\x1578', '\x3', '\x2', '\x2', '\x2', '\x236', 
		'\x157B', '\x3', '\x2', '\x2', '\x2', '\x238', '\x1590', '\x3', '\x2', 
		'\x2', '\x2', '\x23A', '\x162F', '\x3', '\x2', '\x2', '\x2', '\x23C', 
		'\x1631', '\x3', '\x2', '\x2', '\x2', '\x23E', '\x1644', '\x3', '\x2', 
		'\x2', '\x2', '\x240', '\x1646', '\x3', '\x2', '\x2', '\x2', '\x242', 
		'\x1682', '\x3', '\x2', '\x2', '\x2', '\x244', '\x169B', '\x3', '\x2', 
		'\x2', '\x2', '\x246', '\x169D', '\x3', '\x2', '\x2', '\x2', '\x248', 
		'\x16A6', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x16B8', '\x3', '\x2', 
		'\x2', '\x2', '\x24C', '\x16C5', '\x3', '\x2', '\x2', '\x2', '\x24E', 
		'\x16D0', '\x3', '\x2', '\x2', '\x2', '\x250', '\x1740', '\x3', '\x2', 
		'\x2', '\x2', '\x252', '\x1752', '\x3', '\x2', '\x2', '\x2', '\x254', 
		'\x1762', '\x3', '\x2', '\x2', '\x2', '\x256', '\x176B', '\x3', '\x2', 
		'\x2', '\x2', '\x258', '\x1774', '\x3', '\x2', '\x2', '\x2', '\x25A', 
		'\x1776', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x1778', '\x3', '\x2', 
		'\x2', '\x2', '\x25E', '\x177A', '\x3', '\x2', '\x2', '\x2', '\x260', 
		'\x177C', '\x3', '\x2', '\x2', '\x2', '\x262', '\x177E', '\x3', '\x2', 
		'\x2', '\x2', '\x264', '\x1780', '\x3', '\x2', '\x2', '\x2', '\x266', 
		'\x1782', '\x3', '\x2', '\x2', '\x2', '\x268', '\x1784', '\x3', '\x2', 
		'\x2', '\x2', '\x26A', '\x26C', '\x5', '\x4', '\x3', '\x2', '\x26B', '\x26A', 
		'\x3', '\x2', '\x2', '\x2', '\x26B', '\x26C', '\x3', '\x2', '\x2', '\x2', 
		'\x26C', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x26D', '\x26F', '\a', 
		'\x3A6', '\x2', '\x2', '\x26E', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x26E', 
		'\x26F', '\x3', '\x2', '\x2', '\x2', '\x26F', '\x270', '\x3', '\x2', '\x2', 
		'\x2', '\x270', '\x271', '\a', '\x2', '\x2', '\x3', '\x271', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x272', '\x274', '\x5', '\x6', '\x4', '\x2', '\x273', 
		'\x275', '\a', '\x3A6', '\x2', '\x2', '\x274', '\x273', '\x3', '\x2', 
		'\x2', '\x2', '\x274', '\x275', '\x3', '\x2', '\x2', '\x2', '\x275', '\x276', 
		'\x3', '\x2', '\x2', '\x2', '\x276', '\x277', '\a', '\x3B6', '\x2', '\x2', 
		'\x277', '\x27A', '\x3', '\x2', '\x2', '\x2', '\x278', '\x27A', '\x5', 
		'\b', '\x5', '\x2', '\x279', '\x272', '\x3', '\x2', '\x2', '\x2', '\x279', 
		'\x278', '\x3', '\x2', '\x2', '\x2', '\x27A', '\x27D', '\x3', '\x2', '\x2', 
		'\x2', '\x27B', '\x279', '\x3', '\x2', '\x2', '\x2', '\x27B', '\x27C', 
		'\x3', '\x2', '\x2', '\x2', '\x27C', '\x286', '\x3', '\x2', '\x2', '\x2', 
		'\x27D', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x283', '\x5', 
		'\x6', '\x4', '\x2', '\x27F', '\x281', '\a', '\x3A6', '\x2', '\x2', '\x280', 
		'\x27F', '\x3', '\x2', '\x2', '\x2', '\x280', '\x281', '\x3', '\x2', '\x2', 
		'\x2', '\x281', '\x282', '\x3', '\x2', '\x2', '\x2', '\x282', '\x284', 
		'\a', '\x3B6', '\x2', '\x2', '\x283', '\x280', '\x3', '\x2', '\x2', '\x2', 
		'\x283', '\x284', '\x3', '\x2', '\x2', '\x2', '\x284', '\x287', '\x3', 
		'\x2', '\x2', '\x2', '\x285', '\x287', '\x5', '\b', '\x5', '\x2', '\x286', 
		'\x27E', '\x3', '\x2', '\x2', '\x2', '\x286', '\x285', '\x3', '\x2', '\x2', 
		'\x2', '\x287', '\x5', '\x3', '\x2', '\x2', '\x2', '\x288', '\x290', '\x5', 
		'\n', '\x6', '\x2', '\x289', '\x290', '\x5', '\f', '\a', '\x2', '\x28A', 
		'\x290', '\x5', '\xE', '\b', '\x2', '\x28B', '\x290', '\x5', '\x10', '\t', 
		'\x2', '\x28C', '\x290', '\x5', '\x12', '\n', '\x2', '\x28D', '\x290', 
		'\x5', '\x16', '\f', '\x2', '\x28E', '\x290', '\x5', '\x18', '\r', '\x2', 
		'\x28F', '\x288', '\x3', '\x2', '\x2', '\x2', '\x28F', '\x289', '\x3', 
		'\x2', '\x2', '\x2', '\x28F', '\x28A', '\x3', '\x2', '\x2', '\x2', '\x28F', 
		'\x28B', '\x3', '\x2', '\x2', '\x2', '\x28F', '\x28C', '\x3', '\x2', '\x2', 
		'\x2', '\x28F', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x28F', '\x28E', 
		'\x3', '\x2', '\x2', '\x2', '\x290', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x291', '\x292', '\a', '\x3B6', '\x2', '\x2', '\x292', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x293', '\x2B7', '\x5', '\x1A', '\xE', '\x2', '\x294', 
		'\x2B7', '\x5', '\x1C', '\xF', '\x2', '\x295', '\x2B7', '\x5', '\x1E', 
		'\x10', '\x2', '\x296', '\x2B7', '\x5', ' ', '\x11', '\x2', '\x297', '\x2B7', 
		'\x5', '\"', '\x12', '\x2', '\x298', '\x2B7', '\x5', '$', '\x13', '\x2', 
		'\x299', '\x2B7', '\x5', '&', '\x14', '\x2', '\x29A', '\x2B7', '\x5', 
		'(', '\x15', '\x2', '\x29B', '\x2B7', '\x5', '*', '\x16', '\x2', '\x29C', 
		'\x2B7', '\x5', ',', '\x17', '\x2', '\x29D', '\x2B7', '\x5', '.', '\x18', 
		'\x2', '\x29E', '\x2B7', '\x5', '\x30', '\x19', '\x2', '\x29F', '\x2B7', 
		'\x5', 'r', ':', '\x2', '\x2A0', '\x2B7', '\x5', 't', ';', '\x2', '\x2A1', 
		'\x2B7', '\x5', 'v', '<', '\x2', '\x2A2', '\x2B7', '\x5', 'x', '=', '\x2', 
		'\x2A3', '\x2B7', '\x5', 'z', '>', '\x2', '\x2A4', '\x2B7', '\x5', '|', 
		'?', '\x2', '\x2A5', '\x2B7', '\x5', '~', '@', '\x2', '\x2A6', '\x2B7', 
		'\x5', '\x80', '\x41', '\x2', '\x2A7', '\x2B7', '\x5', '\x82', '\x42', 
		'\x2', '\x2A8', '\x2B7', '\x5', '\x84', '\x43', '\x2', '\x2A9', '\x2B7', 
		'\x5', '\x88', '\x45', '\x2', '\x2AA', '\x2B7', '\x5', '\x8A', '\x46', 
		'\x2', '\x2AB', '\x2B7', '\x5', '\x8C', 'G', '\x2', '\x2AC', '\x2B7', 
		'\x5', '\x8E', 'H', '\x2', '\x2AD', '\x2B7', '\x5', '\x90', 'I', '\x2', 
		'\x2AE', '\x2B7', '\x5', '\x92', 'J', '\x2', '\x2AF', '\x2B7', '\x5', 
		'\x94', 'K', '\x2', '\x2B0', '\x2B7', '\x5', '\x96', 'L', '\x2', '\x2B1', 
		'\x2B7', '\x5', '\x98', 'M', '\x2', '\x2B2', '\x2B7', '\x5', '\x9A', 'N', 
		'\x2', '\x2B3', '\x2B7', '\x5', '\x9C', 'O', '\x2', '\x2B4', '\x2B7', 
		'\x5', '\x9E', 'P', '\x2', '\x2B5', '\x2B7', '\x5', '\xA2', 'R', '\x2', 
		'\x2B6', '\x293', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x294', '\x3', 
		'\x2', '\x2', '\x2', '\x2B6', '\x295', '\x3', '\x2', '\x2', '\x2', '\x2B6', 
		'\x296', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x297', '\x3', '\x2', '\x2', 
		'\x2', '\x2B6', '\x298', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x299', 
		'\x3', '\x2', '\x2', '\x2', '\x2B6', '\x29A', '\x3', '\x2', '\x2', '\x2', 
		'\x2B6', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x29C', '\x3', 
		'\x2', '\x2', '\x2', '\x2B6', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x2B6', 
		'\x29E', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x29F', '\x3', '\x2', '\x2', 
		'\x2', '\x2B6', '\x2A0', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2A1', 
		'\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2A2', '\x3', '\x2', '\x2', '\x2', 
		'\x2B6', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2A4', '\x3', 
		'\x2', '\x2', '\x2', '\x2B6', '\x2A5', '\x3', '\x2', '\x2', '\x2', '\x2B6', 
		'\x2A6', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2A7', '\x3', '\x2', '\x2', 
		'\x2', '\x2B6', '\x2A8', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2A9', 
		'\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2AA', '\x3', '\x2', '\x2', '\x2', 
		'\x2B6', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2AC', '\x3', 
		'\x2', '\x2', '\x2', '\x2B6', '\x2AD', '\x3', '\x2', '\x2', '\x2', '\x2B6', 
		'\x2AE', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2AF', '\x3', '\x2', '\x2', 
		'\x2', '\x2B6', '\x2B0', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B1', 
		'\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B2', '\x3', '\x2', '\x2', '\x2', 
		'\x2B6', '\x2B3', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B4', '\x3', 
		'\x2', '\x2', '\x2', '\x2B6', '\x2B5', '\x3', '\x2', '\x2', '\x2', '\x2B7', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x2B8', '\x2C3', '\x5', '\xB4', '[', 
		'\x2', '\x2B9', '\x2C3', '\x5', '\xAC', 'W', '\x2', '\x2BA', '\x2C3', 
		'\x5', '\xB6', '\\', '\x2', '\x2BB', '\x2C3', '\x5', '\xA6', 'T', '\x2', 
		'\x2BC', '\x2C3', '\x5', '\xB2', 'Z', '\x2', '\x2BD', '\x2C3', '\x5', 
		'\xA4', 'S', '\x2', '\x2BE', '\x2C3', '\x5', '\xAE', 'X', '\x2', '\x2BF', 
		'\x2C3', '\x5', '\xB0', 'Y', '\x2', '\x2C0', '\x2C3', '\x5', '\xA8', 'U', 
		'\x2', '\x2C1', '\x2C3', '\x5', '\xAA', 'V', '\x2', '\x2C2', '\x2B8', 
		'\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2B9', '\x3', '\x2', '\x2', '\x2', 
		'\x2C2', '\x2BA', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2BB', '\x3', 
		'\x2', '\x2', '\x2', '\x2C2', '\x2BC', '\x3', '\x2', '\x2', '\x2', '\x2C2', 
		'\x2BD', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2BE', '\x3', '\x2', '\x2', 
		'\x2', '\x2C2', '\x2BF', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C0', 
		'\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C1', '\x3', '\x2', '\x2', '\x2', 
		'\x2C3', '\r', '\x3', '\x2', '\x2', '\x2', '\x2C4', '\x2CE', '\x5', '\xFE', 
		'\x80', '\x2', '\x2C5', '\x2CE', '\x5', '\x100', '\x81', '\x2', '\x2C6', 
		'\x2CE', '\x5', '\x102', '\x82', '\x2', '\x2C7', '\x2CE', '\x5', '\x104', 
		'\x83', '\x2', '\x2C8', '\x2CE', '\x5', '\x106', '\x84', '\x2', '\x2C9', 
		'\x2CE', '\x5', '\x108', '\x85', '\x2', '\x2CA', '\x2CE', '\x5', '\x10A', 
		'\x86', '\x2', '\x2CB', '\x2CE', '\x5', '\x10C', '\x87', '\x2', '\x2CC', 
		'\x2CE', '\x5', '\x10E', '\x88', '\x2', '\x2CD', '\x2C4', '\x3', '\x2', 
		'\x2', '\x2', '\x2CD', '\x2C5', '\x3', '\x2', '\x2', '\x2', '\x2CD', '\x2C6', 
		'\x3', '\x2', '\x2', '\x2', '\x2CD', '\x2C7', '\x3', '\x2', '\x2', '\x2', 
		'\x2CD', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2CD', '\x2C9', '\x3', 
		'\x2', '\x2', '\x2', '\x2CD', '\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2CD', 
		'\x2CB', '\x3', '\x2', '\x2', '\x2', '\x2CD', '\x2CC', '\x3', '\x2', '\x2', 
		'\x2', '\x2CE', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2CF', '\x2DF', '\x5', 
		'\x11E', '\x90', '\x2', '\x2D0', '\x2DF', '\x5', '\x120', '\x91', '\x2', 
		'\x2D1', '\x2DF', '\x5', '\x122', '\x92', '\x2', '\x2D2', '\x2DF', '\x5', 
		'\x124', '\x93', '\x2', '\x2D3', '\x2DF', '\x5', '\x126', '\x94', '\x2', 
		'\x2D4', '\x2DF', '\x5', '\x128', '\x95', '\x2', '\x2D5', '\x2DF', '\x5', 
		'\x12A', '\x96', '\x2', '\x2D6', '\x2DF', '\x5', '\x12C', '\x97', '\x2', 
		'\x2D7', '\x2DF', '\x5', '\x12E', '\x98', '\x2', '\x2D8', '\x2DF', '\x5', 
		'\x146', '\xA4', '\x2', '\x2D9', '\x2DF', '\x5', '\x148', '\xA5', '\x2', 
		'\x2DA', '\x2DF', '\x5', '\x14A', '\xA6', '\x2', '\x2DB', '\x2DF', '\x5', 
		'\x14C', '\xA7', '\x2', '\x2DC', '\x2DF', '\x5', '\x14E', '\xA8', '\x2', 
		'\x2DD', '\x2DF', '\x5', '\x150', '\xA9', '\x2', '\x2DE', '\x2CF', '\x3', 
		'\x2', '\x2', '\x2', '\x2DE', '\x2D0', '\x3', '\x2', '\x2', '\x2', '\x2DE', 
		'\x2D1', '\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2D2', '\x3', '\x2', '\x2', 
		'\x2', '\x2DE', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2D4', 
		'\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2D5', '\x3', '\x2', '\x2', '\x2', 
		'\x2DE', '\x2D6', '\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2D7', '\x3', 
		'\x2', '\x2', '\x2', '\x2DE', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2DE', 
		'\x2D9', '\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2DA', '\x3', '\x2', '\x2', 
		'\x2', '\x2DE', '\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2DC', 
		'\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2DD', '\x3', '\x2', '\x2', '\x2', 
		'\x2DF', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2E0', '\x2E4', '\x5', 
		'\x152', '\xAA', '\x2', '\x2E1', '\x2E4', '\x5', '\x154', '\xAB', '\x2', 
		'\x2E2', '\x2E4', '\x5', '\x156', '\xAC', '\x2', '\x2E3', '\x2E0', '\x3', 
		'\x2', '\x2', '\x2', '\x2E3', '\x2E1', '\x3', '\x2', '\x2', '\x2', '\x2E3', 
		'\x2E2', '\x3', '\x2', '\x2', '\x2', '\x2E4', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x2E5', '\x2F0', '\x5', '\x15A', '\xAE', '\x2', '\x2E6', '\x2F0', 
		'\x5', '\x15C', '\xAF', '\x2', '\x2E7', '\x2F0', '\x5', '\x15E', '\xB0', 
		'\x2', '\x2E8', '\x2F0', '\x5', '\x162', '\xB2', '\x2', '\x2E9', '\x2F0', 
		'\x5', '\x164', '\xB3', '\x2', '\x2EA', '\x2F0', '\x5', '\x166', '\xB4', 
		'\x2', '\x2EB', '\x2F0', '\x5', '\x16A', '\xB6', '\x2', '\x2EC', '\x2F0', 
		'\x5', '\x160', '\xB1', '\x2', '\x2ED', '\x2F0', '\x5', '\x168', '\xB5', 
		'\x2', '\x2EE', '\x2F0', '\x5', '\x16C', '\xB7', '\x2', '\x2EF', '\x2E5', 
		'\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2E6', '\x3', '\x2', '\x2', '\x2', 
		'\x2EF', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2E8', '\x3', 
		'\x2', '\x2', '\x2', '\x2EF', '\x2E9', '\x3', '\x2', '\x2', '\x2', '\x2EF', 
		'\x2EA', '\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2EB', '\x3', '\x2', '\x2', 
		'\x2', '\x2EF', '\x2EC', '\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2ED', 
		'\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2EE', '\x3', '\x2', '\x2', '\x2', 
		'\x2F0', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2F1', '\x30B', '\x5', 
		'\x17E', '\xC0', '\x2', '\x2F2', '\x30B', '\x5', '\x180', '\xC1', '\x2', 
		'\x2F3', '\x30B', '\x5', '\x182', '\xC2', '\x2', '\x2F4', '\x30B', '\x5', 
		'\x184', '\xC3', '\x2', '\x2F5', '\x30B', '\x5', '\x186', '\xC4', '\x2', 
		'\x2F6', '\x30B', '\x5', '\x188', '\xC5', '\x2', '\x2F7', '\x30B', '\x5', 
		'\x18A', '\xC6', '\x2', '\x2F8', '\x30B', '\x5', '\x18C', '\xC7', '\x2', 
		'\x2F9', '\x30B', '\x5', '\x1A4', '\xD3', '\x2', '\x2FA', '\x30B', '\x5', 
		'\x1A6', '\xD4', '\x2', '\x2FB', '\x30B', '\x5', '\x1A8', '\xD5', '\x2', 
		'\x2FC', '\x30B', '\x5', '\x1AA', '\xD6', '\x2', '\x2FD', '\x30B', '\x5', 
		'\x1AC', '\xD7', '\x2', '\x2FE', '\x30B', '\x5', '\x1B0', '\xD9', '\x2', 
		'\x2FF', '\x30B', '\x5', '\x1B2', '\xDA', '\x2', '\x300', '\x30B', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x301', '\x30B', '\x5', '\x1B6', '\xDC', '\x2', 
		'\x302', '\x30B', '\x5', '\x1B8', '\xDD', '\x2', '\x303', '\x30B', '\x5', 
		'\x1C6', '\xE4', '\x2', '\x304', '\x30B', '\x5', '\x1C8', '\xE5', '\x2', 
		'\x305', '\x30B', '\x5', '\x1CA', '\xE6', '\x2', '\x306', '\x30B', '\x5', 
		'\x1CC', '\xE7', '\x2', '\x307', '\x30B', '\x5', '\x1CE', '\xE8', '\x2', 
		'\x308', '\x30B', '\x5', '\x1D0', '\xE9', '\x2', '\x309', '\x30B', '\x5', 
		'\x1D2', '\xEA', '\x2', '\x30A', '\x2F1', '\x3', '\x2', '\x2', '\x2', 
		'\x30A', '\x2F2', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x2F3', '\x3', 
		'\x2', '\x2', '\x2', '\x30A', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\x30A', 
		'\x2F5', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x2F6', '\x3', '\x2', '\x2', 
		'\x2', '\x30A', '\x2F7', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x2F8', 
		'\x3', '\x2', '\x2', '\x2', '\x30A', '\x2F9', '\x3', '\x2', '\x2', '\x2', 
		'\x30A', '\x2FA', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x2FB', '\x3', 
		'\x2', '\x2', '\x2', '\x30A', '\x2FC', '\x3', '\x2', '\x2', '\x2', '\x30A', 
		'\x2FD', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x2FE', '\x3', '\x2', '\x2', 
		'\x2', '\x30A', '\x2FF', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x300', 
		'\x3', '\x2', '\x2', '\x2', '\x30A', '\x301', '\x3', '\x2', '\x2', '\x2', 
		'\x30A', '\x302', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x303', '\x3', 
		'\x2', '\x2', '\x2', '\x30A', '\x304', '\x3', '\x2', '\x2', '\x2', '\x30A', 
		'\x305', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x306', '\x3', '\x2', '\x2', 
		'\x2', '\x30A', '\x307', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x308', 
		'\x3', '\x2', '\x2', '\x2', '\x30A', '\x309', '\x3', '\x2', '\x2', '\x2', 
		'\x30B', '\x17', '\x3', '\x2', '\x2', '\x2', '\x30C', '\x311', '\x5', 
		'\x1DC', '\xEF', '\x2', '\x30D', '\x311', '\x5', '\x1DE', '\xF0', '\x2', 
		'\x30E', '\x311', '\x5', '\x1E0', '\xF1', '\x2', '\x30F', '\x311', '\x5', 
		'\x1E2', '\xF2', '\x2', '\x310', '\x30C', '\x3', '\x2', '\x2', '\x2', 
		'\x310', '\x30D', '\x3', '\x2', '\x2', '\x2', '\x310', '\x30E', '\x3', 
		'\x2', '\x2', '\x2', '\x310', '\x30F', '\x3', '\x2', '\x2', '\x2', '\x311', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x312', '\x313', '\a', '\x1F', '\x2', 
		'\x2', '\x313', '\x315', '\t', '\x2', '\x2', '\x2', '\x314', '\x316', 
		'\x5', '\x236', '\x11C', '\x2', '\x315', '\x314', '\x3', '\x2', '\x2', 
		'\x2', '\x315', '\x316', '\x3', '\x2', '\x2', '\x2', '\x316', '\x317', 
		'\x3', '\x2', '\x2', '\x2', '\x317', '\x31B', '\x5', '\x200', '\x101', 
		'\x2', '\x318', '\x31A', '\x5', '\x32', '\x1A', '\x2', '\x319', '\x318', 
		'\x3', '\x2', '\x2', '\x2', '\x31A', '\x31D', '\x3', '\x2', '\x2', '\x2', 
		'\x31B', '\x319', '\x3', '\x2', '\x2', '\x2', '\x31B', '\x31C', '\x3', 
		'\x2', '\x2', '\x2', '\x31C', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x31D', 
		'\x31B', '\x3', '\x2', '\x2', '\x2', '\x31E', '\x320', '\a', '\x1F', '\x2', 
		'\x2', '\x31F', '\x321', '\x5', '\x34', '\x1B', '\x2', '\x320', '\x31F', 
		'\x3', '\x2', '\x2', '\x2', '\x320', '\x321', '\x3', '\x2', '\x2', '\x2', 
		'\x321', '\x322', '\x3', '\x2', '\x2', '\x2', '\x322', '\x324', '\a', 
		'\x13D', '\x2', '\x2', '\x323', '\x325', '\x5', '\x236', '\x11C', '\x2', 
		'\x324', '\x323', '\x3', '\x2', '\x2', '\x2', '\x324', '\x325', '\x3', 
		'\x2', '\x2', '\x2', '\x325', '\x326', '\x3', '\x2', '\x2', '\x2', '\x326', 
		'\x327', '\x5', '\x1E6', '\xF4', '\x2', '\x327', '\x328', '\a', '\x66', 
		'\x2', '\x2', '\x328', '\x329', '\a', '\x1DF', '\x2', '\x2', '\x329', 
		'\x330', '\x5', '\x36', '\x1C', '\x2', '\x32A', '\x32B', '\a', '\x66', 
		'\x2', '\x2', '\x32B', '\x32D', '\a', '\x119', '\x2', '\x2', '\x32C', 
		'\x32E', '\a', '\x63', '\x2', '\x2', '\x32D', '\x32C', '\x3', '\x2', '\x2', 
		'\x2', '\x32D', '\x32E', '\x3', '\x2', '\x2', '\x2', '\x32E', '\x32F', 
		'\x3', '\x2', '\x2', '\x2', '\x32F', '\x331', '\a', '\x1BA', '\x2', '\x2', 
		'\x330', '\x32A', '\x3', '\x2', '\x2', '\x2', '\x330', '\x331', '\x3', 
		'\x2', '\x2', '\x2', '\x331', '\x333', '\x3', '\x2', '\x2', '\x2', '\x332', 
		'\x334', '\x5', '>', ' ', '\x2', '\x333', '\x332', '\x3', '\x2', '\x2', 
		'\x2', '\x333', '\x334', '\x3', '\x2', '\x2', '\x2', '\x334', '\x337', 
		'\x3', '\x2', '\x2', '\x2', '\x335', '\x336', '\a', '\x116', '\x2', '\x2', 
		'\x336', '\x338', '\a', '\x3C2', '\x2', '\x2', '\x337', '\x335', '\x3', 
		'\x2', '\x2', '\x2', '\x337', '\x338', '\x3', '\x2', '\x2', '\x2', '\x338', 
		'\x339', '\x3', '\x2', '\x2', '\x2', '\x339', '\x33A', '\a', '\x12F', 
		'\x2', '\x2', '\x33A', '\x33B', '\x5', '\x158', '\xAD', '\x2', '\x33B', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x33C', '\x33E', '\a', '\x1F', '\x2', 
		'\x2', '\x33D', '\x33F', '\t', '\x3', '\x2', '\x2', '\x33E', '\x33D', 
		'\x3', '\x2', '\x2', '\x2', '\x33E', '\x33F', '\x3', '\x2', '\x2', '\x2', 
		'\x33F', '\x341', '\x3', '\x2', '\x2', '\x2', '\x340', '\x342', '\t', 
		'\x4', '\x2', '\x2', '\x341', '\x340', '\x3', '\x2', '\x2', '\x2', '\x341', 
		'\x342', '\x3', '\x2', '\x2', '\x2', '\x342', '\x343', '\x3', '\x2', '\x2', 
		'\x2', '\x343', '\x344', '\a', '\x45', '\x2', '\x2', '\x344', '\x346', 
		'\x5', '\x200', '\x101', '\x2', '\x345', '\x347', '\x5', '@', '!', '\x2', 
		'\x346', '\x345', '\x3', '\x2', '\x2', '\x2', '\x346', '\x347', '\x3', 
		'\x2', '\x2', '\x2', '\x347', '\x348', '\x3', '\x2', '\x2', '\x2', '\x348', 
		'\x349', '\a', '\x66', '\x2', '\x2', '\x349', '\x34A', '\x5', '\x1E8', 
		'\xF5', '\x2', '\x34A', '\x34E', '\x5', '\x222', '\x112', '\x2', '\x34B', 
		'\x34D', '\x5', '\x42', '\"', '\x2', '\x34C', '\x34B', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x350', '\x3', '\x2', '\x2', '\x2', '\x34E', '\x34C', 
		'\x3', '\x2', '\x2', '\x2', '\x34E', '\x34F', '\x3', '\x2', '\x2', '\x2', 
		'\x34F', '\x35B', '\x3', '\x2', '\x2', '\x2', '\x350', '\x34E', '\x3', 
		'\x2', '\x2', '\x2', '\x351', '\x353', '\a', '\xFA', '\x2', '\x2', '\x352', 
		'\x354', '\a', '\x3AA', '\x2', '\x2', '\x353', '\x352', '\x3', '\x2', 
		'\x2', '\x2', '\x353', '\x354', '\x3', '\x2', '\x2', '\x2', '\x354', '\x355', 
		'\x3', '\x2', '\x2', '\x2', '\x355', '\x35C', '\t', '\x5', '\x2', '\x2', 
		'\x356', '\x358', '\a', 'Z', '\x2', '\x2', '\x357', '\x359', '\a', '\x3AA', 
		'\x2', '\x2', '\x358', '\x357', '\x3', '\x2', '\x2', '\x2', '\x358', '\x359', 
		'\x3', '\x2', '\x2', '\x2', '\x359', '\x35A', '\x3', '\x2', '\x2', '\x2', 
		'\x35A', '\x35C', '\t', '\x6', '\x2', '\x2', '\x35B', '\x351', '\x3', 
		'\x2', '\x2', '\x2', '\x35B', '\x356', '\x3', '\x2', '\x2', '\x2', '\x35B', 
		'\x35C', '\x3', '\x2', '\x2', '\x2', '\x35C', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x35D', '\x35E', '\a', '\x1F', '\x2', '\x2', '\x35E', '\x35F', 
		'\a', '\x173', '\x2', '\x2', '\x35F', '\x360', '\a', '?', '\x2', '\x2', 
		'\x360', '\x361', '\x5', '\x200', '\x101', '\x2', '\x361', '\x362', '\a', 
		'\a', '\x2', '\x2', '\x362', '\x363', '\a', '\x20E', '\x2', '\x2', '\x363', 
		'\x369', '\a', '\x3C2', '\x2', '\x2', '\x364', '\x366', '\a', '\x15F', 
		'\x2', '\x2', '\x365', '\x367', '\a', '\x3AA', '\x2', '\x2', '\x366', 
		'\x365', '\x3', '\x2', '\x2', '\x2', '\x366', '\x367', '\x3', '\x2', '\x2', 
		'\x2', '\x367', '\x368', '\x3', '\x2', '\x2', '\x2', '\x368', '\x36A', 
		'\x5', '\x208', '\x105', '\x2', '\x369', '\x364', '\x3', '\x2', '\x2', 
		'\x2', '\x369', '\x36A', '\x3', '\x2', '\x2', '\x2', '\x36A', '\x370', 
		'\x3', '\x2', '\x2', '\x2', '\x36B', '\x36D', '\a', '\x20F', '\x2', '\x2', 
		'\x36C', '\x36E', '\a', '\x3AA', '\x2', '\x2', '\x36D', '\x36C', '\x3', 
		'\x2', '\x2', '\x2', '\x36D', '\x36E', '\x3', '\x2', '\x2', '\x2', '\x36E', 
		'\x36F', '\x3', '\x2', '\x2', '\x2', '\x36F', '\x371', '\x5', '\x208', 
		'\x105', '\x2', '\x370', '\x36B', '\x3', '\x2', '\x2', '\x2', '\x370', 
		'\x371', '\x3', '\x2', '\x2', '\x2', '\x371', '\x377', '\x3', '\x2', '\x2', 
		'\x2', '\x372', '\x374', '\a', '\x1C4', '\x2', '\x2', '\x373', '\x375', 
		'\a', '\x3AA', '\x2', '\x2', '\x374', '\x373', '\x3', '\x2', '\x2', '\x2', 
		'\x374', '\x375', '\x3', '\x2', '\x2', '\x2', '\x375', '\x376', '\x3', 
		'\x2', '\x2', '\x2', '\x376', '\x378', '\x5', '\x208', '\x105', '\x2', 
		'\x377', '\x372', '\x3', '\x2', '\x2', '\x2', '\x377', '\x378', '\x3', 
		'\x2', '\x2', '\x2', '\x378', '\x37E', '\x3', '\x2', '\x2', '\x2', '\x379', 
		'\x37B', '\a', '\x19F', '\x2', '\x2', '\x37A', '\x37C', '\a', '\x3AA', 
		'\x2', '\x2', '\x37B', '\x37A', '\x3', '\x2', '\x2', '\x2', '\x37B', '\x37C', 
		'\x3', '\x2', '\x2', '\x2', '\x37C', '\x37D', '\x3', '\x2', '\x2', '\x2', 
		'\x37D', '\x37F', '\x5', '\x200', '\x101', '\x2', '\x37E', '\x379', '\x3', 
		'\x2', '\x2', '\x2', '\x37E', '\x37F', '\x3', '\x2', '\x2', '\x2', '\x37F', 
		'\x381', '\x3', '\x2', '\x2', '\x2', '\x380', '\x382', '\a', '\x21B', 
		'\x2', '\x2', '\x381', '\x380', '\x3', '\x2', '\x2', '\x2', '\x381', '\x382', 
		'\x3', '\x2', '\x2', '\x2', '\x382', '\x388', '\x3', '\x2', '\x2', '\x2', 
		'\x383', '\x385', '\a', '\x116', '\x2', '\x2', '\x384', '\x386', '\a', 
		'\x3AA', '\x2', '\x2', '\x385', '\x384', '\x3', '\x2', '\x2', '\x2', '\x385', 
		'\x386', '\x3', '\x2', '\x2', '\x2', '\x386', '\x387', '\x3', '\x2', '\x2', 
		'\x2', '\x387', '\x389', '\a', '\x3C2', '\x2', '\x2', '\x388', '\x383', 
		'\x3', '\x2', '\x2', '\x2', '\x388', '\x389', '\x3', '\x2', '\x2', '\x2', 
		'\x389', '\x38A', '\x3', '\x2', '\x2', '\x2', '\x38A', '\x38C', '\a', 
		'\x137', '\x2', '\x2', '\x38B', '\x38D', '\a', '\x3AA', '\x2', '\x2', 
		'\x38C', '\x38B', '\x3', '\x2', '\x2', '\x2', '\x38C', '\x38D', '\x3', 
		'\x2', '\x2', '\x2', '\x38D', '\x38E', '\x3', '\x2', '\x2', '\x2', '\x38E', 
		'\x38F', '\x5', '\x1F6', '\xFC', '\x2', '\x38F', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x390', '\x392', '\a', '\x1F', '\x2', '\x2', '\x391', '\x393', 
		'\x5', '\x34', '\x1B', '\x2', '\x392', '\x391', '\x3', '\x2', '\x2', '\x2', 
		'\x392', '\x393', '\x3', '\x2', '\x2', '\x2', '\x393', '\x394', '\x3', 
		'\x2', '\x2', '\x2', '\x394', '\x395', '\a', 'q', '\x2', '\x2', '\x395', 
		'\x396', '\x5', '\x1E6', '\xF4', '\x2', '\x396', '\x398', '\a', '\x3B3', 
		'\x2', '\x2', '\x397', '\x399', '\x5', '\x44', '#', '\x2', '\x398', '\x397', 
		'\x3', '\x2', '\x2', '\x2', '\x398', '\x399', '\x3', '\x2', '\x2', '\x2', 
		'\x399', '\x39E', '\x3', '\x2', '\x2', '\x2', '\x39A', '\x39B', '\a', 
		'\x3B5', '\x2', '\x2', '\x39B', '\x39D', '\x5', '\x44', '#', '\x2', '\x39C', 
		'\x39A', '\x3', '\x2', '\x2', '\x2', '\x39D', '\x3A0', '\x3', '\x2', '\x2', 
		'\x2', '\x39E', '\x39C', '\x3', '\x2', '\x2', '\x2', '\x39E', '\x39F', 
		'\x3', '\x2', '\x2', '\x2', '\x39F', '\x3A1', '\x3', '\x2', '\x2', '\x2', 
		'\x3A0', '\x39E', '\x3', '\x2', '\x2', '\x2', '\x3A1', '\x3A5', '\a', 
		'\x3B4', '\x2', '\x2', '\x3A2', '\x3A4', '\x5', 'H', '%', '\x2', '\x3A3', 
		'\x3A2', '\x3', '\x2', '\x2', '\x2', '\x3A4', '\x3A7', '\x3', '\x2', '\x2', 
		'\x2', '\x3A5', '\x3A3', '\x3', '\x2', '\x2', '\x2', '\x3A5', '\x3A6', 
		'\x3', '\x2', '\x2', '\x2', '\x3A6', '\x3A8', '\x3', '\x2', '\x2', '\x2', 
		'\x3A7', '\x3A5', '\x3', '\x2', '\x2', '\x2', '\x3A8', '\x3A9', '\x5', 
		'\x158', '\xAD', '\x2', '\x3A9', '#', '\x3', '\x2', '\x2', '\x2', '\x3AA', 
		'\x3AC', '\a', '\x1F', '\x2', '\x2', '\x3AB', '\x3AD', '\x5', '\x34', 
		'\x1B', '\x2', '\x3AC', '\x3AB', '\x3', '\x2', '\x2', '\x2', '\x3AC', 
		'\x3AD', '\x3', '\x2', '\x2', '\x2', '\x3AD', '\x3AE', '\x3', '\x2', '\x2', 
		'\x2', '\x3AE', '\x3AF', '\a', '\x151', '\x2', '\x2', '\x3AF', '\x3B0', 
		'\x5', '\x1E6', '\xF4', '\x2', '\x3B0', '\x3B2', '\a', '\x3B3', '\x2', 
		'\x2', '\x3B1', '\x3B3', '\x5', '\x46', '$', '\x2', '\x3B2', '\x3B1', 
		'\x3', '\x2', '\x2', '\x2', '\x3B2', '\x3B3', '\x3', '\x2', '\x2', '\x2', 
		'\x3B3', '\x3B8', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3B5', '\a', 
		'\x3B5', '\x2', '\x2', '\x3B5', '\x3B7', '\x5', '\x46', '$', '\x2', '\x3B6', 
		'\x3B4', '\x3', '\x2', '\x2', '\x2', '\x3B7', '\x3BA', '\x3', '\x2', '\x2', 
		'\x2', '\x3B8', '\x3B6', '\x3', '\x2', '\x2', '\x2', '\x3B8', '\x3B9', 
		'\x3', '\x2', '\x2', '\x2', '\x3B9', '\x3BB', '\x3', '\x2', '\x2', '\x2', 
		'\x3BA', '\x3B8', '\x3', '\x2', '\x2', '\x2', '\x3BB', '\x3BC', '\a', 
		'\x3B4', '\x2', '\x2', '\x3BC', '\x3BD', '\a', '\x1D7', '\x2', '\x2', 
		'\x3BD', '\x3C1', '\x5', '\x214', '\x10B', '\x2', '\x3BE', '\x3C0', '\x5', 
		'H', '%', '\x2', '\x3BF', '\x3BE', '\x3', '\x2', '\x2', '\x2', '\x3C0', 
		'\x3C3', '\x3', '\x2', '\x2', '\x2', '\x3C1', '\x3BF', '\x3', '\x2', '\x2', 
		'\x2', '\x3C1', '\x3C2', '\x3', '\x2', '\x2', '\x2', '\x3C2', '\x3C4', 
		'\x3', '\x2', '\x2', '\x2', '\x3C3', '\x3C1', '\x3', '\x2', '\x2', '\x2', 
		'\x3C4', '\x3C5', '\x5', '\x158', '\xAD', '\x2', '\x3C5', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x3C6', '\x3C7', '\a', '\x1F', '\x2', '\x2', '\x3C7', 
		'\x3C8', '\a', '\x1E1', '\x2', '\x2', '\x3C8', '\x3C9', '\x5', '\x200', 
		'\x101', '\x2', '\x3C9', '\x3CA', '\a', ';', '\x2', '\x2', '\x3CA', '\x3CB', 
		'\a', '\x124', '\x2', '\x2', '\x3CB', '\x3CC', '\a', '\x21F', '\x2', '\x2', 
		'\x3CC', '\x3CD', '\t', '\a', '\x2', '\x2', '\x3CD', '\x3CE', '\a', '\x1AA', 
		'\x2', '\x2', '\x3CE', '\x3CF', '\a', '\x3B3', '\x2', '\x2', '\x3CF', 
		'\x3D4', '\x5', 'J', '&', '\x2', '\x3D0', '\x3D1', '\a', '\x3B5', '\x2', 
		'\x2', '\x3D1', '\x3D3', '\x5', 'J', '&', '\x2', '\x3D2', '\x3D0', '\x3', 
		'\x2', '\x2', '\x2', '\x3D3', '\x3D6', '\x3', '\x2', '\x2', '\x2', '\x3D4', 
		'\x3D2', '\x3', '\x2', '\x2', '\x2', '\x3D4', '\x3D5', '\x3', '\x2', '\x2', 
		'\x2', '\x3D5', '\x3D7', '\x3', '\x2', '\x2', '\x2', '\x3D6', '\x3D4', 
		'\x3', '\x2', '\x2', '\x2', '\x3D7', '\x3D8', '\a', '\x3B4', '\x2', '\x2', 
		'\x3D8', '\'', '\x3', '\x2', '\x2', '\x2', '\x3D9', '\x3DB', '\a', '\x1F', 
		'\x2', '\x2', '\x3DA', '\x3DC', '\a', '\x206', '\x2', '\x2', '\x3DB', 
		'\x3DA', '\x3', '\x2', '\x2', '\x2', '\x3DB', '\x3DC', '\x3', '\x2', '\x2', 
		'\x2', '\x3DC', '\x3DD', '\x3', '\x2', '\x2', '\x2', '\x3DD', '\x3DF', 
		'\a', '\x93', '\x2', '\x2', '\x3DE', '\x3E0', '\x5', '\x236', '\x11C', 
		'\x2', '\x3DF', '\x3DE', '\x3', '\x2', '\x2', '\x2', '\x3DF', '\x3E0', 
		'\x3', '\x2', '\x2', '\x2', '\x3E0', '\x3E1', '\x3', '\x2', '\x2', '\x2', 
		'\x3E1', '\x3E9', '\x5', '\x1E8', '\xF5', '\x2', '\x3E2', '\x3E3', '\a', 
		'U', '\x2', '\x2', '\x3E3', '\x3EA', '\x5', '\x1E8', '\xF5', '\x2', '\x3E4', 
		'\x3E5', '\a', '\x3B3', '\x2', '\x2', '\x3E5', '\x3E6', '\a', 'U', '\x2', 
		'\x2', '\x3E6', '\x3E7', '\x5', '\x1E8', '\xF5', '\x2', '\x3E7', '\x3E8', 
		'\a', '\x3B4', '\x2', '\x2', '\x3E8', '\x3EA', '\x3', '\x2', '\x2', '\x2', 
		'\x3E9', '\x3E2', '\x3', '\x2', '\x2', '\x2', '\x3E9', '\x3E4', '\x3', 
		'\x2', '\x2', '\x2', '\x3EA', '\x428', '\x3', '\x2', '\x2', '\x2', '\x3EB', 
		'\x3ED', '\a', '\x1F', '\x2', '\x2', '\x3EC', '\x3EE', '\a', '\x206', 
		'\x2', '\x2', '\x3ED', '\x3EC', '\x3', '\x2', '\x2', '\x2', '\x3ED', '\x3EE', 
		'\x3', '\x2', '\x2', '\x2', '\x3EE', '\x3EF', '\x3', '\x2', '\x2', '\x2', 
		'\x3EF', '\x3F1', '\a', '\x93', '\x2', '\x2', '\x3F0', '\x3F2', '\x5', 
		'\x236', '\x11C', '\x2', '\x3F1', '\x3F0', '\x3', '\x2', '\x2', '\x2', 
		'\x3F1', '\x3F2', '\x3', '\x2', '\x2', '\x2', '\x3F2', '\x3F3', '\x3', 
		'\x2', '\x2', '\x2', '\x3F3', '\x3F5', '\x5', '\x1E8', '\xF5', '\x2', 
		'\x3F4', '\x3F6', '\x5', 'L', '\'', '\x2', '\x3F5', '\x3F4', '\x3', '\x2', 
		'\x2', '\x2', '\x3F5', '\x3F6', '\x3', '\x2', '\x2', '\x2', '\x3F6', '\x401', 
		'\x3', '\x2', '\x2', '\x2', '\x3F7', '\x3FE', '\x5', '^', '\x30', '\x2', 
		'\x3F8', '\x3FA', '\a', '\x3B5', '\x2', '\x2', '\x3F9', '\x3F8', '\x3', 
		'\x2', '\x2', '\x2', '\x3F9', '\x3FA', '\x3', '\x2', '\x2', '\x2', '\x3FA', 
		'\x3FB', '\x3', '\x2', '\x2', '\x2', '\x3FB', '\x3FD', '\x5', '^', '\x30', 
		'\x2', '\x3FC', '\x3F9', '\x3', '\x2', '\x2', '\x2', '\x3FD', '\x400', 
		'\x3', '\x2', '\x2', '\x2', '\x3FE', '\x3FC', '\x3', '\x2', '\x2', '\x2', 
		'\x3FE', '\x3FF', '\x3', '\x2', '\x2', '\x2', '\x3FF', '\x402', '\x3', 
		'\x2', '\x2', '\x2', '\x400', '\x3FE', '\x3', '\x2', '\x2', '\x2', '\x401', 
		'\x3F7', '\x3', '\x2', '\x2', '\x2', '\x401', '\x402', '\x3', '\x2', '\x2', 
		'\x2', '\x402', '\x404', '\x3', '\x2', '\x2', '\x2', '\x403', '\x405', 
		'\x5', '\x62', '\x32', '\x2', '\x404', '\x403', '\x3', '\x2', '\x2', '\x2', 
		'\x404', '\x405', '\x3', '\x2', '\x2', '\x2', '\x405', '\x407', '\x3', 
		'\x2', '\x2', '\x2', '\x406', '\x408', '\t', '\b', '\x2', '\x2', '\x407', 
		'\x406', '\x3', '\x2', '\x2', '\x2', '\x407', '\x408', '\x3', '\x2', '\x2', 
		'\x2', '\x408', '\x40A', '\x3', '\x2', '\x2', '\x2', '\x409', '\x40B', 
		'\a', '\f', '\x2', '\x2', '\x40A', '\x409', '\x3', '\x2', '\x2', '\x2', 
		'\x40A', '\x40B', '\x3', '\x2', '\x2', '\x2', '\x40B', '\x40C', '\x3', 
		'\x2', '\x2', '\x2', '\x40C', '\x40D', '\x5', '\xB4', '[', '\x2', '\x40D', 
		'\x428', '\x3', '\x2', '\x2', '\x2', '\x40E', '\x410', '\a', '\x1F', '\x2', 
		'\x2', '\x40F', '\x411', '\a', '\x206', '\x2', '\x2', '\x410', '\x40F', 
		'\x3', '\x2', '\x2', '\x2', '\x410', '\x411', '\x3', '\x2', '\x2', '\x2', 
		'\x411', '\x412', '\x3', '\x2', '\x2', '\x2', '\x412', '\x414', '\a', 
		'\x93', '\x2', '\x2', '\x413', '\x415', '\x5', '\x236', '\x11C', '\x2', 
		'\x414', '\x413', '\x3', '\x2', '\x2', '\x2', '\x414', '\x415', '\x3', 
		'\x2', '\x2', '\x2', '\x415', '\x416', '\x3', '\x2', '\x2', '\x2', '\x416', 
		'\x417', '\x5', '\x1E8', '\xF5', '\x2', '\x417', '\x422', '\x5', 'L', 
		'\'', '\x2', '\x418', '\x41F', '\x5', '^', '\x30', '\x2', '\x419', '\x41B', 
		'\a', '\x3B5', '\x2', '\x2', '\x41A', '\x419', '\x3', '\x2', '\x2', '\x2', 
		'\x41A', '\x41B', '\x3', '\x2', '\x2', '\x2', '\x41B', '\x41C', '\x3', 
		'\x2', '\x2', '\x2', '\x41C', '\x41E', '\x5', '^', '\x30', '\x2', '\x41D', 
		'\x41A', '\x3', '\x2', '\x2', '\x2', '\x41E', '\x421', '\x3', '\x2', '\x2', 
		'\x2', '\x41F', '\x41D', '\x3', '\x2', '\x2', '\x2', '\x41F', '\x420', 
		'\x3', '\x2', '\x2', '\x2', '\x420', '\x423', '\x3', '\x2', '\x2', '\x2', 
		'\x421', '\x41F', '\x3', '\x2', '\x2', '\x2', '\x422', '\x418', '\x3', 
		'\x2', '\x2', '\x2', '\x422', '\x423', '\x3', '\x2', '\x2', '\x2', '\x423', 
		'\x425', '\x3', '\x2', '\x2', '\x2', '\x424', '\x426', '\x5', '\x62', 
		'\x32', '\x2', '\x425', '\x424', '\x3', '\x2', '\x2', '\x2', '\x425', 
		'\x426', '\x3', '\x2', '\x2', '\x2', '\x426', '\x428', '\x3', '\x2', '\x2', 
		'\x2', '\x427', '\x3D9', '\x3', '\x2', '\x2', '\x2', '\x427', '\x3EB', 
		'\x3', '\x2', '\x2', '\x2', '\x427', '\x40E', '\x3', '\x2', '\x2', '\x2', 
		'\x428', ')', '\x3', '\x2', '\x2', '\x2', '\x429', '\x42A', '\a', '\x1F', 
		'\x2', '\x2', '\x42A', '\x42B', '\a', '\x205', '\x2', '\x2', '\x42B', 
		'\x42C', '\x5', '\x200', '\x101', '\x2', '\x42C', '\x42D', '\a', '\a', 
		'\x2', '\x2', '\x42D', '\x42E', '\a', '\x125', '\x2', '\x2', '\x42E', 
		'\x432', '\a', '\x3C2', '\x2', '\x2', '\x42F', '\x430', '\a', '\x149', 
		'\x2', '\x2', '\x430', '\x431', '\a', '\x3AA', '\x2', '\x2', '\x431', 
		'\x433', '\x5', '\x208', '\x105', '\x2', '\x432', '\x42F', '\x3', '\x2', 
		'\x2', '\x2', '\x432', '\x433', '\x3', '\x2', '\x2', '\x2', '\x433', '\x439', 
		'\x3', '\x2', '\x2', '\x2', '\x434', '\x436', '\a', '\x137', '\x2', '\x2', 
		'\x435', '\x437', '\a', '\x3AA', '\x2', '\x2', '\x436', '\x435', '\x3', 
		'\x2', '\x2', '\x2', '\x436', '\x437', '\x3', '\x2', '\x2', '\x2', '\x437', 
		'\x438', '\x3', '\x2', '\x2', '\x2', '\x438', '\x43A', '\x5', '\x1F6', 
		'\xFC', '\x2', '\x439', '\x434', '\x3', '\x2', '\x2', '\x2', '\x439', 
		'\x43A', '\x3', '\x2', '\x2', '\x2', '\x43A', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x43B', '\x43C', '\a', '\x1F', '\x2', '\x2', '\x43C', '\x43D', 
		'\a', '\x205', '\x2', '\x2', '\x43D', '\x43E', '\x5', '\x200', '\x101', 
		'\x2', '\x43E', '\x43F', '\a', '\a', '\x2', '\x2', '\x43F', '\x440', '\a', 
		'\x125', '\x2', '\x2', '\x440', '\x441', '\a', '\x3C2', '\x2', '\x2', 
		'\x441', '\x442', '\a', '\xA1', '\x2', '\x2', '\x442', '\x443', '\a', 
		'\x173', '\x2', '\x2', '\x443', '\x444', '\a', '?', '\x2', '\x2', '\x444', 
		'\x44A', '\x5', '\x200', '\x101', '\x2', '\x445', '\x447', '\a', '\x145', 
		'\x2', '\x2', '\x446', '\x448', '\a', '\x3AA', '\x2', '\x2', '\x447', 
		'\x446', '\x3', '\x2', '\x2', '\x2', '\x447', '\x448', '\x3', '\x2', '\x2', 
		'\x2', '\x448', '\x449', '\x3', '\x2', '\x2', '\x2', '\x449', '\x44B', 
		'\x5', '\x208', '\x105', '\x2', '\x44A', '\x445', '\x3', '\x2', '\x2', 
		'\x2', '\x44A', '\x44B', '\x3', '\x2', '\x2', '\x2', '\x44B', '\x451', 
		'\x3', '\x2', '\x2', '\x2', '\x44C', '\x44E', '\a', '\x15F', '\x2', '\x2', 
		'\x44D', '\x44F', '\a', '\x3AA', '\x2', '\x2', '\x44E', '\x44D', '\x3', 
		'\x2', '\x2', '\x2', '\x44E', '\x44F', '\x3', '\x2', '\x2', '\x2', '\x44F', 
		'\x450', '\x3', '\x2', '\x2', '\x2', '\x450', '\x452', '\x5', '\x208', 
		'\x105', '\x2', '\x451', '\x44C', '\x3', '\x2', '\x2', '\x2', '\x451', 
		'\x452', '\x3', '\x2', '\x2', '\x2', '\x452', '\x458', '\x3', '\x2', '\x2', 
		'\x2', '\x453', '\x455', '\a', '\xFF', '\x2', '\x2', '\x454', '\x456', 
		'\a', '\x3AA', '\x2', '\x2', '\x455', '\x454', '\x3', '\x2', '\x2', '\x2', 
		'\x455', '\x456', '\x3', '\x2', '\x2', '\x2', '\x456', '\x457', '\x3', 
		'\x2', '\x2', '\x2', '\x457', '\x459', '\x5', '\x208', '\x105', '\x2', 
		'\x458', '\x453', '\x3', '\x2', '\x2', '\x2', '\x458', '\x459', '\x3', 
		'\x2', '\x2', '\x2', '\x459', '\x45F', '\x3', '\x2', '\x2', '\x2', '\x45A', 
		'\x45C', '\a', '\x18D', '\x2', '\x2', '\x45B', '\x45D', '\a', '\x3AA', 
		'\x2', '\x2', '\x45C', '\x45B', '\x3', '\x2', '\x2', '\x2', '\x45C', '\x45D', 
		'\x3', '\x2', '\x2', '\x2', '\x45D', '\x45E', '\x3', '\x2', '\x2', '\x2', 
		'\x45E', '\x460', '\x5', '\x208', '\x105', '\x2', '\x45F', '\x45A', '\x3', 
		'\x2', '\x2', '\x2', '\x45F', '\x460', '\x3', '\x2', '\x2', '\x2', '\x460', 
		'\x466', '\x3', '\x2', '\x2', '\x2', '\x461', '\x463', '\a', '\x19F', 
		'\x2', '\x2', '\x462', '\x464', '\a', '\x3AA', '\x2', '\x2', '\x463', 
		'\x462', '\x3', '\x2', '\x2', '\x2', '\x463', '\x464', '\x3', '\x2', '\x2', 
		'\x2', '\x464', '\x465', '\x3', '\x2', '\x2', '\x2', '\x465', '\x467', 
		'\x5', '\x200', '\x101', '\x2', '\x466', '\x461', '\x3', '\x2', '\x2', 
		'\x2', '\x466', '\x467', '\x3', '\x2', '\x2', '\x2', '\x467', '\x469', 
		'\x3', '\x2', '\x2', '\x2', '\x468', '\x46A', '\a', '\x21B', '\x2', '\x2', 
		'\x469', '\x468', '\x3', '\x2', '\x2', '\x2', '\x469', '\x46A', '\x3', 
		'\x2', '\x2', '\x2', '\x46A', '\x470', '\x3', '\x2', '\x2', '\x2', '\x46B', 
		'\x46D', '\a', '\x116', '\x2', '\x2', '\x46C', '\x46E', '\a', '\x3AA', 
		'\x2', '\x2', '\x46D', '\x46C', '\x3', '\x2', '\x2', '\x2', '\x46D', '\x46E', 
		'\x3', '\x2', '\x2', '\x2', '\x46E', '\x46F', '\x3', '\x2', '\x2', '\x2', 
		'\x46F', '\x471', '\a', '\x3C2', '\x2', '\x2', '\x470', '\x46B', '\x3', 
		'\x2', '\x2', '\x2', '\x470', '\x471', '\x3', '\x2', '\x2', '\x2', '\x471', 
		'\x472', '\x3', '\x2', '\x2', '\x2', '\x472', '\x474', '\a', '\x137', 
		'\x2', '\x2', '\x473', '\x475', '\a', '\x3AA', '\x2', '\x2', '\x474', 
		'\x473', '\x3', '\x2', '\x2', '\x2', '\x474', '\x475', '\x3', '\x2', '\x2', 
		'\x2', '\x475', '\x476', '\x3', '\x2', '\x2', '\x2', '\x476', '\x477', 
		'\x5', '\x1F6', '\xFC', '\x2', '\x477', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x478', '\x47A', '\a', '\x1F', '\x2', '\x2', '\x479', '\x47B', '\x5', 
		'\x34', '\x1B', '\x2', '\x47A', '\x479', '\x3', '\x2', '\x2', '\x2', '\x47A', 
		'\x47B', '\x3', '\x2', '\x2', '\x2', '\x47B', '\x47C', '\x3', '\x2', '\x2', 
		'\x2', '\x47C', '\x47D', '\a', '\x98', '\x2', '\x2', '\x47D', '\x47E', 
		'\x5', '\x1E6', '\xF4', '\x2', '\x47E', '\x47F', '\t', '\t', '\x2', '\x2', 
		'\x47F', '\x480', '\t', '\n', '\x2', '\x2', '\x480', '\x481', '\a', '\x66', 
		'\x2', '\x2', '\x481', '\x482', '\x5', '\x1E8', '\xF5', '\x2', '\x482', 
		'\x483', '\a', '\x39', '\x2', '\x2', '\x483', '\x484', '\a', '/', '\x2', 
		'\x2', '\x484', '\x487', '\a', '\x1DB', '\x2', '\x2', '\x485', '\x486', 
		'\t', '\v', '\x2', '\x2', '\x486', '\x488', '\x5', '\x1E6', '\xF4', '\x2', 
		'\x487', '\x485', '\x3', '\x2', '\x2', '\x2', '\x487', '\x488', '\x3', 
		'\x2', '\x2', '\x2', '\x488', '\x489', '\x3', '\x2', '\x2', '\x2', '\x489', 
		'\x48A', '\x5', '\x158', '\xAD', '\x2', '\x48A', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x48B', '\x48E', '\a', '\x1F', '\x2', '\x2', '\x48C', '\x48D', 
		'\a', 'j', '\x2', '\x2', '\x48D', '\x48F', '\a', '{', '\x2', '\x2', '\x48E', 
		'\x48C', '\x3', '\x2', '\x2', '\x2', '\x48E', '\x48F', '\x3', '\x2', '\x2', 
		'\x2', '\x48F', '\x493', '\x3', '\x2', '\x2', '\x2', '\x490', '\x491', 
		'\a', '\xFA', '\x2', '\x2', '\x491', '\x492', '\a', '\x3AA', '\x2', '\x2', 
		'\x492', '\x494', '\t', '\f', '\x2', '\x2', '\x493', '\x490', '\x3', '\x2', 
		'\x2', '\x2', '\x493', '\x494', '\x3', '\x2', '\x2', '\x2', '\x494', '\x496', 
		'\x3', '\x2', '\x2', '\x2', '\x495', '\x497', '\x5', '\x34', '\x1B', '\x2', 
		'\x496', '\x495', '\x3', '\x2', '\x2', '\x2', '\x496', '\x497', '\x3', 
		'\x2', '\x2', '\x2', '\x497', '\x49B', '\x3', '\x2', '\x2', '\x2', '\x498', 
		'\x499', '\a', '\x89', '\x2', '\x2', '\x499', '\x49A', '\a', '\x1E0', 
		'\x2', '\x2', '\x49A', '\x49C', '\t', '\r', '\x2', '\x2', '\x49B', '\x498', 
		'\x3', '\x2', '\x2', '\x2', '\x49B', '\x49C', '\x3', '\x2', '\x2', '\x2', 
		'\x49C', '\x49D', '\x3', '\x2', '\x2', '\x2', '\x49D', '\x49E', '\a', 
		'\x21A', '\x2', '\x2', '\x49E', '\x4A3', '\x5', '\x1E6', '\xF4', '\x2', 
		'\x49F', '\x4A0', '\a', '\x3B3', '\x2', '\x2', '\x4A0', '\x4A1', '\x5', 
		'\x21E', '\x110', '\x2', '\x4A1', '\x4A2', '\a', '\x3B4', '\x2', '\x2', 
		'\x4A2', '\x4A4', '\x3', '\x2', '\x2', '\x2', '\x4A3', '\x49F', '\x3', 
		'\x2', '\x2', '\x2', '\x4A3', '\x4A4', '\x3', '\x2', '\x2', '\x2', '\x4A4', 
		'\x4A5', '\x3', '\x2', '\x2', '\x2', '\x4A5', '\x4A6', '\a', '\f', '\x2', 
		'\x2', '\x4A6', '\x4AD', '\x5', '\xB4', '[', '\x2', '\x4A7', '\x4A9', 
		'\a', '\xA7', '\x2', '\x2', '\x4A8', '\x4AA', '\t', '\xE', '\x2', '\x2', 
		'\x4A9', '\x4A8', '\x3', '\x2', '\x2', '\x2', '\x4A9', '\x4AA', '\x3', 
		'\x2', '\x2', '\x2', '\x4AA', '\x4AB', '\x3', '\x2', '\x2', '\x2', '\x4AB', 
		'\x4AC', '\a', '\x18', '\x2', '\x2', '\x4AC', '\x4AE', '\a', 'h', '\x2', 
		'\x2', '\x4AD', '\x4A7', '\x3', '\x2', '\x2', '\x2', '\x4AD', '\x4AE', 
		'\x3', '\x2', '\x2', '\x2', '\x4AE', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x4AF', '\x4B1', '\a', '&', '\x2', '\x2', '\x4B0', '\x4AF', '\x3', '\x2', 
		'\x2', '\x2', '\x4B0', '\x4B1', '\x3', '\x2', '\x2', '\x2', '\x4B1', '\x4B5', 
		'\x3', '\x2', '\x2', '\x2', '\x4B2', '\x4B3', '\a', '\x17', '\x2', '\x2', 
		'\x4B3', '\x4B6', '\a', '\x85', '\x2', '\x2', '\x4B4', '\x4B6', '\a', 
		'\x293', '\x2', '\x2', '\x4B5', '\x4B2', '\x3', '\x2', '\x2', '\x2', '\x4B5', 
		'\x4B4', '\x3', '\x2', '\x2', '\x2', '\x4B6', '\x4B8', '\x3', '\x2', '\x2', 
		'\x2', '\x4B7', '\x4B9', '\a', '\x3AA', '\x2', '\x2', '\x4B8', '\x4B7', 
		'\x3', '\x2', '\x2', '\x2', '\x4B8', '\x4B9', '\x3', '\x2', '\x2', '\x2', 
		'\x4B9', '\x4BA', '\x3', '\x2', '\x2', '\x2', '\x4BA', '\x4C4', '\x5', 
		'\x1F2', '\xFA', '\x2', '\x4BB', '\x4BD', '\a', '&', '\x2', '\x2', '\x4BC', 
		'\x4BB', '\x3', '\x2', '\x2', '\x2', '\x4BC', '\x4BD', '\x3', '\x2', '\x2', 
		'\x2', '\x4BD', '\x4BE', '\x3', '\x2', '\x2', '\x2', '\x4BE', '\x4C0', 
		'\a', '\x19', '\x2', '\x2', '\x4BF', '\x4C1', '\a', '\x3AA', '\x2', '\x2', 
		'\x4C0', '\x4BF', '\x3', '\x2', '\x2', '\x2', '\x4C0', '\x4C1', '\x3', 
		'\x2', '\x2', '\x2', '\x4C1', '\x4C2', '\x3', '\x2', '\x2', '\x2', '\x4C2', 
		'\x4C4', '\x5', '\x1F4', '\xFB', '\x2', '\x4C3', '\x4B0', '\x3', '\x2', 
		'\x2', '\x2', '\x4C3', '\x4BC', '\x3', '\x2', '\x2', '\x2', '\x4C4', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x4C5', '\x4C6', '\a', '\x128', '\x2', '\x2', 
		'\x4C6', '\x4CD', '\a', '\x3AA', '\x2', '\x2', '\x4C7', '\x4CE', '\x5', 
		'\x1EE', '\xF8', '\x2', '\x4C8', '\x4CB', '\a', '!', '\x2', '\x2', '\x4C9', 
		'\x4CA', '\a', '\x3B3', '\x2', '\x2', '\x4CA', '\x4CC', '\a', '\x3B4', 
		'\x2', '\x2', '\x4CB', '\x4C9', '\x3', '\x2', '\x2', '\x2', '\x4CB', '\x4CC', 
		'\x3', '\x2', '\x2', '\x2', '\x4CC', '\x4CE', '\x3', '\x2', '\x2', '\x2', 
		'\x4CD', '\x4C7', '\x3', '\x2', '\x2', '\x2', '\x4CD', '\x4C8', '\x3', 
		'\x2', '\x2', '\x2', '\x4CE', '\x35', '\x3', '\x2', '\x2', '\x2', '\x4CF', 
		'\x4D0', '\a', '\xFC', '\x2', '\x2', '\x4D0', '\x4D4', '\x5', '\x38', 
		'\x1D', '\x2', '\x4D1', '\x4D3', '\x5', ':', '\x1E', '\x2', '\x4D2', '\x4D1', 
		'\x3', '\x2', '\x2', '\x2', '\x4D3', '\x4D6', '\x3', '\x2', '\x2', '\x2', 
		'\x4D4', '\x4D2', '\x3', '\x2', '\x2', '\x2', '\x4D4', '\x4D5', '\x3', 
		'\x2', '\x2', '\x2', '\x4D5', '\x4F2', '\x3', '\x2', '\x2', '\x2', '\x4D6', 
		'\x4D4', '\x3', '\x2', '\x2', '\x2', '\x4D7', '\x4DA', '\a', '\x13F', 
		'\x2', '\x2', '\x4D8', '\x4DB', '\x5', '\x206', '\x104', '\x2', '\x4D9', 
		'\x4DB', '\x5', '\x24C', '\x127', '\x2', '\x4DA', '\x4D8', '\x3', '\x2', 
		'\x2', '\x2', '\x4DA', '\x4D9', '\x3', '\x2', '\x2', '\x2', '\x4DB', '\x4DC', 
		'\x3', '\x2', '\x2', '\x2', '\x4DC', '\x4E5', '\x5', '<', '\x1F', '\x2', 
		'\x4DD', '\x4DE', '\a', '\x1F7', '\x2', '\x2', '\x4DE', '\x4E2', '\x5', 
		'\x38', '\x1D', '\x2', '\x4DF', '\x4E1', '\x5', ':', '\x1E', '\x2', '\x4E0', 
		'\x4DF', '\x3', '\x2', '\x2', '\x2', '\x4E1', '\x4E4', '\x3', '\x2', '\x2', 
		'\x2', '\x4E2', '\x4E0', '\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4E3', 
		'\x3', '\x2', '\x2', '\x2', '\x4E3', '\x4E6', '\x3', '\x2', '\x2', '\x2', 
		'\x4E4', '\x4E2', '\x3', '\x2', '\x2', '\x2', '\x4E5', '\x4DD', '\x3', 
		'\x2', '\x2', '\x2', '\x4E5', '\x4E6', '\x3', '\x2', '\x2', '\x2', '\x4E6', 
		'\x4EF', '\x3', '\x2', '\x2', '\x2', '\x4E7', '\x4E8', '\a', '\x136', 
		'\x2', '\x2', '\x4E8', '\x4EC', '\x5', '\x38', '\x1D', '\x2', '\x4E9', 
		'\x4EB', '\x5', ':', '\x1E', '\x2', '\x4EA', '\x4E9', '\x3', '\x2', '\x2', 
		'\x2', '\x4EB', '\x4EE', '\x3', '\x2', '\x2', '\x2', '\x4EC', '\x4EA', 
		'\x3', '\x2', '\x2', '\x2', '\x4EC', '\x4ED', '\x3', '\x2', '\x2', '\x2', 
		'\x4ED', '\x4F0', '\x3', '\x2', '\x2', '\x2', '\x4EE', '\x4EC', '\x3', 
		'\x2', '\x2', '\x2', '\x4EF', '\x4E7', '\x3', '\x2', '\x2', '\x2', '\x4EF', 
		'\x4F0', '\x3', '\x2', '\x2', '\x2', '\x4F0', '\x4F2', '\x3', '\x2', '\x2', 
		'\x2', '\x4F1', '\x4CF', '\x3', '\x2', '\x2', '\x2', '\x4F1', '\x4D7', 
		'\x3', '\x2', '\x2', '\x2', '\x4F2', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x4F3', '\x4F8', '\a', '\xE5', '\x2', '\x2', '\x4F4', '\x4F8', '\x5', 
		'\x20A', '\x106', '\x2', '\x4F5', '\x4F8', '\x5', '\x206', '\x104', '\x2', 
		'\x4F6', '\x4F8', '\x5', '\x24C', '\x127', '\x2', '\x4F7', '\x4F3', '\x3', 
		'\x2', '\x2', '\x2', '\x4F7', '\x4F4', '\x3', '\x2', '\x2', '\x2', '\x4F7', 
		'\x4F5', '\x3', '\x2', '\x2', '\x2', '\x4F7', '\x4F6', '\x3', '\x2', '\x2', 
		'\x2', '\x4F8', '\x39', '\x3', '\x2', '\x2', '\x2', '\x4F9', '\x4FA', 
		'\a', '\x3A5', '\x2', '\x2', '\x4FA', '\x4FD', '\a', 'J', '\x2', '\x2', 
		'\x4FB', '\x4FE', '\x5', '\x206', '\x104', '\x2', '\x4FC', '\x4FE', '\x5', 
		'\x24C', '\x127', '\x2', '\x4FD', '\x4FB', '\x3', '\x2', '\x2', '\x2', 
		'\x4FD', '\x4FC', '\x3', '\x2', '\x2', '\x2', '\x4FE', '\x4FF', '\x3', 
		'\x2', '\x2', '\x2', '\x4FF', '\x500', '\x5', '<', '\x1F', '\x2', '\x500', 
		';', '\x3', '\x2', '\x2', '\x2', '\x501', '\x50F', '\x5', '\x262', '\x132', 
		'\x2', '\x502', '\x50F', '\a', '\xBA', '\x2', '\x2', '\x503', '\x50F', 
		'\a', '\xC8', '\x2', '\x2', '\x504', '\x50F', '\a', '\xC9', '\x2', '\x2', 
		'\x505', '\x50F', '\a', '\xCA', '\x2', '\x2', '\x506', '\x50F', '\a', 
		'\xCB', '\x2', '\x2', '\x507', '\x50F', '\a', '\xCC', '\x2', '\x2', '\x508', 
		'\x50F', '\a', '\xCD', '\x2', '\x2', '\x509', '\x50F', '\a', '\xCE', '\x2', 
		'\x2', '\x50A', '\x50F', '\a', '\xCF', '\x2', '\x2', '\x50B', '\x50F', 
		'\a', '\xD0', '\x2', '\x2', '\x50C', '\x50F', '\a', '\xD1', '\x2', '\x2', 
		'\x50D', '\x50F', '\a', '\xD2', '\x2', '\x2', '\x50E', '\x501', '\x3', 
		'\x2', '\x2', '\x2', '\x50E', '\x502', '\x3', '\x2', '\x2', '\x2', '\x50E', 
		'\x503', '\x3', '\x2', '\x2', '\x2', '\x50E', '\x504', '\x3', '\x2', '\x2', 
		'\x2', '\x50E', '\x505', '\x3', '\x2', '\x2', '\x2', '\x50E', '\x506', 
		'\x3', '\x2', '\x2', '\x2', '\x50E', '\x507', '\x3', '\x2', '\x2', '\x2', 
		'\x50E', '\x508', '\x3', '\x2', '\x2', '\x2', '\x50E', '\x509', '\x3', 
		'\x2', '\x2', '\x2', '\x50E', '\x50A', '\x3', '\x2', '\x2', '\x2', '\x50E', 
		'\x50B', '\x3', '\x2', '\x2', '\x2', '\x50E', '\x50C', '\x3', '\x2', '\x2', 
		'\x2', '\x50E', '\x50D', '\x3', '\x2', '\x2', '\x2', '\x50F', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x510', '\x516', '\a', '\x133', '\x2', '\x2', '\x511', 
		'\x516', '\a', '\x12C', '\x2', '\x2', '\x512', '\x513', '\a', '\x12C', 
		'\x2', '\x2', '\x513', '\x514', '\a', '\x66', '\x2', '\x2', '\x514', '\x516', 
		'\a', '\x1E7', '\x2', '\x2', '\x515', '\x510', '\x3', '\x2', '\x2', '\x2', 
		'\x515', '\x511', '\x3', '\x2', '\x2', '\x2', '\x515', '\x512', '\x3', 
		'\x2', '\x2', '\x2', '\x516', '?', '\x3', '\x2', '\x2', '\x2', '\x517', 
		'\x518', '\a', '\xA2', '\x2', '\x2', '\x518', '\x519', '\t', '\xF', '\x2', 
		'\x2', '\x519', '\x41', '\x3', '\x2', '\x2', '\x2', '\x51A', '\x51C', 
		'\a', '\x16B', '\x2', '\x2', '\x51B', '\x51D', '\a', '\x3AA', '\x2', '\x2', 
		'\x51C', '\x51B', '\x3', '\x2', '\x2', '\x2', '\x51C', '\x51D', '\x3', 
		'\x2', '\x2', '\x2', '\x51D', '\x51E', '\x3', '\x2', '\x2', '\x2', '\x51E', 
		'\x526', '\x5', '\x208', '\x105', '\x2', '\x51F', '\x526', '\x5', '@', 
		'!', '\x2', '\x520', '\x521', '\a', '\xA7', '\x2', '\x2', '\x521', '\x522', 
		'\a', '\x1AE', '\x2', '\x2', '\x522', '\x526', '\x5', '\x200', '\x101', 
		'\x2', '\x523', '\x524', '\a', '\x116', '\x2', '\x2', '\x524', '\x526', 
		'\a', '\x3C2', '\x2', '\x2', '\x525', '\x51A', '\x3', '\x2', '\x2', '\x2', 
		'\x525', '\x51F', '\x3', '\x2', '\x2', '\x2', '\x525', '\x520', '\x3', 
		'\x2', '\x2', '\x2', '\x525', '\x523', '\x3', '\x2', '\x2', '\x2', '\x526', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x527', '\x528', '\t', '\x10', '\x2', 
		'\x2', '\x528', '\x529', '\x5', '\x200', '\x101', '\x2', '\x529', '\x52A', 
		'\x5', '\x214', '\x10B', '\x2', '\x52A', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x52B', '\x52C', '\x5', '\x200', '\x101', '\x2', '\x52C', '\x52D', 
		'\x5', '\x214', '\x10B', '\x2', '\x52D', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x52E', '\x52F', '\a', '\x116', '\x2', '\x2', '\x52F', '\x546', '\a', 
		'\x3C2', '\x2', '\x2', '\x530', '\x531', '\a', '\x16C', '\x2', '\x2', 
		'\x531', '\x546', '\a', '\x89', '\x2', '\x2', '\x532', '\x534', '\a', 
		'\x63', '\x2', '\x2', '\x533', '\x532', '\x3', '\x2', '\x2', '\x2', '\x533', 
		'\x534', '\x3', '\x2', '\x2', '\x2', '\x534', '\x535', '\x3', '\x2', '\x2', 
		'\x2', '\x535', '\x546', '\a', '+', '\x2', '\x2', '\x536', '\x537', '\a', 
		'\x11F', '\x2', '\x2', '\x537', '\x541', '\a', '\x89', '\x2', '\x2', '\x538', 
		'\x539', '\a', '\x19E', '\x2', '\x2', '\x539', '\x541', '\a', '\x89', 
		'\x2', '\x2', '\x53A', '\x53B', '\a', 'u', '\x2', '\x2', '\x53B', '\x53C', 
		'\a', '\x89', '\x2', '\x2', '\x53C', '\x541', '\a', '\x124', '\x2', '\x2', 
		'\x53D', '\x53E', '\a', '\x61', '\x2', '\x2', '\x53E', '\x53F', '\a', 
		'\x89', '\x2', '\x2', '\x53F', '\x541', '\a', '\x124', '\x2', '\x2', '\x540', 
		'\x536', '\x3', '\x2', '\x2', '\x2', '\x540', '\x538', '\x3', '\x2', '\x2', 
		'\x2', '\x540', '\x53A', '\x3', '\x2', '\x2', '\x2', '\x540', '\x53D', 
		'\x3', '\x2', '\x2', '\x2', '\x541', '\x546', '\x3', '\x2', '\x2', '\x2', 
		'\x542', '\x543', '\a', '\x89', '\x2', '\x2', '\x543', '\x544', '\a', 
		'\x1E0', '\x2', '\x2', '\x544', '\x546', '\t', '\r', '\x2', '\x2', '\x545', 
		'\x52E', '\x3', '\x2', '\x2', '\x2', '\x545', '\x530', '\x3', '\x2', '\x2', 
		'\x2', '\x545', '\x533', '\x3', '\x2', '\x2', '\x2', '\x545', '\x540', 
		'\x3', '\x2', '\x2', '\x2', '\x545', '\x542', '\x3', '\x2', '\x2', '\x2', 
		'\x546', 'I', '\x3', '\x2', '\x2', '\x2', '\x547', '\x548', '\a', '\x159', 
		'\x2', '\x2', '\x548', '\x556', '\a', '\x3C2', '\x2', '\x2', '\x549', 
		'\x54A', '\a', '#', '\x2', '\x2', '\x54A', '\x556', '\a', '\x3C2', '\x2', 
		'\x2', '\x54B', '\x54C', '\a', '\x214', '\x2', '\x2', '\x54C', '\x556', 
		'\a', '\x3C2', '\x2', '\x2', '\x54D', '\x54E', '\a', '\x1B2', '\x2', '\x2', 
		'\x54E', '\x556', '\a', '\x3C2', '\x2', '\x2', '\x54F', '\x550', '\a', 
		'\x1EA', '\x2', '\x2', '\x550', '\x556', '\a', '\x3C2', '\x2', '\x2', 
		'\x551', '\x552', '\a', '\x1AB', '\x2', '\x2', '\x552', '\x556', '\a', 
		'\x3C2', '\x2', '\x2', '\x553', '\x554', '\a', '\x1B7', '\x2', '\x2', 
		'\x554', '\x556', '\x5', '\x206', '\x104', '\x2', '\x555', '\x547', '\x3', 
		'\x2', '\x2', '\x2', '\x555', '\x549', '\x3', '\x2', '\x2', '\x2', '\x555', 
		'\x54B', '\x3', '\x2', '\x2', '\x2', '\x555', '\x54D', '\x3', '\x2', '\x2', 
		'\x2', '\x555', '\x54F', '\x3', '\x2', '\x2', '\x2', '\x555', '\x551', 
		'\x3', '\x2', '\x2', '\x2', '\x555', '\x553', '\x3', '\x2', '\x2', '\x2', 
		'\x556', 'K', '\x3', '\x2', '\x2', '\x2', '\x557', '\x558', '\a', '\x3B3', 
		'\x2', '\x2', '\x558', '\x55D', '\x5', 'N', '(', '\x2', '\x559', '\x55A', 
		'\a', '\x3B5', '\x2', '\x2', '\x55A', '\x55C', '\x5', 'N', '(', '\x2', 
		'\x55B', '\x559', '\x3', '\x2', '\x2', '\x2', '\x55C', '\x55F', '\x3', 
		'\x2', '\x2', '\x2', '\x55D', '\x55B', '\x3', '\x2', '\x2', '\x2', '\x55D', 
		'\x55E', '\x3', '\x2', '\x2', '\x2', '\x55E', '\x560', '\x3', '\x2', '\x2', 
		'\x2', '\x55F', '\x55D', '\x3', '\x2', '\x2', '\x2', '\x560', '\x561', 
		'\a', '\x3B4', '\x2', '\x2', '\x561', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\x562', '\x563', '\x5', '\x200', '\x101', '\x2', '\x563', '\x564', '\x5', 
		'P', ')', '\x2', '\x564', '\x568', '\x3', '\x2', '\x2', '\x2', '\x565', 
		'\x568', '\x5', 'T', '+', '\x2', '\x566', '\x568', '\x5', '\\', '/', '\x2', 
		'\x567', '\x562', '\x3', '\x2', '\x2', '\x2', '\x567', '\x565', '\x3', 
		'\x2', '\x2', '\x2', '\x567', '\x566', '\x3', '\x2', '\x2', '\x2', '\x568', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x569', '\x56D', '\x5', '\x214', '\x10B', 
		'\x2', '\x56A', '\x56C', '\x5', 'R', '*', '\x2', '\x56B', '\x56A', '\x3', 
		'\x2', '\x2', '\x2', '\x56C', '\x56F', '\x3', '\x2', '\x2', '\x2', '\x56D', 
		'\x56B', '\x3', '\x2', '\x2', '\x2', '\x56D', '\x56E', '\x3', '\x2', '\x2', 
		'\x2', '\x56E', 'Q', '\x3', '\x2', '\x2', '\x2', '\x56F', '\x56D', '\x3', 
		'\x2', '\x2', '\x2', '\x570', '\x584', '\x5', '\x210', '\x109', '\x2', 
		'\x571', '\x572', '\a', '&', '\x2', '\x2', '\x572', '\x584', '\x5', '\x22E', 
		'\x118', '\x2', '\x573', '\x584', '\a', '\x100', '\x2', '\x2', '\x574', 
		'\x576', '\a', 'p', '\x2', '\x2', '\x575', '\x574', '\x3', '\x2', '\x2', 
		'\x2', '\x575', '\x576', '\x3', '\x2', '\x2', '\x2', '\x576', '\x577', 
		'\x3', '\x2', '\x2', '\x2', '\x577', '\x584', '\a', 'O', '\x2', '\x2', 
		'\x578', '\x57A', '\a', '\x9C', '\x2', '\x2', '\x579', '\x57B', '\a', 
		'O', '\x2', '\x2', '\x57A', '\x579', '\x3', '\x2', '\x2', '\x2', '\x57A', 
		'\x57B', '\x3', '\x2', '\x2', '\x2', '\x57B', '\x584', '\x3', '\x2', '\x2', 
		'\x2', '\x57C', '\x57D', '\a', '\x116', '\x2', '\x2', '\x57D', '\x584', 
		'\a', '\x3C2', '\x2', '\x2', '\x57E', '\x57F', '\a', '\x115', '\x2', '\x2', 
		'\x57F', '\x584', '\t', '\x11', '\x2', '\x2', '\x580', '\x581', '\a', 
		'\x1FD', '\x2', '\x2', '\x581', '\x584', '\t', '\x12', '\x2', '\x2', '\x582', 
		'\x584', '\x5', 'V', ',', '\x2', '\x583', '\x570', '\x3', '\x2', '\x2', 
		'\x2', '\x583', '\x571', '\x3', '\x2', '\x2', '\x2', '\x583', '\x573', 
		'\x3', '\x2', '\x2', '\x2', '\x583', '\x575', '\x3', '\x2', '\x2', '\x2', 
		'\x583', '\x578', '\x3', '\x2', '\x2', '\x2', '\x583', '\x57C', '\x3', 
		'\x2', '\x2', '\x2', '\x583', '\x57E', '\x3', '\x2', '\x2', '\x2', '\x583', 
		'\x580', '\x3', '\x2', '\x2', '\x2', '\x583', '\x582', '\x3', '\x2', '\x2', 
		'\x2', '\x584', 'S', '\x3', '\x2', '\x2', '\x2', '\x585', '\x587', '\a', 
		'\x1C', '\x2', '\x2', '\x586', '\x588', '\x5', '\x200', '\x101', '\x2', 
		'\x587', '\x586', '\x3', '\x2', '\x2', '\x2', '\x587', '\x588', '\x3', 
		'\x2', '\x2', '\x2', '\x588', '\x58A', '\x3', '\x2', '\x2', '\x2', '\x589', 
		'\x585', '\x3', '\x2', '\x2', '\x2', '\x589', '\x58A', '\x3', '\x2', '\x2', 
		'\x2', '\x58A', '\x58B', '\x3', '\x2', '\x2', '\x2', '\x58B', '\x58C', 
		'\a', 'p', '\x2', '\x2', '\x58C', '\x58E', '\a', 'O', '\x2', '\x2', '\x58D', 
		'\x58F', '\x5', '@', '!', '\x2', '\x58E', '\x58D', '\x3', '\x2', '\x2', 
		'\x2', '\x58E', '\x58F', '\x3', '\x2', '\x2', '\x2', '\x58F', '\x590', 
		'\x3', '\x2', '\x2', '\x2', '\x590', '\x594', '\x5', '\x222', '\x112', 
		'\x2', '\x591', '\x593', '\x5', '\x42', '\"', '\x2', '\x592', '\x591', 
		'\x3', '\x2', '\x2', '\x2', '\x593', '\x596', '\x3', '\x2', '\x2', '\x2', 
		'\x594', '\x592', '\x3', '\x2', '\x2', '\x2', '\x594', '\x595', '\x3', 
		'\x2', '\x2', '\x2', '\x595', '\x5C8', '\x3', '\x2', '\x2', '\x2', '\x596', 
		'\x594', '\x3', '\x2', '\x2', '\x2', '\x597', '\x599', '\a', '\x1C', '\x2', 
		'\x2', '\x598', '\x59A', '\x5', '\x200', '\x101', '\x2', '\x599', '\x598', 
		'\x3', '\x2', '\x2', '\x2', '\x599', '\x59A', '\x3', '\x2', '\x2', '\x2', 
		'\x59A', '\x59C', '\x3', '\x2', '\x2', '\x2', '\x59B', '\x597', '\x3', 
		'\x2', '\x2', '\x2', '\x59B', '\x59C', '\x3', '\x2', '\x2', '\x2', '\x59C', 
		'\x59D', '\x3', '\x2', '\x2', '\x2', '\x59D', '\x59F', '\a', '\x9C', '\x2', 
		'\x2', '\x59E', '\x5A0', '\t', '\x13', '\x2', '\x2', '\x59F', '\x59E', 
		'\x3', '\x2', '\x2', '\x2', '\x59F', '\x5A0', '\x3', '\x2', '\x2', '\x2', 
		'\x5A0', '\x5A2', '\x3', '\x2', '\x2', '\x2', '\x5A1', '\x5A3', '\x5', 
		'\x200', '\x101', '\x2', '\x5A2', '\x5A1', '\x3', '\x2', '\x2', '\x2', 
		'\x5A2', '\x5A3', '\x3', '\x2', '\x2', '\x2', '\x5A3', '\x5A5', '\x3', 
		'\x2', '\x2', '\x2', '\x5A4', '\x5A6', '\x5', '@', '!', '\x2', '\x5A5', 
		'\x5A4', '\x3', '\x2', '\x2', '\x2', '\x5A5', '\x5A6', '\x3', '\x2', '\x2', 
		'\x2', '\x5A6', '\x5A7', '\x3', '\x2', '\x2', '\x2', '\x5A7', '\x5AB', 
		'\x5', '\x222', '\x112', '\x2', '\x5A8', '\x5AA', '\x5', '\x42', '\"', 
		'\x2', '\x5A9', '\x5A8', '\x3', '\x2', '\x2', '\x2', '\x5AA', '\x5AD', 
		'\x3', '\x2', '\x2', '\x2', '\x5AB', '\x5A9', '\x3', '\x2', '\x2', '\x2', 
		'\x5AB', '\x5AC', '\x3', '\x2', '\x2', '\x2', '\x5AC', '\x5C8', '\x3', 
		'\x2', '\x2', '\x2', '\x5AD', '\x5AB', '\x3', '\x2', '\x2', '\x2', '\x5AE', 
		'\x5B0', '\a', '\x1C', '\x2', '\x2', '\x5AF', '\x5B1', '\x5', '\x200', 
		'\x101', '\x2', '\x5B0', '\x5AF', '\x3', '\x2', '\x2', '\x2', '\x5B0', 
		'\x5B1', '\x3', '\x2', '\x2', '\x2', '\x5B1', '\x5B3', '\x3', '\x2', '\x2', 
		'\x2', '\x5B2', '\x5AE', '\x3', '\x2', '\x2', '\x2', '\x5B2', '\x5B3', 
		'\x3', '\x2', '\x2', '\x2', '\x5B3', '\x5B4', '\x3', '\x2', '\x2', '\x2', 
		'\x5B4', '\x5B5', '\a', ';', '\x2', '\x2', '\x5B5', '\x5B7', '\a', 'O', 
		'\x2', '\x2', '\x5B6', '\x5B8', '\x5', '\x200', '\x101', '\x2', '\x5B7', 
		'\x5B6', '\x3', '\x2', '\x2', '\x2', '\x5B7', '\x5B8', '\x3', '\x2', '\x2', 
		'\x2', '\x5B8', '\x5B9', '\x3', '\x2', '\x2', '\x2', '\x5B9', '\x5BA', 
		'\x5', '\x222', '\x112', '\x2', '\x5BA', '\x5BB', '\x5', 'V', ',', '\x2', 
		'\x5BB', '\x5C8', '\x3', '\x2', '\x2', '\x2', '\x5BC', '\x5BE', '\a', 
		'\x1C', '\x2', '\x2', '\x5BD', '\x5BF', '\x5', '\x200', '\x101', '\x2', 
		'\x5BE', '\x5BD', '\x3', '\x2', '\x2', '\x2', '\x5BE', '\x5BF', '\x3', 
		'\x2', '\x2', '\x2', '\x5BF', '\x5C1', '\x3', '\x2', '\x2', '\x2', '\x5C0', 
		'\x5BC', '\x3', '\x2', '\x2', '\x2', '\x5C0', '\x5C1', '\x3', '\x2', '\x2', 
		'\x2', '\x5C1', '\x5C2', '\x3', '\x2', '\x2', '\x2', '\x5C2', '\x5C3', 
		'\a', '\x18', '\x2', '\x2', '\x5C3', '\x5C4', '\a', '\x3B3', '\x2', '\x2', 
		'\x5C4', '\x5C5', '\x5', '\x24C', '\x127', '\x2', '\x5C5', '\x5C6', '\a', 
		'\x3B4', '\x2', '\x2', '\x5C6', '\x5C8', '\x3', '\x2', '\x2', '\x2', '\x5C7', 
		'\x589', '\x3', '\x2', '\x2', '\x2', '\x5C7', '\x59B', '\x3', '\x2', '\x2', 
		'\x2', '\x5C7', '\x5B2', '\x3', '\x2', '\x2', '\x2', '\x5C7', '\x5C0', 
		'\x3', '\x2', '\x2', '\x2', '\x5C8', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x5C9', '\x5CA', '\a', 'v', '\x2', '\x2', '\x5CA', '\x5CB', '\x5', '\x1E8', 
		'\xF5', '\x2', '\x5CB', '\x5CE', '\x5', '\x222', '\x112', '\x2', '\x5CC', 
		'\x5CD', '\a', '_', '\x2', '\x2', '\x5CD', '\x5CF', '\t', '\x14', '\x2', 
		'\x2', '\x5CE', '\x5CC', '\x3', '\x2', '\x2', '\x2', '\x5CE', '\x5CF', 
		'\x3', '\x2', '\x2', '\x2', '\x5CF', '\x5D1', '\x3', '\x2', '\x2', '\x2', 
		'\x5D0', '\x5D2', '\x5', 'X', '-', '\x2', '\x5D1', '\x5D0', '\x3', '\x2', 
		'\x2', '\x2', '\x5D1', '\x5D2', '\x3', '\x2', '\x2', '\x2', '\x5D2', 'W', 
		'\x3', '\x2', '\x2', '\x2', '\x5D3', '\x5D4', '\a', '\x66', '\x2', '\x2', 
		'\x5D4', '\x5D5', '\a', '(', '\x2', '\x2', '\x5D5', '\x5D9', '\x5', 'Z', 
		'.', '\x2', '\x5D6', '\x5D7', '\a', '\x66', '\x2', '\x2', '\x5D7', '\x5D8', 
		'\a', '\x9F', '\x2', '\x2', '\x5D8', '\x5DA', '\x5', 'Z', '.', '\x2', 
		'\x5D9', '\x5D6', '\x3', '\x2', '\x2', '\x2', '\x5D9', '\x5DA', '\x3', 
		'\x2', '\x2', '\x2', '\x5DA', '\x5E4', '\x3', '\x2', '\x2', '\x2', '\x5DB', 
		'\x5DC', '\a', '\x66', '\x2', '\x2', '\x5DC', '\x5DD', '\a', '\x9F', '\x2', 
		'\x2', '\x5DD', '\x5E1', '\x5', 'Z', '.', '\x2', '\x5DE', '\x5DF', '\a', 
		'\x66', '\x2', '\x2', '\x5DF', '\x5E0', '\a', '(', '\x2', '\x2', '\x5E0', 
		'\x5E2', '\x5', 'Z', '.', '\x2', '\x5E1', '\x5DE', '\x3', '\x2', '\x2', 
		'\x2', '\x5E1', '\x5E2', '\x3', '\x2', '\x2', '\x2', '\x5E2', '\x5E4', 
		'\x3', '\x2', '\x2', '\x2', '\x5E3', '\x5D3', '\x3', '\x2', '\x2', '\x2', 
		'\x5E3', '\x5DB', '\x3', '\x2', '\x2', '\x2', '\x5E4', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '\x5E5', '\x5EC', '\a', '}', '\x2', '\x2', '\x5E6', '\x5EC', 
		'\a', '\x13', '\x2', '\x2', '\x5E7', '\x5E8', '\a', '\x85', '\x2', '\x2', 
		'\x5E8', '\x5EC', '\a', '\x65', '\x2', '\x2', '\x5E9', '\x5EA', '\a', 
		'\x19E', '\x2', '\x2', '\x5EA', '\x5EC', '\a', '\xF7', '\x2', '\x2', '\x5EB', 
		'\x5E5', '\x3', '\x2', '\x2', '\x2', '\x5EB', '\x5E6', '\x3', '\x2', '\x2', 
		'\x2', '\x5EB', '\x5E7', '\x3', '\x2', '\x2', '\x2', '\x5EB', '\x5E9', 
		'\x3', '\x2', '\x2', '\x2', '\x5EC', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x5ED', '\x5EF', '\t', '\x13', '\x2', '\x2', '\x5EE', '\x5F0', '\x5', 
		'\x200', '\x101', '\x2', '\x5EF', '\x5EE', '\x3', '\x2', '\x2', '\x2', 
		'\x5EF', '\x5F0', '\x3', '\x2', '\x2', '\x2', '\x5F0', '\x5F2', '\x3', 
		'\x2', '\x2', '\x2', '\x5F1', '\x5F3', '\x5', '@', '!', '\x2', '\x5F2', 
		'\x5F1', '\x3', '\x2', '\x2', '\x2', '\x5F2', '\x5F3', '\x3', '\x2', '\x2', 
		'\x2', '\x5F3', '\x5F4', '\x3', '\x2', '\x2', '\x2', '\x5F4', '\x5F8', 
		'\x5', '\x222', '\x112', '\x2', '\x5F5', '\x5F7', '\x5', '\x42', '\"', 
		'\x2', '\x5F6', '\x5F5', '\x3', '\x2', '\x2', '\x2', '\x5F7', '\x5FA', 
		'\x3', '\x2', '\x2', '\x2', '\x5F8', '\x5F6', '\x3', '\x2', '\x2', '\x2', 
		'\x5F8', '\x5F9', '\x3', '\x2', '\x2', '\x2', '\x5F9', '\x60A', '\x3', 
		'\x2', '\x2', '\x2', '\x5FA', '\x5F8', '\x3', '\x2', '\x2', '\x2', '\x5FB', 
		'\x5FD', '\t', '\x15', '\x2', '\x2', '\x5FC', '\x5FE', '\t', '\x13', '\x2', 
		'\x2', '\x5FD', '\x5FC', '\x3', '\x2', '\x2', '\x2', '\x5FD', '\x5FE', 
		'\x3', '\x2', '\x2', '\x2', '\x5FE', '\x600', '\x3', '\x2', '\x2', '\x2', 
		'\x5FF', '\x601', '\x5', '\x200', '\x101', '\x2', '\x600', '\x5FF', '\x3', 
		'\x2', '\x2', '\x2', '\x600', '\x601', '\x3', '\x2', '\x2', '\x2', '\x601', 
		'\x602', '\x3', '\x2', '\x2', '\x2', '\x602', '\x606', '\x5', '\x222', 
		'\x112', '\x2', '\x603', '\x605', '\x5', '\x42', '\"', '\x2', '\x604', 
		'\x603', '\x3', '\x2', '\x2', '\x2', '\x605', '\x608', '\x3', '\x2', '\x2', 
		'\x2', '\x606', '\x604', '\x3', '\x2', '\x2', '\x2', '\x606', '\x607', 
		'\x3', '\x2', '\x2', '\x2', '\x607', '\x60A', '\x3', '\x2', '\x2', '\x2', 
		'\x608', '\x606', '\x3', '\x2', '\x2', '\x2', '\x609', '\x5ED', '\x3', 
		'\x2', '\x2', '\x2', '\x609', '\x5FB', '\x3', '\x2', '\x2', '\x2', '\x60A', 
		']', '\x3', '\x2', '\x2', '\x2', '\x60B', '\x60D', '\a', '\x137', '\x2', 
		'\x2', '\x60C', '\x60E', '\a', '\x3AA', '\x2', '\x2', '\x60D', '\x60C', 
		'\x3', '\x2', '\x2', '\x2', '\x60D', '\x60E', '\x3', '\x2', '\x2', '\x2', 
		'\x60E', '\x60F', '\x3', '\x2', '\x2', '\x2', '\x60F', '\x698', '\x5', 
		'\x1F6', '\xFC', '\x2', '\x610', '\x612', '\a', '\x100', '\x2', '\x2', 
		'\x611', '\x613', '\a', '\x3AA', '\x2', '\x2', '\x612', '\x611', '\x3', 
		'\x2', '\x2', '\x2', '\x612', '\x613', '\x3', '\x2', '\x2', '\x2', '\x613', 
		'\x614', '\x3', '\x2', '\x2', '\x2', '\x614', '\x698', '\x5', '\x206', 
		'\x104', '\x2', '\x615', '\x617', '\a', '\x101', '\x2', '\x2', '\x616', 
		'\x618', '\a', '\x3AA', '\x2', '\x2', '\x617', '\x616', '\x3', '\x2', 
		'\x2', '\x2', '\x617', '\x618', '\x3', '\x2', '\x2', '\x2', '\x618', '\x619', 
		'\x3', '\x2', '\x2', '\x2', '\x619', '\x698', '\x5', '\x206', '\x104', 
		'\x2', '\x61A', '\x61C', '\a', '&', '\x2', '\x2', '\x61B', '\x61A', '\x3', 
		'\x2', '\x2', '\x2', '\x61B', '\x61C', '\x3', '\x2', '\x2', '\x2', '\x61C', 
		'\x620', '\x3', '\x2', '\x2', '\x2', '\x61D', '\x61E', '\a', '\x17', '\x2', 
		'\x2', '\x61E', '\x621', '\a', '\x85', '\x2', '\x2', '\x61F', '\x621', 
		'\a', '\x293', '\x2', '\x2', '\x620', '\x61D', '\x3', '\x2', '\x2', '\x2', 
		'\x620', '\x61F', '\x3', '\x2', '\x2', '\x2', '\x621', '\x623', '\x3', 
		'\x2', '\x2', '\x2', '\x622', '\x624', '\a', '\x3AA', '\x2', '\x2', '\x623', 
		'\x622', '\x3', '\x2', '\x2', '\x2', '\x623', '\x624', '\x3', '\x2', '\x2', 
		'\x2', '\x624', '\x625', '\x3', '\x2', '\x2', '\x2', '\x625', '\x698', 
		'\x5', '\x1F2', '\xFA', '\x2', '\x626', '\x628', '\a', '\x10E', '\x2', 
		'\x2', '\x627', '\x629', '\a', '\x3AA', '\x2', '\x2', '\x628', '\x627', 
		'\x3', '\x2', '\x2', '\x2', '\x628', '\x629', '\x3', '\x2', '\x2', '\x2', 
		'\x629', '\x62A', '\x3', '\x2', '\x2', '\x2', '\x62A', '\x698', '\t', 
		'\x16', '\x2', '\x2', '\x62B', '\x62D', '\a', '&', '\x2', '\x2', '\x62C', 
		'\x62B', '\x3', '\x2', '\x2', '\x2', '\x62C', '\x62D', '\x3', '\x2', '\x2', 
		'\x2', '\x62D', '\x62E', '\x3', '\x2', '\x2', '\x2', '\x62E', '\x630', 
		'\a', '\x19', '\x2', '\x2', '\x62F', '\x631', '\a', '\x3AA', '\x2', '\x2', 
		'\x630', '\x62F', '\x3', '\x2', '\x2', '\x2', '\x630', '\x631', '\x3', 
		'\x2', '\x2', '\x2', '\x631', '\x632', '\x3', '\x2', '\x2', '\x2', '\x632', 
		'\x698', '\x5', '\x1F4', '\xFB', '\x2', '\x633', '\x635', '\a', '\x116', 
		'\x2', '\x2', '\x634', '\x636', '\a', '\x3AA', '\x2', '\x2', '\x635', 
		'\x634', '\x3', '\x2', '\x2', '\x2', '\x635', '\x636', '\x3', '\x2', '\x2', 
		'\x2', '\x636', '\x637', '\x3', '\x2', '\x2', '\x2', '\x637', '\x698', 
		'\a', '\x3C2', '\x2', '\x2', '\x638', '\x63A', '\a', '\x11B', '\x2', '\x2', 
		'\x639', '\x63B', '\a', '\x3AA', '\x2', '\x2', '\x63A', '\x639', '\x3', 
		'\x2', '\x2', '\x2', '\x63A', '\x63B', '\x3', '\x2', '\x2', '\x2', '\x63B', 
		'\x63C', '\x3', '\x2', '\x2', '\x2', '\x63C', '\x698', '\a', '\x3C2', 
		'\x2', '\x2', '\x63D', '\x63F', '\a', '\x11D', '\x2', '\x2', '\x63E', 
		'\x640', '\a', '\x3AA', '\x2', '\x2', '\x63F', '\x63E', '\x3', '\x2', 
		'\x2', '\x2', '\x63F', '\x640', '\x3', '\x2', '\x2', '\x2', '\x640', '\x641', 
		'\x3', '\x2', '\x2', '\x2', '\x641', '\x698', '\a', '\x3C2', '\x2', '\x2', 
		'\x642', '\x643', '\a', '\x124', '\x2', '\x2', '\x643', '\x645', '\a', 
		'\x12B', '\x2', '\x2', '\x644', '\x646', '\a', '\x3AA', '\x2', '\x2', 
		'\x645', '\x644', '\x3', '\x2', '\x2', '\x2', '\x645', '\x646', '\x3', 
		'\x2', '\x2', '\x2', '\x646', '\x647', '\x3', '\x2', '\x2', '\x2', '\x647', 
		'\x698', '\a', '\x3C2', '\x2', '\x2', '\x648', '\x64A', '\a', '\x129', 
		'\x2', '\x2', '\x649', '\x64B', '\a', '\x3AA', '\x2', '\x2', '\x64A', 
		'\x649', '\x3', '\x2', '\x2', '\x2', '\x64A', '\x64B', '\x3', '\x2', '\x2', 
		'\x2', '\x64B', '\x64C', '\x3', '\x2', '\x2', '\x2', '\x64C', '\x698', 
		'\t', '\x16', '\x2', '\x2', '\x64D', '\x64F', '\a', '\x134', '\x2', '\x2', 
		'\x64E', '\x650', '\a', '\x3AA', '\x2', '\x2', '\x64F', '\x64E', '\x3', 
		'\x2', '\x2', '\x2', '\x64F', '\x650', '\x3', '\x2', '\x2', '\x2', '\x650', 
		'\x651', '\x3', '\x2', '\x2', '\x2', '\x651', '\x698', '\a', '\x3C2', 
		'\x2', '\x2', '\x652', '\x653', '\a', '\x45', '\x2', '\x2', '\x653', '\x655', 
		'\a', '\x12B', '\x2', '\x2', '\x654', '\x656', '\a', '\x3AA', '\x2', '\x2', 
		'\x655', '\x654', '\x3', '\x2', '\x2', '\x2', '\x655', '\x656', '\x3', 
		'\x2', '\x2', '\x2', '\x656', '\x657', '\x3', '\x2', '\x2', '\x2', '\x657', 
		'\x698', '\a', '\x3C2', '\x2', '\x2', '\x658', '\x65A', '\a', '\x161', 
		'\x2', '\x2', '\x659', '\x65B', '\a', '\x3AA', '\x2', '\x2', '\x65A', 
		'\x659', '\x3', '\x2', '\x2', '\x2', '\x65A', '\x65B', '\x3', '\x2', '\x2', 
		'\x2', '\x65B', '\x65C', '\x3', '\x2', '\x2', '\x2', '\x65C', '\x698', 
		'\t', '\x17', '\x2', '\x2', '\x65D', '\x65F', '\a', '\x16B', '\x2', '\x2', 
		'\x65E', '\x660', '\a', '\x3AA', '\x2', '\x2', '\x65F', '\x65E', '\x3', 
		'\x2', '\x2', '\x2', '\x65F', '\x660', '\x3', '\x2', '\x2', '\x2', '\x660', 
		'\x661', '\x3', '\x2', '\x2', '\x2', '\x661', '\x698', '\x5', '\x208', 
		'\x105', '\x2', '\x662', '\x664', '\a', '\x18C', '\x2', '\x2', '\x663', 
		'\x665', '\a', '\x3AA', '\x2', '\x2', '\x664', '\x663', '\x3', '\x2', 
		'\x2', '\x2', '\x664', '\x665', '\x3', '\x2', '\x2', '\x2', '\x665', '\x666', 
		'\x3', '\x2', '\x2', '\x2', '\x666', '\x698', '\x5', '\x206', '\x104', 
		'\x2', '\x667', '\x669', '\a', '\x194', '\x2', '\x2', '\x668', '\x66A', 
		'\a', '\x3AA', '\x2', '\x2', '\x669', '\x668', '\x3', '\x2', '\x2', '\x2', 
		'\x669', '\x66A', '\x3', '\x2', '\x2', '\x2', '\x66A', '\x66B', '\x3', 
		'\x2', '\x2', '\x2', '\x66B', '\x698', '\x5', '\x206', '\x104', '\x2', 
		'\x66C', '\x66E', '\a', '\x1AC', '\x2', '\x2', '\x66D', '\x66F', '\a', 
		'\x3AA', '\x2', '\x2', '\x66E', '\x66D', '\x3', '\x2', '\x2', '\x2', '\x66E', 
		'\x66F', '\x3', '\x2', '\x2', '\x2', '\x66F', '\x670', '\x3', '\x2', '\x2', 
		'\x2', '\x670', '\x698', '\t', '\x18', '\x2', '\x2', '\x671', '\x673', 
		'\a', '\x1B2', '\x2', '\x2', '\x672', '\x674', '\a', '\x3AA', '\x2', '\x2', 
		'\x673', '\x672', '\x3', '\x2', '\x2', '\x2', '\x673', '\x674', '\x3', 
		'\x2', '\x2', '\x2', '\x674', '\x675', '\x3', '\x2', '\x2', '\x2', '\x675', 
		'\x698', '\a', '\x3C2', '\x2', '\x2', '\x676', '\x678', '\a', '\x1DD', 
		'\x2', '\x2', '\x677', '\x679', '\a', '\x3AA', '\x2', '\x2', '\x678', 
		'\x677', '\x3', '\x2', '\x2', '\x2', '\x678', '\x679', '\x3', '\x2', '\x2', 
		'\x2', '\x679', '\x67A', '\x3', '\x2', '\x2', '\x2', '\x67A', '\x698', 
		'\t', '\x19', '\x2', '\x2', '\x67B', '\x67D', '\a', '\x1F8', '\x2', '\x2', 
		'\x67C', '\x67E', '\a', '\x3AA', '\x2', '\x2', '\x67D', '\x67C', '\x3', 
		'\x2', '\x2', '\x2', '\x67D', '\x67E', '\x3', '\x2', '\x2', '\x2', '\x67E', 
		'\x67F', '\x3', '\x2', '\x2', '\x2', '\x67F', '\x698', '\t', '\x18', '\x2', 
		'\x2', '\x680', '\x682', '\a', '\x1F9', '\x2', '\x2', '\x681', '\x683', 
		'\a', '\x3AA', '\x2', '\x2', '\x682', '\x681', '\x3', '\x2', '\x2', '\x2', 
		'\x682', '\x683', '\x3', '\x2', '\x2', '\x2', '\x683', '\x684', '\x3', 
		'\x2', '\x2', '\x2', '\x684', '\x698', '\t', '\x18', '\x2', '\x2', '\x685', 
		'\x687', '\a', '\x1FA', '\x2', '\x2', '\x686', '\x688', '\a', '\x3AA', 
		'\x2', '\x2', '\x687', '\x686', '\x3', '\x2', '\x2', '\x2', '\x687', '\x688', 
		'\x3', '\x2', '\x2', '\x2', '\x688', '\x689', '\x3', '\x2', '\x2', '\x2', 
		'\x689', '\x698', '\x5', '\x206', '\x104', '\x2', '\x68A', '\x68B', '\a', 
		'\x205', '\x2', '\x2', '\x68B', '\x68D', '\x5', '\x200', '\x101', '\x2', 
		'\x68C', '\x68E', '\x5', '`', '\x31', '\x2', '\x68D', '\x68C', '\x3', 
		'\x2', '\x2', '\x2', '\x68D', '\x68E', '\x3', '\x2', '\x2', '\x2', '\x68E', 
		'\x698', '\x3', '\x2', '\x2', '\x2', '\x68F', '\x691', '\a', '\x9B', '\x2', 
		'\x2', '\x690', '\x692', '\a', '\x3AA', '\x2', '\x2', '\x691', '\x690', 
		'\x3', '\x2', '\x2', '\x2', '\x691', '\x692', '\x3', '\x2', '\x2', '\x2', 
		'\x692', '\x693', '\x3', '\x2', '\x2', '\x2', '\x693', '\x694', '\a', 
		'\x3B3', '\x2', '\x2', '\x694', '\x695', '\x5', '\x220', '\x111', '\x2', 
		'\x695', '\x696', '\a', '\x3B4', '\x2', '\x2', '\x696', '\x698', '\x3', 
		'\x2', '\x2', '\x2', '\x697', '\x60B', '\x3', '\x2', '\x2', '\x2', '\x697', 
		'\x610', '\x3', '\x2', '\x2', '\x2', '\x697', '\x615', '\x3', '\x2', '\x2', 
		'\x2', '\x697', '\x61B', '\x3', '\x2', '\x2', '\x2', '\x697', '\x626', 
		'\x3', '\x2', '\x2', '\x2', '\x697', '\x62C', '\x3', '\x2', '\x2', '\x2', 
		'\x697', '\x633', '\x3', '\x2', '\x2', '\x2', '\x697', '\x638', '\x3', 
		'\x2', '\x2', '\x2', '\x697', '\x63D', '\x3', '\x2', '\x2', '\x2', '\x697', 
		'\x642', '\x3', '\x2', '\x2', '\x2', '\x697', '\x648', '\x3', '\x2', '\x2', 
		'\x2', '\x697', '\x64D', '\x3', '\x2', '\x2', '\x2', '\x697', '\x652', 
		'\x3', '\x2', '\x2', '\x2', '\x697', '\x658', '\x3', '\x2', '\x2', '\x2', 
		'\x697', '\x65D', '\x3', '\x2', '\x2', '\x2', '\x697', '\x662', '\x3', 
		'\x2', '\x2', '\x2', '\x697', '\x667', '\x3', '\x2', '\x2', '\x2', '\x697', 
		'\x66C', '\x3', '\x2', '\x2', '\x2', '\x697', '\x671', '\x3', '\x2', '\x2', 
		'\x2', '\x697', '\x676', '\x3', '\x2', '\x2', '\x2', '\x697', '\x67B', 
		'\x3', '\x2', '\x2', '\x2', '\x697', '\x680', '\x3', '\x2', '\x2', '\x2', 
		'\x697', '\x685', '\x3', '\x2', '\x2', '\x2', '\x697', '\x68A', '\x3', 
		'\x2', '\x2', '\x2', '\x697', '\x68F', '\x3', '\x2', '\x2', '\x2', '\x698', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x699', '\x69A', '\a', '\x1FD', '\x2', 
		'\x2', '\x69A', '\x69B', '\t', '\x12', '\x2', '\x2', '\x69B', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x69C', '\x69D', '\a', 'o', '\x2', '\x2', 
		'\x69D', '\x69E', '\a', '\x11', '\x2', '\x2', '\x69E', '\x6A1', '\x5', 
		'\x64', '\x33', '\x2', '\x69F', '\x6A0', '\a', '\x1B1', '\x2', '\x2', 
		'\x6A0', '\x6A2', '\x5', '\x206', '\x104', '\x2', '\x6A1', '\x69F', '\x3', 
		'\x2', '\x2', '\x2', '\x6A1', '\x6A2', '\x3', '\x2', '\x2', '\x2', '\x6A2', 
		'\x6AA', '\x3', '\x2', '\x2', '\x2', '\x6A3', '\x6A4', '\a', '\x200', 
		'\x2', '\x2', '\x6A4', '\x6A5', '\a', '\x11', '\x2', '\x2', '\x6A5', '\x6A8', 
		'\x5', '\x66', '\x34', '\x2', '\x6A6', '\x6A7', '\a', '\x201', '\x2', 
		'\x2', '\x6A7', '\x6A9', '\x5', '\x206', '\x104', '\x2', '\x6A8', '\x6A6', 
		'\x3', '\x2', '\x2', '\x2', '\x6A8', '\x6A9', '\x3', '\x2', '\x2', '\x2', 
		'\x6A9', '\x6AB', '\x3', '\x2', '\x2', '\x2', '\x6AA', '\x6A3', '\x3', 
		'\x2', '\x2', '\x2', '\x6AA', '\x6AB', '\x3', '\x2', '\x2', '\x2', '\x6AB', 
		'\x6B7', '\x3', '\x2', '\x2', '\x2', '\x6AC', '\x6AD', '\a', '\x3B3', 
		'\x2', '\x2', '\x6AD', '\x6B2', '\x5', 'h', '\x35', '\x2', '\x6AE', '\x6AF', 
		'\a', '\x3B5', '\x2', '\x2', '\x6AF', '\x6B1', '\x5', 'h', '\x35', '\x2', 
		'\x6B0', '\x6AE', '\x3', '\x2', '\x2', '\x2', '\x6B1', '\x6B4', '\x3', 
		'\x2', '\x2', '\x2', '\x6B2', '\x6B0', '\x3', '\x2', '\x2', '\x2', '\x6B2', 
		'\x6B3', '\x3', '\x2', '\x2', '\x2', '\x6B3', '\x6B5', '\x3', '\x2', '\x2', 
		'\x2', '\x6B4', '\x6B2', '\x3', '\x2', '\x2', '\x2', '\x6B5', '\x6B6', 
		'\a', '\x3B4', '\x2', '\x2', '\x6B6', '\x6B8', '\x3', '\x2', '\x2', '\x2', 
		'\x6B7', '\x6AC', '\x3', '\x2', '\x2', '\x2', '\x6B7', '\x6B8', '\x3', 
		'\x2', '\x2', '\x2', '\x6B8', '\x63', '\x3', '\x2', '\x2', '\x2', '\x6B9', 
		'\x6BB', '\a', 'W', '\x2', '\x2', '\x6BA', '\x6B9', '\x3', '\x2', '\x2', 
		'\x2', '\x6BA', '\x6BB', '\x3', '\x2', '\x2', '\x2', '\x6BB', '\x6BC', 
		'\x3', '\x2', '\x2', '\x2', '\x6BC', '\x6BD', '\a', '\x157', '\x2', '\x2', 
		'\x6BD', '\x6BE', '\a', '\x3B3', '\x2', '\x2', '\x6BE', '\x6BF', '\x5', 
		'\x24C', '\x127', '\x2', '\x6BF', '\x6C0', '\a', '\x3B4', '\x2', '\x2', 
		'\x6C0', '\x6E7', '\x3', '\x2', '\x2', '\x2', '\x6C1', '\x6C3', '\a', 
		'W', '\x2', '\x2', '\x6C2', '\x6C1', '\x3', '\x2', '\x2', '\x2', '\x6C2', 
		'\x6C3', '\x3', '\x2', '\x2', '\x2', '\x6C3', '\x6C4', '\x3', '\x2', '\x2', 
		'\x2', '\x6C4', '\x6C8', '\a', 'O', '\x2', '\x2', '\x6C5', '\x6C6', '\a', 
		'\xFA', '\x2', '\x2', '\x6C6', '\x6C7', '\a', '\x3AA', '\x2', '\x2', '\x6C7', 
		'\x6C9', '\t', '\x1A', '\x2', '\x2', '\x6C8', '\x6C5', '\x3', '\x2', '\x2', 
		'\x2', '\x6C8', '\x6C9', '\x3', '\x2', '\x2', '\x2', '\x6C9', '\x6CA', 
		'\x3', '\x2', '\x2', '\x2', '\x6CA', '\x6CB', '\a', '\x3B3', '\x2', '\x2', 
		'\x6CB', '\x6CC', '\x5', '\x21E', '\x110', '\x2', '\x6CC', '\x6CD', '\a', 
		'\x3B4', '\x2', '\x2', '\x6CD', '\x6E7', '\x3', '\x2', '\x2', '\x2', '\x6CE', 
		'\x6D8', '\a', 's', '\x2', '\x2', '\x6CF', '\x6D0', '\a', '\x3B3', '\x2', 
		'\x2', '\x6D0', '\x6D1', '\x5', '\x24C', '\x127', '\x2', '\x6D1', '\x6D2', 
		'\a', '\x3B4', '\x2', '\x2', '\x6D2', '\x6D9', '\x3', '\x2', '\x2', '\x2', 
		'\x6D3', '\x6D4', '\a', '\x114', '\x2', '\x2', '\x6D4', '\x6D5', '\a', 
		'\x3B3', '\x2', '\x2', '\x6D5', '\x6D6', '\x5', '\x21E', '\x110', '\x2', 
		'\x6D6', '\x6D7', '\a', '\x3B4', '\x2', '\x2', '\x6D7', '\x6D9', '\x3', 
		'\x2', '\x2', '\x2', '\x6D8', '\x6CF', '\x3', '\x2', '\x2', '\x2', '\x6D8', 
		'\x6D3', '\x3', '\x2', '\x2', '\x2', '\x6D9', '\x6E7', '\x3', '\x2', '\x2', 
		'\x2', '\x6DA', '\x6E4', '\a', '\x171', '\x2', '\x2', '\x6DB', '\x6DC', 
		'\a', '\x3B3', '\x2', '\x2', '\x6DC', '\x6DD', '\x5', '\x24C', '\x127', 
		'\x2', '\x6DD', '\x6DE', '\a', '\x3B4', '\x2', '\x2', '\x6DE', '\x6E5', 
		'\x3', '\x2', '\x2', '\x2', '\x6DF', '\x6E0', '\a', '\x114', '\x2', '\x2', 
		'\x6E0', '\x6E1', '\a', '\x3B3', '\x2', '\x2', '\x6E1', '\x6E2', '\x5', 
		'\x21E', '\x110', '\x2', '\x6E2', '\x6E3', '\a', '\x3B4', '\x2', '\x2', 
		'\x6E3', '\x6E5', '\x3', '\x2', '\x2', '\x2', '\x6E4', '\x6DB', '\x3', 
		'\x2', '\x2', '\x2', '\x6E4', '\x6DF', '\x3', '\x2', '\x2', '\x2', '\x6E5', 
		'\x6E7', '\x3', '\x2', '\x2', '\x2', '\x6E6', '\x6BA', '\x3', '\x2', '\x2', 
		'\x2', '\x6E6', '\x6C2', '\x3', '\x2', '\x2', '\x2', '\x6E6', '\x6CE', 
		'\x3', '\x2', '\x2', '\x2', '\x6E6', '\x6DA', '\x3', '\x2', '\x2', '\x2', 
		'\x6E7', '\x65', '\x3', '\x2', '\x2', '\x2', '\x6E8', '\x6EA', '\a', 'W', 
		'\x2', '\x2', '\x6E9', '\x6E8', '\x3', '\x2', '\x2', '\x2', '\x6E9', '\x6EA', 
		'\x3', '\x2', '\x2', '\x2', '\x6EA', '\x6EB', '\x3', '\x2', '\x2', '\x2', 
		'\x6EB', '\x6EC', '\a', '\x157', '\x2', '\x2', '\x6EC', '\x6ED', '\a', 
		'\x3B3', '\x2', '\x2', '\x6ED', '\x6EE', '\x5', '\x24C', '\x127', '\x2', 
		'\x6EE', '\x6EF', '\a', '\x3B4', '\x2', '\x2', '\x6EF', '\x6FE', '\x3', 
		'\x2', '\x2', '\x2', '\x6F0', '\x6F2', '\a', 'W', '\x2', '\x2', '\x6F1', 
		'\x6F0', '\x3', '\x2', '\x2', '\x2', '\x6F1', '\x6F2', '\x3', '\x2', '\x2', 
		'\x2', '\x6F2', '\x6F3', '\x3', '\x2', '\x2', '\x2', '\x6F3', '\x6F7', 
		'\a', 'O', '\x2', '\x2', '\x6F4', '\x6F5', '\a', '\xFA', '\x2', '\x2', 
		'\x6F5', '\x6F6', '\a', '\x3AA', '\x2', '\x2', '\x6F6', '\x6F8', '\t', 
		'\x1A', '\x2', '\x2', '\x6F7', '\x6F4', '\x3', '\x2', '\x2', '\x2', '\x6F7', 
		'\x6F8', '\x3', '\x2', '\x2', '\x2', '\x6F8', '\x6F9', '\x3', '\x2', '\x2', 
		'\x2', '\x6F9', '\x6FA', '\a', '\x3B3', '\x2', '\x2', '\x6FA', '\x6FB', 
		'\x5', '\x21E', '\x110', '\x2', '\x6FB', '\x6FC', '\a', '\x3B4', '\x2', 
		'\x2', '\x6FC', '\x6FE', '\x3', '\x2', '\x2', '\x2', '\x6FD', '\x6E9', 
		'\x3', '\x2', '\x2', '\x2', '\x6FD', '\x6F1', '\x3', '\x2', '\x2', '\x2', 
		'\x6FE', 'g', '\x3', '\x2', '\x2', '\x2', '\x6FF', '\x700', '\a', 'o', 
		'\x2', '\x2', '\x700', '\x701', '\x5', '\x200', '\x101', '\x2', '\x701', 
		'\x702', '\a', '\xA3', '\x2', '\x2', '\x702', '\x703', '\a', '\x16F', 
		'\x2', '\x2', '\x703', '\x704', '\a', '\x208', '\x2', '\x2', '\x704', 
		'\x705', '\a', '\x3B3', '\x2', '\x2', '\x705', '\x70A', '\x5', 'j', '\x36', 
		'\x2', '\x706', '\x707', '\a', '\x3B5', '\x2', '\x2', '\x707', '\x709', 
		'\x5', 'j', '\x36', '\x2', '\x708', '\x706', '\x3', '\x2', '\x2', '\x2', 
		'\x709', '\x70C', '\x3', '\x2', '\x2', '\x2', '\x70A', '\x708', '\x3', 
		'\x2', '\x2', '\x2', '\x70A', '\x70B', '\x3', '\x2', '\x2', '\x2', '\x70B', 
		'\x70D', '\x3', '\x2', '\x2', '\x2', '\x70C', '\x70A', '\x3', '\x2', '\x2', 
		'\x2', '\x70D', '\x711', '\a', '\x3B4', '\x2', '\x2', '\x70E', '\x710', 
		'\x5', 'p', '\x39', '\x2', '\x70F', '\x70E', '\x3', '\x2', '\x2', '\x2', 
		'\x710', '\x713', '\x3', '\x2', '\x2', '\x2', '\x711', '\x70F', '\x3', 
		'\x2', '\x2', '\x2', '\x711', '\x712', '\x3', '\x2', '\x2', '\x2', '\x712', 
		'\x71C', '\x3', '\x2', '\x2', '\x2', '\x713', '\x711', '\x3', '\x2', '\x2', 
		'\x2', '\x714', '\x719', '\x5', 'n', '\x38', '\x2', '\x715', '\x716', 
		'\a', '\x3B5', '\x2', '\x2', '\x716', '\x718', '\x5', 'n', '\x38', '\x2', 
		'\x717', '\x715', '\x3', '\x2', '\x2', '\x2', '\x718', '\x71B', '\x3', 
		'\x2', '\x2', '\x2', '\x719', '\x717', '\x3', '\x2', '\x2', '\x2', '\x719', 
		'\x71A', '\x3', '\x2', '\x2', '\x2', '\x71A', '\x71D', '\x3', '\x2', '\x2', 
		'\x2', '\x71B', '\x719', '\x3', '\x2', '\x2', '\x2', '\x71C', '\x714', 
		'\x3', '\x2', '\x2', '\x2', '\x71C', '\x71D', '\x3', '\x2', '\x2', '\x2', 
		'\x71D', '\x76D', '\x3', '\x2', '\x2', '\x2', '\x71E', '\x71F', '\a', 
		'o', '\x2', '\x2', '\x71F', '\x720', '\x5', '\x200', '\x101', '\x2', '\x720', 
		'\x721', '\a', '\xA3', '\x2', '\x2', '\x721', '\x722', '\a', '\x44', '\x2', 
		'\x2', '\x722', '\x723', '\a', '\x3B3', '\x2', '\x2', '\x723', '\x728', 
		'\x5', 'j', '\x36', '\x2', '\x724', '\x725', '\a', '\x3B5', '\x2', '\x2', 
		'\x725', '\x727', '\x5', 'j', '\x36', '\x2', '\x726', '\x724', '\x3', 
		'\x2', '\x2', '\x2', '\x727', '\x72A', '\x3', '\x2', '\x2', '\x2', '\x728', 
		'\x726', '\x3', '\x2', '\x2', '\x2', '\x728', '\x729', '\x3', '\x2', '\x2', 
		'\x2', '\x729', '\x72B', '\x3', '\x2', '\x2', '\x2', '\x72A', '\x728', 
		'\x3', '\x2', '\x2', '\x2', '\x72B', '\x72F', '\a', '\x3B4', '\x2', '\x2', 
		'\x72C', '\x72E', '\x5', 'p', '\x39', '\x2', '\x72D', '\x72C', '\x3', 
		'\x2', '\x2', '\x2', '\x72E', '\x731', '\x3', '\x2', '\x2', '\x2', '\x72F', 
		'\x72D', '\x3', '\x2', '\x2', '\x2', '\x72F', '\x730', '\x3', '\x2', '\x2', 
		'\x2', '\x730', '\x73A', '\x3', '\x2', '\x2', '\x2', '\x731', '\x72F', 
		'\x3', '\x2', '\x2', '\x2', '\x732', '\x737', '\x5', 'n', '\x38', '\x2', 
		'\x733', '\x734', '\a', '\x3B5', '\x2', '\x2', '\x734', '\x736', '\x5', 
		'n', '\x38', '\x2', '\x735', '\x733', '\x3', '\x2', '\x2', '\x2', '\x736', 
		'\x739', '\x3', '\x2', '\x2', '\x2', '\x737', '\x735', '\x3', '\x2', '\x2', 
		'\x2', '\x737', '\x738', '\x3', '\x2', '\x2', '\x2', '\x738', '\x73B', 
		'\x3', '\x2', '\x2', '\x2', '\x739', '\x737', '\x3', '\x2', '\x2', '\x2', 
		'\x73A', '\x732', '\x3', '\x2', '\x2', '\x2', '\x73A', '\x73B', '\x3', 
		'\x2', '\x2', '\x2', '\x73B', '\x76D', '\x3', '\x2', '\x2', '\x2', '\x73C', 
		'\x73D', '\a', 'o', '\x2', '\x2', '\x73D', '\x73E', '\x5', '\x200', '\x101', 
		'\x2', '\x73E', '\x73F', '\a', '\xA3', '\x2', '\x2', '\x73F', '\x740', 
		'\a', '\x44', '\x2', '\x2', '\x740', '\x741', '\a', '\x3B3', '\x2', '\x2', 
		'\x741', '\x746', '\x5', 'l', '\x37', '\x2', '\x742', '\x743', '\a', '\x3B5', 
		'\x2', '\x2', '\x743', '\x745', '\x5', 'l', '\x37', '\x2', '\x744', '\x742', 
		'\x3', '\x2', '\x2', '\x2', '\x745', '\x748', '\x3', '\x2', '\x2', '\x2', 
		'\x746', '\x744', '\x3', '\x2', '\x2', '\x2', '\x746', '\x747', '\x3', 
		'\x2', '\x2', '\x2', '\x747', '\x749', '\x3', '\x2', '\x2', '\x2', '\x748', 
		'\x746', '\x3', '\x2', '\x2', '\x2', '\x749', '\x74D', '\a', '\x3B4', 
		'\x2', '\x2', '\x74A', '\x74C', '\x5', 'p', '\x39', '\x2', '\x74B', '\x74A', 
		'\x3', '\x2', '\x2', '\x2', '\x74C', '\x74F', '\x3', '\x2', '\x2', '\x2', 
		'\x74D', '\x74B', '\x3', '\x2', '\x2', '\x2', '\x74D', '\x74E', '\x3', 
		'\x2', '\x2', '\x2', '\x74E', '\x758', '\x3', '\x2', '\x2', '\x2', '\x74F', 
		'\x74D', '\x3', '\x2', '\x2', '\x2', '\x750', '\x755', '\x5', 'n', '\x38', 
		'\x2', '\x751', '\x752', '\a', '\x3B5', '\x2', '\x2', '\x752', '\x754', 
		'\x5', 'n', '\x38', '\x2', '\x753', '\x751', '\x3', '\x2', '\x2', '\x2', 
		'\x754', '\x757', '\x3', '\x2', '\x2', '\x2', '\x755', '\x753', '\x3', 
		'\x2', '\x2', '\x2', '\x755', '\x756', '\x3', '\x2', '\x2', '\x2', '\x756', 
		'\x759', '\x3', '\x2', '\x2', '\x2', '\x757', '\x755', '\x3', '\x2', '\x2', 
		'\x2', '\x758', '\x750', '\x3', '\x2', '\x2', '\x2', '\x758', '\x759', 
		'\x3', '\x2', '\x2', '\x2', '\x759', '\x76D', '\x3', '\x2', '\x2', '\x2', 
		'\x75A', '\x75B', '\a', 'o', '\x2', '\x2', '\x75B', '\x75F', '\x5', '\x200', 
		'\x101', '\x2', '\x75C', '\x75E', '\x5', 'p', '\x39', '\x2', '\x75D', 
		'\x75C', '\x3', '\x2', '\x2', '\x2', '\x75E', '\x761', '\x3', '\x2', '\x2', 
		'\x2', '\x75F', '\x75D', '\x3', '\x2', '\x2', '\x2', '\x75F', '\x760', 
		'\x3', '\x2', '\x2', '\x2', '\x760', '\x76A', '\x3', '\x2', '\x2', '\x2', 
		'\x761', '\x75F', '\x3', '\x2', '\x2', '\x2', '\x762', '\x767', '\x5', 
		'n', '\x38', '\x2', '\x763', '\x764', '\a', '\x3B5', '\x2', '\x2', '\x764', 
		'\x766', '\x5', 'n', '\x38', '\x2', '\x765', '\x763', '\x3', '\x2', '\x2', 
		'\x2', '\x766', '\x769', '\x3', '\x2', '\x2', '\x2', '\x767', '\x765', 
		'\x3', '\x2', '\x2', '\x2', '\x767', '\x768', '\x3', '\x2', '\x2', '\x2', 
		'\x768', '\x76B', '\x3', '\x2', '\x2', '\x2', '\x769', '\x767', '\x3', 
		'\x2', '\x2', '\x2', '\x76A', '\x762', '\x3', '\x2', '\x2', '\x2', '\x76A', 
		'\x76B', '\x3', '\x2', '\x2', '\x2', '\x76B', '\x76D', '\x3', '\x2', '\x2', 
		'\x2', '\x76C', '\x6FF', '\x3', '\x2', '\x2', '\x2', '\x76C', '\x71E', 
		'\x3', '\x2', '\x2', '\x2', '\x76C', '\x73C', '\x3', '\x2', '\x2', '\x2', 
		'\x76C', '\x75A', '\x3', '\x2', '\x2', '\x2', '\x76D', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x76E', '\x772', '\x5', '\x212', '\x10A', '\x2', '\x76F', 
		'\x772', '\a', '`', '\x2', '\x2', '\x770', '\x772', '\x5', '\x24C', '\x127', 
		'\x2', '\x771', '\x76E', '\x3', '\x2', '\x2', '\x2', '\x771', '\x76F', 
		'\x3', '\x2', '\x2', '\x2', '\x771', '\x770', '\x3', '\x2', '\x2', '\x2', 
		'\x772', 'k', '\x3', '\x2', '\x2', '\x2', '\x773', '\x774', '\a', '\x3B3', 
		'\x2', '\x2', '\x774', '\x777', '\x5', 'j', '\x36', '\x2', '\x775', '\x776', 
		'\a', '\x3B5', '\x2', '\x2', '\x776', '\x778', '\x5', 'j', '\x36', '\x2', 
		'\x777', '\x775', '\x3', '\x2', '\x2', '\x2', '\x778', '\x779', '\x3', 
		'\x2', '\x2', '\x2', '\x779', '\x777', '\x3', '\x2', '\x2', '\x2', '\x779', 
		'\x77A', '\x3', '\x2', '\x2', '\x2', '\x77A', '\x77B', '\x3', '\x2', '\x2', 
		'\x2', '\x77B', '\x77C', '\a', '\x3B4', '\x2', '\x2', '\x77C', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x77D', '\x77E', '\a', '\x200', '\x2', '\x2', '\x77E', 
		'\x782', '\x5', '\x200', '\x101', '\x2', '\x77F', '\x781', '\x5', 'p', 
		'\x39', '\x2', '\x780', '\x77F', '\x3', '\x2', '\x2', '\x2', '\x781', 
		'\x784', '\x3', '\x2', '\x2', '\x2', '\x782', '\x780', '\x3', '\x2', '\x2', 
		'\x2', '\x782', '\x783', '\x3', '\x2', '\x2', '\x2', '\x783', 'o', '\x3', 
		'\x2', '\x2', '\x2', '\x784', '\x782', '\x3', '\x2', '\x2', '\x2', '\x785', 
		'\x787', '\a', '\x1FD', '\x2', '\x2', '\x786', '\x785', '\x3', '\x2', 
		'\x2', '\x2', '\x786', '\x787', '\x3', '\x2', '\x2', '\x2', '\x787', '\x788', 
		'\x3', '\x2', '\x2', '\x2', '\x788', '\x78A', '\a', '\x137', '\x2', '\x2', 
		'\x789', '\x78B', '\a', '\x3AA', '\x2', '\x2', '\x78A', '\x789', '\x3', 
		'\x2', '\x2', '\x2', '\x78A', '\x78B', '\x3', '\x2', '\x2', '\x2', '\x78B', 
		'\x78C', '\x3', '\x2', '\x2', '\x2', '\x78C', '\x7B3', '\x5', '\x1F6', 
		'\xFC', '\x2', '\x78D', '\x78F', '\a', '\x116', '\x2', '\x2', '\x78E', 
		'\x790', '\a', '\x3AA', '\x2', '\x2', '\x78F', '\x78E', '\x3', '\x2', 
		'\x2', '\x2', '\x78F', '\x790', '\x3', '\x2', '\x2', '\x2', '\x790', '\x791', 
		'\x3', '\x2', '\x2', '\x2', '\x791', '\x7B3', '\a', '\x3C2', '\x2', '\x2', 
		'\x792', '\x793', '\a', '\x124', '\x2', '\x2', '\x793', '\x795', '\a', 
		'\x12B', '\x2', '\x2', '\x794', '\x796', '\a', '\x3AA', '\x2', '\x2', 
		'\x795', '\x794', '\x3', '\x2', '\x2', '\x2', '\x795', '\x796', '\x3', 
		'\x2', '\x2', '\x2', '\x796', '\x797', '\x3', '\x2', '\x2', '\x2', '\x797', 
		'\x7B3', '\a', '\x3C2', '\x2', '\x2', '\x798', '\x799', '\a', '\x45', 
		'\x2', '\x2', '\x799', '\x79B', '\a', '\x12B', '\x2', '\x2', '\x79A', 
		'\x79C', '\a', '\x3AA', '\x2', '\x2', '\x79B', '\x79A', '\x3', '\x2', 
		'\x2', '\x2', '\x79B', '\x79C', '\x3', '\x2', '\x2', '\x2', '\x79C', '\x79D', 
		'\x3', '\x2', '\x2', '\x2', '\x79D', '\x7B3', '\a', '\x3C2', '\x2', '\x2', 
		'\x79E', '\x7A0', '\a', '\x18C', '\x2', '\x2', '\x79F', '\x7A1', '\a', 
		'\x3AA', '\x2', '\x2', '\x7A0', '\x79F', '\x3', '\x2', '\x2', '\x2', '\x7A0', 
		'\x7A1', '\x3', '\x2', '\x2', '\x2', '\x7A1', '\x7A2', '\x3', '\x2', '\x2', 
		'\x2', '\x7A2', '\x7B3', '\x5', '\x206', '\x104', '\x2', '\x7A3', '\x7A5', 
		'\a', '\x194', '\x2', '\x2', '\x7A4', '\x7A6', '\a', '\x3AA', '\x2', '\x2', 
		'\x7A5', '\x7A4', '\x3', '\x2', '\x2', '\x2', '\x7A5', '\x7A6', '\x3', 
		'\x2', '\x2', '\x2', '\x7A6', '\x7A7', '\x3', '\x2', '\x2', '\x2', '\x7A7', 
		'\x7B3', '\x5', '\x206', '\x104', '\x2', '\x7A8', '\x7AA', '\a', '\x205', 
		'\x2', '\x2', '\x7A9', '\x7AB', '\a', '\x3AA', '\x2', '\x2', '\x7AA', 
		'\x7A9', '\x3', '\x2', '\x2', '\x2', '\x7AA', '\x7AB', '\x3', '\x2', '\x2', 
		'\x2', '\x7AB', '\x7AC', '\x3', '\x2', '\x2', '\x2', '\x7AC', '\x7B3', 
		'\x5', '\x200', '\x101', '\x2', '\x7AD', '\x7AF', '\a', '\x19F', '\x2', 
		'\x2', '\x7AE', '\x7B0', '\a', '\x3AA', '\x2', '\x2', '\x7AF', '\x7AE', 
		'\x3', '\x2', '\x2', '\x2', '\x7AF', '\x7B0', '\x3', '\x2', '\x2', '\x2', 
		'\x7B0', '\x7B1', '\x3', '\x2', '\x2', '\x2', '\x7B1', '\x7B3', '\x5', 
		'\x200', '\x101', '\x2', '\x7B2', '\x786', '\x3', '\x2', '\x2', '\x2', 
		'\x7B2', '\x78D', '\x3', '\x2', '\x2', '\x2', '\x7B2', '\x792', '\x3', 
		'\x2', '\x2', '\x2', '\x7B2', '\x798', '\x3', '\x2', '\x2', '\x2', '\x7B2', 
		'\x79E', '\x3', '\x2', '\x2', '\x2', '\x7B2', '\x7A3', '\x3', '\x2', '\x2', 
		'\x2', '\x7B2', '\x7A8', '\x3', '\x2', '\x2', '\x2', '\x7B2', '\x7AD', 
		'\x3', '\x2', '\x2', '\x2', '\x7B3', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\x7B4', '\x7B5', '\a', '\t', '\x2', '\x2', '\x7B5', '\x7B7', '\t', '\x2', 
		'\x2', '\x2', '\x7B6', '\x7B8', '\x5', '\x200', '\x101', '\x2', '\x7B7', 
		'\x7B6', '\x3', '\x2', '\x2', '\x2', '\x7B7', '\x7B8', '\x3', '\x2', '\x2', 
		'\x2', '\x7B8', '\x7BA', '\x3', '\x2', '\x2', '\x2', '\x7B9', '\x7BB', 
		'\x5', '\x32', '\x1A', '\x2', '\x7BA', '\x7B9', '\x3', '\x2', '\x2', '\x2', 
		'\x7BB', '\x7BC', '\x3', '\x2', '\x2', '\x2', '\x7BC', '\x7BA', '\x3', 
		'\x2', '\x2', '\x2', '\x7BC', '\x7BD', '\x3', '\x2', '\x2', '\x2', '\x7BD', 
		'\x7C7', '\x3', '\x2', '\x2', '\x2', '\x7BE', '\x7BF', '\a', '\t', '\x2', 
		'\x2', '\x7BF', '\x7C0', '\t', '\x2', '\x2', '\x2', '\x7C0', '\x7C1', 
		'\x5', '\x200', '\x101', '\x2', '\x7C1', '\x7C2', '\a', '\x213', '\x2', 
		'\x2', '\x7C2', '\x7C3', '\a', '\x124', '\x2', '\x2', '\x7C3', '\x7C4', 
		'\a', '\x12B', '\x2', '\x2', '\x7C4', '\x7C5', '\a', '\x199', '\x2', '\x2', 
		'\x7C5', '\x7C7', '\x3', '\x2', '\x2', '\x2', '\x7C6', '\x7B4', '\x3', 
		'\x2', '\x2', '\x2', '\x7C6', '\x7BE', '\x3', '\x2', '\x2', '\x2', '\x7C7', 
		's', '\x3', '\x2', '\x2', '\x2', '\x7C8', '\x7CA', '\a', '\t', '\x2', 
		'\x2', '\x7C9', '\x7CB', '\x5', '\x34', '\x1B', '\x2', '\x7CA', '\x7C9', 
		'\x3', '\x2', '\x2', '\x2', '\x7CA', '\x7CB', '\x3', '\x2', '\x2', '\x2', 
		'\x7CB', '\x7CC', '\x3', '\x2', '\x2', '\x2', '\x7CC', '\x7CD', '\a', 
		'\x13D', '\x2', '\x2', '\x7CD', '\x7D1', '\x5', '\x1E6', '\xF4', '\x2', 
		'\x7CE', '\x7CF', '\a', '\x66', '\x2', '\x2', '\x7CF', '\x7D0', '\a', 
		'\x1DF', '\x2', '\x2', '\x7D0', '\x7D2', '\x5', '\x36', '\x1C', '\x2', 
		'\x7D1', '\x7CE', '\x3', '\x2', '\x2', '\x2', '\x7D1', '\x7D2', '\x3', 
		'\x2', '\x2', '\x2', '\x7D2', '\x7D9', '\x3', '\x2', '\x2', '\x2', '\x7D3', 
		'\x7D4', '\a', '\x66', '\x2', '\x2', '\x7D4', '\x7D6', '\a', '\x119', 
		'\x2', '\x2', '\x7D5', '\x7D7', '\a', '\x63', '\x2', '\x2', '\x7D6', '\x7D5', 
		'\x3', '\x2', '\x2', '\x2', '\x7D6', '\x7D7', '\x3', '\x2', '\x2', '\x2', 
		'\x7D7', '\x7D8', '\x3', '\x2', '\x2', '\x2', '\x7D8', '\x7DA', '\a', 
		'\x1BA', '\x2', '\x2', '\x7D9', '\x7D3', '\x3', '\x2', '\x2', '\x2', '\x7D9', 
		'\x7DA', '\x3', '\x2', '\x2', '\x2', '\x7DA', '\x7DE', '\x3', '\x2', '\x2', 
		'\x2', '\x7DB', '\x7DC', '\a', 'y', '\x2', '\x2', '\x7DC', '\x7DD', '\a', 
		'\x96', '\x2', '\x2', '\x7DD', '\x7DF', '\x5', '\x1E6', '\xF4', '\x2', 
		'\x7DE', '\x7DB', '\x3', '\x2', '\x2', '\x2', '\x7DE', '\x7DF', '\x3', 
		'\x2', '\x2', '\x2', '\x7DF', '\x7E1', '\x3', '\x2', '\x2', '\x2', '\x7E0', 
		'\x7E2', '\x5', '>', ' ', '\x2', '\x7E1', '\x7E0', '\x3', '\x2', '\x2', 
		'\x2', '\x7E1', '\x7E2', '\x3', '\x2', '\x2', '\x2', '\x7E2', '\x7E5', 
		'\x3', '\x2', '\x2', '\x2', '\x7E3', '\x7E4', '\a', '\x116', '\x2', '\x2', 
		'\x7E4', '\x7E6', '\a', '\x3C2', '\x2', '\x2', '\x7E5', '\x7E3', '\x3', 
		'\x2', '\x2', '\x2', '\x7E5', '\x7E6', '\x3', '\x2', '\x2', '\x2', '\x7E6', 
		'\x7E9', '\x3', '\x2', '\x2', '\x2', '\x7E7', '\x7E8', '\a', '\x12F', 
		'\x2', '\x2', '\x7E8', '\x7EA', '\x5', '\x158', '\xAD', '\x2', '\x7E9', 
		'\x7E7', '\x3', '\x2', '\x2', '\x2', '\x7E9', '\x7EA', '\x3', '\x2', '\x2', 
		'\x2', '\x7EA', 'u', '\x3', '\x2', '\x2', '\x2', '\x7EB', '\x7EC', '\a', 
		'\t', '\x2', '\x2', '\x7EC', '\x7ED', '\a', '\x151', '\x2', '\x2', '\x7ED', 
		'\x7F1', '\x5', '\x1E6', '\xF4', '\x2', '\x7EE', '\x7F0', '\x5', 'H', 
		'%', '\x2', '\x7EF', '\x7EE', '\x3', '\x2', '\x2', '\x2', '\x7F0', '\x7F3', 
		'\x3', '\x2', '\x2', '\x2', '\x7F1', '\x7EF', '\x3', '\x2', '\x2', '\x2', 
		'\x7F1', '\x7F2', '\x3', '\x2', '\x2', '\x2', '\x7F2', 'w', '\x3', '\x2', 
		'\x2', '\x2', '\x7F3', '\x7F1', '\x3', '\x2', '\x2', '\x2', '\x7F4', '\x7F5', 
		'\a', '\t', '\x2', '\x2', '\x7F5', '\x7F6', '\a', '\x163', '\x2', '\x2', 
		'\x7F6', '\x7F7', '\a', '\x1DA', '\x2', '\x2', '\x7F7', '\x7F8', '\a', 
		'\x265', '\x2', '\x2', '\x7F8', '\x7F9', '\a', '\x175', '\x2', '\x2', 
		'\x7F9', '\x7FA', '\a', 'O', '\x2', '\x2', '\x7FA', 'y', '\x3', '\x2', 
		'\x2', '\x2', '\x7FB', '\x7FC', '\a', '\t', '\x2', '\x2', '\x7FC', '\x7FD', 
		'\a', '\x173', '\x2', '\x2', '\x7FD', '\x7FE', '\a', '?', '\x2', '\x2', 
		'\x7FE', '\x7FF', '\x5', '\x200', '\x101', '\x2', '\x7FF', '\x800', '\a', 
		'\a', '\x2', '\x2', '\x800', '\x801', '\a', '\x20E', '\x2', '\x2', '\x801', 
		'\x807', '\a', '\x3C2', '\x2', '\x2', '\x802', '\x804', '\a', '\x15F', 
		'\x2', '\x2', '\x803', '\x805', '\a', '\x3AA', '\x2', '\x2', '\x804', 
		'\x803', '\x3', '\x2', '\x2', '\x2', '\x804', '\x805', '\x3', '\x2', '\x2', 
		'\x2', '\x805', '\x806', '\x3', '\x2', '\x2', '\x2', '\x806', '\x808', 
		'\x5', '\x208', '\x105', '\x2', '\x807', '\x802', '\x3', '\x2', '\x2', 
		'\x2', '\x807', '\x808', '\x3', '\x2', '\x2', '\x2', '\x808', '\x80A', 
		'\x3', '\x2', '\x2', '\x2', '\x809', '\x80B', '\a', '\x21B', '\x2', '\x2', 
		'\x80A', '\x809', '\x3', '\x2', '\x2', '\x2', '\x80A', '\x80B', '\x3', 
		'\x2', '\x2', '\x2', '\x80B', '\x80C', '\x3', '\x2', '\x2', '\x2', '\x80C', 
		'\x80E', '\a', '\x137', '\x2', '\x2', '\x80D', '\x80F', '\a', '\x3AA', 
		'\x2', '\x2', '\x80E', '\x80D', '\x3', '\x2', '\x2', '\x2', '\x80E', '\x80F', 
		'\x3', '\x2', '\x2', '\x2', '\x80F', '\x810', '\x3', '\x2', '\x2', '\x2', 
		'\x810', '\x811', '\x5', '\x1F6', '\xFC', '\x2', '\x811', '{', '\x3', 
		'\x2', '\x2', '\x2', '\x812', '\x813', '\a', '\t', '\x2', '\x2', '\x813', 
		'\x814', '\a', 'q', '\x2', '\x2', '\x814', '\x818', '\x5', '\x1E6', '\xF4', 
		'\x2', '\x815', '\x817', '\x5', 'H', '%', '\x2', '\x816', '\x815', '\x3', 
		'\x2', '\x2', '\x2', '\x817', '\x81A', '\x3', '\x2', '\x2', '\x2', '\x818', 
		'\x816', '\x3', '\x2', '\x2', '\x2', '\x818', '\x819', '\x3', '\x2', '\x2', 
		'\x2', '\x819', '}', '\x3', '\x2', '\x2', '\x2', '\x81A', '\x818', '\x3', 
		'\x2', '\x2', '\x2', '\x81B', '\x81C', '\a', '\t', '\x2', '\x2', '\x81C', 
		'\x81D', '\a', '\x1E1', '\x2', '\x2', '\x81D', '\x81E', '\x5', '\x200', 
		'\x101', '\x2', '\x81E', '\x81F', '\a', '\x1AA', '\x2', '\x2', '\x81F', 
		'\x820', '\a', '\x3B3', '\x2', '\x2', '\x820', '\x825', '\x5', 'J', '&', 
		'\x2', '\x821', '\x822', '\a', '\x3B5', '\x2', '\x2', '\x822', '\x824', 
		'\x5', 'J', '&', '\x2', '\x823', '\x821', '\x3', '\x2', '\x2', '\x2', 
		'\x824', '\x827', '\x3', '\x2', '\x2', '\x2', '\x825', '\x823', '\x3', 
		'\x2', '\x2', '\x2', '\x825', '\x826', '\x3', '\x2', '\x2', '\x2', '\x826', 
		'\x828', '\x3', '\x2', '\x2', '\x2', '\x827', '\x825', '\x3', '\x2', '\x2', 
		'\x2', '\x828', '\x829', '\a', '\x3B4', '\x2', '\x2', '\x829', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x82A', '\x82C', '\a', '\t', '\x2', '\x2', 
		'\x82B', '\x82D', '\t', '\x3', '\x2', '\x2', '\x82C', '\x82B', '\x3', 
		'\x2', '\x2', '\x2', '\x82C', '\x82D', '\x3', '\x2', '\x2', '\x2', '\x82D', 
		'\x82F', '\x3', '\x2', '\x2', '\x2', '\x82E', '\x830', '\a', '\x43', '\x2', 
		'\x2', '\x82F', '\x82E', '\x3', '\x2', '\x2', '\x2', '\x82F', '\x830', 
		'\x3', '\x2', '\x2', '\x2', '\x830', '\x831', '\x3', '\x2', '\x2', '\x2', 
		'\x831', '\x832', '\a', '\x93', '\x2', '\x2', '\x832', '\x833', '\x5', 
		'\x1E8', '\xF5', '\x2', '\x833', '\x838', '\x5', '\x86', '\x44', '\x2', 
		'\x834', '\x835', '\a', '\x3B5', '\x2', '\x2', '\x835', '\x837', '\x5', 
		'\x86', '\x44', '\x2', '\x836', '\x834', '\x3', '\x2', '\x2', '\x2', '\x837', 
		'\x83A', '\x3', '\x2', '\x2', '\x2', '\x838', '\x836', '\x3', '\x2', '\x2', 
		'\x2', '\x838', '\x839', '\x3', '\x2', '\x2', '\x2', '\x839', '\x83C', 
		'\x3', '\x2', '\x2', '\x2', '\x83A', '\x838', '\x3', '\x2', '\x2', '\x2', 
		'\x83B', '\x83D', '\x5', '\x62', '\x32', '\x2', '\x83C', '\x83B', '\x3', 
		'\x2', '\x2', '\x2', '\x83C', '\x83D', '\x3', '\x2', '\x2', '\x2', '\x83D', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x83E', '\x83F', '\a', '\t', '\x2', 
		'\x2', '\x83F', '\x840', '\a', '\x205', '\x2', '\x2', '\x840', '\x841', 
		'\x5', '\x200', '\x101', '\x2', '\x841', '\x842', '\t', '\x1B', '\x2', 
		'\x2', '\x842', '\x843', '\a', '\x125', '\x2', '\x2', '\x843', '\x847', 
		'\a', '\x3C2', '\x2', '\x2', '\x844', '\x845', '\a', '\x15F', '\x2', '\x2', 
		'\x845', '\x846', '\a', '\x3AA', '\x2', '\x2', '\x846', '\x848', '\x5', 
		'\x208', '\x105', '\x2', '\x847', '\x844', '\x3', '\x2', '\x2', '\x2', 
		'\x847', '\x848', '\x3', '\x2', '\x2', '\x2', '\x848', '\x84A', '\x3', 
		'\x2', '\x2', '\x2', '\x849', '\x84B', '\a', '\x21B', '\x2', '\x2', '\x84A', 
		'\x849', '\x3', '\x2', '\x2', '\x2', '\x84A', '\x84B', '\x3', '\x2', '\x2', 
		'\x2', '\x84B', '\x84C', '\x3', '\x2', '\x2', '\x2', '\x84C', '\x84E', 
		'\a', '\x137', '\x2', '\x2', '\x84D', '\x84F', '\a', '\x3AA', '\x2', '\x2', 
		'\x84E', '\x84D', '\x3', '\x2', '\x2', '\x2', '\x84E', '\x84F', '\x3', 
		'\x2', '\x2', '\x2', '\x84F', '\x850', '\x3', '\x2', '\x2', '\x2', '\x850', 
		'\x851', '\x5', '\x1F6', '\xFC', '\x2', '\x851', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x852', '\x856', '\a', '\t', '\x2', '\x2', '\x853', '\x854', 
		'\a', '\xFA', '\x2', '\x2', '\x854', '\x855', '\a', '\x3AA', '\x2', '\x2', 
		'\x855', '\x857', '\t', '\f', '\x2', '\x2', '\x856', '\x853', '\x3', '\x2', 
		'\x2', '\x2', '\x856', '\x857', '\x3', '\x2', '\x2', '\x2', '\x857', '\x859', 
		'\x3', '\x2', '\x2', '\x2', '\x858', '\x85A', '\x5', '\x34', '\x1B', '\x2', 
		'\x859', '\x858', '\x3', '\x2', '\x2', '\x2', '\x859', '\x85A', '\x3', 
		'\x2', '\x2', '\x2', '\x85A', '\x85E', '\x3', '\x2', '\x2', '\x2', '\x85B', 
		'\x85C', '\a', '\x89', '\x2', '\x2', '\x85C', '\x85D', '\a', '\x1E0', 
		'\x2', '\x2', '\x85D', '\x85F', '\t', '\r', '\x2', '\x2', '\x85E', '\x85B', 
		'\x3', '\x2', '\x2', '\x2', '\x85E', '\x85F', '\x3', '\x2', '\x2', '\x2', 
		'\x85F', '\x860', '\x3', '\x2', '\x2', '\x2', '\x860', '\x861', '\a', 
		'\x21A', '\x2', '\x2', '\x861', '\x866', '\x5', '\x1E6', '\xF4', '\x2', 
		'\x862', '\x863', '\a', '\x3B3', '\x2', '\x2', '\x863', '\x864', '\x5', 
		'\x21E', '\x110', '\x2', '\x864', '\x865', '\a', '\x3B4', '\x2', '\x2', 
		'\x865', '\x867', '\x3', '\x2', '\x2', '\x2', '\x866', '\x862', '\x3', 
		'\x2', '\x2', '\x2', '\x866', '\x867', '\x3', '\x2', '\x2', '\x2', '\x867', 
		'\x868', '\x3', '\x2', '\x2', '\x2', '\x868', '\x869', '\a', '\f', '\x2', 
		'\x2', '\x869', '\x870', '\x5', '\xB4', '[', '\x2', '\x86A', '\x86C', 
		'\a', '\xA7', '\x2', '\x2', '\x86B', '\x86D', '\t', '\xE', '\x2', '\x2', 
		'\x86C', '\x86B', '\x3', '\x2', '\x2', '\x2', '\x86C', '\x86D', '\x3', 
		'\x2', '\x2', '\x2', '\x86D', '\x86E', '\x3', '\x2', '\x2', '\x2', '\x86E', 
		'\x86F', '\a', '\x18', '\x2', '\x2', '\x86F', '\x871', '\a', 'h', '\x2', 
		'\x2', '\x870', '\x86A', '\x3', '\x2', '\x2', '\x2', '\x870', '\x871', 
		'\x3', '\x2', '\x2', '\x2', '\x871', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x872', '\x9B1', '\x5', '^', '\x30', '\x2', '\x873', '\x875', '\a', '\a', 
		'\x2', '\x2', '\x874', '\x876', '\a', '\x1A', '\x2', '\x2', '\x875', '\x874', 
		'\x3', '\x2', '\x2', '\x2', '\x875', '\x876', '\x3', '\x2', '\x2', '\x2', 
		'\x876', '\x877', '\x3', '\x2', '\x2', '\x2', '\x877', '\x878', '\x5', 
		'\x200', '\x101', '\x2', '\x878', '\x87C', '\x5', 'P', ')', '\x2', '\x879', 
		'\x87D', '\a', '\x14B', '\x2', '\x2', '\x87A', '\x87B', '\a', '\xF8', 
		'\x2', '\x2', '\x87B', '\x87D', '\x5', '\x200', '\x101', '\x2', '\x87C', 
		'\x879', '\x3', '\x2', '\x2', '\x2', '\x87C', '\x87A', '\x3', '\x2', '\x2', 
		'\x2', '\x87C', '\x87D', '\x3', '\x2', '\x2', '\x2', '\x87D', '\x9B1', 
		'\x3', '\x2', '\x2', '\x2', '\x87E', '\x880', '\a', '\a', '\x2', '\x2', 
		'\x87F', '\x881', '\a', '\x1A', '\x2', '\x2', '\x880', '\x87F', '\x3', 
		'\x2', '\x2', '\x2', '\x880', '\x881', '\x3', '\x2', '\x2', '\x2', '\x881', 
		'\x882', '\x3', '\x2', '\x2', '\x2', '\x882', '\x883', '\a', '\x3B3', 
		'\x2', '\x2', '\x883', '\x884', '\x5', '\x200', '\x101', '\x2', '\x884', 
		'\x88B', '\x5', 'P', ')', '\x2', '\x885', '\x886', '\a', '\x3B5', '\x2', 
		'\x2', '\x886', '\x887', '\x5', '\x200', '\x101', '\x2', '\x887', '\x888', 
		'\x5', 'P', ')', '\x2', '\x888', '\x88A', '\x3', '\x2', '\x2', '\x2', 
		'\x889', '\x885', '\x3', '\x2', '\x2', '\x2', '\x88A', '\x88D', '\x3', 
		'\x2', '\x2', '\x2', '\x88B', '\x889', '\x3', '\x2', '\x2', '\x2', '\x88B', 
		'\x88C', '\x3', '\x2', '\x2', '\x2', '\x88C', '\x88E', '\x3', '\x2', '\x2', 
		'\x2', '\x88D', '\x88B', '\x3', '\x2', '\x2', '\x2', '\x88E', '\x88F', 
		'\a', '\x3B4', '\x2', '\x2', '\x88F', '\x9B1', '\x3', '\x2', '\x2', '\x2', 
		'\x890', '\x891', '\a', '\a', '\x2', '\x2', '\x891', '\x893', '\t', '\x13', 
		'\x2', '\x2', '\x892', '\x894', '\x5', '\x200', '\x101', '\x2', '\x893', 
		'\x892', '\x3', '\x2', '\x2', '\x2', '\x893', '\x894', '\x3', '\x2', '\x2', 
		'\x2', '\x894', '\x896', '\x3', '\x2', '\x2', '\x2', '\x895', '\x897', 
		'\x5', '@', '!', '\x2', '\x896', '\x895', '\x3', '\x2', '\x2', '\x2', 
		'\x896', '\x897', '\x3', '\x2', '\x2', '\x2', '\x897', '\x898', '\x3', 
		'\x2', '\x2', '\x2', '\x898', '\x89C', '\x5', '\x222', '\x112', '\x2', 
		'\x899', '\x89B', '\x5', '\x42', '\"', '\x2', '\x89A', '\x899', '\x3', 
		'\x2', '\x2', '\x2', '\x89B', '\x89E', '\x3', '\x2', '\x2', '\x2', '\x89C', 
		'\x89A', '\x3', '\x2', '\x2', '\x2', '\x89C', '\x89D', '\x3', '\x2', '\x2', 
		'\x2', '\x89D', '\x9B1', '\x3', '\x2', '\x2', '\x2', '\x89E', '\x89C', 
		'\x3', '\x2', '\x2', '\x2', '\x89F', '\x8A4', '\a', '\a', '\x2', '\x2', 
		'\x8A0', '\x8A2', '\a', '\x1C', '\x2', '\x2', '\x8A1', '\x8A3', '\x5', 
		'\x200', '\x101', '\x2', '\x8A2', '\x8A1', '\x3', '\x2', '\x2', '\x2', 
		'\x8A2', '\x8A3', '\x3', '\x2', '\x2', '\x2', '\x8A3', '\x8A5', '\x3', 
		'\x2', '\x2', '\x2', '\x8A4', '\x8A0', '\x3', '\x2', '\x2', '\x2', '\x8A4', 
		'\x8A5', '\x3', '\x2', '\x2', '\x2', '\x8A5', '\x8A6', '\x3', '\x2', '\x2', 
		'\x2', '\x8A6', '\x8A7', '\a', 'p', '\x2', '\x2', '\x8A7', '\x8A9', '\a', 
		'O', '\x2', '\x2', '\x8A8', '\x8AA', '\x5', '@', '!', '\x2', '\x8A9', 
		'\x8A8', '\x3', '\x2', '\x2', '\x2', '\x8A9', '\x8AA', '\x3', '\x2', '\x2', 
		'\x2', '\x8AA', '\x8AB', '\x3', '\x2', '\x2', '\x2', '\x8AB', '\x8AF', 
		'\x5', '\x222', '\x112', '\x2', '\x8AC', '\x8AE', '\x5', '\x42', '\"', 
		'\x2', '\x8AD', '\x8AC', '\x3', '\x2', '\x2', '\x2', '\x8AE', '\x8B1', 
		'\x3', '\x2', '\x2', '\x2', '\x8AF', '\x8AD', '\x3', '\x2', '\x2', '\x2', 
		'\x8AF', '\x8B0', '\x3', '\x2', '\x2', '\x2', '\x8B0', '\x9B1', '\x3', 
		'\x2', '\x2', '\x2', '\x8B1', '\x8AF', '\x3', '\x2', '\x2', '\x2', '\x8B2', 
		'\x8B7', '\a', '\a', '\x2', '\x2', '\x8B3', '\x8B5', '\a', '\x1C', '\x2', 
		'\x2', '\x8B4', '\x8B6', '\x5', '\x200', '\x101', '\x2', '\x8B5', '\x8B4', 
		'\x3', '\x2', '\x2', '\x2', '\x8B5', '\x8B6', '\x3', '\x2', '\x2', '\x2', 
		'\x8B6', '\x8B8', '\x3', '\x2', '\x2', '\x2', '\x8B7', '\x8B3', '\x3', 
		'\x2', '\x2', '\x2', '\x8B7', '\x8B8', '\x3', '\x2', '\x2', '\x2', '\x8B8', 
		'\x8B9', '\x3', '\x2', '\x2', '\x2', '\x8B9', '\x8BB', '\a', '\x9C', '\x2', 
		'\x2', '\x8BA', '\x8BC', '\t', '\x13', '\x2', '\x2', '\x8BB', '\x8BA', 
		'\x3', '\x2', '\x2', '\x2', '\x8BB', '\x8BC', '\x3', '\x2', '\x2', '\x2', 
		'\x8BC', '\x8BE', '\x3', '\x2', '\x2', '\x2', '\x8BD', '\x8BF', '\x5', 
		'\x200', '\x101', '\x2', '\x8BE', '\x8BD', '\x3', '\x2', '\x2', '\x2', 
		'\x8BE', '\x8BF', '\x3', '\x2', '\x2', '\x2', '\x8BF', '\x8C1', '\x3', 
		'\x2', '\x2', '\x2', '\x8C0', '\x8C2', '\x5', '@', '!', '\x2', '\x8C1', 
		'\x8C0', '\x3', '\x2', '\x2', '\x2', '\x8C1', '\x8C2', '\x3', '\x2', '\x2', 
		'\x2', '\x8C2', '\x8C3', '\x3', '\x2', '\x2', '\x2', '\x8C3', '\x8C7', 
		'\x5', '\x222', '\x112', '\x2', '\x8C4', '\x8C6', '\x5', '\x42', '\"', 
		'\x2', '\x8C5', '\x8C4', '\x3', '\x2', '\x2', '\x2', '\x8C6', '\x8C9', 
		'\x3', '\x2', '\x2', '\x2', '\x8C7', '\x8C5', '\x3', '\x2', '\x2', '\x2', 
		'\x8C7', '\x8C8', '\x3', '\x2', '\x2', '\x2', '\x8C8', '\x9B1', '\x3', 
		'\x2', '\x2', '\x2', '\x8C9', '\x8C7', '\x3', '\x2', '\x2', '\x2', '\x8CA', 
		'\x8CB', '\a', '\a', '\x2', '\x2', '\x8CB', '\x8CD', '\t', '\x15', '\x2', 
		'\x2', '\x8CC', '\x8CE', '\t', '\x13', '\x2', '\x2', '\x8CD', '\x8CC', 
		'\x3', '\x2', '\x2', '\x2', '\x8CD', '\x8CE', '\x3', '\x2', '\x2', '\x2', 
		'\x8CE', '\x8D0', '\x3', '\x2', '\x2', '\x2', '\x8CF', '\x8D1', '\x5', 
		'\x200', '\x101', '\x2', '\x8D0', '\x8CF', '\x3', '\x2', '\x2', '\x2', 
		'\x8D0', '\x8D1', '\x3', '\x2', '\x2', '\x2', '\x8D1', '\x8D2', '\x3', 
		'\x2', '\x2', '\x2', '\x8D2', '\x8D6', '\x5', '\x222', '\x112', '\x2', 
		'\x8D3', '\x8D5', '\x5', '\x42', '\"', '\x2', '\x8D4', '\x8D3', '\x3', 
		'\x2', '\x2', '\x2', '\x8D5', '\x8D8', '\x3', '\x2', '\x2', '\x2', '\x8D6', 
		'\x8D4', '\x3', '\x2', '\x2', '\x2', '\x8D6', '\x8D7', '\x3', '\x2', '\x2', 
		'\x2', '\x8D7', '\x9B1', '\x3', '\x2', '\x2', '\x2', '\x8D8', '\x8D6', 
		'\x3', '\x2', '\x2', '\x2', '\x8D9', '\x8DE', '\a', '\a', '\x2', '\x2', 
		'\x8DA', '\x8DC', '\a', '\x1C', '\x2', '\x2', '\x8DB', '\x8DD', '\x5', 
		'\x200', '\x101', '\x2', '\x8DC', '\x8DB', '\x3', '\x2', '\x2', '\x2', 
		'\x8DC', '\x8DD', '\x3', '\x2', '\x2', '\x2', '\x8DD', '\x8DF', '\x3', 
		'\x2', '\x2', '\x2', '\x8DE', '\x8DA', '\x3', '\x2', '\x2', '\x2', '\x8DE', 
		'\x8DF', '\x3', '\x2', '\x2', '\x2', '\x8DF', '\x8E0', '\x3', '\x2', '\x2', 
		'\x2', '\x8E0', '\x8E1', '\a', ';', '\x2', '\x2', '\x8E1', '\x8E3', '\a', 
		'O', '\x2', '\x2', '\x8E2', '\x8E4', '\x5', '\x200', '\x101', '\x2', '\x8E3', 
		'\x8E2', '\x3', '\x2', '\x2', '\x2', '\x8E3', '\x8E4', '\x3', '\x2', '\x2', 
		'\x2', '\x8E4', '\x8E5', '\x3', '\x2', '\x2', '\x2', '\x8E5', '\x8E6', 
		'\x5', '\x222', '\x112', '\x2', '\x8E6', '\x8E7', '\x5', 'V', ',', '\x2', 
		'\x8E7', '\x9B1', '\x3', '\x2', '\x2', '\x2', '\x8E8', '\x8ED', '\a', 
		'\a', '\x2', '\x2', '\x8E9', '\x8EB', '\a', '\x1C', '\x2', '\x2', '\x8EA', 
		'\x8EC', '\x5', '\x200', '\x101', '\x2', '\x8EB', '\x8EA', '\x3', '\x2', 
		'\x2', '\x2', '\x8EB', '\x8EC', '\x3', '\x2', '\x2', '\x2', '\x8EC', '\x8EE', 
		'\x3', '\x2', '\x2', '\x2', '\x8ED', '\x8E9', '\x3', '\x2', '\x2', '\x2', 
		'\x8ED', '\x8EE', '\x3', '\x2', '\x2', '\x2', '\x8EE', '\x8EF', '\x3', 
		'\x2', '\x2', '\x2', '\x8EF', '\x8F0', '\a', '\x18', '\x2', '\x2', '\x8F0', 
		'\x8F1', '\a', '\x3B3', '\x2', '\x2', '\x8F1', '\x8F2', '\x5', '\x24C', 
		'\x127', '\x2', '\x8F2', '\x8F3', '\a', '\x3B4', '\x2', '\x2', '\x8F3', 
		'\x9B1', '\x3', '\x2', '\x2', '\x2', '\x8F4', '\x8F6', '\a', '\xFA', '\x2', 
		'\x2', '\x8F5', '\x8F7', '\a', '\x3AA', '\x2', '\x2', '\x8F6', '\x8F5', 
		'\x3', '\x2', '\x2', '\x2', '\x8F6', '\x8F7', '\x3', '\x2', '\x2', '\x2', 
		'\x8F7', '\x8F8', '\x3', '\x2', '\x2', '\x2', '\x8F8', '\x9B1', '\t', 
		'\x5', '\x2', '\x2', '\x8F9', '\x8FB', '\a', '\t', '\x2', '\x2', '\x8FA', 
		'\x8FC', '\a', '\x1A', '\x2', '\x2', '\x8FB', '\x8FA', '\x3', '\x2', '\x2', 
		'\x2', '\x8FB', '\x8FC', '\x3', '\x2', '\x2', '\x2', '\x8FC', '\x8FD', 
		'\x3', '\x2', '\x2', '\x2', '\x8FD', '\x903', '\x5', '\x200', '\x101', 
		'\x2', '\x8FE', '\x8FF', '\a', '\x85', '\x2', '\x2', '\x8FF', '\x900', 
		'\a', '&', '\x2', '\x2', '\x900', '\x904', '\x5', '\x22E', '\x118', '\x2', 
		'\x901', '\x902', '\a', '.', '\x2', '\x2', '\x902', '\x904', '\a', '&', 
		'\x2', '\x2', '\x903', '\x8FE', '\x3', '\x2', '\x2', '\x2', '\x903', '\x901', 
		'\x3', '\x2', '\x2', '\x2', '\x904', '\x9B1', '\x3', '\x2', '\x2', '\x2', 
		'\x905', '\x907', '\a', '\x16', '\x2', '\x2', '\x906', '\x908', '\a', 
		'\x1A', '\x2', '\x2', '\x907', '\x906', '\x3', '\x2', '\x2', '\x2', '\x907', 
		'\x908', '\x3', '\x2', '\x2', '\x2', '\x908', '\x909', '\x3', '\x2', '\x2', 
		'\x2', '\x909', '\x90A', '\x5', '\x200', '\x101', '\x2', '\x90A', '\x90B', 
		'\x5', '\x200', '\x101', '\x2', '\x90B', '\x90F', '\x5', 'P', ')', '\x2', 
		'\x90C', '\x910', '\a', '\x14B', '\x2', '\x2', '\x90D', '\x90E', '\a', 
		'\xF8', '\x2', '\x2', '\x90E', '\x910', '\x5', '\x200', '\x101', '\x2', 
		'\x90F', '\x90C', '\x3', '\x2', '\x2', '\x2', '\x90F', '\x90D', '\x3', 
		'\x2', '\x2', '\x2', '\x90F', '\x910', '\x3', '\x2', '\x2', '\x2', '\x910', 
		'\x9B1', '\x3', '\x2', '\x2', '\x2', '\x911', '\x913', '\a', 'Z', '\x2', 
		'\x2', '\x912', '\x914', '\a', '\x3AA', '\x2', '\x2', '\x913', '\x912', 
		'\x3', '\x2', '\x2', '\x2', '\x913', '\x914', '\x3', '\x2', '\x2', '\x2', 
		'\x914', '\x915', '\x3', '\x2', '\x2', '\x2', '\x915', '\x9B1', '\t', 
		'\x6', '\x2', '\x2', '\x916', '\x918', '\a', '\x196', '\x2', '\x2', '\x917', 
		'\x919', '\a', '\x1A', '\x2', '\x2', '\x918', '\x917', '\x3', '\x2', '\x2', 
		'\x2', '\x918', '\x919', '\x3', '\x2', '\x2', '\x2', '\x919', '\x91A', 
		'\x3', '\x2', '\x2', '\x2', '\x91A', '\x91B', '\x5', '\x200', '\x101', 
		'\x2', '\x91B', '\x91F', '\x5', 'P', ')', '\x2', '\x91C', '\x920', '\a', 
		'\x14B', '\x2', '\x2', '\x91D', '\x91E', '\a', '\xF8', '\x2', '\x2', '\x91E', 
		'\x920', '\x5', '\x200', '\x101', '\x2', '\x91F', '\x91C', '\x3', '\x2', 
		'\x2', '\x2', '\x91F', '\x91D', '\x3', '\x2', '\x2', '\x2', '\x91F', '\x920', 
		'\x3', '\x2', '\x2', '\x2', '\x920', '\x9B1', '\x3', '\x2', '\x2', '\x2', 
		'\x921', '\x923', '\a', '.', '\x2', '\x2', '\x922', '\x924', '\a', '\x1A', 
		'\x2', '\x2', '\x923', '\x922', '\x3', '\x2', '\x2', '\x2', '\x923', '\x924', 
		'\x3', '\x2', '\x2', '\x2', '\x924', '\x925', '\x3', '\x2', '\x2', '\x2', 
		'\x925', '\x9B1', '\x5', '\x200', '\x101', '\x2', '\x926', '\x927', '\a', 
		'.', '\x2', '\x2', '\x927', '\x928', '\a', 'p', '\x2', '\x2', '\x928', 
		'\x9B1', '\a', 'O', '\x2', '\x2', '\x929', '\x92A', '\a', '.', '\x2', 
		'\x2', '\x92A', '\x92B', '\t', '\x13', '\x2', '\x2', '\x92B', '\x9B1', 
		'\x5', '\x200', '\x101', '\x2', '\x92C', '\x92D', '\a', '.', '\x2', '\x2', 
		'\x92D', '\x92E', '\a', ';', '\x2', '\x2', '\x92E', '\x92F', '\a', 'O', 
		'\x2', '\x2', '\x92F', '\x9B1', '\x5', '\x200', '\x101', '\x2', '\x930', 
		'\x931', '\a', '\x12C', '\x2', '\x2', '\x931', '\x9B1', '\a', 'P', '\x2', 
		'\x2', '\x932', '\x933', '\a', '\x133', '\x2', '\x2', '\x933', '\x9B1', 
		'\a', 'P', '\x2', '\x2', '\x934', '\x936', '\a', 'y', '\x2', '\x2', '\x935', 
		'\x937', '\t', '\x1C', '\x2', '\x2', '\x936', '\x935', '\x3', '\x2', '\x2', 
		'\x2', '\x936', '\x937', '\x3', '\x2', '\x2', '\x2', '\x937', '\x938', 
		'\x3', '\x2', '\x2', '\x2', '\x938', '\x9B1', '\x5', '\x200', '\x101', 
		'\x2', '\x939', '\x93A', '\a', 'k', '\x2', '\x2', '\x93A', '\x93B', '\a', 
		'\x11', '\x2', '\x2', '\x93B', '\x9B1', '\x5', '\x21E', '\x110', '\x2', 
		'\x93C', '\x93D', '\a', '\x1E', '\x2', '\x2', '\x93D', '\x93E', '\a', 
		'\x96', '\x2', '\x2', '\x93E', '\x93F', '\a', '\x17', '\x2', '\x2', '\x93F', 
		'\x940', '\a', '\x85', '\x2', '\x2', '\x940', '\x943', '\x5', '\x1F2', 
		'\xFA', '\x2', '\x941', '\x942', '\a', '\x19', '\x2', '\x2', '\x942', 
		'\x944', '\x5', '\x1F4', '\xFB', '\x2', '\x943', '\x941', '\x3', '\x2', 
		'\x2', '\x2', '\x943', '\x944', '\x3', '\x2', '\x2', '\x2', '\x944', '\x9B1', 
		'\x3', '\x2', '\x2', '\x2', '\x945', '\x947', '\a', '&', '\x2', '\x2', 
		'\x946', '\x945', '\x3', '\x2', '\x2', '\x2', '\x946', '\x947', '\x3', 
		'\x2', '\x2', '\x2', '\x947', '\x948', '\x3', '\x2', '\x2', '\x2', '\x948', 
		'\x949', '\a', '\x17', '\x2', '\x2', '\x949', '\x94A', '\a', '\x85', '\x2', 
		'\x2', '\x94A', '\x94B', '\a', '\x3AA', '\x2', '\x2', '\x94B', '\x94F', 
		'\x5', '\x1F2', '\xFA', '\x2', '\x94C', '\x94D', '\a', '\x19', '\x2', 
		'\x2', '\x94D', '\x94E', '\a', '\x3AA', '\x2', '\x2', '\x94E', '\x950', 
		'\x5', '\x1F4', '\xFB', '\x2', '\x94F', '\x94C', '\x3', '\x2', '\x2', 
		'\x2', '\x94F', '\x950', '\x3', '\x2', '\x2', '\x2', '\x950', '\x9B1', 
		'\x3', '\x2', '\x2', '\x2', '\x951', '\x952', '\a', '\x12D', '\x2', '\x2', 
		'\x952', '\x9B1', '\a', '\x205', '\x2', '\x2', '\x953', '\x954', '\a', 
		'\x15D', '\x2', '\x2', '\x954', '\x9B1', '\a', '\x205', '\x2', '\x2', 
		'\x955', '\x9B1', '\a', ':', '\x2', '\x2', '\x956', '\x957', '\t', '\x1D', 
		'\x2', '\x2', '\x957', '\x9B1', '\a', '\x217', '\x2', '\x2', '\x958', 
		'\x959', '\a', '\a', '\x2', '\x2', '\x959', '\x95A', '\a', 'o', '\x2', 
		'\x2', '\x95A', '\x9B1', '\x5', 'h', '\x35', '\x2', '\x95B', '\x95C', 
		'\a', '.', '\x2', '\x2', '\x95C', '\x95D', '\a', 'o', '\x2', '\x2', '\x95D', 
		'\x9B1', '\x5', '\x21E', '\x110', '\x2', '\x95E', '\x95F', '\a', '\x12D', 
		'\x2', '\x2', '\x95F', '\x962', '\a', 'o', '\x2', '\x2', '\x960', '\x963', 
		'\x5', '\x21E', '\x110', '\x2', '\x961', '\x963', '\a', '\b', '\x2', '\x2', 
		'\x962', '\x960', '\x3', '\x2', '\x2', '\x2', '\x962', '\x961', '\x3', 
		'\x2', '\x2', '\x2', '\x963', '\x964', '\x3', '\x2', '\x2', '\x2', '\x964', 
		'\x9B1', '\a', '\x205', '\x2', '\x2', '\x965', '\x966', '\a', '\x15D', 
		'\x2', '\x2', '\x966', '\x969', '\a', 'o', '\x2', '\x2', '\x967', '\x96A', 
		'\x5', '\x21E', '\x110', '\x2', '\x968', '\x96A', '\a', '\b', '\x2', '\x2', 
		'\x969', '\x967', '\x3', '\x2', '\x2', '\x2', '\x969', '\x968', '\x3', 
		'\x2', '\x2', '\x2', '\x96A', '\x96B', '\x3', '\x2', '\x2', '\x2', '\x96B', 
		'\x9B1', '\a', '\x205', '\x2', '\x2', '\x96C', '\x96D', '\a', '\x20C', 
		'\x2', '\x2', '\x96D', '\x970', '\a', 'o', '\x2', '\x2', '\x96E', '\x971', 
		'\x5', '\x21E', '\x110', '\x2', '\x96F', '\x971', '\a', '\b', '\x2', '\x2', 
		'\x970', '\x96E', '\x3', '\x2', '\x2', '\x2', '\x970', '\x96F', '\x3', 
		'\x2', '\x2', '\x2', '\x971', '\x9B1', '\x3', '\x2', '\x2', '\x2', '\x972', 
		'\x973', '\a', '\x112', '\x2', '\x2', '\x973', '\x974', '\a', 'o', '\x2', 
		'\x2', '\x974', '\x9B1', '\x5', '\x206', '\x104', '\x2', '\x975', '\x976', 
		'\a', '\x1CB', '\x2', '\x2', '\x976', '\x977', '\a', 'o', '\x2', '\x2', 
		'\x977', '\x978', '\x5', '\x21E', '\x110', '\x2', '\x978', '\x979', '\a', 
		'K', '\x2', '\x2', '\x979', '\x97A', '\a', '\x3B3', '\x2', '\x2', '\x97A', 
		'\x97F', '\x5', 'h', '\x35', '\x2', '\x97B', '\x97C', '\a', '\x3B5', '\x2', 
		'\x2', '\x97C', '\x97E', '\x5', 'h', '\x35', '\x2', '\x97D', '\x97B', 
		'\x3', '\x2', '\x2', '\x2', '\x97E', '\x981', '\x3', '\x2', '\x2', '\x2', 
		'\x97F', '\x97D', '\x3', '\x2', '\x2', '\x2', '\x97F', '\x980', '\x3', 
		'\x2', '\x2', '\x2', '\x980', '\x982', '\x3', '\x2', '\x2', '\x2', '\x981', 
		'\x97F', '\x3', '\x2', '\x2', '\x2', '\x982', '\x983', '\a', '\x3B4', 
		'\x2', '\x2', '\x983', '\x9B1', '\x3', '\x2', '\x2', '\x2', '\x984', '\x985', 
		'\a', '\x140', '\x2', '\x2', '\x985', '\x986', '\a', 'o', '\x2', '\x2', 
		'\x986', '\x987', '\x5', '\x200', '\x101', '\x2', '\x987', '\x988', '\a', 
		'\xA7', '\x2', '\x2', '\x988', '\x989', '\a', '\x93', '\x2', '\x2', '\x989', 
		'\x98C', '\x5', '\x1E8', '\xF5', '\x2', '\x98A', '\x98B', '\t', '\x1D', 
		'\x2', '\x2', '\x98B', '\x98D', '\a', '\x217', '\x2', '\x2', '\x98C', 
		'\x98A', '\x3', '\x2', '\x2', '\x2', '\x98C', '\x98D', '\x3', '\x2', '\x2', 
		'\x2', '\x98D', '\x9B1', '\x3', '\x2', '\x2', '\x2', '\x98E', '\x98F', 
		'\a', '\n', '\x2', '\x2', '\x98F', '\x992', '\a', 'o', '\x2', '\x2', '\x990', 
		'\x993', '\x5', '\x21E', '\x110', '\x2', '\x991', '\x993', '\a', '\b', 
		'\x2', '\x2', '\x992', '\x990', '\x3', '\x2', '\x2', '\x2', '\x992', '\x991', 
		'\x3', '\x2', '\x2', '\x2', '\x993', '\x9B1', '\x3', '\x2', '\x2', '\x2', 
		'\x994', '\x995', '\a', '\x18', '\x2', '\x2', '\x995', '\x998', '\a', 
		'o', '\x2', '\x2', '\x996', '\x999', '\x5', '\x21E', '\x110', '\x2', '\x997', 
		'\x999', '\a', '\b', '\x2', '\x2', '\x998', '\x996', '\x3', '\x2', '\x2', 
		'\x2', '\x998', '\x997', '\x3', '\x2', '\x2', '\x2', '\x999', '\x9B1', 
		'\x3', '\x2', '\x2', '\x2', '\x99A', '\x99B', '\a', 'g', '\x2', '\x2', 
		'\x99B', '\x99E', '\a', 'o', '\x2', '\x2', '\x99C', '\x99F', '\x5', '\x21E', 
		'\x110', '\x2', '\x99D', '\x99F', '\a', '\b', '\x2', '\x2', '\x99E', '\x99C', 
		'\x3', '\x2', '\x2', '\x2', '\x99E', '\x99D', '\x3', '\x2', '\x2', '\x2', 
		'\x99F', '\x9B1', '\x3', '\x2', '\x2', '\x2', '\x9A0', '\x9A1', '\a', 
		'\x1C2', '\x2', '\x2', '\x9A1', '\x9A4', '\a', 'o', '\x2', '\x2', '\x9A2', 
		'\x9A5', '\x5', '\x21E', '\x110', '\x2', '\x9A3', '\x9A5', '\a', '\b', 
		'\x2', '\x2', '\x9A4', '\x9A2', '\x3', '\x2', '\x2', '\x2', '\x9A4', '\x9A3', 
		'\x3', '\x2', '\x2', '\x2', '\x9A5', '\x9B1', '\x3', '\x2', '\x2', '\x2', 
		'\x9A6', '\x9A7', '\a', '\x1CC', '\x2', '\x2', '\x9A7', '\x9AA', '\a', 
		'o', '\x2', '\x2', '\x9A8', '\x9AB', '\x5', '\x21E', '\x110', '\x2', '\x9A9', 
		'\x9AB', '\a', '\b', '\x2', '\x2', '\x9AA', '\x9A8', '\x3', '\x2', '\x2', 
		'\x2', '\x9AA', '\x9A9', '\x3', '\x2', '\x2', '\x2', '\x9AB', '\x9B1', 
		'\x3', '\x2', '\x2', '\x2', '\x9AC', '\x9AD', '\a', '\x1CA', '\x2', '\x2', 
		'\x9AD', '\x9B1', '\a', '\x1B0', '\x2', '\x2', '\x9AE', '\x9AF', '\a', 
		'\x213', '\x2', '\x2', '\x9AF', '\x9B1', '\a', '\x1B0', '\x2', '\x2', 
		'\x9B0', '\x872', '\x3', '\x2', '\x2', '\x2', '\x9B0', '\x873', '\x3', 
		'\x2', '\x2', '\x2', '\x9B0', '\x87E', '\x3', '\x2', '\x2', '\x2', '\x9B0', 
		'\x890', '\x3', '\x2', '\x2', '\x2', '\x9B0', '\x89F', '\x3', '\x2', '\x2', 
		'\x2', '\x9B0', '\x8B2', '\x3', '\x2', '\x2', '\x2', '\x9B0', '\x8CA', 
		'\x3', '\x2', '\x2', '\x2', '\x9B0', '\x8D9', '\x3', '\x2', '\x2', '\x2', 
		'\x9B0', '\x8E8', '\x3', '\x2', '\x2', '\x2', '\x9B0', '\x8F4', '\x3', 
		'\x2', '\x2', '\x2', '\x9B0', '\x8F9', '\x3', '\x2', '\x2', '\x2', '\x9B0', 
		'\x905', '\x3', '\x2', '\x2', '\x2', '\x9B0', '\x911', '\x3', '\x2', '\x2', 
		'\x2', '\x9B0', '\x916', '\x3', '\x2', '\x2', '\x2', '\x9B0', '\x921', 
		'\x3', '\x2', '\x2', '\x2', '\x9B0', '\x926', '\x3', '\x2', '\x2', '\x2', 
		'\x9B0', '\x929', '\x3', '\x2', '\x2', '\x2', '\x9B0', '\x92C', '\x3', 
		'\x2', '\x2', '\x2', '\x9B0', '\x930', '\x3', '\x2', '\x2', '\x2', '\x9B0', 
		'\x932', '\x3', '\x2', '\x2', '\x2', '\x9B0', '\x934', '\x3', '\x2', '\x2', 
		'\x2', '\x9B0', '\x939', '\x3', '\x2', '\x2', '\x2', '\x9B0', '\x93C', 
		'\x3', '\x2', '\x2', '\x2', '\x9B0', '\x946', '\x3', '\x2', '\x2', '\x2', 
		'\x9B0', '\x951', '\x3', '\x2', '\x2', '\x2', '\x9B0', '\x953', '\x3', 
		'\x2', '\x2', '\x2', '\x9B0', '\x955', '\x3', '\x2', '\x2', '\x2', '\x9B0', 
		'\x956', '\x3', '\x2', '\x2', '\x2', '\x9B0', '\x958', '\x3', '\x2', '\x2', 
		'\x2', '\x9B0', '\x95B', '\x3', '\x2', '\x2', '\x2', '\x9B0', '\x95E', 
		'\x3', '\x2', '\x2', '\x2', '\x9B0', '\x965', '\x3', '\x2', '\x2', '\x2', 
		'\x9B0', '\x96C', '\x3', '\x2', '\x2', '\x2', '\x9B0', '\x972', '\x3', 
		'\x2', '\x2', '\x2', '\x9B0', '\x975', '\x3', '\x2', '\x2', '\x2', '\x9B0', 
		'\x984', '\x3', '\x2', '\x2', '\x2', '\x9B0', '\x98E', '\x3', '\x2', '\x2', 
		'\x2', '\x9B0', '\x994', '\x3', '\x2', '\x2', '\x2', '\x9B0', '\x99A', 
		'\x3', '\x2', '\x2', '\x2', '\x9B0', '\x9A0', '\x3', '\x2', '\x2', '\x2', 
		'\x9B0', '\x9A6', '\x3', '\x2', '\x2', '\x2', '\x9B0', '\x9AC', '\x3', 
		'\x2', '\x2', '\x2', '\x9B0', '\x9AE', '\x3', '\x2', '\x2', '\x2', '\x9B1', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x9B2', '\x9B3', '\a', '.', '\x2', 
		'\x2', '\x9B3', '\x9B5', '\t', '\x2', '\x2', '\x2', '\x9B4', '\x9B6', 
		'\x5', '\x234', '\x11B', '\x2', '\x9B5', '\x9B4', '\x3', '\x2', '\x2', 
		'\x2', '\x9B5', '\x9B6', '\x3', '\x2', '\x2', '\x2', '\x9B6', '\x9B7', 
		'\x3', '\x2', '\x2', '\x2', '\x9B7', '\x9B8', '\x5', '\x200', '\x101', 
		'\x2', '\x9B8', '\x89', '\x3', '\x2', '\x2', '\x2', '\x9B9', '\x9BA', 
		'\a', '.', '\x2', '\x2', '\x9BA', '\x9BC', '\a', '\x13D', '\x2', '\x2', 
		'\x9BB', '\x9BD', '\x5', '\x234', '\x11B', '\x2', '\x9BC', '\x9BB', '\x3', 
		'\x2', '\x2', '\x2', '\x9BC', '\x9BD', '\x3', '\x2', '\x2', '\x2', '\x9BD', 
		'\x9BE', '\x3', '\x2', '\x2', '\x2', '\x9BE', '\x9BF', '\x5', '\x1E6', 
		'\xF4', '\x2', '\x9BF', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x9C0', '\x9C1', 
		'\a', '.', '\x2', '\x2', '\x9C1', '\x9C3', '\a', '\x45', '\x2', '\x2', 
		'\x9C2', '\x9C4', '\t', '\x3', '\x2', '\x2', '\x9C3', '\x9C2', '\x3', 
		'\x2', '\x2', '\x2', '\x9C3', '\x9C4', '\x3', '\x2', '\x2', '\x2', '\x9C4', 
		'\x9C5', '\x3', '\x2', '\x2', '\x2', '\x9C5', '\x9C6', '\x5', '\x200', 
		'\x101', '\x2', '\x9C6', '\x9C7', '\a', '\x66', '\x2', '\x2', '\x9C7', 
		'\x9CD', '\x5', '\x1E8', '\xF5', '\x2', '\x9C8', '\x9CA', '\a', '\xFA', 
		'\x2', '\x2', '\x9C9', '\x9CB', '\a', '\x3AA', '\x2', '\x2', '\x9CA', 
		'\x9C9', '\x3', '\x2', '\x2', '\x2', '\x9CA', '\x9CB', '\x3', '\x2', '\x2', 
		'\x2', '\x9CB', '\x9CC', '\x3', '\x2', '\x2', '\x2', '\x9CC', '\x9CE', 
		'\t', '\x5', '\x2', '\x2', '\x9CD', '\x9C8', '\x3', '\x2', '\x2', '\x2', 
		'\x9CD', '\x9CE', '\x3', '\x2', '\x2', '\x2', '\x9CE', '\x9D4', '\x3', 
		'\x2', '\x2', '\x2', '\x9CF', '\x9D1', '\a', 'Z', '\x2', '\x2', '\x9D0', 
		'\x9D2', '\a', '\x3AA', '\x2', '\x2', '\x9D1', '\x9D0', '\x3', '\x2', 
		'\x2', '\x2', '\x9D1', '\x9D2', '\x3', '\x2', '\x2', '\x2', '\x9D2', '\x9D3', 
		'\x3', '\x2', '\x2', '\x2', '\x9D3', '\x9D5', '\t', '\x6', '\x2', '\x2', 
		'\x9D4', '\x9CF', '\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9D5', '\x3', 
		'\x2', '\x2', '\x2', '\x9D5', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x9D6', 
		'\x9D7', '\a', '.', '\x2', '\x2', '\x9D7', '\x9D8', '\a', '\x173', '\x2', 
		'\x2', '\x9D8', '\x9D9', '\a', '?', '\x2', '\x2', '\x9D9', '\x9DA', '\x5', 
		'\x200', '\x101', '\x2', '\x9DA', '\x9DB', '\a', '\x137', '\x2', '\x2', 
		'\x9DB', '\x9DC', '\a', '\x3AA', '\x2', '\x2', '\x9DC', '\x9DD', '\x5', 
		'\x1F6', '\xFC', '\x2', '\x9DD', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x9DE', 
		'\x9DF', '\a', '.', '\x2', '\x2', '\x9DF', '\x9E1', '\a', 'q', '\x2', 
		'\x2', '\x9E0', '\x9E2', '\x5', '\x234', '\x11B', '\x2', '\x9E1', '\x9E0', 
		'\x3', '\x2', '\x2', '\x2', '\x9E1', '\x9E2', '\x3', '\x2', '\x2', '\x2', 
		'\x9E2', '\x9E3', '\x3', '\x2', '\x2', '\x2', '\x9E3', '\x9E4', '\x5', 
		'\x1E6', '\xF4', '\x2', '\x9E4', '\x91', '\x3', '\x2', '\x2', '\x2', '\x9E5', 
		'\x9E6', '\a', '.', '\x2', '\x2', '\x9E6', '\x9E8', '\a', '\x151', '\x2', 
		'\x2', '\x9E7', '\x9E9', '\x5', '\x234', '\x11B', '\x2', '\x9E8', '\x9E7', 
		'\x3', '\x2', '\x2', '\x2', '\x9E8', '\x9E9', '\x3', '\x2', '\x2', '\x2', 
		'\x9E9', '\x9EA', '\x3', '\x2', '\x2', '\x2', '\x9EA', '\x9EB', '\x5', 
		'\x1E6', '\xF4', '\x2', '\x9EB', '\x93', '\x3', '\x2', '\x2', '\x2', '\x9EC', 
		'\x9ED', '\a', '.', '\x2', '\x2', '\x9ED', '\x9EF', '\a', '\x1E1', '\x2', 
		'\x2', '\x9EE', '\x9F0', '\x5', '\x234', '\x11B', '\x2', '\x9EF', '\x9EE', 
		'\x3', '\x2', '\x2', '\x2', '\x9EF', '\x9F0', '\x3', '\x2', '\x2', '\x2', 
		'\x9F0', '\x9F1', '\x3', '\x2', '\x2', '\x2', '\x9F1', '\x9F2', '\x5', 
		'\x200', '\x101', '\x2', '\x9F2', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x9F3', '\x9F5', '\a', '.', '\x2', '\x2', '\x9F4', '\x9F6', '\a', '\x206', 
		'\x2', '\x2', '\x9F5', '\x9F4', '\x3', '\x2', '\x2', '\x2', '\x9F5', '\x9F6', 
		'\x3', '\x2', '\x2', '\x2', '\x9F6', '\x9F7', '\x3', '\x2', '\x2', '\x2', 
		'\x9F7', '\x9F9', '\a', '\x93', '\x2', '\x2', '\x9F8', '\x9FA', '\x5', 
		'\x234', '\x11B', '\x2', '\x9F9', '\x9F8', '\x3', '\x2', '\x2', '\x2', 
		'\x9F9', '\x9FA', '\x3', '\x2', '\x2', '\x2', '\x9FA', '\x9FB', '\x3', 
		'\x2', '\x2', '\x2', '\x9FB', '\x9FD', '\x5', '\x220', '\x111', '\x2', 
		'\x9FC', '\x9FE', '\t', '\x1E', '\x2', '\x2', '\x9FD', '\x9FC', '\x3', 
		'\x2', '\x2', '\x2', '\x9FD', '\x9FE', '\x3', '\x2', '\x2', '\x2', '\x9FE', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x9FF', '\xA00', '\a', '.', '\x2', 
		'\x2', '\xA00', '\xA01', '\a', '\x205', '\x2', '\x2', '\xA01', '\xA07', 
		'\x5', '\x200', '\x101', '\x2', '\xA02', '\xA04', '\a', '\x137', '\x2', 
		'\x2', '\xA03', '\xA05', '\a', '\x3AA', '\x2', '\x2', '\xA04', '\xA03', 
		'\x3', '\x2', '\x2', '\x2', '\xA04', '\xA05', '\x3', '\x2', '\x2', '\x2', 
		'\xA05', '\xA06', '\x3', '\x2', '\x2', '\x2', '\xA06', '\xA08', '\x5', 
		'\x1F6', '\xFC', '\x2', '\xA07', '\xA02', '\x3', '\x2', '\x2', '\x2', 
		'\xA07', '\xA08', '\x3', '\x2', '\x2', '\x2', '\xA08', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\xA09', '\xA0A', '\a', '.', '\x2', '\x2', '\xA0A', 
		'\xA0C', '\a', '\x98', '\x2', '\x2', '\xA0B', '\xA0D', '\x5', '\x234', 
		'\x11B', '\x2', '\xA0C', '\xA0B', '\x3', '\x2', '\x2', '\x2', '\xA0C', 
		'\xA0D', '\x3', '\x2', '\x2', '\x2', '\xA0D', '\xA0E', '\x3', '\x2', '\x2', 
		'\x2', '\xA0E', '\xA0F', '\x5', '\x1E6', '\xF4', '\x2', '\xA0F', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\xA10', '\xA11', '\a', '.', '\x2', '\x2', 
		'\xA11', '\xA13', '\a', '\x21A', '\x2', '\x2', '\xA12', '\xA14', '\x5', 
		'\x234', '\x11B', '\x2', '\xA13', '\xA12', '\x3', '\x2', '\x2', '\x2', 
		'\xA13', '\xA14', '\x3', '\x2', '\x2', '\x2', '\xA14', '\xA15', '\x3', 
		'\x2', '\x2', '\x2', '\xA15', '\xA1A', '\x5', '\x1E6', '\xF4', '\x2', 
		'\xA16', '\xA17', '\a', '\x3B5', '\x2', '\x2', '\xA17', '\xA19', '\x5', 
		'\x1E6', '\xF4', '\x2', '\xA18', '\xA16', '\x3', '\x2', '\x2', '\x2', 
		'\xA19', '\xA1C', '\x3', '\x2', '\x2', '\x2', '\xA1A', '\xA18', '\x3', 
		'\x2', '\x2', '\x2', '\xA1A', '\xA1B', '\x3', '\x2', '\x2', '\x2', '\xA1B', 
		'\xA1E', '\x3', '\x2', '\x2', '\x2', '\xA1C', '\xA1A', '\x3', '\x2', '\x2', 
		'\x2', '\xA1D', '\xA1F', '\t', '\x1E', '\x2', '\x2', '\xA1E', '\xA1D', 
		'\x3', '\x2', '\x2', '\x2', '\xA1E', '\xA1F', '\x3', '\x2', '\x2', '\x2', 
		'\xA1F', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA20', '\xA21', '\a', 'y', 
		'\x2', '\x2', '\xA21', '\xA22', '\a', '\x93', '\x2', '\x2', '\xA22', '\xA27', 
		'\x5', '\xA0', 'Q', '\x2', '\xA23', '\xA24', '\a', '\x3B5', '\x2', '\x2', 
		'\xA24', '\xA26', '\x5', '\xA0', 'Q', '\x2', '\xA25', '\xA23', '\x3', 
		'\x2', '\x2', '\x2', '\xA26', '\xA29', '\x3', '\x2', '\x2', '\x2', '\xA27', 
		'\xA25', '\x3', '\x2', '\x2', '\x2', '\xA27', '\xA28', '\x3', '\x2', '\x2', 
		'\x2', '\xA28', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA29', '\xA27', 
		'\x3', '\x2', '\x2', '\x2', '\xA2A', '\xA2B', '\x5', '\x1E8', '\xF5', 
		'\x2', '\xA2B', '\xA2C', '\a', '\x96', '\x2', '\x2', '\xA2C', '\xA2D', 
		'\x5', '\x1E8', '\xF5', '\x2', '\xA2D', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\xA2E', '\xA30', '\a', '\x20C', '\x2', '\x2', '\xA2F', '\xA31', '\a', 
		'\x93', '\x2', '\x2', '\xA30', '\xA2F', '\x3', '\x2', '\x2', '\x2', '\xA30', 
		'\xA31', '\x3', '\x2', '\x2', '\x2', '\xA31', '\xA32', '\x3', '\x2', '\x2', 
		'\x2', '\xA32', '\xA33', '\x5', '\x1E8', '\xF5', '\x2', '\xA33', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '\xA34', '\xA35', '\a', '\x12', '\x2', '\x2', 
		'\xA35', '\xA3C', '\x5', '\x1E6', '\xF4', '\x2', '\xA36', '\xA39', '\a', 
		'\x3B3', '\x2', '\x2', '\xA37', '\xA3A', '\x5', '\x228', '\x115', '\x2', 
		'\xA38', '\xA3A', '\x5', '\x224', '\x113', '\x2', '\xA39', '\xA37', '\x3', 
		'\x2', '\x2', '\x2', '\xA39', '\xA38', '\x3', '\x2', '\x2', '\x2', '\xA39', 
		'\xA3A', '\x3', '\x2', '\x2', '\x2', '\xA3A', '\xA3B', '\x3', '\x2', '\x2', 
		'\x2', '\xA3B', '\xA3D', '\a', '\x3B4', '\x2', '\x2', '\xA3C', '\xA36', 
		'\x3', '\x2', '\x2', '\x2', '\xA3C', '\xA3D', '\x3', '\x2', '\x2', '\x2', 
		'\xA3D', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA3E', '\xA41', '\x5', 
		'\xC0', '\x61', '\x2', '\xA3F', '\xA41', '\x5', '\xC2', '\x62', '\x2', 
		'\xA40', '\xA3E', '\x3', '\x2', '\x2', '\x2', '\xA40', '\xA3F', '\x3', 
		'\x2', '\x2', '\x2', '\xA41', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA42', 
		'\xA43', '\a', '\x12F', '\x2', '\x2', '\xA43', '\xA44', '\x5', '\x224', 
		'\x113', '\x2', '\xA44', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA45', 
		'\xA4A', '\x5', '\xC4', '\x63', '\x2', '\xA46', '\xA4A', '\x5', '\xC6', 
		'\x64', '\x2', '\xA47', '\xA4A', '\x5', '\xC8', '\x65', '\x2', '\xA48', 
		'\xA4A', '\x5', '\xCA', '\x66', '\x2', '\xA49', '\xA45', '\x3', '\x2', 
		'\x2', '\x2', '\xA49', '\xA46', '\x3', '\x2', '\x2', '\x2', '\xA49', '\xA47', 
		'\x3', '\x2', '\x2', '\x2', '\xA49', '\xA48', '\x3', '\x2', '\x2', '\x2', 
		'\xA4A', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xA4B', '\xA4D', '\a', 'I', 
		'\x2', '\x2', '\xA4C', '\xA4E', '\t', '\x1F', '\x2', '\x2', '\xA4D', '\xA4C', 
		'\x3', '\x2', '\x2', '\x2', '\xA4D', '\xA4E', '\x3', '\x2', '\x2', '\x2', 
		'\xA4E', '\xA50', '\x3', '\x2', '\x2', '\x2', '\xA4F', '\xA51', '\a', 
		'\x43', '\x2', '\x2', '\xA50', '\xA4F', '\x3', '\x2', '\x2', '\x2', '\xA50', 
		'\xA51', '\x3', '\x2', '\x2', '\x2', '\xA51', '\xA53', '\x3', '\x2', '\x2', 
		'\x2', '\xA52', '\xA54', '\a', 'K', '\x2', '\x2', '\xA53', '\xA52', '\x3', 
		'\x2', '\x2', '\x2', '\xA53', '\xA54', '\x3', '\x2', '\x2', '\x2', '\xA54', 
		'\xA55', '\x3', '\x2', '\x2', '\x2', '\xA55', '\xA5B', '\x5', '\x1E8', 
		'\xF5', '\x2', '\xA56', '\xA57', '\a', 'o', '\x2', '\x2', '\xA57', '\xA58', 
		'\a', '\x3B3', '\x2', '\x2', '\xA58', '\xA59', '\x5', '\x21E', '\x110', 
		'\x2', '\xA59', '\xA5A', '\a', '\x3B4', '\x2', '\x2', '\xA5A', '\xA5C', 
		'\x3', '\x2', '\x2', '\x2', '\xA5B', '\xA56', '\x3', '\x2', '\x2', '\x2', 
		'\xA5B', '\xA5C', '\x3', '\x2', '\x2', '\x2', '\xA5C', '\xA6D', '\x3', 
		'\x2', '\x2', '\x2', '\xA5D', '\xA5E', '\a', '\x3B3', '\x2', '\x2', '\xA5E', 
		'\xA5F', '\x5', '\x21E', '\x110', '\x2', '\xA5F', '\xA60', '\a', '\x3B4', 
		'\x2', '\x2', '\xA60', '\xA62', '\x3', '\x2', '\x2', '\x2', '\xA61', '\xA5D', 
		'\x3', '\x2', '\x2', '\x2', '\xA61', '\xA62', '\x3', '\x2', '\x2', '\x2', 
		'\xA62', '\xA63', '\x3', '\x2', '\x2', '\x2', '\xA63', '\xA6E', '\x5', 
		'\xB8', ']', '\x2', '\xA64', '\xA65', '\a', '\x85', '\x2', '\x2', '\xA65', 
		'\xA6A', '\x5', '\xBA', '^', '\x2', '\xA66', '\xA67', '\a', '\x3B5', '\x2', 
		'\x2', '\xA67', '\xA69', '\x5', '\xBA', '^', '\x2', '\xA68', '\xA66', 
		'\x3', '\x2', '\x2', '\x2', '\xA69', '\xA6C', '\x3', '\x2', '\x2', '\x2', 
		'\xA6A', '\xA68', '\x3', '\x2', '\x2', '\x2', '\xA6A', '\xA6B', '\x3', 
		'\x2', '\x2', '\x2', '\xA6B', '\xA6E', '\x3', '\x2', '\x2', '\x2', '\xA6C', 
		'\xA6A', '\x3', '\x2', '\x2', '\x2', '\xA6D', '\xA61', '\x3', '\x2', '\x2', 
		'\x2', '\xA6D', '\xA64', '\x3', '\x2', '\x2', '\x2', '\xA6E', '\xA7B', 
		'\x3', '\x2', '\x2', '\x2', '\xA6F', '\xA70', '\a', '\x66', '\x2', '\x2', 
		'\xA70', '\xA71', '\a', '\x131', '\x2', '\x2', '\xA71', '\xA72', '\a', 
		'O', '\x2', '\x2', '\xA72', '\xA73', '\a', '\x9F', '\x2', '\x2', '\xA73', 
		'\xA78', '\x5', '\xBA', '^', '\x2', '\xA74', '\xA75', '\a', '\x3B5', '\x2', 
		'\x2', '\xA75', '\xA77', '\x5', '\xBA', '^', '\x2', '\xA76', '\xA74', 
		'\x3', '\x2', '\x2', '\x2', '\xA77', '\xA7A', '\x3', '\x2', '\x2', '\x2', 
		'\xA78', '\xA76', '\x3', '\x2', '\x2', '\x2', '\xA78', '\xA79', '\x3', 
		'\x2', '\x2', '\x2', '\xA79', '\xA7C', '\x3', '\x2', '\x2', '\x2', '\xA7A', 
		'\xA78', '\x3', '\x2', '\x2', '\x2', '\xA7B', '\xA6F', '\x3', '\x2', '\x2', 
		'\x2', '\xA7B', '\xA7C', '\x3', '\x2', '\x2', '\x2', '\xA7C', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '\xA7D', '\xA7E', '\a', 'Y', '\x2', '\x2', 
		'\xA7E', '\xA80', '\a', '\x124', '\x2', '\x2', '\xA7F', '\xA81', '\t', 
		' ', '\x2', '\x2', '\xA80', '\xA7F', '\x3', '\x2', '\x2', '\x2', '\xA80', 
		'\xA81', '\x3', '\x2', '\x2', '\x2', '\xA81', '\xA83', '\x3', '\x2', '\x2', 
		'\x2', '\xA82', '\xA84', '\a', '\x172', '\x2', '\x2', '\xA83', '\xA82', 
		'\x3', '\x2', '\x2', '\x2', '\xA83', '\xA84', '\x3', '\x2', '\x2', '\x2', 
		'\xA84', '\xA85', '\x3', '\x2', '\x2', '\x2', '\xA85', '\xA86', '\a', 
		'\x46', '\x2', '\x2', '\xA86', '\xA88', '\a', '\x3C2', '\x2', '\x2', '\xA87', 
		'\xA89', '\t', '\b', '\x2', '\x2', '\xA88', '\xA87', '\x3', '\x2', '\x2', 
		'\x2', '\xA88', '\xA89', '\x3', '\x2', '\x2', '\x2', '\xA89', '\xA8A', 
		'\x3', '\x2', '\x2', '\x2', '\xA8A', '\xA8B', '\a', 'K', '\x2', '\x2', 
		'\xA8B', '\xA8C', '\a', '\x93', '\x2', '\x2', '\xA8C', '\xA92', '\x5', 
		'\x1E8', '\xF5', '\x2', '\xA8D', '\xA8E', '\a', 'o', '\x2', '\x2', '\xA8E', 
		'\xA8F', '\a', '\x3B3', '\x2', '\x2', '\xA8F', '\xA90', '\x5', '\x21E', 
		'\x110', '\x2', '\xA90', '\xA91', '\a', '\x3B4', '\x2', '\x2', '\xA91', 
		'\xA93', '\x3', '\x2', '\x2', '\x2', '\xA92', '\xA8D', '\x3', '\x2', '\x2', 
		'\x2', '\xA92', '\xA93', '\x3', '\x2', '\x2', '\x2', '\xA93', '\xA97', 
		'\x3', '\x2', '\x2', '\x2', '\xA94', '\xA95', '\a', '\x17', '\x2', '\x2', 
		'\xA95', '\xA96', '\a', '\x85', '\x2', '\x2', '\xA96', '\xA98', '\x5', 
		'\x1F2', '\xFA', '\x2', '\xA97', '\xA94', '\x3', '\x2', '\x2', '\x2', 
		'\xA97', '\xA98', '\x3', '\x2', '\x2', '\x2', '\xA98', '\xA9F', '\x3', 
		'\x2', '\x2', '\x2', '\xA99', '\xA9B', '\t', '!', '\x2', '\x2', '\xA9A', 
		'\xA9C', '\x5', '\xF4', '{', '\x2', '\xA9B', '\xA9A', '\x3', '\x2', '\x2', 
		'\x2', '\xA9C', '\xA9D', '\x3', '\x2', '\x2', '\x2', '\xA9D', '\xA9B', 
		'\x3', '\x2', '\x2', '\x2', '\xA9D', '\xA9E', '\x3', '\x2', '\x2', '\x2', 
		'\xA9E', '\xAA0', '\x3', '\x2', '\x2', '\x2', '\xA9F', '\xA99', '\x3', 
		'\x2', '\x2', '\x2', '\xA9F', '\xAA0', '\x3', '\x2', '\x2', '\x2', '\xAA0', 
		'\xAA7', '\x3', '\x2', '\x2', '\x2', '\xAA1', '\xAA3', '\a', 'X', '\x2', 
		'\x2', '\xAA2', '\xAA4', '\x5', '\xF6', '|', '\x2', '\xAA3', '\xAA2', 
		'\x3', '\x2', '\x2', '\x2', '\xAA4', '\xAA5', '\x3', '\x2', '\x2', '\x2', 
		'\xAA5', '\xAA3', '\x3', '\x2', '\x2', '\x2', '\xAA5', '\xAA6', '\x3', 
		'\x2', '\x2', '\x2', '\xAA6', '\xAA8', '\x3', '\x2', '\x2', '\x2', '\xAA7', 
		'\xAA1', '\x3', '\x2', '\x2', '\x2', '\xAA7', '\xAA8', '\x3', '\x2', '\x2', 
		'\x2', '\xAA8', '\xAAD', '\x3', '\x2', '\x2', '\x2', '\xAA9', '\xAAA', 
		'\a', '\x43', '\x2', '\x2', '\xAAA', '\xAAB', '\x5', '\x206', '\x104', 
		'\x2', '\xAAB', '\xAAC', '\t', '\"', '\x2', '\x2', '\xAAC', '\xAAE', '\x3', 
		'\x2', '\x2', '\x2', '\xAAD', '\xAA9', '\x3', '\x2', '\x2', '\x2', '\xAAD', 
		'\xAAE', '\x3', '\x2', '\x2', '\x2', '\xAAE', '\xABA', '\x3', '\x2', '\x2', 
		'\x2', '\xAAF', '\xAB0', '\a', '\x3B3', '\x2', '\x2', '\xAB0', '\xAB5', 
		'\x5', '\xBC', '_', '\x2', '\xAB1', '\xAB2', '\a', '\x3B5', '\x2', '\x2', 
		'\xAB2', '\xAB4', '\x5', '\xBC', '_', '\x2', '\xAB3', '\xAB1', '\x3', 
		'\x2', '\x2', '\x2', '\xAB4', '\xAB7', '\x3', '\x2', '\x2', '\x2', '\xAB5', 
		'\xAB3', '\x3', '\x2', '\x2', '\x2', '\xAB5', '\xAB6', '\x3', '\x2', '\x2', 
		'\x2', '\xAB6', '\xAB8', '\x3', '\x2', '\x2', '\x2', '\xAB7', '\xAB5', 
		'\x3', '\x2', '\x2', '\x2', '\xAB8', '\xAB9', '\a', '\x3B4', '\x2', '\x2', 
		'\xAB9', '\xABB', '\x3', '\x2', '\x2', '\x2', '\xABA', '\xAAF', '\x3', 
		'\x2', '\x2', '\x2', '\xABA', '\xABB', '\x3', '\x2', '\x2', '\x2', '\xABB', 
		'\xAC5', '\x3', '\x2', '\x2', '\x2', '\xABC', '\xABD', '\a', '\x85', '\x2', 
		'\x2', '\xABD', '\xAC2', '\x5', '\xBA', '^', '\x2', '\xABE', '\xABF', 
		'\a', '\x3B5', '\x2', '\x2', '\xABF', '\xAC1', '\x5', '\xBA', '^', '\x2', 
		'\xAC0', '\xABE', '\x3', '\x2', '\x2', '\x2', '\xAC1', '\xAC4', '\x3', 
		'\x2', '\x2', '\x2', '\xAC2', '\xAC0', '\x3', '\x2', '\x2', '\x2', '\xAC2', 
		'\xAC3', '\x3', '\x2', '\x2', '\x2', '\xAC3', '\xAC6', '\x3', '\x2', '\x2', 
		'\x2', '\xAC4', '\xAC2', '\x3', '\x2', '\x2', '\x2', '\xAC5', '\xABC', 
		'\x3', '\x2', '\x2', '\x2', '\xAC5', '\xAC6', '\x3', '\x2', '\x2', '\x2', 
		'\xAC6', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAC7', '\xAC8', '\a', 'Y', 
		'\x2', '\x2', '\xAC8', '\xACA', '\a', '\x222', '\x2', '\x2', '\xAC9', 
		'\xACB', '\t', ' ', '\x2', '\x2', '\xACA', '\xAC9', '\x3', '\x2', '\x2', 
		'\x2', '\xACA', '\xACB', '\x3', '\x2', '\x2', '\x2', '\xACB', '\xACD', 
		'\x3', '\x2', '\x2', '\x2', '\xACC', '\xACE', '\a', '\x172', '\x2', '\x2', 
		'\xACD', '\xACC', '\x3', '\x2', '\x2', '\x2', '\xACD', '\xACE', '\x3', 
		'\x2', '\x2', '\x2', '\xACE', '\xACF', '\x3', '\x2', '\x2', '\x2', '\xACF', 
		'\xAD0', '\a', '\x46', '\x2', '\x2', '\xAD0', '\xAD2', '\a', '\x3C2', 
		'\x2', '\x2', '\xAD1', '\xAD3', '\t', '\b', '\x2', '\x2', '\xAD2', '\xAD1', 
		'\x3', '\x2', '\x2', '\x2', '\xAD2', '\xAD3', '\x3', '\x2', '\x2', '\x2', 
		'\xAD3', '\xAD4', '\x3', '\x2', '\x2', '\x2', '\xAD4', '\xAD5', '\a', 
		'K', '\x2', '\x2', '\xAD5', '\xAD6', '\a', '\x93', '\x2', '\x2', '\xAD6', 
		'\xADA', '\x5', '\x1E8', '\xF5', '\x2', '\xAD7', '\xAD8', '\a', '\x17', 
		'\x2', '\x2', '\xAD8', '\xAD9', '\a', '\x85', '\x2', '\x2', '\xAD9', '\xADB', 
		'\x5', '\x1F2', '\xFA', '\x2', '\xADA', '\xAD7', '\x3', '\x2', '\x2', 
		'\x2', '\xADA', '\xADB', '\x3', '\x2', '\x2', '\x2', '\xADB', '\xAE2', 
		'\x3', '\x2', '\x2', '\x2', '\xADC', '\xADD', '\a', '\x1DC', '\x2', '\x2', 
		'\xADD', '\xADE', '\a', '\x15B', '\x2', '\x2', '\xADE', '\xADF', '\a', 
		'\x11', '\x2', '\x2', '\xADF', '\xAE0', '\a', '\x3AC', '\x2', '\x2', '\xAE0', 
		'\xAE1', '\a', '\x3C2', '\x2', '\x2', '\xAE1', '\xAE3', '\a', '\x3AB', 
		'\x2', '\x2', '\xAE2', '\xADC', '\x3', '\x2', '\x2', '\x2', '\xAE2', '\xAE3', 
		'\x3', '\x2', '\x2', '\x2', '\xAE3', '\xAE8', '\x3', '\x2', '\x2', '\x2', 
		'\xAE4', '\xAE5', '\a', '\x43', '\x2', '\x2', '\xAE5', '\xAE6', '\x5', 
		'\x206', '\x104', '\x2', '\xAE6', '\xAE7', '\t', '\"', '\x2', '\x2', '\xAE7', 
		'\xAE9', '\x3', '\x2', '\x2', '\x2', '\xAE8', '\xAE4', '\x3', '\x2', '\x2', 
		'\x2', '\xAE8', '\xAE9', '\x3', '\x2', '\x2', '\x2', '\xAE9', '\xAF5', 
		'\x3', '\x2', '\x2', '\x2', '\xAEA', '\xAEB', '\a', '\x3B3', '\x2', '\x2', 
		'\xAEB', '\xAF0', '\x5', '\xBC', '_', '\x2', '\xAEC', '\xAED', '\a', '\x3B5', 
		'\x2', '\x2', '\xAED', '\xAEF', '\x5', '\xBC', '_', '\x2', '\xAEE', '\xAEC', 
		'\x3', '\x2', '\x2', '\x2', '\xAEF', '\xAF2', '\x3', '\x2', '\x2', '\x2', 
		'\xAF0', '\xAEE', '\x3', '\x2', '\x2', '\x2', '\xAF0', '\xAF1', '\x3', 
		'\x2', '\x2', '\x2', '\xAF1', '\xAF3', '\x3', '\x2', '\x2', '\x2', '\xAF2', 
		'\xAF0', '\x3', '\x2', '\x2', '\x2', '\xAF3', '\xAF4', '\a', '\x3B4', 
		'\x2', '\x2', '\xAF4', '\xAF6', '\x3', '\x2', '\x2', '\x2', '\xAF5', '\xAEA', 
		'\x3', '\x2', '\x2', '\x2', '\xAF5', '\xAF6', '\x3', '\x2', '\x2', '\x2', 
		'\xAF6', '\xB00', '\x3', '\x2', '\x2', '\x2', '\xAF7', '\xAF8', '\a', 
		'\x85', '\x2', '\x2', '\xAF8', '\xAFD', '\x5', '\xBA', '^', '\x2', '\xAF9', 
		'\xAFA', '\a', '\x3B5', '\x2', '\x2', '\xAFA', '\xAFC', '\x5', '\xBA', 
		'^', '\x2', '\xAFB', '\xAF9', '\x3', '\x2', '\x2', '\x2', '\xAFC', '\xAFF', 
		'\x3', '\x2', '\x2', '\x2', '\xAFD', '\xAFB', '\x3', '\x2', '\x2', '\x2', 
		'\xAFD', '\xAFE', '\x3', '\x2', '\x2', '\x2', '\xAFE', '\xB01', '\x3', 
		'\x2', '\x2', '\x2', '\xAFF', '\xAFD', '\x3', '\x2', '\x2', '\x2', '\xB00', 
		'\xAF7', '\x3', '\x2', '\x2', '\x2', '\xB00', '\xB01', '\x3', '\x2', '\x2', 
		'\x2', '\xB01', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB02', '\xB04', 
		'\a', '{', '\x2', '\x2', '\xB03', '\xB05', '\t', '#', '\x2', '\x2', '\xB04', 
		'\xB03', '\x3', '\x2', '\x2', '\x2', '\xB04', '\xB05', '\x3', '\x2', '\x2', 
		'\x2', '\xB05', '\xB07', '\x3', '\x2', '\x2', '\x2', '\xB06', '\xB08', 
		'\a', 'K', '\x2', '\x2', '\xB07', '\xB06', '\x3', '\x2', '\x2', '\x2', 
		'\xB07', '\xB08', '\x3', '\x2', '\x2', '\x2', '\xB08', '\xB09', '\x3', 
		'\x2', '\x2', '\x2', '\xB09', '\xB0F', '\x5', '\x1E8', '\xF5', '\x2', 
		'\xB0A', '\xB0B', '\a', 'o', '\x2', '\x2', '\xB0B', '\xB0C', '\a', '\x3B3', 
		'\x2', '\x2', '\xB0C', '\xB0D', '\x5', '\x21E', '\x110', '\x2', '\xB0D', 
		'\xB0E', '\a', '\x3B4', '\x2', '\x2', '\xB0E', '\xB10', '\x3', '\x2', 
		'\x2', '\x2', '\xB0F', '\xB0A', '\x3', '\x2', '\x2', '\x2', '\xB0F', '\xB10', 
		'\x3', '\x2', '\x2', '\x2', '\xB10', '\xB21', '\x3', '\x2', '\x2', '\x2', 
		'\xB11', '\xB12', '\a', '\x3B3', '\x2', '\x2', '\xB12', '\xB13', '\x5', 
		'\x21E', '\x110', '\x2', '\xB13', '\xB14', '\a', '\x3B4', '\x2', '\x2', 
		'\xB14', '\xB16', '\x3', '\x2', '\x2', '\x2', '\xB15', '\xB11', '\x3', 
		'\x2', '\x2', '\x2', '\xB15', '\xB16', '\x3', '\x2', '\x2', '\x2', '\xB16', 
		'\xB17', '\x3', '\x2', '\x2', '\x2', '\xB17', '\xB22', '\x5', '\xB8', 
		']', '\x2', '\xB18', '\xB19', '\a', '\x85', '\x2', '\x2', '\xB19', '\xB1E', 
		'\x5', '\xBA', '^', '\x2', '\xB1A', '\xB1B', '\a', '\x3B5', '\x2', '\x2', 
		'\xB1B', '\xB1D', '\x5', '\xBA', '^', '\x2', '\xB1C', '\xB1A', '\x3', 
		'\x2', '\x2', '\x2', '\xB1D', '\xB20', '\x3', '\x2', '\x2', '\x2', '\xB1E', 
		'\xB1C', '\x3', '\x2', '\x2', '\x2', '\xB1E', '\xB1F', '\x3', '\x2', '\x2', 
		'\x2', '\xB1F', '\xB22', '\x3', '\x2', '\x2', '\x2', '\xB20', '\xB1E', 
		'\x3', '\x2', '\x2', '\x2', '\xB21', '\xB15', '\x3', '\x2', '\x2', '\x2', 
		'\xB21', '\xB18', '\x3', '\x2', '\x2', '\x2', '\xB22', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB23', '\xB25', '\x5', '\xE4', 's', '\x2', '\xB24', 
		'\xB26', '\x5', '\xBE', '`', '\x2', '\xB25', '\xB24', '\x3', '\x2', '\x2', 
		'\x2', '\xB25', '\xB26', '\x3', '\x2', '\x2', '\x2', '\xB26', '\xB5B', 
		'\x3', '\x2', '\x2', '\x2', '\xB27', '\xB29', '\x5', '\xE0', 'q', '\x2', 
		'\xB28', '\xB2A', '\x5', '\xBE', '`', '\x2', '\xB29', '\xB28', '\x3', 
		'\x2', '\x2', '\x2', '\xB29', '\xB2A', '\x3', '\x2', '\x2', '\x2', '\xB2A', 
		'\xB5B', '\x3', '\x2', '\x2', '\x2', '\xB2B', '\xB2D', '\x5', '\xE6', 
		't', '\x2', '\xB2C', '\xB2E', '\x5', '\xEA', 'v', '\x2', '\xB2D', '\xB2C', 
		'\x3', '\x2', '\x2', '\x2', '\xB2E', '\xB2F', '\x3', '\x2', '\x2', '\x2', 
		'\xB2F', '\xB2D', '\x3', '\x2', '\x2', '\x2', '\xB2F', '\xB30', '\x3', 
		'\x2', '\x2', '\x2', '\xB30', '\xB39', '\x3', '\x2', '\x2', '\x2', '\xB31', 
		'\xB33', '\a', '\x9B', '\x2', '\x2', '\xB32', '\xB34', '\t', '$', '\x2', 
		'\x2', '\xB33', '\xB32', '\x3', '\x2', '\x2', '\x2', '\xB33', '\xB34', 
		'\x3', '\x2', '\x2', '\x2', '\xB34', '\xB37', '\x3', '\x2', '\x2', '\x2', 
		'\xB35', '\xB38', '\x5', '\xE4', 's', '\x2', '\xB36', '\xB38', '\x5', 
		'\xE0', 'q', '\x2', '\xB37', '\xB35', '\x3', '\x2', '\x2', '\x2', '\xB37', 
		'\xB36', '\x3', '\x2', '\x2', '\x2', '\xB38', '\xB3A', '\x3', '\x2', '\x2', 
		'\x2', '\xB39', '\xB31', '\x3', '\x2', '\x2', '\x2', '\xB39', '\xB3A', 
		'\x3', '\x2', '\x2', '\x2', '\xB3A', '\xB3C', '\x3', '\x2', '\x2', '\x2', 
		'\xB3B', '\xB3D', '\x5', '\xD0', 'i', '\x2', '\xB3C', '\xB3B', '\x3', 
		'\x2', '\x2', '\x2', '\xB3C', '\xB3D', '\x3', '\x2', '\x2', '\x2', '\xB3D', 
		'\xB3F', '\x3', '\x2', '\x2', '\x2', '\xB3E', '\xB40', '\x5', '\xFC', 
		'\x7F', '\x2', '\xB3F', '\xB3E', '\x3', '\x2', '\x2', '\x2', '\xB3F', 
		'\xB40', '\x3', '\x2', '\x2', '\x2', '\xB40', '\xB42', '\x3', '\x2', '\x2', 
		'\x2', '\xB41', '\xB43', '\x5', '\xBE', '`', '\x2', '\xB42', '\xB41', 
		'\x3', '\x2', '\x2', '\x2', '\xB42', '\xB43', '\x3', '\x2', '\x2', '\x2', 
		'\xB43', '\xB5B', '\x3', '\x2', '\x2', '\x2', '\xB44', '\xB46', '\x5', 
		'\xE2', 'r', '\x2', '\xB45', '\xB47', '\x5', '\xE8', 'u', '\x2', '\xB46', 
		'\xB45', '\x3', '\x2', '\x2', '\x2', '\xB47', '\xB48', '\x3', '\x2', '\x2', 
		'\x2', '\xB48', '\xB46', '\x3', '\x2', '\x2', '\x2', '\xB48', '\xB49', 
		'\x3', '\x2', '\x2', '\x2', '\xB49', '\xB4F', '\x3', '\x2', '\x2', '\x2', 
		'\xB4A', '\xB4C', '\a', '\x9B', '\x2', '\x2', '\xB4B', '\xB4D', '\t', 
		'$', '\x2', '\x2', '\xB4C', '\xB4B', '\x3', '\x2', '\x2', '\x2', '\xB4C', 
		'\xB4D', '\x3', '\x2', '\x2', '\x2', '\xB4D', '\xB4E', '\x3', '\x2', '\x2', 
		'\x2', '\xB4E', '\xB50', '\x5', '\xE0', 'q', '\x2', '\xB4F', '\xB4A', 
		'\x3', '\x2', '\x2', '\x2', '\xB4F', '\xB50', '\x3', '\x2', '\x2', '\x2', 
		'\xB50', '\xB52', '\x3', '\x2', '\x2', '\x2', '\xB51', '\xB53', '\x5', 
		'\xD0', 'i', '\x2', '\xB52', '\xB51', '\x3', '\x2', '\x2', '\x2', '\xB52', 
		'\xB53', '\x3', '\x2', '\x2', '\x2', '\xB53', '\xB55', '\x3', '\x2', '\x2', 
		'\x2', '\xB54', '\xB56', '\x5', '\xFC', '\x7F', '\x2', '\xB55', '\xB54', 
		'\x3', '\x2', '\x2', '\x2', '\xB55', '\xB56', '\x3', '\x2', '\x2', '\x2', 
		'\xB56', '\xB58', '\x3', '\x2', '\x2', '\x2', '\xB57', '\xB59', '\x5', 
		'\xBE', '`', '\x2', '\xB58', '\xB57', '\x3', '\x2', '\x2', '\x2', '\xB58', 
		'\xB59', '\x3', '\x2', '\x2', '\x2', '\xB59', '\xB5B', '\x3', '\x2', '\x2', 
		'\x2', '\xB5A', '\xB23', '\x3', '\x2', '\x2', '\x2', '\xB5A', '\xB27', 
		'\x3', '\x2', '\x2', '\x2', '\xB5A', '\xB2B', '\x3', '\x2', '\x2', '\x2', 
		'\xB5A', '\xB44', '\x3', '\x2', '\x2', '\x2', '\xB5B', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\xB5C', '\xB5F', '\x5', '\xCC', 'g', '\x2', '\xB5D', 
		'\xB5F', '\x5', '\xCE', 'h', '\x2', '\xB5E', '\xB5C', '\x3', '\x2', '\x2', 
		'\x2', '\xB5E', '\xB5D', '\x3', '\x2', '\x2', '\x2', '\xB5F', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xB60', '\xB70', '\x5', '\xB4', '[', '\x2', 
		'\xB61', '\xB62', '\t', '%', '\x2', '\x2', '\xB62', '\xB63', '\a', '\x3B3', 
		'\x2', '\x2', '\xB63', '\xB64', '\x5', '\x226', '\x114', '\x2', '\xB64', 
		'\xB6C', '\a', '\x3B4', '\x2', '\x2', '\xB65', '\xB66', '\a', '\x3B5', 
		'\x2', '\x2', '\xB66', '\xB67', '\a', '\x3B3', '\x2', '\x2', '\xB67', 
		'\xB68', '\x5', '\x226', '\x114', '\x2', '\xB68', '\xB69', '\a', '\x3B4', 
		'\x2', '\x2', '\xB69', '\xB6B', '\x3', '\x2', '\x2', '\x2', '\xB6A', '\xB65', 
		'\x3', '\x2', '\x2', '\x2', '\xB6B', '\xB6E', '\x3', '\x2', '\x2', '\x2', 
		'\xB6C', '\xB6A', '\x3', '\x2', '\x2', '\x2', '\xB6C', '\xB6D', '\x3', 
		'\x2', '\x2', '\x2', '\xB6D', '\xB70', '\x3', '\x2', '\x2', '\x2', '\xB6E', 
		'\xB6C', '\x3', '\x2', '\x2', '\x2', '\xB6F', '\xB60', '\x3', '\x2', '\x2', 
		'\x2', '\xB6F', '\xB61', '\x3', '\x2', '\x2', '\x2', '\xB70', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\xB71', '\xB72', '\x5', '\x1EA', '\xF6', 
		'\x2', '\xB72', '\xB75', '\a', '\x3AA', '\x2', '\x2', '\xB73', '\xB76', 
		'\x5', '\x24C', '\x127', '\x2', '\xB74', '\xB76', '\a', '&', '\x2', '\x2', 
		'\xB75', '\xB73', '\x3', '\x2', '\x2', '\x2', '\xB75', '\xB74', '\x3', 
		'\x2', '\x2', '\x2', '\xB76', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xB77', 
		'\xB7A', '\x5', '\x200', '\x101', '\x2', '\xB78', '\xB7A', '\a', '\x3CD', 
		'\x2', '\x2', '\xB79', '\xB77', '\x3', '\x2', '\x2', '\x2', '\xB79', '\xB78', 
		'\x3', '\x2', '\x2', '\x2', '\xB7A', '\xBD', '\x3', '\x2', '\x2', '\x2', 
		'\xB7B', '\xB7C', '\a', '\x39', '\x2', '\x2', '\xB7C', '\xB82', '\a', 
		'\x9F', '\x2', '\x2', '\xB7D', '\xB7E', '\a', 'Z', '\x2', '\x2', '\xB7E', 
		'\xB7F', '\a', '\x44', '\x2', '\x2', '\xB7F', '\xB80', '\a', '\x1E3', 
		'\x2', '\x2', '\xB80', '\xB82', '\a', '\x195', '\x2', '\x2', '\xB81', 
		'\xB7B', '\x3', '\x2', '\x2', '\x2', '\xB81', '\xB7D', '\x3', '\x2', '\x2', 
		'\x2', '\xB82', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xB83', '\xB85', 
		'\a', '(', '\x2', '\x2', '\xB84', '\xB86', '\a', '\\', '\x2', '\x2', '\xB85', 
		'\xB84', '\x3', '\x2', '\x2', '\x2', '\xB85', '\xB86', '\x3', '\x2', '\x2', 
		'\x2', '\xB86', '\xB88', '\x3', '\x2', '\x2', '\x2', '\xB87', '\xB89', 
		'\a', '\x1C1', '\x2', '\x2', '\xB88', '\xB87', '\x3', '\x2', '\x2', '\x2', 
		'\xB88', '\xB89', '\x3', '\x2', '\x2', '\x2', '\xB89', '\xB8B', '\x3', 
		'\x2', '\x2', '\x2', '\xB8A', '\xB8C', '\a', '\x43', '\x2', '\x2', '\xB8B', 
		'\xB8A', '\x3', '\x2', '\x2', '\x2', '\xB8B', '\xB8C', '\x3', '\x2', '\x2', 
		'\x2', '\xB8C', '\xB8D', '\x3', '\x2', '\x2', '\x2', '\xB8D', '\xB8E', 
		'\a', '<', '\x2', '\x2', '\xB8E', '\xB94', '\x5', '\x1E8', '\xF5', '\x2', 
		'\xB8F', '\xB90', '\a', 'o', '\x2', '\x2', '\xB90', '\xB91', '\a', '\x3B3', 
		'\x2', '\x2', '\xB91', '\xB92', '\x5', '\x21E', '\x110', '\x2', '\xB92', 
		'\xB93', '\a', '\x3B4', '\x2', '\x2', '\xB93', '\xB95', '\x3', '\x2', 
		'\x2', '\x2', '\xB94', '\xB8F', '\x3', '\x2', '\x2', '\x2', '\xB94', '\xB95', 
		'\x3', '\x2', '\x2', '\x2', '\xB95', '\xB98', '\x3', '\x2', '\x2', '\x2', 
		'\xB96', '\xB97', '\a', '\xA5', '\x2', '\x2', '\xB97', '\xB99', '\x5', 
		'\x24C', '\x127', '\x2', '\xB98', '\xB96', '\x3', '\x2', '\x2', '\x2', 
		'\xB98', '\xB99', '\x3', '\x2', '\x2', '\x2', '\xB99', '\xB9B', '\x3', 
		'\x2', '\x2', '\x2', '\xB9A', '\xB9C', '\x5', '\xD0', 'i', '\x2', '\xB9B', 
		'\xB9A', '\x3', '\x2', '\x2', '\x2', '\xB9B', '\xB9C', '\x3', '\x2', '\x2', 
		'\x2', '\xB9C', '\xB9F', '\x3', '\x2', '\x2', '\x2', '\xB9D', '\xB9E', 
		'\a', 'V', '\x2', '\x2', '\xB9E', '\xBA0', '\x5', '\x206', '\x104', '\x2', 
		'\xB9F', '\xB9D', '\x3', '\x2', '\x2', '\x2', '\xB9F', '\xBA0', '\x3', 
		'\x2', '\x2', '\x2', '\xBA0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xBA1', 
		'\xBA3', '\a', '(', '\x2', '\x2', '\xBA2', '\xBA4', '\a', '\\', '\x2', 
		'\x2', '\xBA3', '\xBA2', '\x3', '\x2', '\x2', '\x2', '\xBA3', '\xBA4', 
		'\x3', '\x2', '\x2', '\x2', '\xBA4', '\xBA6', '\x3', '\x2', '\x2', '\x2', 
		'\xBA5', '\xBA7', '\a', '\x1C1', '\x2', '\x2', '\xBA6', '\xBA5', '\x3', 
		'\x2', '\x2', '\x2', '\xBA6', '\xBA7', '\x3', '\x2', '\x2', '\x2', '\xBA7', 
		'\xBA9', '\x3', '\x2', '\x2', '\x2', '\xBA8', '\xBAA', '\a', '\x43', '\x2', 
		'\x2', '\xBA9', '\xBA8', '\x3', '\x2', '\x2', '\x2', '\xBA9', '\xBAA', 
		'\x3', '\x2', '\x2', '\x2', '\xBAA', '\xBD2', '\x3', '\x2', '\x2', '\x2', 
		'\xBAB', '\xBAE', '\x5', '\x1E8', '\xF5', '\x2', '\xBAC', '\xBAD', '\a', 
		'\x3B2', '\x2', '\x2', '\xBAD', '\xBAF', '\a', '\x3A2', '\x2', '\x2', 
		'\xBAE', '\xBAC', '\x3', '\x2', '\x2', '\x2', '\xBAE', '\xBAF', '\x3', 
		'\x2', '\x2', '\x2', '\xBAF', '\xBB8', '\x3', '\x2', '\x2', '\x2', '\xBB0', 
		'\xBB1', '\a', '\x3B5', '\x2', '\x2', '\xBB1', '\xBB4', '\x5', '\x1E8', 
		'\xF5', '\x2', '\xBB2', '\xBB3', '\a', '\x3B2', '\x2', '\x2', '\xBB3', 
		'\xBB5', '\a', '\x3A2', '\x2', '\x2', '\xBB4', '\xBB2', '\x3', '\x2', 
		'\x2', '\x2', '\xBB4', '\xBB5', '\x3', '\x2', '\x2', '\x2', '\xBB5', '\xBB7', 
		'\x3', '\x2', '\x2', '\x2', '\xBB6', '\xBB0', '\x3', '\x2', '\x2', '\x2', 
		'\xBB7', '\xBBA', '\x3', '\x2', '\x2', '\x2', '\xBB8', '\xBB6', '\x3', 
		'\x2', '\x2', '\x2', '\xBB8', '\xBB9', '\x3', '\x2', '\x2', '\x2', '\xBB9', 
		'\xBBB', '\x3', '\x2', '\x2', '\x2', '\xBBA', '\xBB8', '\x3', '\x2', '\x2', 
		'\x2', '\xBBB', '\xBBC', '\a', '<', '\x2', '\x2', '\xBBC', '\xBBD', '\x5', 
		'\xD4', 'k', '\x2', '\xBBD', '\xBD3', '\x3', '\x2', '\x2', '\x2', '\xBBE', 
		'\xBBF', '\a', '<', '\x2', '\x2', '\xBBF', '\xBC2', '\x5', '\x1E8', '\xF5', 
		'\x2', '\xBC0', '\xBC1', '\a', '\x3B2', '\x2', '\x2', '\xBC1', '\xBC3', 
		'\a', '\x3A2', '\x2', '\x2', '\xBC2', '\xBC0', '\x3', '\x2', '\x2', '\x2', 
		'\xBC2', '\xBC3', '\x3', '\x2', '\x2', '\x2', '\xBC3', '\xBCC', '\x3', 
		'\x2', '\x2', '\x2', '\xBC4', '\xBC5', '\a', '\x3B5', '\x2', '\x2', '\xBC5', 
		'\xBC8', '\x5', '\x1E8', '\xF5', '\x2', '\xBC6', '\xBC7', '\a', '\x3B2', 
		'\x2', '\x2', '\xBC7', '\xBC9', '\a', '\x3A2', '\x2', '\x2', '\xBC8', 
		'\xBC6', '\x3', '\x2', '\x2', '\x2', '\xBC8', '\xBC9', '\x3', '\x2', '\x2', 
		'\x2', '\xBC9', '\xBCB', '\x3', '\x2', '\x2', '\x2', '\xBCA', '\xBC4', 
		'\x3', '\x2', '\x2', '\x2', '\xBCB', '\xBCE', '\x3', '\x2', '\x2', '\x2', 
		'\xBCC', '\xBCA', '\x3', '\x2', '\x2', '\x2', '\xBCC', '\xBCD', '\x3', 
		'\x2', '\x2', '\x2', '\xBCD', '\xBCF', '\x3', '\x2', '\x2', '\x2', '\xBCE', 
		'\xBCC', '\x3', '\x2', '\x2', '\x2', '\xBCF', '\xBD0', '\a', '\xA2', '\x2', 
		'\x2', '\xBD0', '\xBD1', '\x5', '\xD4', 'k', '\x2', '\xBD1', '\xBD3', 
		'\x3', '\x2', '\x2', '\x2', '\xBD2', '\xBAB', '\x3', '\x2', '\x2', '\x2', 
		'\xBD2', '\xBBE', '\x3', '\x2', '\x2', '\x2', '\xBD3', '\xBD6', '\x3', 
		'\x2', '\x2', '\x2', '\xBD4', '\xBD5', '\a', '\xA5', '\x2', '\x2', '\xBD5', 
		'\xBD7', '\x5', '\x24C', '\x127', '\x2', '\xBD6', '\xBD4', '\x3', '\x2', 
		'\x2', '\x2', '\xBD6', '\xBD7', '\x3', '\x2', '\x2', '\x2', '\xBD7', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\xBD8', '\xBD9', '\a', '\x156', '\x2', '\x2', 
		'\xBD9', '\xBDA', '\x5', '\x1E8', '\xF5', '\x2', '\xBDA', '\xBDF', '\a', 
		'\x1A8', '\x2', '\x2', '\xBDB', '\xBDD', '\a', '\f', '\x2', '\x2', '\xBDC', 
		'\xBDB', '\x3', '\x2', '\x2', '\x2', '\xBDC', '\xBDD', '\x3', '\x2', '\x2', 
		'\x2', '\xBDD', '\xBDE', '\x3', '\x2', '\x2', '\x2', '\xBDE', '\xBE0', 
		'\x5', '\x200', '\x101', '\x2', '\xBDF', '\xBDC', '\x3', '\x2', '\x2', 
		'\x2', '\xBDF', '\xBE0', '\x3', '\x2', '\x2', '\x2', '\xBE0', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\xBE1', '\xBE2', '\a', '\x156', '\x2', '\x2', 
		'\xBE2', '\xBE3', '\x5', '\x1E8', '\xF5', '\x2', '\xBE3', '\xBE4', '\a', 
		't', '\x2', '\x2', '\xBE4', '\xBEB', '\x5', '\x200', '\x101', '\x2', '\xBE5', 
		'\xBE6', '\x5', '\x254', '\x12B', '\x2', '\xBE6', '\xBE7', '\a', '\x3B3', 
		'\x2', '\x2', '\xBE7', '\xBE8', '\x5', '\x228', '\x115', '\x2', '\xBE8', 
		'\xBE9', '\a', '\x3B4', '\x2', '\x2', '\xBE9', '\xBEC', '\x3', '\x2', 
		'\x2', '\x2', '\xBEA', '\xBEC', '\t', '&', '\x2', '\x2', '\xBEB', '\xBE5', 
		'\x3', '\x2', '\x2', '\x2', '\xBEB', '\xBEA', '\x3', '\x2', '\x2', '\x2', 
		'\xBEC', '\xBEF', '\x3', '\x2', '\x2', '\x2', '\xBED', '\xBEE', '\a', 
		'\xA5', '\x2', '\x2', '\xBEE', '\xBF0', '\x5', '\x24C', '\x127', '\x2', 
		'\xBEF', '\xBED', '\x3', '\x2', '\x2', '\x2', '\xBEF', '\xBF0', '\x3', 
		'\x2', '\x2', '\x2', '\xBF0', '\xBF3', '\x3', '\x2', '\x2', '\x2', '\xBF1', 
		'\xBF2', '\a', 'V', '\x2', '\x2', '\xBF2', '\xBF4', '\x5', '\x206', '\x104', 
		'\x2', '\xBF3', '\xBF1', '\x3', '\x2', '\x2', '\x2', '\xBF3', '\xBF4', 
		'\x3', '\x2', '\x2', '\x2', '\xBF4', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		'\xBF5', '\xBF6', '\a', '\x156', '\x2', '\x2', '\xBF6', '\xBF7', '\x5', 
		'\x1E8', '\xF5', '\x2', '\xBF7', '\xBF8', '\a', 't', '\x2', '\x2', '\xBF8', 
		'\xBFB', '\t', '\'', '\x2', '\x2', '\xBF9', '\xBFA', '\a', '\xA5', '\x2', 
		'\x2', '\xBFA', '\xBFC', '\x5', '\x24C', '\x127', '\x2', '\xBFB', '\xBF9', 
		'\x3', '\x2', '\x2', '\x2', '\xBFB', '\xBFC', '\x3', '\x2', '\x2', '\x2', 
		'\xBFC', '\xBFF', '\x3', '\x2', '\x2', '\x2', '\xBFD', '\xBFE', '\a', 
		'V', '\x2', '\x2', '\xBFE', '\xC00', '\x5', '\x206', '\x104', '\x2', '\xBFF', 
		'\xBFD', '\x3', '\x2', '\x2', '\x2', '\xBFF', '\xC00', '\x3', '\x2', '\x2', 
		'\x2', '\xC00', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC01', '\xC02', 
		'\a', '\x156', '\x2', '\x2', '\xC02', '\xC03', '\x5', '\x1E8', '\xF5', 
		'\x2', '\xC03', '\xC04', '\a', '\x111', '\x2', '\x2', '\xC04', '\xCB', 
		'\x3', '\x2', '\x2', '\x2', '\xC05', '\xC07', '\a', '\x9F', '\x2', '\x2', 
		'\xC06', '\xC08', '\a', '\\', '\x2', '\x2', '\xC07', '\xC06', '\x3', '\x2', 
		'\x2', '\x2', '\xC07', '\xC08', '\x3', '\x2', '\x2', '\x2', '\xC08', '\xC0A', 
		'\x3', '\x2', '\x2', '\x2', '\xC09', '\xC0B', '\a', '\x43', '\x2', '\x2', 
		'\xC0A', '\xC09', '\x3', '\x2', '\x2', '\x2', '\xC0A', '\xC0B', '\x3', 
		'\x2', '\x2', '\x2', '\xC0B', '\xC0C', '\x3', '\x2', '\x2', '\x2', '\xC0C', 
		'\xC11', '\x5', '\x1E8', '\xF5', '\x2', '\xC0D', '\xC0F', '\a', '\f', 
		'\x2', '\x2', '\xC0E', '\xC0D', '\x3', '\x2', '\x2', '\x2', '\xC0E', '\xC0F', 
		'\x3', '\x2', '\x2', '\x2', '\xC0F', '\xC10', '\x3', '\x2', '\x2', '\x2', 
		'\xC10', '\xC12', '\x5', '\x200', '\x101', '\x2', '\xC11', '\xC0E', '\x3', 
		'\x2', '\x2', '\x2', '\xC11', '\xC12', '\x3', '\x2', '\x2', '\x2', '\xC12', 
		'\xC13', '\x3', '\x2', '\x2', '\x2', '\xC13', '\xC14', '\a', '\x85', '\x2', 
		'\x2', '\xC14', '\xC19', '\x5', '\xBA', '^', '\x2', '\xC15', '\xC16', 
		'\a', '\x3B5', '\x2', '\x2', '\xC16', '\xC18', '\x5', '\xBA', '^', '\x2', 
		'\xC17', '\xC15', '\x3', '\x2', '\x2', '\x2', '\xC18', '\xC1B', '\x3', 
		'\x2', '\x2', '\x2', '\xC19', '\xC17', '\x3', '\x2', '\x2', '\x2', '\xC19', 
		'\xC1A', '\x3', '\x2', '\x2', '\x2', '\xC1A', '\xC1E', '\x3', '\x2', '\x2', 
		'\x2', '\xC1B', '\xC19', '\x3', '\x2', '\x2', '\x2', '\xC1C', '\xC1D', 
		'\a', '\xA5', '\x2', '\x2', '\xC1D', '\xC1F', '\x5', '\x24C', '\x127', 
		'\x2', '\xC1E', '\xC1C', '\x3', '\x2', '\x2', '\x2', '\xC1E', '\xC1F', 
		'\x3', '\x2', '\x2', '\x2', '\xC1F', '\xC21', '\x3', '\x2', '\x2', '\x2', 
		'\xC20', '\xC22', '\x5', '\xD0', 'i', '\x2', '\xC21', '\xC20', '\x3', 
		'\x2', '\x2', '\x2', '\xC21', '\xC22', '\x3', '\x2', '\x2', '\x2', '\xC22', 
		'\xC24', '\x3', '\x2', '\x2', '\x2', '\xC23', '\xC25', '\x5', '\xFC', 
		'\x7F', '\x2', '\xC24', '\xC23', '\x3', '\x2', '\x2', '\x2', '\xC24', 
		'\xC25', '\x3', '\x2', '\x2', '\x2', '\xC25', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xC26', '\xC28', '\a', '\x9F', '\x2', '\x2', '\xC27', '\xC29', 
		'\a', '\\', '\x2', '\x2', '\xC28', '\xC27', '\x3', '\x2', '\x2', '\x2', 
		'\xC28', '\xC29', '\x3', '\x2', '\x2', '\x2', '\xC29', '\xC2B', '\x3', 
		'\x2', '\x2', '\x2', '\xC2A', '\xC2C', '\a', '\x43', '\x2', '\x2', '\xC2B', 
		'\xC2A', '\x3', '\x2', '\x2', '\x2', '\xC2B', '\xC2C', '\x3', '\x2', '\x2', 
		'\x2', '\xC2C', '\xC2D', '\x3', '\x2', '\x2', '\x2', '\xC2D', '\xC2E', 
		'\x5', '\xD4', 'k', '\x2', '\xC2E', '\xC2F', '\a', '\x85', '\x2', '\x2', 
		'\xC2F', '\xC34', '\x5', '\xBA', '^', '\x2', '\xC30', '\xC31', '\a', '\x3B5', 
		'\x2', '\x2', '\xC31', '\xC33', '\x5', '\xBA', '^', '\x2', '\xC32', '\xC30', 
		'\x3', '\x2', '\x2', '\x2', '\xC33', '\xC36', '\x3', '\x2', '\x2', '\x2', 
		'\xC34', '\xC32', '\x3', '\x2', '\x2', '\x2', '\xC34', '\xC35', '\x3', 
		'\x2', '\x2', '\x2', '\xC35', '\xC39', '\x3', '\x2', '\x2', '\x2', '\xC36', 
		'\xC34', '\x3', '\x2', '\x2', '\x2', '\xC37', '\xC38', '\a', '\xA5', '\x2', 
		'\x2', '\xC38', '\xC3A', '\x5', '\x24C', '\x127', '\x2', '\xC39', '\xC37', 
		'\x3', '\x2', '\x2', '\x2', '\xC39', '\xC3A', '\x3', '\x2', '\x2', '\x2', 
		'\xC3A', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xC3B', '\xC3C', '\a', 'k', 
		'\x2', '\x2', '\xC3C', '\xC3D', '\a', '\x11', '\x2', '\x2', '\xC3D', '\xC42', 
		'\x5', '\xD2', 'j', '\x2', '\xC3E', '\xC3F', '\a', '\x3B5', '\x2', '\x2', 
		'\xC3F', '\xC41', '\x5', '\xD2', 'j', '\x2', '\xC40', '\xC3E', '\x3', 
		'\x2', '\x2', '\x2', '\xC41', '\xC44', '\x3', '\x2', '\x2', '\x2', '\xC42', 
		'\xC40', '\x3', '\x2', '\x2', '\x2', '\xC42', '\xC43', '\x3', '\x2', '\x2', 
		'\x2', '\xC43', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xC44', '\xC42', 
		'\x3', '\x2', '\x2', '\x2', '\xC45', '\xC47', '\x5', '\x24C', '\x127', 
		'\x2', '\xC46', '\xC48', '\t', '(', '\x2', '\x2', '\xC47', '\xC46', '\x3', 
		'\x2', '\x2', '\x2', '\xC47', '\xC48', '\x3', '\x2', '\x2', '\x2', '\xC48', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\xC49', '\xC4E', '\x5', '\xD6', 'l', 
		'\x2', '\xC4A', '\xC4B', '\a', '\x3B5', '\x2', '\x2', '\xC4B', '\xC4D', 
		'\x5', '\xD6', 'l', '\x2', '\xC4C', '\xC4A', '\x3', '\x2', '\x2', '\x2', 
		'\xC4D', '\xC50', '\x3', '\x2', '\x2', '\x2', '\xC4E', '\xC4C', '\x3', 
		'\x2', '\x2', '\x2', '\xC4E', '\xC4F', '\x3', '\x2', '\x2', '\x2', '\xC4F', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\xC50', '\xC4E', '\x3', '\x2', '\x2', 
		'\x2', '\xC51', '\xC55', '\x5', '\xD8', 'm', '\x2', '\xC52', '\xC54', 
		'\x5', '\xDE', 'p', '\x2', '\xC53', '\xC52', '\x3', '\x2', '\x2', '\x2', 
		'\xC54', '\xC57', '\x3', '\x2', '\x2', '\x2', '\xC55', '\xC53', '\x3', 
		'\x2', '\x2', '\x2', '\xC55', '\xC56', '\x3', '\x2', '\x2', '\x2', '\xC56', 
		'\xC63', '\x3', '\x2', '\x2', '\x2', '\xC57', '\xC55', '\x3', '\x2', '\x2', 
		'\x2', '\xC58', '\xC59', '\a', '\x3B3', '\x2', '\x2', '\xC59', '\xC5D', 
		'\x5', '\xD8', 'm', '\x2', '\xC5A', '\xC5C', '\x5', '\xDE', 'p', '\x2', 
		'\xC5B', '\xC5A', '\x3', '\x2', '\x2', '\x2', '\xC5C', '\xC5F', '\x3', 
		'\x2', '\x2', '\x2', '\xC5D', '\xC5B', '\x3', '\x2', '\x2', '\x2', '\xC5D', 
		'\xC5E', '\x3', '\x2', '\x2', '\x2', '\xC5E', '\xC60', '\x3', '\x2', '\x2', 
		'\x2', '\xC5F', '\xC5D', '\x3', '\x2', '\x2', '\x2', '\xC60', '\xC61', 
		'\a', '\x3B4', '\x2', '\x2', '\xC61', '\xC63', '\x3', '\x2', '\x2', '\x2', 
		'\xC62', '\xC51', '\x3', '\x2', '\x2', '\x2', '\xC62', '\xC58', '\x3', 
		'\x2', '\x2', '\x2', '\xC63', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xC64', 
		'\xC6A', '\x5', '\x1E8', '\xF5', '\x2', '\xC65', '\xC66', '\a', 'o', '\x2', 
		'\x2', '\xC66', '\xC67', '\a', '\x3B3', '\x2', '\x2', '\xC67', '\xC68', 
		'\x5', '\x21E', '\x110', '\x2', '\xC68', '\xC69', '\a', '\x3B4', '\x2', 
		'\x2', '\xC69', '\xC6B', '\x3', '\x2', '\x2', '\x2', '\xC6A', '\xC65', 
		'\x3', '\x2', '\x2', '\x2', '\xC6A', '\xC6B', '\x3', '\x2', '\x2', '\x2', 
		'\xC6B', '\xC70', '\x3', '\x2', '\x2', '\x2', '\xC6C', '\xC6E', '\a', 
		'\f', '\x2', '\x2', '\xC6D', '\xC6C', '\x3', '\x2', '\x2', '\x2', '\xC6D', 
		'\xC6E', '\x3', '\x2', '\x2', '\x2', '\xC6E', '\xC6F', '\x3', '\x2', '\x2', 
		'\x2', '\xC6F', '\xC71', '\x5', '\x200', '\x101', '\x2', '\xC70', '\xC6D', 
		'\x3', '\x2', '\x2', '\x2', '\xC70', '\xC71', '\x3', '\x2', '\x2', '\x2', 
		'\xC71', '\xC7A', '\x3', '\x2', '\x2', '\x2', '\xC72', '\xC77', '\x5', 
		'\xDA', 'n', '\x2', '\xC73', '\xC74', '\a', '\x3B5', '\x2', '\x2', '\xC74', 
		'\xC76', '\x5', '\xDA', 'n', '\x2', '\xC75', '\xC73', '\x3', '\x2', '\x2', 
		'\x2', '\xC76', '\xC79', '\x3', '\x2', '\x2', '\x2', '\xC77', '\xC75', 
		'\x3', '\x2', '\x2', '\x2', '\xC77', '\xC78', '\x3', '\x2', '\x2', '\x2', 
		'\xC78', '\xC7B', '\x3', '\x2', '\x2', '\x2', '\xC79', '\xC77', '\x3', 
		'\x2', '\x2', '\x2', '\xC7A', '\xC72', '\x3', '\x2', '\x2', '\x2', '\xC7A', 
		'\xC7B', '\x3', '\x2', '\x2', '\x2', '\xC7B', '\xC8D', '\x3', '\x2', '\x2', 
		'\x2', '\xC7C', '\xC82', '\x5', '\xB4', '[', '\x2', '\xC7D', '\xC7E', 
		'\a', '\x3B3', '\x2', '\x2', '\xC7E', '\xC7F', '\x5', '\xB4', '[', '\x2', 
		'\xC7F', '\xC80', '\a', '\x3B4', '\x2', '\x2', '\xC80', '\xC82', '\x3', 
		'\x2', '\x2', '\x2', '\xC81', '\xC7C', '\x3', '\x2', '\x2', '\x2', '\xC81', 
		'\xC7D', '\x3', '\x2', '\x2', '\x2', '\xC82', '\xC84', '\x3', '\x2', '\x2', 
		'\x2', '\xC83', '\xC85', '\a', '\f', '\x2', '\x2', '\xC84', '\xC83', '\x3', 
		'\x2', '\x2', '\x2', '\xC84', '\xC85', '\x3', '\x2', '\x2', '\x2', '\xC85', 
		'\xC86', '\x3', '\x2', '\x2', '\x2', '\xC86', '\xC87', '\x5', '\x200', 
		'\x101', '\x2', '\xC87', '\xC8D', '\x3', '\x2', '\x2', '\x2', '\xC88', 
		'\xC89', '\a', '\x3B3', '\x2', '\x2', '\xC89', '\xC8A', '\x5', '\xD4', 
		'k', '\x2', '\xC8A', '\xC8B', '\a', '\x3B4', '\x2', '\x2', '\xC8B', '\xC8D', 
		'\x3', '\x2', '\x2', '\x2', '\xC8C', '\xC64', '\x3', '\x2', '\x2', '\x2', 
		'\xC8C', '\xC81', '\x3', '\x2', '\x2', '\x2', '\xC8C', '\xC88', '\x3', 
		'\x2', '\x2', '\x2', '\xC8D', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xC8E', 
		'\xC8F', '\t', ')', '\x2', '\x2', '\xC8F', '\xC92', '\t', '\x13', '\x2', 
		'\x2', '\xC90', '\xC91', '\a', '\x39', '\x2', '\x2', '\xC91', '\xC93', 
		'\x5', '\xDC', 'o', '\x2', '\xC92', '\xC90', '\x3', '\x2', '\x2', '\x2', 
		'\xC92', '\xC93', '\x3', '\x2', '\x2', '\x2', '\xC93', '\xC94', '\x3', 
		'\x2', '\x2', '\x2', '\xC94', '\xC95', '\a', '\x3B3', '\x2', '\x2', '\xC95', 
		'\xC96', '\x5', '\x21E', '\x110', '\x2', '\xC96', '\xC97', '\a', '\x3B4', 
		'\x2', '\x2', '\xC97', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xC98', '\xC9E', 
		'\a', 'N', '\x2', '\x2', '\xC99', '\xC9A', '\a', 'k', '\x2', '\x2', '\xC9A', 
		'\xC9E', '\a', '\x11', '\x2', '\x2', '\xC9B', '\xC9C', '\a', '?', '\x2', 
		'\x2', '\xC9C', '\xC9E', '\a', '\x11', '\x2', '\x2', '\xC9D', '\xC98', 
		'\x3', '\x2', '\x2', '\x2', '\xC9D', '\xC99', '\x3', '\x2', '\x2', '\x2', 
		'\xC9D', '\xC9B', '\x3', '\x2', '\x2', '\x2', '\xC9E', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xC9F', '\xCA1', '\t', '*', '\x2', '\x2', '\xCA0', 
		'\xC9F', '\x3', '\x2', '\x2', '\x2', '\xCA0', '\xCA1', '\x3', '\x2', '\x2', 
		'\x2', '\xCA1', '\xCA2', '\x3', '\x2', '\x2', '\x2', '\xCA2', '\xCA3', 
		'\a', 'N', '\x2', '\x2', '\xCA3', '\xCAB', '\x5', '\xD8', 'm', '\x2', 
		'\xCA4', '\xCA5', '\a', '\x66', '\x2', '\x2', '\xCA5', '\xCAC', '\x5', 
		'\x24C', '\x127', '\x2', '\xCA6', '\xCA7', '\a', '\xA2', '\x2', '\x2', 
		'\xCA7', '\xCA8', '\a', '\x3B3', '\x2', '\x2', '\xCA8', '\xCA9', '\x5', 
		'\x21E', '\x110', '\x2', '\xCA9', '\xCAA', '\a', '\x3B4', '\x2', '\x2', 
		'\xCAA', '\xCAC', '\x3', '\x2', '\x2', '\x2', '\xCAB', '\xCA4', '\x3', 
		'\x2', '\x2', '\x2', '\xCAB', '\xCA6', '\x3', '\x2', '\x2', '\x2', '\xCAB', 
		'\xCAC', '\x3', '\x2', '\x2', '\x2', '\xCAC', '\xCCC', '\x3', '\x2', '\x2', 
		'\x2', '\xCAD', '\xCAE', '\a', '\x92', '\x2', '\x2', '\xCAE', '\xCB1', 
		'\x5', '\xD8', 'm', '\x2', '\xCAF', '\xCB0', '\a', '\x66', '\x2', '\x2', 
		'\xCB0', '\xCB2', '\x5', '\x24C', '\x127', '\x2', '\xCB1', '\xCAF', '\x3', 
		'\x2', '\x2', '\x2', '\xCB1', '\xCB2', '\x3', '\x2', '\x2', '\x2', '\xCB2', 
		'\xCCC', '\x3', '\x2', '\x2', '\x2', '\xCB3', '\xCB5', '\t', '+', '\x2', 
		'\x2', '\xCB4', '\xCB6', '\a', 'm', '\x2', '\x2', '\xCB5', '\xCB4', '\x3', 
		'\x2', '\x2', '\x2', '\xCB5', '\xCB6', '\x3', '\x2', '\x2', '\x2', '\xCB6', 
		'\xCB7', '\x3', '\x2', '\x2', '\x2', '\xCB7', '\xCB8', '\a', 'N', '\x2', 
		'\x2', '\xCB8', '\xCC0', '\x5', '\xD8', 'm', '\x2', '\xCB9', '\xCBA', 
		'\a', '\x66', '\x2', '\x2', '\xCBA', '\xCC1', '\x5', '\x24C', '\x127', 
		'\x2', '\xCBB', '\xCBC', '\a', '\xA2', '\x2', '\x2', '\xCBC', '\xCBD', 
		'\a', '\x3B3', '\x2', '\x2', '\xCBD', '\xCBE', '\x5', '\x21E', '\x110', 
		'\x2', '\xCBE', '\xCBF', '\a', '\x3B4', '\x2', '\x2', '\xCBF', '\xCC1', 
		'\x3', '\x2', '\x2', '\x2', '\xCC0', '\xCB9', '\x3', '\x2', '\x2', '\x2', 
		'\xCC0', '\xCBB', '\x3', '\x2', '\x2', '\x2', '\xCC1', '\xCCC', '\x3', 
		'\x2', '\x2', '\x2', '\xCC2', '\xCC7', '\a', '\x62', '\x2', '\x2', '\xCC3', 
		'\xCC5', '\t', '+', '\x2', '\x2', '\xCC4', '\xCC6', '\a', 'm', '\x2', 
		'\x2', '\xCC5', '\xCC4', '\x3', '\x2', '\x2', '\x2', '\xCC5', '\xCC6', 
		'\x3', '\x2', '\x2', '\x2', '\xCC6', '\xCC8', '\x3', '\x2', '\x2', '\x2', 
		'\xCC7', '\xCC3', '\x3', '\x2', '\x2', '\x2', '\xCC7', '\xCC8', '\x3', 
		'\x2', '\x2', '\x2', '\xCC8', '\xCC9', '\x3', '\x2', '\x2', '\x2', '\xCC9', 
		'\xCCA', '\a', 'N', '\x2', '\x2', '\xCCA', '\xCCC', '\x5', '\xD8', 'm', 
		'\x2', '\xCCB', '\xCA0', '\x3', '\x2', '\x2', '\x2', '\xCCB', '\xCAD', 
		'\x3', '\x2', '\x2', '\x2', '\xCCB', '\xCB3', '\x3', '\x2', '\x2', '\x2', 
		'\xCCB', '\xCC2', '\x3', '\x2', '\x2', '\x2', '\xCCC', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\xCCD', '\xCCE', '\a', '\x3B3', '\x2', '\x2', '\xCCE', 
		'\xCCF', '\x5', '\xE4', 's', '\x2', '\xCCF', '\xCD0', '\a', '\x3B4', '\x2', 
		'\x2', '\xCD0', '\xCD6', '\x3', '\x2', '\x2', '\x2', '\xCD1', '\xCD2', 
		'\a', '\x3B3', '\x2', '\x2', '\xCD2', '\xCD3', '\x5', '\xE0', 'q', '\x2', 
		'\xCD3', '\xCD4', '\a', '\x3B4', '\x2', '\x2', '\xCD4', '\xCD6', '\x3', 
		'\x2', '\x2', '\x2', '\xCD5', '\xCCD', '\x3', '\x2', '\x2', '\x2', '\xCD5', 
		'\xCD1', '\x3', '\x2', '\x2', '\x2', '\xCD6', '\xE1', '\x3', '\x2', '\x2', 
		'\x2', '\xCD7', '\xCD8', '\a', '\x3B3', '\x2', '\x2', '\xCD8', '\xCD9', 
		'\x5', '\xE6', 't', '\x2', '\xCD9', '\xCDA', '\a', '\x3B4', '\x2', '\x2', 
		'\xCDA', '\xCE0', '\x3', '\x2', '\x2', '\x2', '\xCDB', '\xCDC', '\a', 
		'\x3B3', '\x2', '\x2', '\xCDC', '\xCDD', '\x5', '\xE2', 'r', '\x2', '\xCDD', 
		'\xCDE', '\a', '\x3B4', '\x2', '\x2', '\xCDE', '\xCE0', '\x3', '\x2', 
		'\x2', '\x2', '\xCDF', '\xCD7', '\x3', '\x2', '\x2', '\x2', '\xCDF', '\xCDB', 
		'\x3', '\x2', '\x2', '\x2', '\xCE0', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\xCE1', '\xCE5', '\a', '\x84', '\x2', '\x2', '\xCE2', '\xCE4', '\x5', 
		'\xEC', 'w', '\x2', '\xCE3', '\xCE2', '\x3', '\x2', '\x2', '\x2', '\xCE4', 
		'\xCE7', '\x3', '\x2', '\x2', '\x2', '\xCE5', '\xCE3', '\x3', '\x2', '\x2', 
		'\x2', '\xCE5', '\xCE6', '\x3', '\x2', '\x2', '\x2', '\xCE6', '\xCE8', 
		'\x3', '\x2', '\x2', '\x2', '\xCE7', '\xCE5', '\x3', '\x2', '\x2', '\x2', 
		'\xCE8', '\xCEA', '\x5', '\xEE', 'x', '\x2', '\xCE9', '\xCEB', '\x5', 
		'\xF2', 'z', '\x2', '\xCEA', '\xCE9', '\x3', '\x2', '\x2', '\x2', '\xCEA', 
		'\xCEB', '\x3', '\x2', '\x2', '\x2', '\xCEB', '\xCED', '\x3', '\x2', '\x2', 
		'\x2', '\xCEC', '\xCEE', '\x5', '\xF8', '}', '\x2', '\xCED', '\xCEC', 
		'\x3', '\x2', '\x2', '\x2', '\xCED', '\xCEE', '\x3', '\x2', '\x2', '\x2', 
		'\xCEE', '\xCF0', '\x3', '\x2', '\x2', '\x2', '\xCEF', '\xCF1', '\x5', 
		'\xD0', 'i', '\x2', '\xCF0', '\xCEF', '\x3', '\x2', '\x2', '\x2', '\xCF0', 
		'\xCF1', '\x3', '\x2', '\x2', '\x2', '\xCF1', '\xCF3', '\x3', '\x2', '\x2', 
		'\x2', '\xCF2', '\xCF4', '\x5', '\xFC', '\x7F', '\x2', '\xCF3', '\xCF2', 
		'\x3', '\x2', '\x2', '\x2', '\xCF3', '\xCF4', '\x3', '\x2', '\x2', '\x2', 
		'\xCF4', '\xD0A', '\x3', '\x2', '\x2', '\x2', '\xCF5', '\xCF9', '\a', 
		'\x84', '\x2', '\x2', '\xCF6', '\xCF8', '\x5', '\xEC', 'w', '\x2', '\xCF7', 
		'\xCF6', '\x3', '\x2', '\x2', '\x2', '\xCF8', '\xCFB', '\x3', '\x2', '\x2', 
		'\x2', '\xCF9', '\xCF7', '\x3', '\x2', '\x2', '\x2', '\xCF9', '\xCFA', 
		'\x3', '\x2', '\x2', '\x2', '\xCFA', '\xCFC', '\x3', '\x2', '\x2', '\x2', 
		'\xCFB', '\xCF9', '\x3', '\x2', '\x2', '\x2', '\xCFC', '\xCFE', '\x5', 
		'\xEE', 'x', '\x2', '\xCFD', '\xCFF', '\x5', '\xF8', '}', '\x2', '\xCFE', 
		'\xCFD', '\x3', '\x2', '\x2', '\x2', '\xCFE', '\xCFF', '\x3', '\x2', '\x2', 
		'\x2', '\xCFF', '\xD01', '\x3', '\x2', '\x2', '\x2', '\xD00', '\xD02', 
		'\x5', '\xD0', 'i', '\x2', '\xD01', '\xD00', '\x3', '\x2', '\x2', '\x2', 
		'\xD01', '\xD02', '\x3', '\x2', '\x2', '\x2', '\xD02', '\xD04', '\x3', 
		'\x2', '\x2', '\x2', '\xD03', '\xD05', '\x5', '\xFC', '\x7F', '\x2', '\xD04', 
		'\xD03', '\x3', '\x2', '\x2', '\x2', '\xD04', '\xD05', '\x3', '\x2', '\x2', 
		'\x2', '\xD05', '\xD07', '\x3', '\x2', '\x2', '\x2', '\xD06', '\xD08', 
		'\x5', '\xF2', 'z', '\x2', '\xD07', '\xD06', '\x3', '\x2', '\x2', '\x2', 
		'\xD07', '\xD08', '\x3', '\x2', '\x2', '\x2', '\xD08', '\xD0A', '\x3', 
		'\x2', '\x2', '\x2', '\xD09', '\xCE1', '\x3', '\x2', '\x2', '\x2', '\xD09', 
		'\xCF5', '\x3', '\x2', '\x2', '\x2', '\xD0A', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', '\xD0B', '\xD0F', '\a', '\x84', '\x2', '\x2', '\xD0C', '\xD0E', 
		'\x5', '\xEC', 'w', '\x2', '\xD0D', '\xD0C', '\x3', '\x2', '\x2', '\x2', 
		'\xD0E', '\xD11', '\x3', '\x2', '\x2', '\x2', '\xD0F', '\xD0D', '\x3', 
		'\x2', '\x2', '\x2', '\xD0F', '\xD10', '\x3', '\x2', '\x2', '\x2', '\xD10', 
		'\xD12', '\x3', '\x2', '\x2', '\x2', '\xD11', '\xD0F', '\x3', '\x2', '\x2', 
		'\x2', '\xD12', '\xD14', '\x5', '\xEE', 'x', '\x2', '\xD13', '\xD15', 
		'\x5', '\xF8', '}', '\x2', '\xD14', '\xD13', '\x3', '\x2', '\x2', '\x2', 
		'\xD14', '\xD15', '\x3', '\x2', '\x2', '\x2', '\xD15', '\xD17', '\x3', 
		'\x2', '\x2', '\x2', '\xD16', '\xD18', '\x5', '\xD0', 'i', '\x2', '\xD17', 
		'\xD16', '\x3', '\x2', '\x2', '\x2', '\xD17', '\xD18', '\x3', '\x2', '\x2', 
		'\x2', '\xD18', '\xD1A', '\x3', '\x2', '\x2', '\x2', '\xD19', '\xD1B', 
		'\x5', '\xFC', '\x7F', '\x2', '\xD1A', '\xD19', '\x3', '\x2', '\x2', '\x2', 
		'\xD1A', '\xD1B', '\x3', '\x2', '\x2', '\x2', '\xD1B', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xD1C', '\xD1E', '\a', '\x9B', '\x2', '\x2', '\xD1D', 
		'\xD1F', '\t', '$', '\x2', '\x2', '\xD1E', '\xD1D', '\x3', '\x2', '\x2', 
		'\x2', '\xD1E', '\xD1F', '\x3', '\x2', '\x2', '\x2', '\xD1F', '\xD20', 
		'\x3', '\x2', '\x2', '\x2', '\xD20', '\xD21', '\x5', '\xE2', 'r', '\x2', 
		'\xD21', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xD22', '\xD24', '\a', '\x9B', 
		'\x2', '\x2', '\xD23', '\xD25', '\t', '$', '\x2', '\x2', '\xD24', '\xD23', 
		'\x3', '\x2', '\x2', '\x2', '\xD24', '\xD25', '\x3', '\x2', '\x2', '\x2', 
		'\xD25', '\xD28', '\x3', '\x2', '\x2', '\x2', '\xD26', '\xD29', '\x5', 
		'\xE6', 't', '\x2', '\xD27', '\xD29', '\x5', '\xE2', 'r', '\x2', '\xD28', 
		'\xD26', '\x3', '\x2', '\x2', '\x2', '\xD28', '\xD27', '\x3', '\x2', '\x2', 
		'\x2', '\xD29', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xD2A', '\xD33', 
		'\t', ',', '\x2', '\x2', '\xD2B', '\xD33', '\a', '\x41', '\x2', '\x2', 
		'\xD2C', '\xD33', '\a', '\x92', '\x2', '\x2', '\xD2D', '\xD33', '\a', 
		'\x8F', '\x2', '\x2', '\xD2E', '\xD33', '\a', '\x8D', '\x2', '\x2', '\xD2F', 
		'\xD33', '\a', '\x1F2', '\x2', '\x2', '\xD30', '\xD33', '\t', '-', '\x2', 
		'\x2', '\xD31', '\xD33', '\a', '\x8E', '\x2', '\x2', '\xD32', '\xD2A', 
		'\x3', '\x2', '\x2', '\x2', '\xD32', '\xD2B', '\x3', '\x2', '\x2', '\x2', 
		'\xD32', '\xD2C', '\x3', '\x2', '\x2', '\x2', '\xD32', '\xD2D', '\x3', 
		'\x2', '\x2', '\x2', '\xD32', '\xD2E', '\x3', '\x2', '\x2', '\x2', '\xD32', 
		'\xD2F', '\x3', '\x2', '\x2', '\x2', '\xD32', '\xD30', '\x3', '\x2', '\x2', 
		'\x2', '\xD32', '\xD31', '\x3', '\x2', '\x2', '\x2', '\xD33', '\xED', 
		'\x3', '\x2', '\x2', '\x2', '\xD34', '\xD37', '\a', '\x3A2', '\x2', '\x2', 
		'\xD35', '\xD37', '\x5', '\xF0', 'y', '\x2', '\xD36', '\xD34', '\x3', 
		'\x2', '\x2', '\x2', '\xD36', '\xD35', '\x3', '\x2', '\x2', '\x2', '\xD37', 
		'\xD3C', '\x3', '\x2', '\x2', '\x2', '\xD38', '\xD39', '\a', '\x3B5', 
		'\x2', '\x2', '\xD39', '\xD3B', '\x5', '\xF0', 'y', '\x2', '\xD3A', '\xD38', 
		'\x3', '\x2', '\x2', '\x2', '\xD3B', '\xD3E', '\x3', '\x2', '\x2', '\x2', 
		'\xD3C', '\xD3A', '\x3', '\x2', '\x2', '\x2', '\xD3C', '\xD3D', '\x3', 
		'\x2', '\x2', '\x2', '\xD3D', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xD3E', 
		'\xD3C', '\x3', '\x2', '\x2', '\x2', '\xD3F', '\xD40', '\x5', '\x1E6', 
		'\xF4', '\x2', '\xD40', '\xD41', '\a', '\x3B2', '\x2', '\x2', '\xD41', 
		'\xD42', '\a', '\x3A2', '\x2', '\x2', '\xD42', '\xD5D', '\x3', '\x2', 
		'\x2', '\x2', '\xD43', '\xD48', '\x5', '\x1EA', '\xF6', '\x2', '\xD44', 
		'\xD46', '\a', '\f', '\x2', '\x2', '\xD45', '\xD44', '\x3', '\x2', '\x2', 
		'\x2', '\xD45', '\xD46', '\x3', '\x2', '\x2', '\x2', '\xD46', '\xD47', 
		'\x3', '\x2', '\x2', '\x2', '\xD47', '\xD49', '\x5', '\x200', '\x101', 
		'\x2', '\xD48', '\xD45', '\x3', '\x2', '\x2', '\x2', '\xD48', '\xD49', 
		'\x3', '\x2', '\x2', '\x2', '\xD49', '\xD5D', '\x3', '\x2', '\x2', '\x2', 
		'\xD4A', '\xD4F', '\x5', '\x238', '\x11D', '\x2', '\xD4B', '\xD4D', '\a', 
		'\f', '\x2', '\x2', '\xD4C', '\xD4B', '\x3', '\x2', '\x2', '\x2', '\xD4C', 
		'\xD4D', '\x3', '\x2', '\x2', '\x2', '\xD4D', '\xD4E', '\x3', '\x2', '\x2', 
		'\x2', '\xD4E', '\xD50', '\x5', '\x200', '\x101', '\x2', '\xD4F', '\xD4C', 
		'\x3', '\x2', '\x2', '\x2', '\xD4F', '\xD50', '\x3', '\x2', '\x2', '\x2', 
		'\xD50', '\xD5D', '\x3', '\x2', '\x2', '\x2', '\xD51', '\xD52', '\a', 
		'\x3CD', '\x2', '\x2', '\xD52', '\xD54', '\a', '\x399', '\x2', '\x2', 
		'\xD53', '\xD51', '\x3', '\x2', '\x2', '\x2', '\xD53', '\xD54', '\x3', 
		'\x2', '\x2', '\x2', '\xD54', '\xD55', '\x3', '\x2', '\x2', '\x2', '\xD55', 
		'\xD5A', '\x5', '\x24C', '\x127', '\x2', '\xD56', '\xD58', '\a', '\f', 
		'\x2', '\x2', '\xD57', '\xD56', '\x3', '\x2', '\x2', '\x2', '\xD57', '\xD58', 
		'\x3', '\x2', '\x2', '\x2', '\xD58', '\xD59', '\x3', '\x2', '\x2', '\x2', 
		'\xD59', '\xD5B', '\x5', '\x200', '\x101', '\x2', '\xD5A', '\xD57', '\x3', 
		'\x2', '\x2', '\x2', '\xD5A', '\xD5B', '\x3', '\x2', '\x2', '\x2', '\xD5B', 
		'\xD5D', '\x3', '\x2', '\x2', '\x2', '\xD5C', '\xD3F', '\x3', '\x2', '\x2', 
		'\x2', '\xD5C', '\xD43', '\x3', '\x2', '\x2', '\x2', '\xD5C', '\xD4A', 
		'\x3', '\x2', '\x2', '\x2', '\xD5C', '\xD53', '\x3', '\x2', '\x2', '\x2', 
		'\xD5D', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xD5E', '\xD5F', '\a', 'K', 
		'\x2', '\x2', '\xD5F', '\xD64', '\x5', '\xBC', '_', '\x2', '\xD60', '\xD61', 
		'\a', '\x3B5', '\x2', '\x2', '\xD61', '\xD63', '\x5', '\xBC', '_', '\x2', 
		'\xD62', '\xD60', '\x3', '\x2', '\x2', '\x2', '\xD63', '\xD66', '\x3', 
		'\x2', '\x2', '\x2', '\xD64', '\xD62', '\x3', '\x2', '\x2', '\x2', '\xD64', 
		'\xD65', '\x3', '\x2', '\x2', '\x2', '\xD65', '\xD83', '\x3', '\x2', '\x2', 
		'\x2', '\xD66', '\xD64', '\x3', '\x2', '\x2', '\x2', '\xD67', '\xD68', 
		'\a', 'K', '\x2', '\x2', '\xD68', '\xD69', '\a', '\x130', '\x2', '\x2', 
		'\xD69', '\xD83', '\a', '\x3C2', '\x2', '\x2', '\xD6A', '\xD6B', '\a', 
		'K', '\x2', '\x2', '\xD6B', '\xD6C', '\a', 'n', '\x2', '\x2', '\xD6C', 
		'\xD70', '\a', '\x3C2', '\x2', '\x2', '\xD6D', '\xD6E', '\a', '\x17', 
		'\x2', '\x2', '\xD6E', '\xD6F', '\a', '\x85', '\x2', '\x2', '\xD6F', '\xD71', 
		'\x5', '\x1F2', '\xFA', '\x2', '\xD70', '\xD6D', '\x3', '\x2', '\x2', 
		'\x2', '\xD70', '\xD71', '\x3', '\x2', '\x2', '\x2', '\xD71', '\xD78', 
		'\x3', '\x2', '\x2', '\x2', '\xD72', '\xD74', '\t', '!', '\x2', '\x2', 
		'\xD73', '\xD75', '\x5', '\xF4', '{', '\x2', '\xD74', '\xD73', '\x3', 
		'\x2', '\x2', '\x2', '\xD75', '\xD76', '\x3', '\x2', '\x2', '\x2', '\xD76', 
		'\xD74', '\x3', '\x2', '\x2', '\x2', '\xD76', '\xD77', '\x3', '\x2', '\x2', 
		'\x2', '\xD77', '\xD79', '\x3', '\x2', '\x2', '\x2', '\xD78', '\xD72', 
		'\x3', '\x2', '\x2', '\x2', '\xD78', '\xD79', '\x3', '\x2', '\x2', '\x2', 
		'\xD79', '\xD80', '\x3', '\x2', '\x2', '\x2', '\xD7A', '\xD7C', '\a', 
		'X', '\x2', '\x2', '\xD7B', '\xD7D', '\x5', '\xF6', '|', '\x2', '\xD7C', 
		'\xD7B', '\x3', '\x2', '\x2', '\x2', '\xD7D', '\xD7E', '\x3', '\x2', '\x2', 
		'\x2', '\xD7E', '\xD7C', '\x3', '\x2', '\x2', '\x2', '\xD7E', '\xD7F', 
		'\x3', '\x2', '\x2', '\x2', '\xD7F', '\xD81', '\x3', '\x2', '\x2', '\x2', 
		'\xD80', '\xD7A', '\x3', '\x2', '\x2', '\x2', '\xD80', '\xD81', '\x3', 
		'\x2', '\x2', '\x2', '\xD81', '\xD83', '\x3', '\x2', '\x2', '\x2', '\xD82', 
		'\xD5E', '\x3', '\x2', '\x2', '\x2', '\xD82', '\xD67', '\x3', '\x2', '\x2', 
		'\x2', '\xD82', '\xD6A', '\x3', '\x2', '\x2', '\x2', '\xD83', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\xD84', '\xD85', '\a', '\x94', '\x2', '\x2', 
		'\xD85', '\xD86', '\a', '\x11', '\x2', '\x2', '\xD86', '\xD91', '\a', 
		'\x3C2', '\x2', '\x2', '\xD87', '\xD89', '\a', 'i', '\x2', '\x2', '\xD88', 
		'\xD87', '\x3', '\x2', '\x2', '\x2', '\xD88', '\xD89', '\x3', '\x2', '\x2', 
		'\x2', '\xD89', '\xD8A', '\x3', '\x2', '\x2', '\x2', '\xD8A', '\xD8B', 
		'\a', '\x32', '\x2', '\x2', '\xD8B', '\xD8C', '\a', '\x11', '\x2', '\x2', 
		'\xD8C', '\xD91', '\a', '\x3C2', '\x2', '\x2', '\xD8D', '\xD8E', '\a', 
		'\x33', '\x2', '\x2', '\xD8E', '\xD8F', '\a', '\x11', '\x2', '\x2', '\xD8F', 
		'\xD91', '\a', '\x3C2', '\x2', '\x2', '\xD90', '\xD84', '\x3', '\x2', 
		'\x2', '\x2', '\xD90', '\xD88', '\x3', '\x2', '\x2', '\x2', '\xD90', '\xD8D', 
		'\x3', '\x2', '\x2', '\x2', '\xD91', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\xD92', '\xD93', '\a', '\x91', '\x2', '\x2', '\xD93', '\xD94', '\a', 
		'\x11', '\x2', '\x2', '\xD94', '\xD99', '\a', '\x3C2', '\x2', '\x2', '\xD95', 
		'\xD96', '\a', '\x94', '\x2', '\x2', '\xD96', '\xD97', '\a', '\x11', '\x2', 
		'\x2', '\xD97', '\xD99', '\a', '\x3C2', '\x2', '\x2', '\xD98', '\xD92', 
		'\x3', '\x2', '\x2', '\x2', '\xD98', '\xD95', '\x3', '\x2', '\x2', '\x2', 
		'\xD99', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xD9A', '\xD9B', '\a', '<', 
		'\x2', '\x2', '\xD9B', '\xD9E', '\x5', '\xD4', 'k', '\x2', '\xD9C', '\xD9D', 
		'\a', '\xA5', '\x2', '\x2', '\xD9D', '\xD9F', '\x5', '\x24C', '\x127', 
		'\x2', '\xD9E', '\xD9C', '\x3', '\x2', '\x2', '\x2', '\xD9E', '\xD9F', 
		'\x3', '\x2', '\x2', '\x2', '\xD9F', '\xDAE', '\x3', '\x2', '\x2', '\x2', 
		'\xDA0', '\xDA1', '\a', '?', '\x2', '\x2', '\xDA1', '\xDA2', '\a', '\x11', 
		'\x2', '\x2', '\xDA2', '\xDA7', '\x5', '\xFA', '~', '\x2', '\xDA3', '\xDA4', 
		'\a', '\x3B5', '\x2', '\x2', '\xDA4', '\xDA6', '\x5', '\xFA', '~', '\x2', 
		'\xDA5', '\xDA3', '\x3', '\x2', '\x2', '\x2', '\xDA6', '\xDA9', '\x3', 
		'\x2', '\x2', '\x2', '\xDA7', '\xDA5', '\x3', '\x2', '\x2', '\x2', '\xDA7', 
		'\xDA8', '\x3', '\x2', '\x2', '\x2', '\xDA8', '\xDAC', '\x3', '\x2', '\x2', 
		'\x2', '\xDA9', '\xDA7', '\x3', '\x2', '\x2', '\x2', '\xDAA', '\xDAB', 
		'\a', '\xA7', '\x2', '\x2', '\xDAB', '\xDAD', '\a', '\x1D9', '\x2', '\x2', 
		'\xDAC', '\xDAA', '\x3', '\x2', '\x2', '\x2', '\xDAC', '\xDAD', '\x3', 
		'\x2', '\x2', '\x2', '\xDAD', '\xDAF', '\x3', '\x2', '\x2', '\x2', '\xDAE', 
		'\xDA0', '\x3', '\x2', '\x2', '\x2', '\xDAE', '\xDAF', '\x3', '\x2', '\x2', 
		'\x2', '\xDAF', '\xDB2', '\x3', '\x2', '\x2', '\x2', '\xDB0', '\xDB1', 
		'\a', '@', '\x2', '\x2', '\xDB1', '\xDB3', '\x5', '\x24C', '\x127', '\x2', 
		'\xDB2', '\xDB0', '\x3', '\x2', '\x2', '\x2', '\xDB2', '\xDB3', '\x3', 
		'\x2', '\x2', '\x2', '\xDB3', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xDB4', 
		'\xDB6', '\x5', '\x24C', '\x127', '\x2', '\xDB5', '\xDB7', '\t', '(', 
		'\x2', '\x2', '\xDB6', '\xDB5', '\x3', '\x2', '\x2', '\x2', '\xDB6', '\xDB7', 
		'\x3', '\x2', '\x2', '\x2', '\xDB7', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		'\xDB8', '\xDC3', '\a', 'V', '\x2', '\x2', '\xDB9', '\xDBA', '\x5', '\x206', 
		'\x104', '\x2', '\xDBA', '\xDBB', '\a', '\x3B5', '\x2', '\x2', '\xDBB', 
		'\xDBD', '\x3', '\x2', '\x2', '\x2', '\xDBC', '\xDB9', '\x3', '\x2', '\x2', 
		'\x2', '\xDBC', '\xDBD', '\x3', '\x2', '\x2', '\x2', '\xDBD', '\xDBE', 
		'\x3', '\x2', '\x2', '\x2', '\xDBE', '\xDC4', '\x5', '\x206', '\x104', 
		'\x2', '\xDBF', '\xDC0', '\x5', '\x206', '\x104', '\x2', '\xDC0', '\xDC1', 
		'\a', '\x1A2', '\x2', '\x2', '\xDC1', '\xDC2', '\x5', '\x206', '\x104', 
		'\x2', '\xDC2', '\xDC4', '\x3', '\x2', '\x2', '\x2', '\xDC3', '\xDBC', 
		'\x3', '\x2', '\x2', '\x2', '\xDC3', '\xDBF', '\x3', '\x2', '\x2', '\x2', 
		'\xDC4', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xDC5', '\xDC6', '\a', '\x1F6', 
		'\x2', '\x2', '\xDC6', '\xDCF', '\a', '\x20A', '\x2', '\x2', '\xDC7', 
		'\xDCC', '\x5', '\x114', '\x8B', '\x2', '\xDC8', '\xDC9', '\a', '\x3B5', 
		'\x2', '\x2', '\xDC9', '\xDCB', '\x5', '\x114', '\x8B', '\x2', '\xDCA', 
		'\xDC8', '\x3', '\x2', '\x2', '\x2', '\xDCB', '\xDCE', '\x3', '\x2', '\x2', 
		'\x2', '\xDCC', '\xDCA', '\x3', '\x2', '\x2', '\x2', '\xDCC', '\xDCD', 
		'\x3', '\x2', '\x2', '\x2', '\xDCD', '\xDD0', '\x3', '\x2', '\x2', '\x2', 
		'\xDCE', '\xDCC', '\x3', '\x2', '\x2', '\x2', '\xDCF', '\xDC7', '\x3', 
		'\x2', '\x2', '\x2', '\xDCF', '\xDD0', '\x3', '\x2', '\x2', '\x2', '\xDD0', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\xDD1', '\xDD3', '\a', '\x102', '\x2', 
		'\x2', '\xDD2', '\xDD4', '\a', '\x21E', '\x2', '\x2', '\xDD3', '\xDD2', 
		'\x3', '\x2', '\x2', '\x2', '\xDD3', '\xDD4', '\x3', '\x2', '\x2', '\x2', 
		'\xDD4', '\x101', '\x3', '\x2', '\x2', '\x2', '\xDD5', '\xDD7', '\a', 
		'\x117', '\x2', '\x2', '\xDD6', '\xDD8', '\a', '\x21E', '\x2', '\x2', 
		'\xDD7', '\xDD6', '\x3', '\x2', '\x2', '\x2', '\xDD7', '\xDD8', '\x3', 
		'\x2', '\x2', '\x2', '\xDD8', '\xDDE', '\x3', '\x2', '\x2', '\x2', '\xDD9', 
		'\xDDB', '\a', '\v', '\x2', '\x2', '\xDDA', '\xDDC', '\a', '\x19E', '\x2', 
		'\x2', '\xDDB', '\xDDA', '\x3', '\x2', '\x2', '\x2', '\xDDB', '\xDDC', 
		'\x3', '\x2', '\x2', '\x2', '\xDDC', '\xDDD', '\x3', '\x2', '\x2', '\x2', 
		'\xDDD', '\xDDF', '\a', '\x10B', '\x2', '\x2', '\xDDE', '\xDD9', '\x3', 
		'\x2', '\x2', '\x2', '\xDDE', '\xDDF', '\x3', '\x2', '\x2', '\x2', '\xDDF', 
		'\xDE4', '\x3', '\x2', '\x2', '\x2', '\xDE0', '\xDE2', '\a', '\x19E', 
		'\x2', '\x2', '\xDE1', '\xDE0', '\x3', '\x2', '\x2', '\x2', '\xDE1', '\xDE2', 
		'\x3', '\x2', '\x2', '\x2', '\xDE2', '\xDE3', '\x3', '\x2', '\x2', '\x2', 
		'\xDE3', '\xDE5', '\a', 'x', '\x2', '\x2', '\xDE4', '\xDE1', '\x3', '\x2', 
		'\x2', '\x2', '\xDE4', '\xDE5', '\x3', '\x2', '\x2', '\x2', '\xDE5', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\xDE6', '\xDE8', '\a', '\x1D8', '\x2', '\x2', 
		'\xDE7', '\xDE9', '\a', '\x21E', '\x2', '\x2', '\xDE8', '\xDE7', '\x3', 
		'\x2', '\x2', '\x2', '\xDE8', '\xDE9', '\x3', '\x2', '\x2', '\x2', '\xDE9', 
		'\xDEF', '\x3', '\x2', '\x2', '\x2', '\xDEA', '\xDEC', '\a', '\v', '\x2', 
		'\x2', '\xDEB', '\xDED', '\a', '\x19E', '\x2', '\x2', '\xDEC', '\xDEB', 
		'\x3', '\x2', '\x2', '\x2', '\xDEC', '\xDED', '\x3', '\x2', '\x2', '\x2', 
		'\xDED', '\xDEE', '\x3', '\x2', '\x2', '\x2', '\xDEE', '\xDF0', '\a', 
		'\x10B', '\x2', '\x2', '\xDEF', '\xDEA', '\x3', '\x2', '\x2', '\x2', '\xDEF', 
		'\xDF0', '\x3', '\x2', '\x2', '\x2', '\xDF0', '\xDF5', '\x3', '\x2', '\x2', 
		'\x2', '\xDF1', '\xDF3', '\a', '\x19E', '\x2', '\x2', '\xDF2', '\xDF1', 
		'\x3', '\x2', '\x2', '\x2', '\xDF2', '\xDF3', '\x3', '\x2', '\x2', '\x2', 
		'\xDF3', '\xDF4', '\x3', '\x2', '\x2', '\x2', '\xDF4', '\xDF6', '\a', 
		'x', '\x2', '\x2', '\xDF5', '\xDF2', '\x3', '\x2', '\x2', '\x2', '\xDF5', 
		'\xDF6', '\x3', '\x2', '\x2', '\x2', '\xDF6', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\xDF7', '\xDF8', '\a', '\x1DE', '\x2', '\x2', '\xDF8', '\xDF9', 
		'\x5', '\x200', '\x101', '\x2', '\xDF9', '\x107', '\x3', '\x2', '\x2', 
		'\x2', '\xDFA', '\xDFC', '\a', '\x1D8', '\x2', '\x2', '\xDFB', '\xDFD', 
		'\a', '\x21E', '\x2', '\x2', '\xDFC', '\xDFB', '\x3', '\x2', '\x2', '\x2', 
		'\xDFC', '\xDFD', '\x3', '\x2', '\x2', '\x2', '\xDFD', '\xDFE', '\x3', 
		'\x2', '\x2', '\x2', '\xDFE', '\xE00', '\a', '\x96', '\x2', '\x2', '\xDFF', 
		'\xE01', '\a', '\x1DE', '\x2', '\x2', '\xE00', '\xDFF', '\x3', '\x2', 
		'\x2', '\x2', '\xE00', '\xE01', '\x3', '\x2', '\x2', '\x2', '\xE01', '\xE02', 
		'\x3', '\x2', '\x2', '\x2', '\xE02', '\xE03', '\x5', '\x200', '\x101', 
		'\x2', '\xE03', '\x109', '\x3', '\x2', '\x2', '\x2', '\xE04', '\xE05', 
		'\a', 'x', '\x2', '\x2', '\xE05', '\xE06', '\a', '\x1DE', '\x2', '\x2', 
		'\xE06', '\xE07', '\x5', '\x200', '\x101', '\x2', '\xE07', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\xE08', '\xE09', '\a', 'Z', '\x2', '\x2', '\xE09', 
		'\xE0A', '\a', '\x230', '\x2', '\x2', '\xE0A', '\xE0F', '\x5', '\x116', 
		'\x8C', '\x2', '\xE0B', '\xE0C', '\a', '\x3B5', '\x2', '\x2', '\xE0C', 
		'\xE0E', '\x5', '\x116', '\x8C', '\x2', '\xE0D', '\xE0B', '\x3', '\x2', 
		'\x2', '\x2', '\xE0E', '\xE11', '\x3', '\x2', '\x2', '\x2', '\xE0F', '\xE0D', 
		'\x3', '\x2', '\x2', '\x2', '\xE0F', '\xE10', '\x3', '\x2', '\x2', '\x2', 
		'\xE10', '\x10D', '\x3', '\x2', '\x2', '\x2', '\xE11', '\xE0F', '\x3', 
		'\x2', '\x2', '\x2', '\xE12', '\xE13', '\a', '\x9D', '\x2', '\x2', '\xE13', 
		'\xE14', '\a', '\x230', '\x2', '\x2', '\xE14', '\x10F', '\x3', '\x2', 
		'\x2', '\x2', '\xE15', '\xE16', '\a', '\x85', '\x2', '\x2', '\xE16', '\xE17', 
		'\a', '\xFE', '\x2', '\x2', '\xE17', '\xE18', '\a', '\x3AA', '\x2', '\x2', 
		'\xE18', '\xE19', '\t', '\x16', '\x2', '\x2', '\xE19', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\xE1A', '\xE1C', '\a', '\x85', '\x2', '\x2', '\xE1B', 
		'\xE1D', '\t', '.', '\x2', '\x2', '\xE1C', '\xE1B', '\x3', '\x2', '\x2', 
		'\x2', '\xE1C', '\xE1D', '\x3', '\x2', '\x2', '\x2', '\xE1D', '\xE1E', 
		'\x3', '\x2', '\x2', '\x2', '\xE1E', '\xE1F', '\a', '\x20A', '\x2', '\x2', 
		'\xE1F', '\xE24', '\x5', '\x11A', '\x8E', '\x2', '\xE20', '\xE21', '\a', 
		'\x3B5', '\x2', '\x2', '\xE21', '\xE23', '\x5', '\x11A', '\x8E', '\x2', 
		'\xE22', '\xE20', '\x3', '\x2', '\x2', '\x2', '\xE23', '\xE26', '\x3', 
		'\x2', '\x2', '\x2', '\xE24', '\xE22', '\x3', '\x2', '\x2', '\x2', '\xE24', 
		'\xE25', '\x3', '\x2', '\x2', '\x2', '\xE25', '\x113', '\x3', '\x2', '\x2', 
		'\x2', '\xE26', '\xE24', '\x3', '\x2', '\x2', '\x2', '\xE27', '\xE28', 
		'\a', '\xA7', '\x2', '\x2', '\xE28', '\xE29', '\a', '\x11E', '\x2', '\x2', 
		'\xE29', '\xE2F', '\a', '\x1E9', '\x2', '\x2', '\xE2A', '\xE2B', '\a', 
		't', '\x2', '\x2', '\xE2B', '\xE2F', '\a', '\xA8', '\x2', '\x2', '\xE2C', 
		'\xE2D', '\a', 't', '\x2', '\x2', '\xE2D', '\xE2F', '\a', '\x1A7', '\x2', 
		'\x2', '\xE2E', '\xE27', '\x3', '\x2', '\x2', '\x2', '\xE2E', '\xE2A', 
		'\x3', '\x2', '\x2', '\x2', '\xE2E', '\xE2C', '\x3', '\x2', '\x2', '\x2', 
		'\xE2F', '\x115', '\x3', '\x2', '\x2', '\x2', '\xE30', '\xE35', '\x5', 
		'\x1E8', '\xF5', '\x2', '\xE31', '\xE33', '\a', '\f', '\x2', '\x2', '\xE32', 
		'\xE31', '\x3', '\x2', '\x2', '\x2', '\xE32', '\xE33', '\x3', '\x2', '\x2', 
		'\x2', '\xE33', '\xE34', '\x3', '\x2', '\x2', '\x2', '\xE34', '\xE36', 
		'\x5', '\x200', '\x101', '\x2', '\xE35', '\xE32', '\x3', '\x2', '\x2', 
		'\x2', '\xE35', '\xE36', '\x3', '\x2', '\x2', '\x2', '\xE36', '\xE37', 
		'\x3', '\x2', '\x2', '\x2', '\xE37', '\xE38', '\x5', '\x118', '\x8D', 
		'\x2', '\xE38', '\x117', '\x3', '\x2', '\x2', '\x2', '\xE39', '\xE3B', 
		'\a', 't', '\x2', '\x2', '\xE3A', '\xE3C', '\a', '\x172', '\x2', '\x2', 
		'\xE3B', '\xE3A', '\x3', '\x2', '\x2', '\x2', '\xE3B', '\xE3C', '\x3', 
		'\x2', '\x2', '\x2', '\xE3C', '\xE42', '\x3', '\x2', '\x2', '\x2', '\xE3D', 
		'\xE3F', '\a', '\\', '\x2', '\x2', '\xE3E', '\xE3D', '\x3', '\x2', '\x2', 
		'\x2', '\xE3E', '\xE3F', '\x3', '\x2', '\x2', '\x2', '\xE3F', '\xE40', 
		'\x3', '\x2', '\x2', '\x2', '\xE40', '\xE42', '\a', '\xA8', '\x2', '\x2', 
		'\xE41', '\xE39', '\x3', '\x2', '\x2', '\x2', '\xE41', '\xE3E', '\x3', 
		'\x2', '\x2', '\x2', '\xE42', '\x119', '\x3', '\x2', '\x2', '\x2', '\xE43', 
		'\xE44', '\a', '\x168', '\x2', '\x2', '\xE44', '\xE45', '\a', '\x170', 
		'\x2', '\x2', '\xE45', '\xE4B', '\x5', '\x11C', '\x8F', '\x2', '\xE46', 
		'\xE47', '\a', 't', '\x2', '\x2', '\xE47', '\xE4B', '\a', '\xA8', '\x2', 
		'\x2', '\xE48', '\xE49', '\a', 't', '\x2', '\x2', '\xE49', '\xE4B', '\a', 
		'\x1A7', '\x2', '\x2', '\xE4A', '\xE43', '\x3', '\x2', '\x2', '\x2', '\xE4A', 
		'\xE46', '\x3', '\x2', '\x2', '\x2', '\xE4A', '\xE48', '\x3', '\x2', '\x2', 
		'\x2', '\xE4B', '\x11B', '\x3', '\x2', '\x2', '\x2', '\xE4C', '\xE4D', 
		'\a', '\x26C', '\x2', '\x2', '\xE4D', '\xE54', '\a', 't', '\x2', '\x2', 
		'\xE4E', '\xE4F', '\a', 't', '\x2', '\x2', '\xE4F', '\xE54', '\a', '\x26D', 
		'\x2', '\x2', '\xE50', '\xE51', '\a', 't', '\x2', '\x2', '\xE51', '\xE54', 
		'\a', '\x26E', '\x2', '\x2', '\xE52', '\xE54', '\a', '\x26F', '\x2', '\x2', 
		'\xE53', '\xE4C', '\x3', '\x2', '\x2', '\x2', '\xE53', '\xE4E', '\x3', 
		'\x2', '\x2', '\x2', '\xE53', '\xE50', '\x3', '\x2', '\x2', '\x2', '\xE53', 
		'\xE52', '\x3', '\x2', '\x2', '\x2', '\xE54', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\xE55', '\xE56', '\a', '\x16', '\x2', '\x2', '\xE56', '\xE57', 
		'\a', '\x175', '\x2', '\x2', '\xE57', '\xE58', '\a', '\x96', '\x2', '\x2', 
		'\xE58', '\xE5D', '\x5', '\x130', '\x99', '\x2', '\xE59', '\xE5A', '\a', 
		'\x3B5', '\x2', '\x2', '\xE5A', '\xE5C', '\x5', '\x130', '\x99', '\x2', 
		'\xE5B', '\xE59', '\x3', '\x2', '\x2', '\x2', '\xE5C', '\xE5F', '\x3', 
		'\x2', '\x2', '\x2', '\xE5D', '\xE5B', '\x3', '\x2', '\x2', '\x2', '\xE5D', 
		'\xE5E', '\x3', '\x2', '\x2', '\x2', '\xE5E', '\xE61', '\x3', '\x2', '\x2', 
		'\x2', '\xE5F', '\xE5D', '\x3', '\x2', '\x2', '\x2', '\xE60', '\xE62', 
		'\x5', '\x138', '\x9D', '\x2', '\xE61', '\xE60', '\x3', '\x2', '\x2', 
		'\x2', '\xE61', '\xE62', '\x3', '\x2', '\x2', '\x2', '\xE62', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\xE63', '\xE64', '\a', '\x16', '\x2', '\x2', 
		'\xE64', '\xE65', '\a', '\x1D4', '\x2', '\x2', '\xE65', '\xE66', '\a', 
		'\x14A', '\x2', '\x2', '\xE66', '\xE6B', '\x5', '\x13A', '\x9E', '\x2', 
		'\xE67', '\xE68', '\a', '\x3B5', '\x2', '\x2', '\xE68', '\xE6A', '\x5', 
		'\x13A', '\x9E', '\x2', '\xE69', '\xE67', '\x3', '\x2', '\x2', '\x2', 
		'\xE6A', '\xE6D', '\x3', '\x2', '\x2', '\x2', '\xE6B', '\xE69', '\x3', 
		'\x2', '\x2', '\x2', '\xE6B', '\xE6C', '\x3', '\x2', '\x2', '\x2', '\xE6C', 
		'\x121', '\x3', '\x2', '\x2', '\x2', '\xE6D', '\xE6B', '\x3', '\x2', '\x2', 
		'\x2', '\xE6E', '\xE6F', '\a', 'r', '\x2', '\x2', '\xE6F', '\xE70', '\t', 
		'/', '\x2', '\x2', '\xE70', '\xE75', '\a', '\x174', '\x2', '\x2', '\xE71', 
		'\xE72', '\a', '\x96', '\x2', '\x2', '\xE72', '\xE76', '\a', '\x3C2', 
		'\x2', '\x2', '\xE73', '\xE74', '\a', '\xE', '\x2', '\x2', '\xE74', '\xE76', 
		'\a', '\x3C2', '\x2', '\x2', '\xE75', '\xE71', '\x3', '\x2', '\x2', '\x2', 
		'\xE75', '\xE73', '\x3', '\x2', '\x2', '\x2', '\xE76', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\xE77', '\xE78', '\a', '\x1D5', '\x2', '\x2', '\xE78', 
		'\xE79', '\a', '\x175', '\x2', '\x2', '\xE79', '\x125', '\x3', '\x2', 
		'\x2', '\x2', '\xE7A', '\xE7B', '\a', '\x1D5', '\x2', '\x2', '\xE7B', 
		'\xE7D', '\a', '\x1E7', '\x2', '\x2', '\xE7C', '\xE7E', '\a', '\b', '\x2', 
		'\x2', '\xE7D', '\xE7C', '\x3', '\x2', '\x2', '\x2', '\xE7D', '\xE7E', 
		'\x3', '\x2', '\x2', '\x2', '\xE7E', '\xE80', '\x3', '\x2', '\x2', '\x2', 
		'\xE7F', '\xE81', '\x5', '\x138', '\x9D', '\x2', '\xE80', '\xE7F', '\x3', 
		'\x2', '\x2', '\x2', '\xE80', '\xE81', '\x3', '\x2', '\x2', '\x2', '\xE81', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\xE82', '\xE83', '\a', '\x1F6', 
		'\x2', '\x2', '\xE83', '\xE8C', '\a', '\x1E7', '\x2', '\x2', '\xE84', 
		'\xE89', '\x5', '\x13E', '\xA0', '\x2', '\xE85', '\xE86', '\a', '\x3B5', 
		'\x2', '\x2', '\xE86', '\xE88', '\x5', '\x13E', '\xA0', '\x2', '\xE87', 
		'\xE85', '\x3', '\x2', '\x2', '\x2', '\xE88', '\xE8B', '\x3', '\x2', '\x2', 
		'\x2', '\xE89', '\xE87', '\x3', '\x2', '\x2', '\x2', '\xE89', '\xE8A', 
		'\x3', '\x2', '\x2', '\x2', '\xE8A', '\xE8D', '\x3', '\x2', '\x2', '\x2', 
		'\xE8B', '\xE89', '\x3', '\x2', '\x2', '\x2', '\xE8C', '\xE84', '\x3', 
		'\x2', '\x2', '\x2', '\xE8C', '\xE8D', '\x3', '\x2', '\x2', '\x2', '\xE8D', 
		'\xE90', '\x3', '\x2', '\x2', '\x2', '\xE8E', '\xE8F', '\a', '\x212', 
		'\x2', '\x2', '\xE8F', '\xE91', '\x5', '\x140', '\xA1', '\x2', '\xE90', 
		'\xE8E', '\x3', '\x2', '\x2', '\x2', '\xE90', '\xE91', '\x3', '\x2', '\x2', 
		'\x2', '\xE91', '\xE95', '\x3', '\x2', '\x2', '\x2', '\xE92', '\xE94', 
		'\x5', '\x142', '\xA2', '\x2', '\xE93', '\xE92', '\x3', '\x2', '\x2', 
		'\x2', '\xE94', '\xE97', '\x3', '\x2', '\x2', '\x2', '\xE95', '\xE93', 
		'\x3', '\x2', '\x2', '\x2', '\xE95', '\xE96', '\x3', '\x2', '\x2', '\x2', 
		'\xE96', '\xE99', '\x3', '\x2', '\x2', '\x2', '\xE97', '\xE95', '\x3', 
		'\x2', '\x2', '\x2', '\xE98', '\xE9A', '\x5', '\x138', '\x9D', '\x2', 
		'\xE99', '\xE98', '\x3', '\x2', '\x2', '\x2', '\xE99', '\xE9A', '\x3', 
		'\x2', '\x2', '\x2', '\xE9A', '\x129', '\x3', '\x2', '\x2', '\x2', '\xE9B', 
		'\xE9C', '\a', '\x1FC', '\x2', '\x2', '\xE9C', '\xEA5', '\a', '\x1E7', 
		'\x2', '\x2', '\xE9D', '\xEA2', '\x5', '\x13E', '\xA0', '\x2', '\xE9E', 
		'\xE9F', '\a', '\x3B5', '\x2', '\x2', '\xE9F', '\xEA1', '\x5', '\x13E', 
		'\xA0', '\x2', '\xEA0', '\xE9E', '\x3', '\x2', '\x2', '\x2', '\xEA1', 
		'\xEA4', '\x3', '\x2', '\x2', '\x2', '\xEA2', '\xEA0', '\x3', '\x2', '\x2', 
		'\x2', '\xEA2', '\xEA3', '\x3', '\x2', '\x2', '\x2', '\xEA3', '\xEA6', 
		'\x3', '\x2', '\x2', '\x2', '\xEA4', '\xEA2', '\x3', '\x2', '\x2', '\x2', 
		'\xEA5', '\xE9D', '\x3', '\x2', '\x2', '\x2', '\xEA5', '\xEA6', '\x3', 
		'\x2', '\x2', '\x2', '\xEA6', '\x12B', '\x3', '\x2', '\x2', '\x2', '\xEA7', 
		'\xEA8', '\a', '\x1F6', '\x2', '\x2', '\xEA8', '\xEA9', '\a', '\x155', 
		'\x2', '\x2', '\xEA9', '\x12D', '\x3', '\x2', '\x2', '\x2', '\xEAA', '\xEAB', 
		'\a', '\x1FC', '\x2', '\x2', '\xEAB', '\xEAC', '\a', '\x155', '\x2', '\x2', 
		'\xEAC', '\x12F', '\x3', '\x2', '\x2', '\x2', '\xEAD', '\xEAE', '\x5', 
		'\x132', '\x9A', '\x2', '\xEAE', '\xEAF', '\a', '\x3AA', '\x2', '\x2', 
		'\xEAF', '\xEB0', '\a', '\x3C2', '\x2', '\x2', '\xEB0', '\xECB', '\x3', 
		'\x2', '\x2', '\x2', '\xEB1', '\xEB2', '\x5', '\x134', '\x9B', '\x2', 
		'\xEB2', '\xEB3', '\a', '\x3AA', '\x2', '\x2', '\xEB3', '\xEB4', '\x5', 
		'\x206', '\x104', '\x2', '\xEB4', '\xECB', '\x3', '\x2', '\x2', '\x2', 
		'\xEB5', '\xEB6', '\x5', '\x136', '\x9C', '\x2', '\xEB6', '\xEB7', '\a', 
		'\x3AA', '\x2', '\x2', '\xEB7', '\xEB8', '\t', '\x16', '\x2', '\x2', '\xEB8', 
		'\xECB', '\x3', '\x2', '\x2', '\x2', '\xEB9', '\xEBA', '\a', '\x179', 
		'\x2', '\x2', '\xEBA', '\xEBB', '\a', '\x3AA', '\x2', '\x2', '\xEBB', 
		'\xECB', '\a', '\x3C5', '\x2', '\x2', '\xEBC', '\xEBD', '\a', '\x15C', 
		'\x2', '\x2', '\xEBD', '\xEBE', '\a', '\x3AA', '\x2', '\x2', '\xEBE', 
		'\xEC7', '\a', '\x3B3', '\x2', '\x2', '\xEBF', '\xEC4', '\x5', '\x200', 
		'\x101', '\x2', '\xEC0', '\xEC1', '\a', '\x3B5', '\x2', '\x2', '\xEC1', 
		'\xEC3', '\x5', '\x200', '\x101', '\x2', '\xEC2', '\xEC0', '\x3', '\x2', 
		'\x2', '\x2', '\xEC3', '\xEC6', '\x3', '\x2', '\x2', '\x2', '\xEC4', '\xEC2', 
		'\x3', '\x2', '\x2', '\x2', '\xEC4', '\xEC5', '\x3', '\x2', '\x2', '\x2', 
		'\xEC5', '\xEC8', '\x3', '\x2', '\x2', '\x2', '\xEC6', '\xEC4', '\x3', 
		'\x2', '\x2', '\x2', '\xEC7', '\xEBF', '\x3', '\x2', '\x2', '\x2', '\xEC7', 
		'\xEC8', '\x3', '\x2', '\x2', '\x2', '\xEC8', '\xEC9', '\x3', '\x2', '\x2', 
		'\x2', '\xEC9', '\xECB', '\a', '\x3B4', '\x2', '\x2', '\xECA', '\xEAD', 
		'\x3', '\x2', '\x2', '\x2', '\xECA', '\xEB1', '\x3', '\x2', '\x2', '\x2', 
		'\xECA', '\xEB5', '\x3', '\x2', '\x2', '\x2', '\xECA', '\xEB9', '\x3', 
		'\x2', '\x2', '\x2', '\xECA', '\xEBC', '\x3', '\x2', '\x2', '\x2', '\xECB', 
		'\x131', '\x3', '\x2', '\x2', '\x2', '\xECC', '\xECD', '\t', '\x30', '\x2', 
		'\x2', '\xECD', '\x133', '\x3', '\x2', '\x2', '\x2', '\xECE', '\xECF', 
		'\t', '\x31', '\x2', '\x2', '\xECF', '\x135', '\x3', '\x2', '\x2', '\x2', 
		'\xED0', '\xED1', '\t', '\x32', '\x2', '\x2', '\xED1', '\x137', '\x3', 
		'\x2', '\x2', '\x2', '\xED2', '\xED3', '\a', '\x39', '\x2', '\x2', '\xED3', 
		'\xED4', '\a', '\x10D', '\x2', '\x2', '\xED4', '\xED5', '\a', '\x3C2', 
		'\x2', '\x2', '\xED5', '\x139', '\x3', '\x2', '\x2', '\x2', '\xED6', '\xED7', 
		'\a', '\x1CD', '\x2', '\x2', '\xED7', '\xED8', '\a', '\x3AA', '\x2', '\x2', 
		'\xED8', '\xED9', '\a', '\x3B3', '\x2', '\x2', '\xED9', '\xEDA', '\x5', 
		'\x21E', '\x110', '\x2', '\xEDA', '\xEDB', '\a', '\x3B4', '\x2', '\x2', 
		'\xEDB', '\xF08', '\x3', '\x2', '\x2', '\x2', '\xEDC', '\xEDD', '\a', 
		'\x1CF', '\x2', '\x2', '\xEDD', '\xEDE', '\a', '\x3AA', '\x2', '\x2', 
		'\xEDE', '\xEDF', '\a', '\x3B3', '\x2', '\x2', '\xEDF', '\xEE0', '\x5', 
		'\x21E', '\x110', '\x2', '\xEE0', '\xEE1', '\a', '\x3B4', '\x2', '\x2', 
		'\xEE1', '\xF08', '\x3', '\x2', '\x2', '\x2', '\xEE2', '\xEE3', '\a', 
		'\x1CE', '\x2', '\x2', '\xEE3', '\xEE4', '\a', '\x3AA', '\x2', '\x2', 
		'\xEE4', '\xEE5', '\a', '\x3B3', '\x2', '\x2', '\xEE5', '\xEE6', '\x5', 
		'\x220', '\x111', '\x2', '\xEE6', '\xEE7', '\a', '\x3B4', '\x2', '\x2', 
		'\xEE7', '\xF08', '\x3', '\x2', '\x2', '\x2', '\xEE8', '\xEE9', '\a', 
		'\x1D0', '\x2', '\x2', '\xEE9', '\xEEA', '\a', '\x3AA', '\x2', '\x2', 
		'\xEEA', '\xEEB', '\a', '\x3B3', '\x2', '\x2', '\xEEB', '\xEEC', '\x5', 
		'\x220', '\x111', '\x2', '\xEEC', '\xEED', '\a', '\x3B4', '\x2', '\x2', 
		'\xEED', '\xF08', '\x3', '\x2', '\x2', '\x2', '\xEEE', '\xEEF', '\a', 
		'\x1D2', '\x2', '\x2', '\xEEF', '\xEF0', '\a', '\x3AA', '\x2', '\x2', 
		'\xEF0', '\xEF1', '\a', '\x3B3', '\x2', '\x2', '\xEF1', '\xEF2', '\x5', 
		'\x22A', '\x116', '\x2', '\xEF2', '\xEF3', '\a', '\x3B4', '\x2', '\x2', 
		'\xEF3', '\xF08', '\x3', '\x2', '\x2', '\x2', '\xEF4', '\xEF5', '\a', 
		'\x1D3', '\x2', '\x2', '\xEF5', '\xEF6', '\a', '\x3AA', '\x2', '\x2', 
		'\xEF6', '\xEF7', '\a', '\x3B3', '\x2', '\x2', '\xEF7', '\xEF8', '\x5', 
		'\x22A', '\x116', '\x2', '\xEF8', '\xEF9', '\a', '\x3B4', '\x2', '\x2', 
		'\xEF9', '\xF08', '\x3', '\x2', '\x2', '\x2', '\xEFA', '\xEFB', '\a', 
		'\x1D1', '\x2', '\x2', '\xEFB', '\xEFC', '\a', '\x3AA', '\x2', '\x2', 
		'\xEFC', '\xEFD', '\a', '\x3B3', '\x2', '\x2', '\xEFD', '\xF02', '\x5', 
		'\x13C', '\x9F', '\x2', '\xEFE', '\xEFF', '\a', '\x3B5', '\x2', '\x2', 
		'\xEFF', '\xF01', '\x5', '\x13C', '\x9F', '\x2', '\xF00', '\xEFE', '\x3', 
		'\x2', '\x2', '\x2', '\xF01', '\xF04', '\x3', '\x2', '\x2', '\x2', '\xF02', 
		'\xF00', '\x3', '\x2', '\x2', '\x2', '\xF02', '\xF03', '\x3', '\x2', '\x2', 
		'\x2', '\xF03', '\xF05', '\x3', '\x2', '\x2', '\x2', '\xF04', '\xF02', 
		'\x3', '\x2', '\x2', '\x2', '\xF05', '\xF06', '\a', '\x3B4', '\x2', '\x2', 
		'\xF06', '\xF08', '\x3', '\x2', '\x2', '\x2', '\xF07', '\xED6', '\x3', 
		'\x2', '\x2', '\x2', '\xF07', '\xEDC', '\x3', '\x2', '\x2', '\x2', '\xF07', 
		'\xEE2', '\x3', '\x2', '\x2', '\x2', '\xF07', '\xEE8', '\x3', '\x2', '\x2', 
		'\x2', '\xF07', '\xEEE', '\x3', '\x2', '\x2', '\x2', '\xF07', '\xEF4', 
		'\x3', '\x2', '\x2', '\x2', '\xF07', '\xEFA', '\x3', '\x2', '\x2', '\x2', 
		'\xF08', '\x13B', '\x3', '\x2', '\x2', '\x2', '\xF09', '\xF0A', '\a', 
		'\x3B3', '\x2', '\x2', '\xF0A', '\xF0B', '\x5', '\x1E8', '\xF5', '\x2', 
		'\xF0B', '\xF0C', '\a', '\x3B5', '\x2', '\x2', '\xF0C', '\xF0D', '\x5', 
		'\x1E8', '\xF5', '\x2', '\xF0D', '\xF0E', '\a', '\x3B4', '\x2', '\x2', 
		'\xF0E', '\x13D', '\x3', '\x2', '\x2', '\x2', '\xF0F', '\xF10', '\t', 
		'\x33', '\x2', '\x2', '\xF10', '\x13F', '\x3', '\x2', '\x2', '\x2', '\xF11', 
		'\xF12', '\t', '\x34', '\x2', '\x2', '\xF12', '\xF13', '\a', '\x3AA', 
		'\x2', '\x2', '\xF13', '\xF24', '\x5', '\x144', '\xA3', '\x2', '\xF14', 
		'\xF15', '\a', '\x17B', '\x2', '\x2', '\xF15', '\xF16', '\a', '\x3AA', 
		'\x2', '\x2', '\xF16', '\xF17', '\a', '\x3C2', '\x2', '\x2', '\xF17', 
		'\xF18', '\a', '\x3B5', '\x2', '\x2', '\xF18', '\xF19', '\a', '\x17C', 
		'\x2', '\x2', '\xF19', '\xF1A', '\a', '\x3AA', '\x2', '\x2', '\xF1A', 
		'\xF24', '\x5', '\x206', '\x104', '\x2', '\xF1B', '\xF1C', '\a', '\x1C7', 
		'\x2', '\x2', '\xF1C', '\xF1D', '\a', '\x3AA', '\x2', '\x2', '\xF1D', 
		'\xF1E', '\a', '\x3C2', '\x2', '\x2', '\xF1E', '\xF1F', '\a', '\x3B5', 
		'\x2', '\x2', '\xF1F', '\xF20', '\a', '\x1C8', '\x2', '\x2', '\xF20', 
		'\xF21', '\a', '\x3AA', '\x2', '\x2', '\xF21', '\xF24', '\x5', '\x206', 
		'\x104', '\x2', '\xF22', '\xF24', '\a', '\x1F0', '\x2', '\x2', '\xF23', 
		'\xF11', '\x3', '\x2', '\x2', '\x2', '\xF23', '\xF14', '\x3', '\x2', '\x2', 
		'\x2', '\xF23', '\xF1B', '\x3', '\x2', '\x2', '\x2', '\xF23', '\xF22', 
		'\x3', '\x2', '\x2', '\x2', '\xF24', '\x141', '\x3', '\x2', '\x2', '\x2', 
		'\xF25', '\xF26', '\a', '\x214', '\x2', '\x2', '\xF26', '\xF27', '\a', 
		'\x3AA', '\x2', '\x2', '\xF27', '\xF32', '\a', '\x3C2', '\x2', '\x2', 
		'\xF28', '\xF29', '\a', '\x1B2', '\x2', '\x2', '\xF29', '\xF2A', '\a', 
		'\x3AA', '\x2', '\x2', '\xF2A', '\xF32', '\a', '\x3C2', '\x2', '\x2', 
		'\xF2B', '\xF2C', '\a', '\x127', '\x2', '\x2', '\xF2C', '\xF2D', '\a', 
		'\x3AA', '\x2', '\x2', '\xF2D', '\xF32', '\a', '\x3C2', '\x2', '\x2', 
		'\xF2E', '\xF2F', '\a', '\x1B5', '\x2', '\x2', '\xF2F', '\xF30', '\a', 
		'\x3AA', '\x2', '\x2', '\xF30', '\xF32', '\a', '\x3C2', '\x2', '\x2', 
		'\xF31', '\xF25', '\x3', '\x2', '\x2', '\x2', '\xF31', '\xF28', '\x3', 
		'\x2', '\x2', '\x2', '\xF31', '\xF2B', '\x3', '\x2', '\x2', '\x2', '\xF31', 
		'\xF2E', '\x3', '\x2', '\x2', '\x2', '\xF32', '\x143', '\x3', '\x2', '\x2', 
		'\x2', '\xF33', '\xF38', '\x5', '\x1F8', '\xFD', '\x2', '\xF34', '\xF35', 
		'\a', '\x3B5', '\x2', '\x2', '\xF35', '\xF37', '\x5', '\x1F8', '\xFD', 
		'\x2', '\xF36', '\xF34', '\x3', '\x2', '\x2', '\x2', '\xF37', '\xF3A', 
		'\x3', '\x2', '\x2', '\x2', '\xF38', '\xF36', '\x3', '\x2', '\x2', '\x2', 
		'\xF38', '\xF39', '\x3', '\x2', '\x2', '\x2', '\xF39', '\xF3D', '\x3', 
		'\x2', '\x2', '\x2', '\xF3A', '\xF38', '\x3', '\x2', '\x2', '\x2', '\xF3B', 
		'\xF3D', '\a', '\x3C2', '\x2', '\x2', '\xF3C', '\xF33', '\x3', '\x2', 
		'\x2', '\x2', '\xF3C', '\xF3B', '\x3', '\x2', '\x2', '\x2', '\xF3D', '\x145', 
		'\x3', '\x2', '\x2', '\x2', '\xF3E', '\xF3F', '\a', '\x221', '\x2', '\x2', 
		'\xF3F', '\xF40', '\t', '\x35', '\x2', '\x2', '\xF40', '\xF42', '\x5', 
		'\x1FA', '\xFE', '\x2', '\xF41', '\xF43', '\t', '\x36', '\x2', '\x2', 
		'\xF42', '\xF41', '\x3', '\x2', '\x2', '\x2', '\xF42', '\xF43', '\x3', 
		'\x2', '\x2', '\x2', '\xF43', '\x147', '\x3', '\x2', '\x2', '\x2', '\xF44', 
		'\xF45', '\a', '\x221', '\x2', '\x2', '\xF45', '\xF46', '\a', '\x135', 
		'\x2', '\x2', '\xF46', '\xF4C', '\x5', '\x1FA', '\xFE', '\x2', '\xF47', 
		'\xF4A', '\a', '\x202', '\x2', '\x2', '\xF48', '\xF49', '\a', '\x39', 
		'\x2', '\x2', '\xF49', '\xF4B', '\a', '\x193', '\x2', '\x2', '\xF4A', 
		'\xF48', '\x3', '\x2', '\x2', '\x2', '\xF4A', '\xF4B', '\x3', '\x2', '\x2', 
		'\x2', '\xF4B', '\xF4D', '\x3', '\x2', '\x2', '\x2', '\xF4C', '\xF47', 
		'\x3', '\x2', '\x2', '\x2', '\xF4C', '\xF4D', '\x3', '\x2', '\x2', '\x2', 
		'\xF4D', '\x149', '\x3', '\x2', '\x2', '\x2', '\xF4E', '\xF4F', '\a', 
		'\x221', '\x2', '\x2', '\xF4F', '\xF50', '\a', '\x1B9', '\x2', '\x2', 
		'\xF50', '\xF51', '\x5', '\x1FA', '\xFE', '\x2', '\xF51', '\x14B', '\x3', 
		'\x2', '\x2', '\x2', '\xF52', '\xF53', '\a', '\x221', '\x2', '\x2', '\xF53', 
		'\xF54', '\a', '\x117', '\x2', '\x2', '\xF54', '\xF57', '\x5', '\x1FA', 
		'\xFE', '\x2', '\xF55', '\xF56', '\a', '\x1A5', '\x2', '\x2', '\xF56', 
		'\xF58', '\a', '\x1B3', '\x2', '\x2', '\xF57', '\xF55', '\x3', '\x2', 
		'\x2', '\x2', '\xF57', '\xF58', '\x3', '\x2', '\x2', '\x2', '\xF58', '\x14D', 
		'\x3', '\x2', '\x2', '\x2', '\xF59', '\xF5A', '\a', '\x221', '\x2', '\x2', 
		'\xF5A', '\xF5B', '\a', '\x1D8', '\x2', '\x2', '\xF5B', '\xF5C', '\x5', 
		'\x1FA', '\xFE', '\x2', '\xF5C', '\x14F', '\x3', '\x2', '\x2', '\x2', 
		'\xF5D', '\xF5E', '\a', '\x221', '\x2', '\x2', '\xF5E', '\xF61', '\a', 
		'\x1C3', '\x2', '\x2', '\xF5F', '\xF60', '\a', '\x1E', '\x2', '\x2', '\xF60', 
		'\xF62', '\x5', '\x1FA', '\xFE', '\x2', '\xF61', '\xF5F', '\x3', '\x2', 
		'\x2', '\x2', '\xF61', '\xF62', '\x3', '\x2', '\x2', '\x2', '\xF62', '\x151', 
		'\x3', '\x2', '\x2', '\x2', '\xF63', '\xF64', '\a', '\x1B9', '\x2', '\x2', 
		'\xF64', '\xF65', '\x5', '\x200', '\x101', '\x2', '\xF65', '\xF68', '\a', 
		'<', '\x2', '\x2', '\xF66', '\xF69', '\a', '\x3C2', '\x2', '\x2', '\xF67', 
		'\xF69', '\a', '\x3CD', '\x2', '\x2', '\xF68', '\xF66', '\x3', '\x2', 
		'\x2', '\x2', '\xF68', '\xF67', '\x3', '\x2', '\x2', '\x2', '\xF69', '\x153', 
		'\x3', '\x2', '\x2', '\x2', '\xF6A', '\xF6B', '\a', '\x232', '\x2', '\x2', 
		'\xF6B', '\xF6E', '\x5', '\x200', '\x101', '\x2', '\xF6C', '\xF6D', '\a', 
		'\xA2', '\x2', '\x2', '\xF6D', '\xF6F', '\x5', '\x22C', '\x117', '\x2', 
		'\xF6E', '\xF6C', '\x3', '\x2', '\x2', '\x2', '\xF6E', '\xF6F', '\x3', 
		'\x2', '\x2', '\x2', '\xF6F', '\x155', '\x3', '\x2', '\x2', '\x2', '\xF70', 
		'\xF71', '\t', '\x37', '\x2', '\x2', '\xF71', '\xF72', '\a', '\x1B9', 
		'\x2', '\x2', '\xF72', '\xF73', '\x5', '\x200', '\x101', '\x2', '\xF73', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\xF74', '\xF77', '\x5', '\x15A', 
		'\xAE', '\x2', '\xF75', '\xF77', '\x5', '\x6', '\x4', '\x2', '\xF76', 
		'\xF74', '\x3', '\x2', '\x2', '\x2', '\xF76', '\xF75', '\x3', '\x2', '\x2', 
		'\x2', '\xF77', '\x159', '\x3', '\x2', '\x2', '\x2', '\xF78', '\xF79', 
		'\x5', '\x200', '\x101', '\x2', '\xF79', '\xF7A', '\a', '\x3BE', '\x2', 
		'\x2', '\xF7A', '\xF7C', '\x3', '\x2', '\x2', '\x2', '\xF7B', '\xF78', 
		'\x3', '\x2', '\x2', '\x2', '\xF7B', '\xF7C', '\x3', '\x2', '\x2', '\x2', 
		'\xF7C', '\xF7D', '\x3', '\x2', '\x2', '\x2', '\xF7D', '\xFA3', '\a', 
		'\x102', '\x2', '\x2', '\xF7E', '\xF7F', '\x5', '\x16E', '\xB8', '\x2', 
		'\xF7F', '\xF80', '\a', '\x3B6', '\x2', '\x2', '\xF80', '\xF82', '\x3', 
		'\x2', '\x2', '\x2', '\xF81', '\xF7E', '\x3', '\x2', '\x2', '\x2', '\xF82', 
		'\xF85', '\x3', '\x2', '\x2', '\x2', '\xF83', '\xF81', '\x3', '\x2', '\x2', 
		'\x2', '\xF83', '\xF84', '\x3', '\x2', '\x2', '\x2', '\xF84', '\xF8B', 
		'\x3', '\x2', '\x2', '\x2', '\xF85', '\xF83', '\x3', '\x2', '\x2', '\x2', 
		'\xF86', '\xF87', '\x5', '\x170', '\xB9', '\x2', '\xF87', '\xF88', '\a', 
		'\x3B6', '\x2', '\x2', '\xF88', '\xF8A', '\x3', '\x2', '\x2', '\x2', '\xF89', 
		'\xF86', '\x3', '\x2', '\x2', '\x2', '\xF8A', '\xF8D', '\x3', '\x2', '\x2', 
		'\x2', '\xF8B', '\xF89', '\x3', '\x2', '\x2', '\x2', '\xF8B', '\xF8C', 
		'\x3', '\x2', '\x2', '\x2', '\xF8C', '\xF93', '\x3', '\x2', '\x2', '\x2', 
		'\xF8D', '\xF8B', '\x3', '\x2', '\x2', '\x2', '\xF8E', '\xF8F', '\x5', 
		'\x172', '\xBA', '\x2', '\xF8F', '\xF90', '\a', '\x3B6', '\x2', '\x2', 
		'\xF90', '\xF92', '\x3', '\x2', '\x2', '\x2', '\xF91', '\xF8E', '\x3', 
		'\x2', '\x2', '\x2', '\xF92', '\xF95', '\x3', '\x2', '\x2', '\x2', '\xF93', 
		'\xF91', '\x3', '\x2', '\x2', '\x2', '\xF93', '\xF94', '\x3', '\x2', '\x2', 
		'\x2', '\xF94', '\xF9B', '\x3', '\x2', '\x2', '\x2', '\xF95', '\xF93', 
		'\x3', '\x2', '\x2', '\x2', '\xF96', '\xF97', '\x5', '\x174', '\xBB', 
		'\x2', '\xF97', '\xF98', '\a', '\x3B6', '\x2', '\x2', '\xF98', '\xF9A', 
		'\x3', '\x2', '\x2', '\x2', '\xF99', '\xF96', '\x3', '\x2', '\x2', '\x2', 
		'\xF9A', '\xF9D', '\x3', '\x2', '\x2', '\x2', '\xF9B', '\xF99', '\x3', 
		'\x2', '\x2', '\x2', '\xF9B', '\xF9C', '\x3', '\x2', '\x2', '\x2', '\xF9C', 
		'\xF9F', '\x3', '\x2', '\x2', '\x2', '\xF9D', '\xF9B', '\x3', '\x2', '\x2', 
		'\x2', '\xF9E', '\xFA0', '\x5', '\x178', '\xBD', '\x2', '\xF9F', '\xF9E', 
		'\x3', '\x2', '\x2', '\x2', '\xFA0', '\xFA1', '\x3', '\x2', '\x2', '\x2', 
		'\xFA1', '\xF9F', '\x3', '\x2', '\x2', '\x2', '\xFA1', '\xFA2', '\x3', 
		'\x2', '\x2', '\x2', '\xFA2', '\xFA4', '\x3', '\x2', '\x2', '\x2', '\xFA3', 
		'\xF83', '\x3', '\x2', '\x2', '\x2', '\xFA3', '\xFA4', '\x3', '\x2', '\x2', 
		'\x2', '\xFA4', '\xFA5', '\x3', '\x2', '\x2', '\x2', '\xFA5', '\xFA7', 
		'\a', '\x135', '\x2', '\x2', '\xFA6', '\xFA8', '\x5', '\x200', '\x101', 
		'\x2', '\xFA7', '\xFA6', '\x3', '\x2', '\x2', '\x2', '\xFA7', '\xFA8', 
		'\x3', '\x2', '\x2', '\x2', '\xFA8', '\x15B', '\x3', '\x2', '\x2', '\x2', 
		'\xFA9', '\xFAC', '\a', '\x14', '\x2', '\x2', '\xFAA', '\xFAD', '\x5', 
		'\x200', '\x101', '\x2', '\xFAB', '\xFAD', '\x5', '\x24C', '\x127', '\x2', 
		'\xFAC', '\xFAA', '\x3', '\x2', '\x2', '\x2', '\xFAC', '\xFAB', '\x3', 
		'\x2', '\x2', '\x2', '\xFAC', '\xFAD', '\x3', '\x2', '\x2', '\x2', '\xFAD', 
		'\xFAF', '\x3', '\x2', '\x2', '\x2', '\xFAE', '\xFB0', '\x5', '\x17A', 
		'\xBE', '\x2', '\xFAF', '\xFAE', '\x3', '\x2', '\x2', '\x2', '\xFB0', 
		'\xFB1', '\x3', '\x2', '\x2', '\x2', '\xFB1', '\xFAF', '\x3', '\x2', '\x2', 
		'\x2', '\xFB1', '\xFB2', '\x3', '\x2', '\x2', '\x2', '\xFB2', '\xFB9', 
		'\x3', '\x2', '\x2', '\x2', '\xFB3', '\xFB5', '\a', '\x30', '\x2', '\x2', 
		'\xFB4', '\xFB6', '\x5', '\x178', '\xBD', '\x2', '\xFB5', '\xFB4', '\x3', 
		'\x2', '\x2', '\x2', '\xFB6', '\xFB7', '\x3', '\x2', '\x2', '\x2', '\xFB7', 
		'\xFB5', '\x3', '\x2', '\x2', '\x2', '\xFB7', '\xFB8', '\x3', '\x2', '\x2', 
		'\x2', '\xFB8', '\xFBA', '\x3', '\x2', '\x2', '\x2', '\xFB9', '\xFB3', 
		'\x3', '\x2', '\x2', '\x2', '\xFB9', '\xFBA', '\x3', '\x2', '\x2', '\x2', 
		'\xFBA', '\xFBB', '\x3', '\x2', '\x2', '\x2', '\xFBB', '\xFBC', '\a', 
		'\x135', '\x2', '\x2', '\xFBC', '\xFBD', '\a', '\x14', '\x2', '\x2', '\xFBD', 
		'\x15D', '\x3', '\x2', '\x2', '\x2', '\xFBE', '\xFBF', '\a', '\x42', '\x2', 
		'\x2', '\xFBF', '\xFC0', '\x5', '\x24C', '\x127', '\x2', '\xFC0', '\xFC2', 
		'\a', '\x95', '\x2', '\x2', '\xFC1', '\xFC3', '\x5', '\x178', '\xBD', 
		'\x2', '\xFC2', '\xFC1', '\x3', '\x2', '\x2', '\x2', '\xFC3', '\xFC4', 
		'\x3', '\x2', '\x2', '\x2', '\xFC4', '\xFC2', '\x3', '\x2', '\x2', '\x2', 
		'\xFC4', '\xFC5', '\x3', '\x2', '\x2', '\x2', '\xFC5', '\xFC9', '\x3', 
		'\x2', '\x2', '\x2', '\xFC6', '\xFC8', '\x5', '\x17C', '\xBF', '\x2', 
		'\xFC7', '\xFC6', '\x3', '\x2', '\x2', '\x2', '\xFC8', '\xFCB', '\x3', 
		'\x2', '\x2', '\x2', '\xFC9', '\xFC7', '\x3', '\x2', '\x2', '\x2', '\xFC9', 
		'\xFCA', '\x3', '\x2', '\x2', '\x2', '\xFCA', '\xFD2', '\x3', '\x2', '\x2', 
		'\x2', '\xFCB', '\xFC9', '\x3', '\x2', '\x2', '\x2', '\xFCC', '\xFCE', 
		'\a', '\x30', '\x2', '\x2', '\xFCD', '\xFCF', '\x5', '\x178', '\xBD', 
		'\x2', '\xFCE', '\xFCD', '\x3', '\x2', '\x2', '\x2', '\xFCF', '\xFD0', 
		'\x3', '\x2', '\x2', '\x2', '\xFD0', '\xFCE', '\x3', '\x2', '\x2', '\x2', 
		'\xFD0', '\xFD1', '\x3', '\x2', '\x2', '\x2', '\xFD1', '\xFD3', '\x3', 
		'\x2', '\x2', '\x2', '\xFD2', '\xFCC', '\x3', '\x2', '\x2', '\x2', '\xFD2', 
		'\xFD3', '\x3', '\x2', '\x2', '\x2', '\xFD3', '\xFD4', '\x3', '\x2', '\x2', 
		'\x2', '\xFD4', '\xFD5', '\a', '\x135', '\x2', '\x2', '\xFD5', '\xFD6', 
		'\a', '\x42', '\x2', '\x2', '\xFD6', '\x15F', '\x3', '\x2', '\x2', '\x2', 
		'\xFD7', '\xFD8', '\a', 'M', '\x2', '\x2', '\xFD8', '\xFD9', '\x5', '\x200', 
		'\x101', '\x2', '\xFD9', '\x161', '\x3', '\x2', '\x2', '\x2', '\xFDA', 
		'\xFDB', '\a', 'S', '\x2', '\x2', '\xFDB', '\xFDC', '\x5', '\x200', '\x101', 
		'\x2', '\xFDC', '\x163', '\x3', '\x2', '\x2', '\x2', '\xFDD', '\xFDE', 
		'\x5', '\x200', '\x101', '\x2', '\xFDE', '\xFDF', '\a', '\x3BE', '\x2', 
		'\x2', '\xFDF', '\xFE1', '\x3', '\x2', '\x2', '\x2', '\xFE0', '\xFDD', 
		'\x3', '\x2', '\x2', '\x2', '\xFE0', '\xFE1', '\x3', '\x2', '\x2', '\x2', 
		'\xFE1', '\xFE2', '\x3', '\x2', '\x2', '\x2', '\xFE2', '\xFE4', '\a', 
		'[', '\x2', '\x2', '\xFE3', '\xFE5', '\x5', '\x178', '\xBD', '\x2', '\xFE4', 
		'\xFE3', '\x3', '\x2', '\x2', '\x2', '\xFE5', '\xFE6', '\x3', '\x2', '\x2', 
		'\x2', '\xFE6', '\xFE4', '\x3', '\x2', '\x2', '\x2', '\xFE6', '\xFE7', 
		'\x3', '\x2', '\x2', '\x2', '\xFE7', '\xFE8', '\x3', '\x2', '\x2', '\x2', 
		'\xFE8', '\xFE9', '\a', '\x135', '\x2', '\x2', '\xFE9', '\xFEB', '\a', 
		'[', '\x2', '\x2', '\xFEA', '\xFEC', '\x5', '\x200', '\x101', '\x2', '\xFEB', 
		'\xFEA', '\x3', '\x2', '\x2', '\x2', '\xFEB', '\xFEC', '\x3', '\x2', '\x2', 
		'\x2', '\xFEC', '\x165', '\x3', '\x2', '\x2', '\x2', '\xFED', '\xFEE', 
		'\x5', '\x200', '\x101', '\x2', '\xFEE', '\xFEF', '\a', '\x3BE', '\x2', 
		'\x2', '\xFEF', '\xFF1', '\x3', '\x2', '\x2', '\x2', '\xFF0', '\xFED', 
		'\x3', '\x2', '\x2', '\x2', '\xFF0', '\xFF1', '\x3', '\x2', '\x2', '\x2', 
		'\xFF1', '\xFF2', '\x3', '\x2', '\x2', '\x2', '\xFF2', '\xFF4', '\a', 
		'z', '\x2', '\x2', '\xFF3', '\xFF5', '\x5', '\x178', '\xBD', '\x2', '\xFF4', 
		'\xFF3', '\x3', '\x2', '\x2', '\x2', '\xFF5', '\xFF6', '\x3', '\x2', '\x2', 
		'\x2', '\xFF6', '\xFF4', '\x3', '\x2', '\x2', '\x2', '\xFF6', '\xFF7', 
		'\x3', '\x2', '\x2', '\x2', '\xFF7', '\xFF8', '\x3', '\x2', '\x2', '\x2', 
		'\xFF8', '\xFF9', '\a', '\x212', '\x2', '\x2', '\xFF9', '\xFFA', '\x5', 
		'\x24C', '\x127', '\x2', '\xFFA', '\xFFB', '\a', '\x135', '\x2', '\x2', 
		'\xFFB', '\xFFD', '\a', 'z', '\x2', '\x2', '\xFFC', '\xFFE', '\x5', '\x200', 
		'\x101', '\x2', '\xFFD', '\xFFC', '\x3', '\x2', '\x2', '\x2', '\xFFD', 
		'\xFFE', '\x3', '\x2', '\x2', '\x2', '\xFFE', '\x167', '\x3', '\x2', '\x2', 
		'\x2', '\xFFF', '\x1000', '\a', '~', '\x2', '\x2', '\x1000', '\x1001', 
		'\x5', '\x24C', '\x127', '\x2', '\x1001', '\x169', '\x3', '\x2', '\x2', 
		'\x2', '\x1002', '\x1003', '\x5', '\x200', '\x101', '\x2', '\x1003', '\x1004', 
		'\a', '\x3BE', '\x2', '\x2', '\x1004', '\x1006', '\x3', '\x2', '\x2', 
		'\x2', '\x1005', '\x1002', '\x3', '\x2', '\x2', '\x2', '\x1005', '\x1006', 
		'\x3', '\x2', '\x2', '\x2', '\x1006', '\x1007', '\x3', '\x2', '\x2', '\x2', 
		'\x1007', '\x1008', '\a', '\xA6', '\x2', '\x2', '\x1008', '\x1009', '\x5', 
		'\x24C', '\x127', '\x2', '\x1009', '\x100B', '\a', '\x12F', '\x2', '\x2', 
		'\x100A', '\x100C', '\x5', '\x178', '\xBD', '\x2', '\x100B', '\x100A', 
		'\x3', '\x2', '\x2', '\x2', '\x100C', '\x100D', '\x3', '\x2', '\x2', '\x2', 
		'\x100D', '\x100B', '\x3', '\x2', '\x2', '\x2', '\x100D', '\x100E', '\x3', 
		'\x2', '\x2', '\x2', '\x100E', '\x100F', '\x3', '\x2', '\x2', '\x2', '\x100F', 
		'\x1010', '\a', '\x135', '\x2', '\x2', '\x1010', '\x1012', '\a', '\xA6', 
		'\x2', '\x2', '\x1011', '\x1013', '\x5', '\x200', '\x101', '\x2', '\x1012', 
		'\x1011', '\x3', '\x2', '\x2', '\x2', '\x1012', '\x1013', '\x3', '\x2', 
		'\x2', '\x2', '\x1013', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x1014', 
		'\x1015', '\a', '\x111', '\x2', '\x2', '\x1015', '\x1024', '\x5', '\x200', 
		'\x101', '\x2', '\x1016', '\x101B', '\a', '\x38', '\x2', '\x2', '\x1017', 
		'\x1019', '\a', '\x19D', '\x2', '\x2', '\x1018', '\x1017', '\x3', '\x2', 
		'\x2', '\x2', '\x1018', '\x1019', '\x3', '\x2', '\x2', '\x2', '\x1019', 
		'\x101A', '\x3', '\x2', '\x2', '\x2', '\x101A', '\x101C', '\a', '<', '\x2', 
		'\x2', '\x101B', '\x1018', '\x3', '\x2', '\x2', '\x2', '\x101B', '\x101C', 
		'\x3', '\x2', '\x2', '\x2', '\x101C', '\x101D', '\x3', '\x2', '\x2', '\x2', 
		'\x101D', '\x101E', '\x5', '\x200', '\x101', '\x2', '\x101E', '\x101F', 
		'\a', 'K', '\x2', '\x2', '\x101F', '\x1020', '\x5', '\x21E', '\x110', 
		'\x2', '\x1020', '\x1024', '\x3', '\x2', '\x2', '\x2', '\x1021', '\x1022', 
		'\a', '\x1A8', '\x2', '\x2', '\x1022', '\x1024', '\x5', '\x200', '\x101', 
		'\x2', '\x1023', '\x1014', '\x3', '\x2', '\x2', '\x2', '\x1023', '\x1016', 
		'\x3', '\x2', '\x2', '\x2', '\x1023', '\x1021', '\x3', '\x2', '\x2', '\x2', 
		'\x1024', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x1025', '\x1026', '\a', 
		'%', '\x2', '\x2', '\x1026', '\x1027', '\x5', '\x21E', '\x110', '\x2', 
		'\x1027', '\x102A', '\x5', '\x214', '\x10B', '\x2', '\x1028', '\x1029', 
		'\a', '&', '\x2', '\x2', '\x1029', '\x102B', '\x5', '\x22E', '\x118', 
		'\x2', '\x102A', '\x1028', '\x3', '\x2', '\x2', '\x2', '\x102A', '\x102B', 
		'\x3', '\x2', '\x2', '\x2', '\x102B', '\x16F', '\x3', '\x2', '\x2', '\x2', 
		'\x102C', '\x102D', '\a', '%', '\x2', '\x2', '\x102D', '\x102E', '\x5', 
		'\x200', '\x101', '\x2', '\x102E', '\x102F', '\a', '\x1B', '\x2', '\x2', 
		'\x102F', '\x1036', '\a', '\x39', '\x2', '\x2', '\x1030', '\x1037', '\x5', 
		'\x206', '\x104', '\x2', '\x1031', '\x1033', '\a', '\x8B', '\x2', '\x2', 
		'\x1032', '\x1034', '\a', '\x218', '\x2', '\x2', '\x1033', '\x1032', '\x3', 
		'\x2', '\x2', '\x2', '\x1033', '\x1034', '\x3', '\x2', '\x2', '\x2', '\x1034', 
		'\x1035', '\x3', '\x2', '\x2', '\x2', '\x1035', '\x1037', '\a', '\x3C2', 
		'\x2', '\x2', '\x1036', '\x1030', '\x3', '\x2', '\x2', '\x2', '\x1036', 
		'\x1031', '\x3', '\x2', '\x2', '\x2', '\x1037', '\x171', '\x3', '\x2', 
		'\x2', '\x2', '\x1038', '\x1039', '\a', '%', '\x2', '\x2', '\x1039', '\x103A', 
		'\x5', '\x200', '\x101', '\x2', '\x103A', '\x103B', '\a', '\"', '\x2', 
		'\x2', '\x103B', '\x103C', '\a', '\x39', '\x2', '\x2', '\x103C', '\x103D', 
		'\x5', '\xB4', '[', '\x2', '\x103D', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x103E', '\x103F', '\a', '%', '\x2', '\x2', '\x103F', '\x1040', '\t', 
		'\x38', '\x2', '\x2', '\x1040', '\x1041', '\a', '\x156', '\x2', '\x2', 
		'\x1041', '\x1042', '\a', '\x39', '\x2', '\x2', '\x1042', '\x1047', '\x5', 
		'\x176', '\xBC', '\x2', '\x1043', '\x1044', '\a', '\x3B5', '\x2', '\x2', 
		'\x1044', '\x1046', '\x5', '\x176', '\xBC', '\x2', '\x1045', '\x1043', 
		'\x3', '\x2', '\x2', '\x2', '\x1046', '\x1049', '\x3', '\x2', '\x2', '\x2', 
		'\x1047', '\x1045', '\x3', '\x2', '\x2', '\x2', '\x1047', '\x1048', '\x3', 
		'\x2', '\x2', '\x2', '\x1048', '\x104A', '\x3', '\x2', '\x2', '\x2', '\x1049', 
		'\x1047', '\x3', '\x2', '\x2', '\x2', '\x104A', '\x104B', '\x5', '\x158', 
		'\xAD', '\x2', '\x104B', '\x175', '\x3', '\x2', '\x2', '\x2', '\x104C', 
		'\x1058', '\x5', '\x206', '\x104', '\x2', '\x104D', '\x104F', '\a', '\x8B', 
		'\x2', '\x2', '\x104E', '\x1050', '\a', '\x218', '\x2', '\x2', '\x104F', 
		'\x104E', '\x3', '\x2', '\x2', '\x2', '\x104F', '\x1050', '\x3', '\x2', 
		'\x2', '\x2', '\x1050', '\x1051', '\x3', '\x2', '\x2', '\x2', '\x1051', 
		'\x1058', '\a', '\x3C2', '\x2', '\x2', '\x1052', '\x1058', '\x5', '\x200', 
		'\x101', '\x2', '\x1053', '\x1058', '\a', '\x8C', '\x2', '\x2', '\x1054', 
		'\x1055', '\a', '\x63', '\x2', '\x2', '\x1055', '\x1058', '\a', '\x14F', 
		'\x2', '\x2', '\x1056', '\x1058', '\a', '\x8A', '\x2', '\x2', '\x1057', 
		'\x104C', '\x3', '\x2', '\x2', '\x2', '\x1057', '\x104D', '\x3', '\x2', 
		'\x2', '\x2', '\x1057', '\x1052', '\x3', '\x2', '\x2', '\x2', '\x1057', 
		'\x1053', '\x3', '\x2', '\x2', '\x2', '\x1057', '\x1054', '\x3', '\x2', 
		'\x2', '\x2', '\x1057', '\x1056', '\x3', '\x2', '\x2', '\x2', '\x1058', 
		'\x177', '\x3', '\x2', '\x2', '\x2', '\x1059', '\x105C', '\x5', '\x14', 
		'\v', '\x2', '\x105A', '\x105C', '\x5', '\x6', '\x4', '\x2', '\x105B', 
		'\x1059', '\x3', '\x2', '\x2', '\x2', '\x105B', '\x105A', '\x3', '\x2', 
		'\x2', '\x2', '\x105C', '\x105D', '\x3', '\x2', '\x2', '\x2', '\x105D', 
		'\x105E', '\a', '\x3B6', '\x2', '\x2', '\x105E', '\x179', '\x3', '\x2', 
		'\x2', '\x2', '\x105F', '\x1062', '\a', '\xA4', '\x2', '\x2', '\x1060', 
		'\x1063', '\x5', '\x212', '\x10A', '\x2', '\x1061', '\x1063', '\x5', '\x24C', 
		'\x127', '\x2', '\x1062', '\x1060', '\x3', '\x2', '\x2', '\x2', '\x1062', 
		'\x1061', '\x3', '\x2', '\x2', '\x2', '\x1063', '\x1064', '\x3', '\x2', 
		'\x2', '\x2', '\x1064', '\x1066', '\a', '\x95', '\x2', '\x2', '\x1065', 
		'\x1067', '\x5', '\x178', '\xBD', '\x2', '\x1066', '\x1065', '\x3', '\x2', 
		'\x2', '\x2', '\x1067', '\x1068', '\x3', '\x2', '\x2', '\x2', '\x1068', 
		'\x1066', '\x3', '\x2', '\x2', '\x2', '\x1068', '\x1069', '\x3', '\x2', 
		'\x2', '\x2', '\x1069', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x106A', 
		'\x106B', '\a', '\x31', '\x2', '\x2', '\x106B', '\x106C', '\x5', '\x24C', 
		'\x127', '\x2', '\x106C', '\x106E', '\a', '\x95', '\x2', '\x2', '\x106D', 
		'\x106F', '\x5', '\x178', '\xBD', '\x2', '\x106E', '\x106D', '\x3', '\x2', 
		'\x2', '\x2', '\x106F', '\x1070', '\x3', '\x2', '\x2', '\x2', '\x1070', 
		'\x106E', '\x3', '\x2', '\x2', '\x2', '\x1070', '\x1071', '\x3', '\x2', 
		'\x2', '\x2', '\x1071', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x1072', 
		'\x1073', '\a', '\t', '\x2', '\x2', '\x1073', '\x1074', '\a', '\x214', 
		'\x2', '\x2', '\x1074', '\x1079', '\x5', '\x190', '\xC9', '\x2', '\x1075', 
		'\x1076', '\a', '\x3B5', '\x2', '\x2', '\x1076', '\x1078', '\x5', '\x190', 
		'\xC9', '\x2', '\x1077', '\x1075', '\x3', '\x2', '\x2', '\x2', '\x1078', 
		'\x107B', '\x3', '\x2', '\x2', '\x2', '\x1079', '\x1077', '\x3', '\x2', 
		'\x2', '\x2', '\x1079', '\x107A', '\x3', '\x2', '\x2', '\x2', '\x107A', 
		'\x10A9', '\x3', '\x2', '\x2', '\x2', '\x107B', '\x1079', '\x3', '\x2', 
		'\x2', '\x2', '\x107C', '\x107D', '\a', '\t', '\x2', '\x2', '\x107D', 
		'\x107F', '\a', '\x214', '\x2', '\x2', '\x107E', '\x1080', '\x5', '\x234', 
		'\x11B', '\x2', '\x107F', '\x107E', '\x3', '\x2', '\x2', '\x2', '\x107F', 
		'\x1080', '\x3', '\x2', '\x2', '\x2', '\x1080', '\x1081', '\x3', '\x2', 
		'\x2', '\x2', '\x1081', '\x1086', '\x5', '\x192', '\xCA', '\x2', '\x1082', 
		'\x1083', '\a', '\x3B5', '\x2', '\x2', '\x1083', '\x1085', '\x5', '\x192', 
		'\xCA', '\x2', '\x1084', '\x1082', '\x3', '\x2', '\x2', '\x2', '\x1085', 
		'\x1088', '\x3', '\x2', '\x2', '\x2', '\x1086', '\x1084', '\x3', '\x2', 
		'\x2', '\x2', '\x1086', '\x1087', '\x3', '\x2', '\x2', '\x2', '\x1087', 
		'\x1097', '\x3', '\x2', '\x2', '\x2', '\x1088', '\x1086', '\x3', '\x2', 
		'\x2', '\x2', '\x1089', '\x1095', '\a', '|', '\x2', '\x2', '\x108A', '\x1096', 
		'\a', '\x1A0', '\x2', '\x2', '\x108B', '\x1092', '\x5', '\x194', '\xCB', 
		'\x2', '\x108C', '\x108E', '\a', '\v', '\x2', '\x2', '\x108D', '\x108C', 
		'\x3', '\x2', '\x2', '\x2', '\x108D', '\x108E', '\x3', '\x2', '\x2', '\x2', 
		'\x108E', '\x108F', '\x3', '\x2', '\x2', '\x2', '\x108F', '\x1091', '\x5', 
		'\x194', '\xCB', '\x2', '\x1090', '\x108D', '\x3', '\x2', '\x2', '\x2', 
		'\x1091', '\x1094', '\x3', '\x2', '\x2', '\x2', '\x1092', '\x1090', '\x3', 
		'\x2', '\x2', '\x2', '\x1092', '\x1093', '\x3', '\x2', '\x2', '\x2', '\x1093', 
		'\x1096', '\x3', '\x2', '\x2', '\x2', '\x1094', '\x1092', '\x3', '\x2', 
		'\x2', '\x2', '\x1095', '\x108A', '\x3', '\x2', '\x2', '\x2', '\x1095', 
		'\x108B', '\x3', '\x2', '\x2', '\x2', '\x1096', '\x1098', '\x3', '\x2', 
		'\x2', '\x2', '\x1097', '\x1089', '\x3', '\x2', '\x2', '\x2', '\x1097', 
		'\x1098', '\x3', '\x2', '\x2', '\x2', '\x1098', '\x109F', '\x3', '\x2', 
		'\x2', '\x2', '\x1099', '\x109B', '\a', '\xA7', '\x2', '\x2', '\x109A', 
		'\x109C', '\x5', '\x196', '\xCC', '\x2', '\x109B', '\x109A', '\x3', '\x2', 
		'\x2', '\x2', '\x109C', '\x109D', '\x3', '\x2', '\x2', '\x2', '\x109D', 
		'\x109B', '\x3', '\x2', '\x2', '\x2', '\x109D', '\x109E', '\x3', '\x2', 
		'\x2', '\x2', '\x109E', '\x10A0', '\x3', '\x2', '\x2', '\x2', '\x109F', 
		'\x1099', '\x3', '\x2', '\x2', '\x2', '\x109F', '\x10A0', '\x3', '\x2', 
		'\x2', '\x2', '\x10A0', '\x10A5', '\x3', '\x2', '\x2', '\x2', '\x10A1', 
		'\x10A4', '\x5', '\x198', '\xCD', '\x2', '\x10A2', '\x10A4', '\x5', '\x19A', 
		'\xCE', '\x2', '\x10A3', '\x10A1', '\x3', '\x2', '\x2', '\x2', '\x10A3', 
		'\x10A2', '\x3', '\x2', '\x2', '\x2', '\x10A4', '\x10A7', '\x3', '\x2', 
		'\x2', '\x2', '\x10A5', '\x10A3', '\x3', '\x2', '\x2', '\x2', '\x10A5', 
		'\x10A6', '\x3', '\x2', '\x2', '\x2', '\x10A6', '\x10A9', '\x3', '\x2', 
		'\x2', '\x2', '\x10A7', '\x10A5', '\x3', '\x2', '\x2', '\x2', '\x10A8', 
		'\x1072', '\x3', '\x2', '\x2', '\x2', '\x10A8', '\x107C', '\x3', '\x2', 
		'\x2', '\x2', '\x10A9', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x10AA', 
		'\x10AB', '\a', '\x1F', '\x2', '\x2', '\x10AB', '\x10AC', '\a', '\x214', 
		'\x2', '\x2', '\x10AC', '\x10B1', '\x5', '\x192', '\xCA', '\x2', '\x10AD', 
		'\x10AE', '\a', '\x3B5', '\x2', '\x2', '\x10AE', '\x10B0', '\x5', '\x192', 
		'\xCA', '\x2', '\x10AF', '\x10AD', '\x3', '\x2', '\x2', '\x2', '\x10B0', 
		'\x10B3', '\x3', '\x2', '\x2', '\x2', '\x10B1', '\x10AF', '\x3', '\x2', 
		'\x2', '\x2', '\x10B1', '\x10B2', '\x3', '\x2', '\x2', '\x2', '\x10B2', 
		'\x10E1', '\x3', '\x2', '\x2', '\x2', '\x10B3', '\x10B1', '\x3', '\x2', 
		'\x2', '\x2', '\x10B4', '\x10B5', '\a', '\x1F', '\x2', '\x2', '\x10B5', 
		'\x10B7', '\a', '\x214', '\x2', '\x2', '\x10B6', '\x10B8', '\x5', '\x236', 
		'\x11C', '\x2', '\x10B7', '\x10B6', '\x3', '\x2', '\x2', '\x2', '\x10B7', 
		'\x10B8', '\x3', '\x2', '\x2', '\x2', '\x10B8', '\x10B9', '\x3', '\x2', 
		'\x2', '\x2', '\x10B9', '\x10BE', '\x5', '\x192', '\xCA', '\x2', '\x10BA', 
		'\x10BB', '\a', '\x3B5', '\x2', '\x2', '\x10BB', '\x10BD', '\x5', '\x192', 
		'\xCA', '\x2', '\x10BC', '\x10BA', '\x3', '\x2', '\x2', '\x2', '\x10BD', 
		'\x10C0', '\x3', '\x2', '\x2', '\x2', '\x10BE', '\x10BC', '\x3', '\x2', 
		'\x2', '\x2', '\x10BE', '\x10BF', '\x3', '\x2', '\x2', '\x2', '\x10BF', 
		'\x10CF', '\x3', '\x2', '\x2', '\x2', '\x10C0', '\x10BE', '\x3', '\x2', 
		'\x2', '\x2', '\x10C1', '\x10CD', '\a', '|', '\x2', '\x2', '\x10C2', '\x10CE', 
		'\a', '\x1A0', '\x2', '\x2', '\x10C3', '\x10CA', '\x5', '\x194', '\xCB', 
		'\x2', '\x10C4', '\x10C6', '\a', '\v', '\x2', '\x2', '\x10C5', '\x10C4', 
		'\x3', '\x2', '\x2', '\x2', '\x10C5', '\x10C6', '\x3', '\x2', '\x2', '\x2', 
		'\x10C6', '\x10C7', '\x3', '\x2', '\x2', '\x2', '\x10C7', '\x10C9', '\x5', 
		'\x194', '\xCB', '\x2', '\x10C8', '\x10C5', '\x3', '\x2', '\x2', '\x2', 
		'\x10C9', '\x10CC', '\x3', '\x2', '\x2', '\x2', '\x10CA', '\x10C8', '\x3', 
		'\x2', '\x2', '\x2', '\x10CA', '\x10CB', '\x3', '\x2', '\x2', '\x2', '\x10CB', 
		'\x10CE', '\x3', '\x2', '\x2', '\x2', '\x10CC', '\x10CA', '\x3', '\x2', 
		'\x2', '\x2', '\x10CD', '\x10C2', '\x3', '\x2', '\x2', '\x2', '\x10CD', 
		'\x10C3', '\x3', '\x2', '\x2', '\x2', '\x10CE', '\x10D0', '\x3', '\x2', 
		'\x2', '\x2', '\x10CF', '\x10C1', '\x3', '\x2', '\x2', '\x2', '\x10CF', 
		'\x10D0', '\x3', '\x2', '\x2', '\x2', '\x10D0', '\x10D7', '\x3', '\x2', 
		'\x2', '\x2', '\x10D1', '\x10D3', '\a', '\xA7', '\x2', '\x2', '\x10D2', 
		'\x10D4', '\x5', '\x196', '\xCC', '\x2', '\x10D3', '\x10D2', '\x3', '\x2', 
		'\x2', '\x2', '\x10D4', '\x10D5', '\x3', '\x2', '\x2', '\x2', '\x10D5', 
		'\x10D3', '\x3', '\x2', '\x2', '\x2', '\x10D5', '\x10D6', '\x3', '\x2', 
		'\x2', '\x2', '\x10D6', '\x10D8', '\x3', '\x2', '\x2', '\x2', '\x10D7', 
		'\x10D1', '\x3', '\x2', '\x2', '\x2', '\x10D7', '\x10D8', '\x3', '\x2', 
		'\x2', '\x2', '\x10D8', '\x10DD', '\x3', '\x2', '\x2', '\x2', '\x10D9', 
		'\x10DC', '\x5', '\x198', '\xCD', '\x2', '\x10DA', '\x10DC', '\x5', '\x19A', 
		'\xCE', '\x2', '\x10DB', '\x10D9', '\x3', '\x2', '\x2', '\x2', '\x10DB', 
		'\x10DA', '\x3', '\x2', '\x2', '\x2', '\x10DC', '\x10DF', '\x3', '\x2', 
		'\x2', '\x2', '\x10DD', '\x10DB', '\x3', '\x2', '\x2', '\x2', '\x10DD', 
		'\x10DE', '\x3', '\x2', '\x2', '\x2', '\x10DE', '\x10E1', '\x3', '\x2', 
		'\x2', '\x2', '\x10DF', '\x10DD', '\x3', '\x2', '\x2', '\x2', '\x10E0', 
		'\x10AA', '\x3', '\x2', '\x2', '\x2', '\x10E0', '\x10B4', '\x3', '\x2', 
		'\x2', '\x2', '\x10E1', '\x181', '\x3', '\x2', '\x2', '\x2', '\x10E2', 
		'\x10E3', '\a', '.', '\x2', '\x2', '\x10E3', '\x10E5', '\a', '\x214', 
		'\x2', '\x2', '\x10E4', '\x10E6', '\x5', '\x234', '\x11B', '\x2', '\x10E5', 
		'\x10E4', '\x3', '\x2', '\x2', '\x2', '\x10E5', '\x10E6', '\x3', '\x2', 
		'\x2', '\x2', '\x10E6', '\x10E7', '\x3', '\x2', '\x2', '\x2', '\x10E7', 
		'\x10EC', '\x5', '\x1EE', '\xF8', '\x2', '\x10E8', '\x10E9', '\a', '\x3B5', 
		'\x2', '\x2', '\x10E9', '\x10EB', '\x5', '\x1EE', '\xF8', '\x2', '\x10EA', 
		'\x10E8', '\x3', '\x2', '\x2', '\x2', '\x10EB', '\x10EE', '\x3', '\x2', 
		'\x2', '\x2', '\x10EC', '\x10EA', '\x3', '\x2', '\x2', '\x2', '\x10EC', 
		'\x10ED', '\x3', '\x2', '\x2', '\x2', '\x10ED', '\x183', '\x3', '\x2', 
		'\x2', '\x2', '\x10EE', '\x10EC', '\x3', '\x2', '\x2', '\x2', '\x10EF', 
		'\x10F0', '\a', '>', '\x2', '\x2', '\x10F0', '\x10F5', '\x5', '\x19C', 
		'\xCF', '\x2', '\x10F1', '\x10F2', '\a', '\x3B5', '\x2', '\x2', '\x10F2', 
		'\x10F4', '\x5', '\x19C', '\xCF', '\x2', '\x10F3', '\x10F1', '\x3', '\x2', 
		'\x2', '\x2', '\x10F4', '\x10F7', '\x3', '\x2', '\x2', '\x2', '\x10F5', 
		'\x10F3', '\x3', '\x2', '\x2', '\x2', '\x10F5', '\x10F6', '\x3', '\x2', 
		'\x2', '\x2', '\x10F6', '\x10F8', '\x3', '\x2', '\x2', '\x2', '\x10F7', 
		'\x10F5', '\x3', '\x2', '\x2', '\x2', '\x10F8', '\x10FA', '\a', '\x66', 
		'\x2', '\x2', '\x10F9', '\x10FB', '\t', '\x39', '\x2', '\x2', '\x10FA', 
		'\x10F9', '\x3', '\x2', '\x2', '\x2', '\x10FA', '\x10FB', '\x3', '\x2', 
		'\x2', '\x2', '\x10FB', '\x10FC', '\x3', '\x2', '\x2', '\x2', '\x10FC', 
		'\x10FD', '\x5', '\x1A0', '\xD1', '\x2', '\x10FD', '\x10FE', '\a', '\x96', 
		'\x2', '\x2', '\x10FE', '\x1103', '\x5', '\x192', '\xCA', '\x2', '\x10FF', 
		'\x1100', '\a', '\x3B5', '\x2', '\x2', '\x1100', '\x1102', '\x5', '\x192', 
		'\xCA', '\x2', '\x1101', '\x10FF', '\x3', '\x2', '\x2', '\x2', '\x1102', 
		'\x1105', '\x3', '\x2', '\x2', '\x2', '\x1103', '\x1101', '\x3', '\x2', 
		'\x2', '\x2', '\x1103', '\x1104', '\x3', '\x2', '\x2', '\x2', '\x1104', 
		'\x1114', '\x3', '\x2', '\x2', '\x2', '\x1105', '\x1103', '\x3', '\x2', 
		'\x2', '\x2', '\x1106', '\x1112', '\a', '|', '\x2', '\x2', '\x1107', '\x1113', 
		'\a', '\x1A0', '\x2', '\x2', '\x1108', '\x110F', '\x5', '\x194', '\xCB', 
		'\x2', '\x1109', '\x110B', '\a', '\v', '\x2', '\x2', '\x110A', '\x1109', 
		'\x3', '\x2', '\x2', '\x2', '\x110A', '\x110B', '\x3', '\x2', '\x2', '\x2', 
		'\x110B', '\x110C', '\x3', '\x2', '\x2', '\x2', '\x110C', '\x110E', '\x5', 
		'\x194', '\xCB', '\x2', '\x110D', '\x110A', '\x3', '\x2', '\x2', '\x2', 
		'\x110E', '\x1111', '\x3', '\x2', '\x2', '\x2', '\x110F', '\x110D', '\x3', 
		'\x2', '\x2', '\x2', '\x110F', '\x1110', '\x3', '\x2', '\x2', '\x2', '\x1110', 
		'\x1113', '\x3', '\x2', '\x2', '\x2', '\x1111', '\x110F', '\x3', '\x2', 
		'\x2', '\x2', '\x1112', '\x1107', '\x3', '\x2', '\x2', '\x2', '\x1112', 
		'\x1108', '\x3', '\x2', '\x2', '\x2', '\x1113', '\x1115', '\x3', '\x2', 
		'\x2', '\x2', '\x1114', '\x1106', '\x3', '\x2', '\x2', '\x2', '\x1114', 
		'\x1115', '\x3', '\x2', '\x2', '\x2', '\x1115', '\x111F', '\x3', '\x2', 
		'\x2', '\x2', '\x1116', '\x111C', '\a', '\xA7', '\x2', '\x2', '\x1117', 
		'\x1118', '\a', '>', '\x2', '\x2', '\x1118', '\x111B', '\a', 'h', '\x2', 
		'\x2', '\x1119', '\x111B', '\x5', '\x196', '\xCC', '\x2', '\x111A', '\x1117', 
		'\x3', '\x2', '\x2', '\x2', '\x111A', '\x1119', '\x3', '\x2', '\x2', '\x2', 
		'\x111B', '\x111E', '\x3', '\x2', '\x2', '\x2', '\x111C', '\x111A', '\x3', 
		'\x2', '\x2', '\x2', '\x111C', '\x111D', '\x3', '\x2', '\x2', '\x2', '\x111D', 
		'\x1120', '\x3', '\x2', '\x2', '\x2', '\x111E', '\x111C', '\x3', '\x2', 
		'\x2', '\x2', '\x111F', '\x1116', '\x3', '\x2', '\x2', '\x2', '\x111F', 
		'\x1120', '\x3', '\x2', '\x2', '\x2', '\x1120', '\x185', '\x3', '\x2', 
		'\x2', '\x2', '\x1121', '\x1122', '\a', '>', '\x2', '\x2', '\x1122', '\x1123', 
		'\a', '\x1BF', '\x2', '\x2', '\x1123', '\x1124', '\a', '\x66', '\x2', 
		'\x2', '\x1124', '\x1125', '\x5', '\x1EE', '\xF8', '\x2', '\x1125', '\x1126', 
		'\a', '\x96', '\x2', '\x2', '\x1126', '\x112B', '\x5', '\x1EE', '\xF8', 
		'\x2', '\x1127', '\x1128', '\a', '\x3B5', '\x2', '\x2', '\x1128', '\x112A', 
		'\x5', '\x1EE', '\xF8', '\x2', '\x1129', '\x1127', '\x3', '\x2', '\x2', 
		'\x2', '\x112A', '\x112D', '\x3', '\x2', '\x2', '\x2', '\x112B', '\x1129', 
		'\x3', '\x2', '\x2', '\x2', '\x112B', '\x112C', '\x3', '\x2', '\x2', '\x2', 
		'\x112C', '\x1131', '\x3', '\x2', '\x2', '\x2', '\x112D', '\x112B', '\x3', 
		'\x2', '\x2', '\x2', '\x112E', '\x112F', '\a', '\xA7', '\x2', '\x2', '\x112F', 
		'\x1130', '\a', '>', '\x2', '\x2', '\x1130', '\x1132', '\a', 'h', '\x2', 
		'\x2', '\x1131', '\x112E', '\x3', '\x2', '\x2', '\x2', '\x1131', '\x1132', 
		'\x3', '\x2', '\x2', '\x2', '\x1132', '\x187', '\x3', '\x2', '\x2', '\x2', 
		'\x1133', '\x1134', '\a', 'y', '\x2', '\x2', '\x1134', '\x1135', '\a', 
		'\x214', '\x2', '\x2', '\x1135', '\x113A', '\x5', '\x1A2', '\xD2', '\x2', 
		'\x1136', '\x1137', '\a', '\x3B5', '\x2', '\x2', '\x1137', '\x1139', '\x5', 
		'\x1A2', '\xD2', '\x2', '\x1138', '\x1136', '\x3', '\x2', '\x2', '\x2', 
		'\x1139', '\x113C', '\x3', '\x2', '\x2', '\x2', '\x113A', '\x1138', '\x3', 
		'\x2', '\x2', '\x2', '\x113A', '\x113B', '\x3', '\x2', '\x2', '\x2', '\x113B', 
		'\x189', '\x3', '\x2', '\x2', '\x2', '\x113C', '\x113A', '\x3', '\x2', 
		'\x2', '\x2', '\x113D', '\x113E', '\a', '\x7F', '\x2', '\x2', '\x113E', 
		'\x1143', '\x5', '\x19C', '\xCF', '\x2', '\x113F', '\x1140', '\a', '\x3B5', 
		'\x2', '\x2', '\x1140', '\x1142', '\x5', '\x19C', '\xCF', '\x2', '\x1141', 
		'\x113F', '\x3', '\x2', '\x2', '\x2', '\x1142', '\x1145', '\x3', '\x2', 
		'\x2', '\x2', '\x1143', '\x1141', '\x3', '\x2', '\x2', '\x2', '\x1143', 
		'\x1144', '\x3', '\x2', '\x2', '\x2', '\x1144', '\x1146', '\x3', '\x2', 
		'\x2', '\x2', '\x1145', '\x1143', '\x3', '\x2', '\x2', '\x2', '\x1146', 
		'\x1148', '\a', '\x66', '\x2', '\x2', '\x1147', '\x1149', '\t', '\x39', 
		'\x2', '\x2', '\x1148', '\x1147', '\x3', '\x2', '\x2', '\x2', '\x1148', 
		'\x1149', '\x3', '\x2', '\x2', '\x2', '\x1149', '\x114A', '\x3', '\x2', 
		'\x2', '\x2', '\x114A', '\x114B', '\x5', '\x1A0', '\xD1', '\x2', '\x114B', 
		'\x114C', '\a', '<', '\x2', '\x2', '\x114C', '\x1151', '\x5', '\x1EE', 
		'\xF8', '\x2', '\x114D', '\x114E', '\a', '\x3B5', '\x2', '\x2', '\x114E', 
		'\x1150', '\x5', '\x1EE', '\xF8', '\x2', '\x114F', '\x114D', '\x3', '\x2', 
		'\x2', '\x2', '\x1150', '\x1153', '\x3', '\x2', '\x2', '\x2', '\x1151', 
		'\x114F', '\x3', '\x2', '\x2', '\x2', '\x1151', '\x1152', '\x3', '\x2', 
		'\x2', '\x2', '\x1152', '\x1166', '\x3', '\x2', '\x2', '\x2', '\x1153', 
		'\x1151', '\x3', '\x2', '\x2', '\x2', '\x1154', '\x1155', '\a', '\x7F', 
		'\x2', '\x2', '\x1155', '\x1157', '\a', '\b', '\x2', '\x2', '\x1156', 
		'\x1158', '\a', '\x238', '\x2', '\x2', '\x1157', '\x1156', '\x3', '\x2', 
		'\x2', '\x2', '\x1157', '\x1158', '\x3', '\x2', '\x2', '\x2', '\x1158', 
		'\x1159', '\x3', '\x2', '\x2', '\x2', '\x1159', '\x115A', '\a', '\x3B5', 
		'\x2', '\x2', '\x115A', '\x115B', '\a', '>', '\x2', '\x2', '\x115B', '\x115C', 
		'\a', 'h', '\x2', '\x2', '\x115C', '\x115D', '\a', '<', '\x2', '\x2', 
		'\x115D', '\x1162', '\x5', '\x1EE', '\xF8', '\x2', '\x115E', '\x115F', 
		'\a', '\x3B5', '\x2', '\x2', '\x115F', '\x1161', '\x5', '\x1EE', '\xF8', 
		'\x2', '\x1160', '\x115E', '\x3', '\x2', '\x2', '\x2', '\x1161', '\x1164', 
		'\x3', '\x2', '\x2', '\x2', '\x1162', '\x1160', '\x3', '\x2', '\x2', '\x2', 
		'\x1162', '\x1163', '\x3', '\x2', '\x2', '\x2', '\x1163', '\x1166', '\x3', 
		'\x2', '\x2', '\x2', '\x1164', '\x1162', '\x3', '\x2', '\x2', '\x2', '\x1165', 
		'\x113D', '\x3', '\x2', '\x2', '\x2', '\x1165', '\x1154', '\x3', '\x2', 
		'\x2', '\x2', '\x1166', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x1167', 
		'\x1168', '\a', '\x7F', '\x2', '\x2', '\x1168', '\x1169', '\a', '\x1BF', 
		'\x2', '\x2', '\x1169', '\x116A', '\a', '\x66', '\x2', '\x2', '\x116A', 
		'\x116B', '\x5', '\x1EE', '\xF8', '\x2', '\x116B', '\x116C', '\a', '<', 
		'\x2', '\x2', '\x116C', '\x1171', '\x5', '\x1EE', '\xF8', '\x2', '\x116D', 
		'\x116E', '\a', '\x3B5', '\x2', '\x2', '\x116E', '\x1170', '\x5', '\x1EE', 
		'\xF8', '\x2', '\x116F', '\x116D', '\x3', '\x2', '\x2', '\x2', '\x1170', 
		'\x1173', '\x3', '\x2', '\x2', '\x2', '\x1171', '\x116F', '\x3', '\x2', 
		'\x2', '\x2', '\x1171', '\x1172', '\x3', '\x2', '\x2', '\x2', '\x1172', 
		'\x18D', '\x3', '\x2', '\x2', '\x2', '\x1173', '\x1171', '\x3', '\x2', 
		'\x2', '\x2', '\x1174', '\x1175', '\a', '\x85', '\x2', '\x2', '\x1175', 
		'\x1178', '\a', '\x1B2', '\x2', '\x2', '\x1176', '\x1177', '\a', '\x39', 
		'\x2', '\x2', '\x1177', '\x1179', '\x5', '\x1EE', '\xF8', '\x2', '\x1178', 
		'\x1176', '\x3', '\x2', '\x2', '\x2', '\x1178', '\x1179', '\x3', '\x2', 
		'\x2', '\x2', '\x1179', '\x117A', '\x3', '\x2', '\x2', '\x2', '\x117A', 
		'\x117D', '\a', '\x3AA', '\x2', '\x2', '\x117B', '\x117E', '\x5', '\x246', 
		'\x124', '\x2', '\x117C', '\x117E', '\a', '\x3C2', '\x2', '\x2', '\x117D', 
		'\x117B', '\x3', '\x2', '\x2', '\x2', '\x117D', '\x117C', '\x3', '\x2', 
		'\x2', '\x2', '\x117E', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x117F', 
		'\x1180', '\x5', '\x1EE', '\xF8', '\x2', '\x1180', '\x1181', '\x5', '\x198', 
		'\xCD', '\x2', '\x1181', '\x191', '\x3', '\x2', '\x2', '\x2', '\x1182', 
		'\x1183', '\x5', '\x1EE', '\xF8', '\x2', '\x1183', '\x1184', '\a', '\x15B', 
		'\x2', '\x2', '\x1184', '\x1185', '\a', '\x11', '\x2', '\x2', '\x1185', 
		'\x1186', '\a', '\x1B2', '\x2', '\x2', '\x1186', '\x1187', '\a', '\x3C2', 
		'\x2', '\x2', '\x1187', '\x119B', '\x3', '\x2', '\x2', '\x2', '\x1188', 
		'\x1189', '\x5', '\x1EE', '\xF8', '\x2', '\x1189', '\x118C', '\a', '\x15B', 
		'\x2', '\x2', '\x118A', '\x118B', '\a', '\xA7', '\x2', '\x2', '\x118B', 
		'\x118D', '\x5', '\x1FE', '\x100', '\x2', '\x118C', '\x118A', '\x3', '\x2', 
		'\x2', '\x2', '\x118C', '\x118D', '\x3', '\x2', '\x2', '\x2', '\x118D', 
		'\x118E', '\x3', '\x2', '\x2', '\x2', '\x118E', '\x118F', '\a', '\x11', 
		'\x2', '\x2', '\x118F', '\x1190', '\a', '\x3C2', '\x2', '\x2', '\x1190', 
		'\x119B', '\x3', '\x2', '\x2', '\x2', '\x1191', '\x1192', '\x5', '\x1EE', 
		'\xF8', '\x2', '\x1192', '\x1193', '\a', '\x15B', '\x2', '\x2', '\x1193', 
		'\x1194', '\a', '\xA7', '\x2', '\x2', '\x1194', '\x1197', '\x5', '\x1FE', 
		'\x100', '\x2', '\x1195', '\x1196', '\a', '\f', '\x2', '\x2', '\x1196', 
		'\x1198', '\a', '\x3C2', '\x2', '\x2', '\x1197', '\x1195', '\x3', '\x2', 
		'\x2', '\x2', '\x1197', '\x1198', '\x3', '\x2', '\x2', '\x2', '\x1198', 
		'\x119B', '\x3', '\x2', '\x2', '\x2', '\x1199', '\x119B', '\x5', '\x1EE', 
		'\xF8', '\x2', '\x119A', '\x1182', '\x3', '\x2', '\x2', '\x2', '\x119A', 
		'\x1188', '\x3', '\x2', '\x2', '\x2', '\x119A', '\x1191', '\x3', '\x2', 
		'\x2', '\x2', '\x119A', '\x1199', '\x3', '\x2', '\x2', '\x2', '\x119B', 
		'\x193', '\x3', '\x2', '\x2', '\x2', '\x119C', '\x11A5', '\a', '\x90', 
		'\x2', '\x2', '\x119D', '\x11A5', '\a', '\x220', '\x2', '\x2', '\x119E', 
		'\x119F', '\a', '\x10F', '\x2', '\x2', '\x119F', '\x11A5', '\a', '\x3C2', 
		'\x2', '\x2', '\x11A0', '\x11A1', '\a', '\x169', '\x2', '\x2', '\x11A1', 
		'\x11A5', '\a', '\x3C2', '\x2', '\x2', '\x11A2', '\x11A3', '\a', '\x1FF', 
		'\x2', '\x2', '\x11A3', '\x11A5', '\a', '\x3C2', '\x2', '\x2', '\x11A4', 
		'\x119C', '\x3', '\x2', '\x2', '\x2', '\x11A4', '\x119D', '\x3', '\x2', 
		'\x2', '\x2', '\x11A4', '\x119E', '\x3', '\x2', '\x2', '\x2', '\x11A4', 
		'\x11A0', '\x3', '\x2', '\x2', '\x2', '\x11A4', '\x11A2', '\x3', '\x2', 
		'\x2', '\x2', '\x11A5', '\x195', '\x3', '\x2', '\x2', '\x2', '\x11A6', 
		'\x11A7', '\a', '\x18B', '\x2', '\x2', '\x11A7', '\x11AF', '\x5', '\x206', 
		'\x104', '\x2', '\x11A8', '\x11A9', '\a', '\x18E', '\x2', '\x2', '\x11A9', 
		'\x11AF', '\x5', '\x206', '\x104', '\x2', '\x11AA', '\x11AB', '\a', '\x18A', 
		'\x2', '\x2', '\x11AB', '\x11AF', '\x5', '\x206', '\x104', '\x2', '\x11AC', 
		'\x11AD', '\a', '\x18F', '\x2', '\x2', '\x11AD', '\x11AF', '\x5', '\x206', 
		'\x104', '\x2', '\x11AE', '\x11A6', '\x3', '\x2', '\x2', '\x2', '\x11AE', 
		'\x11A8', '\x3', '\x2', '\x2', '\x2', '\x11AE', '\x11AA', '\x3', '\x2', 
		'\x2', '\x2', '\x11AE', '\x11AC', '\x3', '\x2', '\x2', '\x2', '\x11AF', 
		'\x197', '\x3', '\x2', '\x2', '\x2', '\x11B0', '\x11B1', '\a', '\x1B2', 
		'\x2', '\x2', '\x11B1', '\x11B8', '\a', '\x142', '\x2', '\x2', '\x11B2', 
		'\x11B9', '\a', '&', '\x2', '\x2', '\x11B3', '\x11B9', '\a', '\x19C', 
		'\x2', '\x2', '\x11B4', '\x11B5', '\a', 'J', '\x2', '\x2', '\x11B5', '\x11B6', 
		'\x5', '\x206', '\x104', '\x2', '\x11B6', '\x11B7', '\a', '\x22A', '\x2', 
		'\x2', '\x11B7', '\x11B9', '\x3', '\x2', '\x2', '\x2', '\x11B8', '\x11B2', 
		'\x3', '\x2', '\x2', '\x2', '\x11B8', '\x11B3', '\x3', '\x2', '\x2', '\x2', 
		'\x11B8', '\x11B4', '\x3', '\x2', '\x2', '\x2', '\x11B8', '\x11B9', '\x3', 
		'\x2', '\x2', '\x2', '\x11B9', '\x199', '\x3', '\x2', '\x2', '\x2', '\x11BA', 
		'\x11BB', '\a', '\xF6', '\x2', '\x2', '\x11BB', '\x11BC', '\t', ':', '\x2', 
		'\x2', '\x11BC', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x11BD', '\x11C2', 
		'\x5', '\x19E', '\xD0', '\x2', '\x11BE', '\x11BF', '\a', '\x3B3', '\x2', 
		'\x2', '\x11BF', '\x11C0', '\x5', '\x21E', '\x110', '\x2', '\x11C0', '\x11C1', 
		'\a', '\x3B4', '\x2', '\x2', '\x11C1', '\x11C3', '\x3', '\x2', '\x2', 
		'\x2', '\x11C2', '\x11BE', '\x3', '\x2', '\x2', '\x2', '\x11C2', '\x11C3', 
		'\x3', '\x2', '\x2', '\x2', '\x11C3', '\x19D', '\x3', '\x2', '\x2', '\x2', 
		'\x11C4', '\x11C6', '\a', '\b', '\x2', '\x2', '\x11C5', '\x11C7', '\a', 
		'\x238', '\x2', '\x2', '\x11C6', '\x11C5', '\x3', '\x2', '\x2', '\x2', 
		'\x11C6', '\x11C7', '\x3', '\x2', '\x2', '\x2', '\x11C7', '\x11EF', '\x3', 
		'\x2', '\x2', '\x2', '\x11C8', '\x11CA', '\a', '\t', '\x2', '\x2', '\x11C9', 
		'\x11CB', '\a', '\x231', '\x2', '\x2', '\x11CA', '\x11C9', '\x3', '\x2', 
		'\x2', '\x2', '\x11CA', '\x11CB', '\x3', '\x2', '\x2', '\x2', '\x11CB', 
		'\x11EF', '\x3', '\x2', '\x2', '\x2', '\x11CC', '\x11D3', '\a', '\x1F', 
		'\x2', '\x2', '\x11CD', '\x11CE', '\a', '\x206', '\x2', '\x2', '\x11CE', 
		'\x11D4', '\a', '\x230', '\x2', '\x2', '\x11CF', '\x11D4', '\a', '\x231', 
		'\x2', '\x2', '\x11D0', '\x11D4', '\a', '\x21A', '\x2', '\x2', '\x11D1', 
		'\x11D4', '\a', '\x214', '\x2', '\x2', '\x11D2', '\x11D4', '\a', '\x205', 
		'\x2', '\x2', '\x11D3', '\x11CD', '\x3', '\x2', '\x2', '\x2', '\x11D3', 
		'\x11CF', '\x3', '\x2', '\x2', '\x2', '\x11D3', '\x11D0', '\x3', '\x2', 
		'\x2', '\x2', '\x11D3', '\x11D1', '\x3', '\x2', '\x2', '\x2', '\x11D3', 
		'\x11D2', '\x3', '\x2', '\x2', '\x2', '\x11D3', '\x11D4', '\x3', '\x2', 
		'\x2', '\x2', '\x11D4', '\x11EF', '\x3', '\x2', '\x2', '\x2', '\x11D5', 
		'\x11EF', '\a', '(', '\x2', '\x2', '\x11D6', '\x11EF', '\a', '.', '\x2', 
		'\x2', '\x11D7', '\x11EF', '\a', '\x13D', '\x2', '\x2', '\x11D8', '\x11EF', 
		'\a', '\x232', '\x2', '\x2', '\x11D9', '\x11EF', '\a', '\x233', '\x2', 
		'\x2', '\x11DA', '\x11DB', '\a', '>', '\x2', '\x2', '\x11DB', '\x11EF', 
		'\a', 'h', '\x2', '\x2', '\x11DC', '\x11EF', '\a', '\x45', '\x2', '\x2', 
		'\x11DD', '\x11EF', '\a', 'I', '\x2', '\x2', '\x11DE', '\x11DF', '\a', 
		'Z', '\x2', '\x2', '\x11DF', '\x11EF', '\a', '\x230', '\x2', '\x2', '\x11E0', 
		'\x11EF', '\a', '\x234', '\x2', '\x2', '\x11E1', '\x11EF', '\a', '\x1BF', 
		'\x2', '\x2', '\x11E2', '\x11EF', '\a', 'v', '\x2', '\x2', '\x11E3', '\x11EF', 
		'\a', '\x235', '\x2', '\x2', '\x11E4', '\x11E5', '\a', '\x1D4', '\x2', 
		'\x2', '\x11E5', '\x11EF', '\t', ';', '\x2', '\x2', '\x11E6', '\x11EF', 
		'\a', '\x84', '\x2', '\x2', '\x11E7', '\x11E8', '\a', '\x87', '\x2', '\x2', 
		'\x11E8', '\x11EF', '\t', '<', '\x2', '\x2', '\x11E9', '\x11EF', '\a', 
		'\x236', '\x2', '\x2', '\x11EA', '\x11EF', '\a', '\x237', '\x2', '\x2', 
		'\x11EB', '\x11EF', '\a', '\x98', '\x2', '\x2', '\x11EC', '\x11EF', '\a', 
		'\x9F', '\x2', '\x2', '\x11ED', '\x11EF', '\a', '\xA0', '\x2', '\x2', 
		'\x11EE', '\x11C4', '\x3', '\x2', '\x2', '\x2', '\x11EE', '\x11C8', '\x3', 
		'\x2', '\x2', '\x2', '\x11EE', '\x11CC', '\x3', '\x2', '\x2', '\x2', '\x11EE', 
		'\x11D5', '\x3', '\x2', '\x2', '\x2', '\x11EE', '\x11D6', '\x3', '\x2', 
		'\x2', '\x2', '\x11EE', '\x11D7', '\x3', '\x2', '\x2', '\x2', '\x11EE', 
		'\x11D8', '\x3', '\x2', '\x2', '\x2', '\x11EE', '\x11D9', '\x3', '\x2', 
		'\x2', '\x2', '\x11EE', '\x11DA', '\x3', '\x2', '\x2', '\x2', '\x11EE', 
		'\x11DC', '\x3', '\x2', '\x2', '\x2', '\x11EE', '\x11DD', '\x3', '\x2', 
		'\x2', '\x2', '\x11EE', '\x11DE', '\x3', '\x2', '\x2', '\x2', '\x11EE', 
		'\x11E0', '\x3', '\x2', '\x2', '\x2', '\x11EE', '\x11E1', '\x3', '\x2', 
		'\x2', '\x2', '\x11EE', '\x11E2', '\x3', '\x2', '\x2', '\x2', '\x11EE', 
		'\x11E3', '\x3', '\x2', '\x2', '\x2', '\x11EE', '\x11E4', '\x3', '\x2', 
		'\x2', '\x2', '\x11EE', '\x11E6', '\x3', '\x2', '\x2', '\x2', '\x11EE', 
		'\x11E7', '\x3', '\x2', '\x2', '\x2', '\x11EE', '\x11E9', '\x3', '\x2', 
		'\x2', '\x2', '\x11EE', '\x11EA', '\x3', '\x2', '\x2', '\x2', '\x11EE', 
		'\x11EB', '\x3', '\x2', '\x2', '\x2', '\x11EE', '\x11EC', '\x3', '\x2', 
		'\x2', '\x2', '\x11EE', '\x11ED', '\x3', '\x2', '\x2', '\x2', '\x11EF', 
		'\x19F', '\x3', '\x2', '\x2', '\x2', '\x11F0', '\x11FE', '\a', '\x3A2', 
		'\x2', '\x2', '\x11F1', '\x11F2', '\a', '\x3A2', '\x2', '\x2', '\x11F2', 
		'\x11F3', '\a', '\x3B2', '\x2', '\x2', '\x11F3', '\x11FE', '\a', '\x3A2', 
		'\x2', '\x2', '\x11F4', '\x11F5', '\x5', '\x200', '\x101', '\x2', '\x11F5', 
		'\x11F6', '\a', '\x3B2', '\x2', '\x2', '\x11F6', '\x11F7', '\a', '\x3A2', 
		'\x2', '\x2', '\x11F7', '\x11FE', '\x3', '\x2', '\x2', '\x2', '\x11F8', 
		'\x11F9', '\x5', '\x200', '\x101', '\x2', '\x11F9', '\x11FA', '\a', '\x3B2', 
		'\x2', '\x2', '\x11FA', '\x11FB', '\x5', '\x200', '\x101', '\x2', '\x11FB', 
		'\x11FE', '\x3', '\x2', '\x2', '\x2', '\x11FC', '\x11FE', '\x5', '\x200', 
		'\x101', '\x2', '\x11FD', '\x11F0', '\x3', '\x2', '\x2', '\x2', '\x11FD', 
		'\x11F1', '\x3', '\x2', '\x2', '\x2', '\x11FD', '\x11F4', '\x3', '\x2', 
		'\x2', '\x2', '\x11FD', '\x11F8', '\x3', '\x2', '\x2', '\x2', '\x11FD', 
		'\x11FC', '\x3', '\x2', '\x2', '\x2', '\x11FE', '\x1A1', '\x3', '\x2', 
		'\x2', '\x2', '\x11FF', '\x1200', '\x5', '\x1EE', '\xF8', '\x2', '\x1200', 
		'\x1201', '\a', '\x96', '\x2', '\x2', '\x1201', '\x1202', '\x5', '\x1EE', 
		'\xF8', '\x2', '\x1202', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1203', 
		'\x1205', '\a', '\n', '\x2', '\x2', '\x1204', '\x1206', '\t', '=', '\x2', 
		'\x2', '\x1205', '\x1204', '\x3', '\x2', '\x2', '\x2', '\x1205', '\x1206', 
		'\x3', '\x2', '\x2', '\x2', '\x1206', '\x1207', '\x3', '\x2', '\x2', '\x2', 
		'\x1207', '\x1208', '\a', '\x93', '\x2', '\x2', '\x1208', '\x1209', '\x5', 
		'\x220', '\x111', '\x2', '\x1209', '\x1A5', '\x3', '\x2', '\x2', '\x2', 
		'\x120A', '\x120B', '\a', '\x18', '\x2', '\x2', '\x120B', '\x120C', '\a', 
		'\x93', '\x2', '\x2', '\x120C', '\x1210', '\x5', '\x220', '\x111', '\x2', 
		'\x120D', '\x120F', '\x5', '\x1AE', '\xD8', '\x2', '\x120E', '\x120D', 
		'\x3', '\x2', '\x2', '\x2', '\x120F', '\x1212', '\x3', '\x2', '\x2', '\x2', 
		'\x1210', '\x120E', '\x3', '\x2', '\x2', '\x2', '\x1210', '\x1211', '\x3', 
		'\x2', '\x2', '\x2', '\x1211', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1212', 
		'\x1210', '\x3', '\x2', '\x2', '\x2', '\x1213', '\x1214', '\a', '\x10E', 
		'\x2', '\x2', '\x1214', '\x1215', '\a', '\x93', '\x2', '\x2', '\x1215', 
		'\x1217', '\x5', '\x220', '\x111', '\x2', '\x1216', '\x1218', '\t', '>', 
		'\x2', '\x2', '\x1217', '\x1216', '\x3', '\x2', '\x2', '\x2', '\x1217', 
		'\x1218', '\x3', '\x2', '\x2', '\x2', '\x1218', '\x1A9', '\x3', '\x2', 
		'\x2', '\x2', '\x1219', '\x121B', '\a', 'g', '\x2', '\x2', '\x121A', '\x121C', 
		'\t', '=', '\x2', '\x2', '\x121B', '\x121A', '\x3', '\x2', '\x2', '\x2', 
		'\x121B', '\x121C', '\x3', '\x2', '\x2', '\x2', '\x121C', '\x121D', '\x3', 
		'\x2', '\x2', '\x2', '\x121D', '\x121E', '\a', '\x93', '\x2', '\x2', '\x121E', 
		'\x121F', '\x5', '\x220', '\x111', '\x2', '\x121F', '\x1AB', '\x3', '\x2', 
		'\x2', '\x2', '\x1220', '\x1222', '\a', '\x1CC', '\x2', '\x2', '\x1221', 
		'\x1223', '\t', '=', '\x2', '\x2', '\x1222', '\x1221', '\x3', '\x2', '\x2', 
		'\x2', '\x1222', '\x1223', '\x3', '\x2', '\x2', '\x2', '\x1223', '\x1224', 
		'\x3', '\x2', '\x2', '\x2', '\x1224', '\x1225', '\a', '\x93', '\x2', '\x2', 
		'\x1225', '\x1227', '\x5', '\x220', '\x111', '\x2', '\x1226', '\x1228', 
		'\a', '\x1C1', '\x2', '\x2', '\x1227', '\x1226', '\x3', '\x2', '\x2', 
		'\x2', '\x1227', '\x1228', '\x3', '\x2', '\x2', '\x2', '\x1228', '\x122A', 
		'\x3', '\x2', '\x2', '\x2', '\x1229', '\x122B', '\a', '\x144', '\x2', 
		'\x2', '\x122A', '\x1229', '\x3', '\x2', '\x2', '\x2', '\x122A', '\x122B', 
		'\x3', '\x2', '\x2', '\x2', '\x122B', '\x122D', '\x3', '\x2', '\x2', '\x2', 
		'\x122C', '\x122E', '\a', '\x215', '\x2', '\x2', '\x122D', '\x122C', '\x3', 
		'\x2', '\x2', '\x2', '\x122D', '\x122E', '\x3', '\x2', '\x2', '\x2', '\x122E', 
		'\x1AD', '\x3', '\x2', '\x2', '\x2', '\x122F', '\x1230', '\a', '\x39', 
		'\x2', '\x2', '\x1230', '\x1237', '\a', '\x213', '\x2', '\x2', '\x1231', 
		'\x1237', '\a', '\x1C1', '\x2', '\x2', '\x1232', '\x1237', '\a', '\x146', 
		'\x2', '\x2', '\x1233', '\x1237', '\a', '\x190', '\x2', '\x2', '\x1234', 
		'\x1237', '\a', '\x144', '\x2', '\x2', '\x1235', '\x1237', '\a', '\x10C', 
		'\x2', '\x2', '\x1236', '\x122F', '\x3', '\x2', '\x2', '\x2', '\x1236', 
		'\x1231', '\x3', '\x2', '\x2', '\x2', '\x1236', '\x1232', '\x3', '\x2', 
		'\x2', '\x2', '\x1236', '\x1233', '\x3', '\x2', '\x2', '\x2', '\x1236', 
		'\x1234', '\x3', '\x2', '\x2', '\x2', '\x1236', '\x1235', '\x3', '\x2', 
		'\x2', '\x2', '\x1237', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1238', 
		'\x123A', '\a', '\x1F', '\x2', '\x2', '\x1239', '\x123B', '\a', '\xF9', 
		'\x2', '\x2', '\x123A', '\x1239', '\x3', '\x2', '\x2', '\x2', '\x123A', 
		'\x123B', '\x3', '\x2', '\x2', '\x2', '\x123B', '\x123C', '\x3', '\x2', 
		'\x2', '\x2', '\x123C', '\x123D', '\a', '\x151', '\x2', '\x2', '\x123D', 
		'\x123E', '\x5', '\x200', '\x101', '\x2', '\x123E', '\x123F', '\a', '\x1D7', 
		'\x2', '\x2', '\x123F', '\x1240', '\t', '?', '\x2', '\x2', '\x1240', '\x1241', 
		'\a', '\x1EC', '\x2', '\x2', '\x1241', '\x1242', '\a', '\x3C2', '\x2', 
		'\x2', '\x1242', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1243', '\x1244', 
		'\a', '\x162', '\x2', '\x2', '\x1244', '\x1245', '\a', '\x1B4', '\x2', 
		'\x2', '\x1245', '\x1246', '\x5', '\x200', '\x101', '\x2', '\x1246', '\x1247', 
		'\a', '\x1EC', '\x2', '\x2', '\x1247', '\x1248', '\a', '\x3C2', '\x2', 
		'\x2', '\x1248', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1249', '\x124A', 
		'\a', '\x210', '\x2', '\x2', '\x124A', '\x124B', '\a', '\x1B4', '\x2', 
		'\x2', '\x124B', '\x124C', '\x5', '\x200', '\x101', '\x2', '\x124C', '\x1B5', 
		'\x3', '\x2', '\x2', '\x2', '\x124D', '\x124E', '\a', '\x85', '\x2', '\x2', 
		'\x124E', '\x124F', '\x5', '\x1BA', '\xDE', '\x2', '\x124F', '\x1250', 
		'\a', '\x3AA', '\x2', '\x2', '\x1250', '\x1258', '\x5', '\x24C', '\x127', 
		'\x2', '\x1251', '\x1252', '\a', '\x3B5', '\x2', '\x2', '\x1252', '\x1253', 
		'\x5', '\x1BA', '\xDE', '\x2', '\x1253', '\x1254', '\a', '\x3AA', '\x2', 
		'\x2', '\x1254', '\x1255', '\x5', '\x24C', '\x127', '\x2', '\x1255', '\x1257', 
		'\x3', '\x2', '\x2', '\x2', '\x1256', '\x1251', '\x3', '\x2', '\x2', '\x2', 
		'\x1257', '\x125A', '\x3', '\x2', '\x2', '\x2', '\x1258', '\x1256', '\x3', 
		'\x2', '\x2', '\x2', '\x1258', '\x1259', '\x3', '\x2', '\x2', '\x2', '\x1259', 
		'\x1273', '\x3', '\x2', '\x2', '\x2', '\x125A', '\x1258', '\x3', '\x2', 
		'\x2', '\x2', '\x125B', '\x125F', '\a', '\x85', '\x2', '\x2', '\x125C', 
		'\x125D', '\a', '\x17', '\x2', '\x2', '\x125D', '\x1260', '\a', '\x85', 
		'\x2', '\x2', '\x125E', '\x1260', '\a', '\x293', '\x2', '\x2', '\x125F', 
		'\x125C', '\x3', '\x2', '\x2', '\x2', '\x125F', '\x125E', '\x3', '\x2', 
		'\x2', '\x2', '\x1260', '\x1263', '\x3', '\x2', '\x2', '\x2', '\x1261', 
		'\x1264', '\x5', '\x1F2', '\xFA', '\x2', '\x1262', '\x1264', '\a', '&', 
		'\x2', '\x2', '\x1263', '\x1261', '\x3', '\x2', '\x2', '\x2', '\x1263', 
		'\x1262', '\x3', '\x2', '\x2', '\x2', '\x1264', '\x1273', '\x3', '\x2', 
		'\x2', '\x2', '\x1265', '\x1266', '\a', '\x85', '\x2', '\x2', '\x1266', 
		'\x126D', '\a', '\x19A', '\x2', '\x2', '\x1267', '\x126A', '\x5', '\x1F2', 
		'\xFA', '\x2', '\x1268', '\x1269', '\a', '\x19', '\x2', '\x2', '\x1269', 
		'\x126B', '\x5', '\x1F4', '\xFB', '\x2', '\x126A', '\x1268', '\x3', '\x2', 
		'\x2', '\x2', '\x126A', '\x126B', '\x3', '\x2', '\x2', '\x2', '\x126B', 
		'\x126E', '\x3', '\x2', '\x2', '\x2', '\x126C', '\x126E', '\a', '&', '\x2', 
		'\x2', '\x126D', '\x1267', '\x3', '\x2', '\x2', '\x2', '\x126D', '\x126C', 
		'\x3', '\x2', '\x2', '\x2', '\x126E', '\x1273', '\x3', '\x2', '\x2', '\x2', 
		'\x126F', '\x1273', '\x5', '\x18E', '\xC8', '\x2', '\x1270', '\x1273', 
		'\x5', '\x112', '\x8A', '\x2', '\x1271', '\x1273', '\x5', '\x110', '\x89', 
		'\x2', '\x1272', '\x124D', '\x3', '\x2', '\x2', '\x2', '\x1272', '\x125B', 
		'\x3', '\x2', '\x2', '\x2', '\x1272', '\x1265', '\x3', '\x2', '\x2', '\x2', 
		'\x1272', '\x126F', '\x3', '\x2', '\x2', '\x2', '\x1272', '\x1270', '\x3', 
		'\x2', '\x2', '\x2', '\x1272', '\x1271', '\x3', '\x2', '\x2', '\x2', '\x1273', 
		'\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1274', '\x1275', '\a', '\x87', 
		'\x2', '\x2', '\x1275', '\x1276', '\t', '/', '\x2', '\x2', '\x1276', '\x130C', 
		'\a', '\x174', '\x2', '\x2', '\x1277', '\x1278', '\a', '\x87', '\x2', 
		'\x2', '\x1278', '\x1279', '\t', '@', '\x2', '\x2', '\x1279', '\x127C', 
		'\a', '\x13E', '\x2', '\x2', '\x127A', '\x127B', '\a', '\x44', '\x2', 
		'\x2', '\x127B', '\x127D', '\a', '\x3C2', '\x2', '\x2', '\x127C', '\x127A', 
		'\x3', '\x2', '\x2', '\x2', '\x127C', '\x127D', '\x3', '\x2', '\x2', '\x2', 
		'\x127D', '\x1280', '\x3', '\x2', '\x2', '\x2', '\x127E', '\x127F', '\a', 
		'<', '\x2', '\x2', '\x127F', '\x1281', '\x5', '\x206', '\x104', '\x2', 
		'\x1280', '\x127E', '\x3', '\x2', '\x2', '\x2', '\x1280', '\x1281', '\x3', 
		'\x2', '\x2', '\x2', '\x1281', '\x1289', '\x3', '\x2', '\x2', '\x2', '\x1282', 
		'\x1286', '\a', 'V', '\x2', '\x2', '\x1283', '\x1284', '\x5', '\x206', 
		'\x104', '\x2', '\x1284', '\x1285', '\a', '\x3B5', '\x2', '\x2', '\x1285', 
		'\x1287', '\x3', '\x2', '\x2', '\x2', '\x1286', '\x1283', '\x3', '\x2', 
		'\x2', '\x2', '\x1286', '\x1287', '\x3', '\x2', '\x2', '\x2', '\x1287', 
		'\x1288', '\x3', '\x2', '\x2', '\x2', '\x1288', '\x128A', '\x5', '\x206', 
		'\x104', '\x2', '\x1289', '\x1282', '\x3', '\x2', '\x2', '\x2', '\x1289', 
		'\x128A', '\x3', '\x2', '\x2', '\x2', '\x128A', '\x130C', '\x3', '\x2', 
		'\x2', '\x2', '\x128B', '\x128C', '\a', '\x87', '\x2', '\x2', '\x128C', 
		'\x128E', '\x5', '\x1BC', '\xDF', '\x2', '\x128D', '\x128F', '\x5', '\x1BE', 
		'\xE0', '\x2', '\x128E', '\x128D', '\x3', '\x2', '\x2', '\x2', '\x128E', 
		'\x128F', '\x3', '\x2', '\x2', '\x2', '\x128F', '\x130C', '\x3', '\x2', 
		'\x2', '\x2', '\x1290', '\x1292', '\a', '\x87', '\x2', '\x2', '\x1291', 
		'\x1293', '\a', '\x150', '\x2', '\x2', '\x1292', '\x1291', '\x3', '\x2', 
		'\x2', '\x2', '\x1292', '\x1293', '\x3', '\x2', '\x2', '\x2', '\x1293', 
		'\x1294', '\x3', '\x2', '\x2', '\x2', '\x1294', '\x1295', '\t', '!', '\x2', 
		'\x2', '\x1295', '\x1296', '\t', '\x41', '\x2', '\x2', '\x1296', '\x1299', 
		'\x5', '\x1E8', '\xF5', '\x2', '\x1297', '\x1298', '\t', '\x41', '\x2', 
		'\x2', '\x1298', '\x129A', '\x5', '\x200', '\x101', '\x2', '\x1299', '\x1297', 
		'\x3', '\x2', '\x2', '\x2', '\x1299', '\x129A', '\x3', '\x2', '\x2', '\x2', 
		'\x129A', '\x129C', '\x3', '\x2', '\x2', '\x2', '\x129B', '\x129D', '\x5', 
		'\x1BE', '\xE0', '\x2', '\x129C', '\x129B', '\x3', '\x2', '\x2', '\x2', 
		'\x129C', '\x129D', '\x3', '\x2', '\x2', '\x2', '\x129D', '\x130C', '\x3', 
		'\x2', '\x2', '\x2', '\x129E', '\x129F', '\a', '\x87', '\x2', '\x2', '\x129F', 
		'\x12A0', '\a', '\x1F', '\x2', '\x2', '\x12A0', '\x12A2', '\t', '\x2', 
		'\x2', '\x2', '\x12A1', '\x12A3', '\x5', '\x236', '\x11C', '\x2', '\x12A2', 
		'\x12A1', '\x3', '\x2', '\x2', '\x2', '\x12A2', '\x12A3', '\x3', '\x2', 
		'\x2', '\x2', '\x12A3', '\x12A4', '\x3', '\x2', '\x2', '\x2', '\x12A4', 
		'\x130C', '\x5', '\x200', '\x101', '\x2', '\x12A5', '\x12A6', '\a', '\x87', 
		'\x2', '\x2', '\x12A6', '\x12A7', '\a', '\x1F', '\x2', '\x2', '\x12A7', 
		'\x12A8', '\t', '\x42', '\x2', '\x2', '\x12A8', '\x130C', '\x5', '\x1E6', 
		'\xF4', '\x2', '\x12A9', '\x12AA', '\a', '\x87', '\x2', '\x2', '\x12AA', 
		'\x12AB', '\a', '\x1F', '\x2', '\x2', '\x12AB', '\x12AC', '\a', '\x214', 
		'\x2', '\x2', '\x12AC', '\x130C', '\x5', '\x1EE', '\xF8', '\x2', '\x12AD', 
		'\x12AE', '\a', '\x87', '\x2', '\x2', '\x12AE', '\x12AF', '\a', '\x137', 
		'\x2', '\x2', '\x12AF', '\x12B0', '\x5', '\x1F6', '\xFC', '\x2', '\x12B0', 
		'\x12B1', '\t', '\x43', '\x2', '\x2', '\x12B1', '\x130C', '\x3', '\x2', 
		'\x2', '\x2', '\x12B2', '\x12B3', '\a', '\x87', '\x2', '\x2', '\x12B3', 
		'\x130C', '\x5', '\x1C0', '\xE1', '\x2', '\x12B4', '\x12B5', '\a', '\x87', 
		'\x2', '\x2', '\x12B5', '\x12B6', '\t', '\x44', '\x2', '\x2', '\x12B6', 
		'\x12BA', '\a', 'V', '\x2', '\x2', '\x12B7', '\x12B8', '\x5', '\x206', 
		'\x104', '\x2', '\x12B8', '\x12B9', '\a', '\x3B5', '\x2', '\x2', '\x12B9', 
		'\x12BB', '\x3', '\x2', '\x2', '\x2', '\x12BA', '\x12B7', '\x3', '\x2', 
		'\x2', '\x2', '\x12BA', '\x12BB', '\x3', '\x2', '\x2', '\x2', '\x12BB', 
		'\x12BC', '\x3', '\x2', '\x2', '\x2', '\x12BC', '\x130C', '\x5', '\x206', 
		'\x104', '\x2', '\x12BD', '\x12BE', '\a', '\x87', '\x2', '\x2', '\x12BE', 
		'\x12BF', '\a', '\xD7', '\x2', '\x2', '\x12BF', '\x12C0', '\a', '\x3B3', 
		'\x2', '\x2', '\x12C0', '\x12C1', '\a', '\x3A2', '\x2', '\x2', '\x12C1', 
		'\x12C2', '\a', '\x3B4', '\x2', '\x2', '\x12C2', '\x130C', '\t', '\x44', 
		'\x2', '\x2', '\x12C3', '\x12C4', '\a', '\x87', '\x2', '\x2', '\x12C4', 
		'\x12C7', '\x5', '\x1C2', '\xE2', '\x2', '\x12C5', '\x12C6', '\t', '\x41', 
		'\x2', '\x2', '\x12C6', '\x12C8', '\x5', '\x200', '\x101', '\x2', '\x12C7', 
		'\x12C5', '\x3', '\x2', '\x2', '\x2', '\x12C7', '\x12C8', '\x3', '\x2', 
		'\x2', '\x2', '\x12C8', '\x12CA', '\x3', '\x2', '\x2', '\x2', '\x12C9', 
		'\x12CB', '\x5', '\x1BE', '\xE0', '\x2', '\x12CA', '\x12C9', '\x3', '\x2', 
		'\x2', '\x2', '\x12CA', '\x12CB', '\x3', '\x2', '\x2', '\x2', '\x12CB', 
		'\x130C', '\x3', '\x2', '\x2', '\x2', '\x12CC', '\x12CD', '\a', '\x87', 
		'\x2', '\x2', '\x12CD', '\x12CE', '\t', '\x45', '\x2', '\x2', '\x12CE', 
		'\x12CF', '\a', '\x113', '\x2', '\x2', '\x12CF', '\x130C', '\x5', '\x1E6', 
		'\xF4', '\x2', '\x12D0', '\x12D1', '\a', '\x87', '\x2', '\x2', '\x12D1', 
		'\x12D4', '\a', '\x154', '\x2', '\x2', '\x12D2', '\x12D3', '\a', '\x39', 
		'\x2', '\x2', '\x12D3', '\x12D5', '\x5', '\x1EE', '\xF8', '\x2', '\x12D4', 
		'\x12D2', '\x3', '\x2', '\x2', '\x2', '\x12D4', '\x12D5', '\x3', '\x2', 
		'\x2', '\x2', '\x12D5', '\x130C', '\x3', '\x2', '\x2', '\x2', '\x12D6', 
		'\x12D7', '\a', '\x87', '\x2', '\x2', '\x12D7', '\x12D8', '\t', '\x46', 
		'\x2', '\x2', '\x12D8', '\x12D9', '\t', '\x41', '\x2', '\x2', '\x12D9', 
		'\x12DC', '\x5', '\x1E8', '\xF5', '\x2', '\x12DA', '\x12DB', '\t', '\x41', 
		'\x2', '\x2', '\x12DB', '\x12DD', '\x5', '\x200', '\x101', '\x2', '\x12DC', 
		'\x12DA', '\x3', '\x2', '\x2', '\x2', '\x12DC', '\x12DD', '\x3', '\x2', 
		'\x2', '\x2', '\x12DD', '\x12E0', '\x3', '\x2', '\x2', '\x2', '\x12DE', 
		'\x12DF', '\a', '\xA5', '\x2', '\x2', '\x12DF', '\x12E1', '\x5', '\x24C', 
		'\x127', '\x2', '\x12E0', '\x12DE', '\x3', '\x2', '\x2', '\x2', '\x12E0', 
		'\x12E1', '\x3', '\x2', '\x2', '\x2', '\x12E1', '\x130C', '\x3', '\x2', 
		'\x2', '\x2', '\x12E2', '\x12E3', '\a', '\x87', '\x2', '\x2', '\x12E3', 
		'\x12E4', '\a', '\x1A8', '\x2', '\x2', '\x12E4', '\x12E7', '\a', '\x230', 
		'\x2', '\x2', '\x12E5', '\x12E6', '\t', '\x41', '\x2', '\x2', '\x12E6', 
		'\x12E8', '\x5', '\x200', '\x101', '\x2', '\x12E7', '\x12E5', '\x3', '\x2', 
		'\x2', '\x2', '\x12E7', '\x12E8', '\x3', '\x2', '\x2', '\x2', '\x12E8', 
		'\x12EA', '\x3', '\x2', '\x2', '\x2', '\x12E9', '\x12EB', '\x5', '\x1BE', 
		'\xE0', '\x2', '\x12EA', '\x12E9', '\x3', '\x2', '\x2', '\x2', '\x12EA', 
		'\x12EB', '\x3', '\x2', '\x2', '\x2', '\x12EB', '\x130C', '\x3', '\x2', 
		'\x2', '\x2', '\x12EC', '\x12ED', '\a', '\x87', '\x2', '\x2', '\x12ED', 
		'\x12EE', '\a', '\x1BD', '\x2', '\x2', '\x12EE', '\x12F3', '\x5', '\x1C4', 
		'\xE3', '\x2', '\x12EF', '\x12F0', '\a', '\x3B5', '\x2', '\x2', '\x12F0', 
		'\x12F2', '\x5', '\x1C4', '\xE3', '\x2', '\x12F1', '\x12EF', '\x3', '\x2', 
		'\x2', '\x2', '\x12F2', '\x12F5', '\x3', '\x2', '\x2', '\x2', '\x12F3', 
		'\x12F1', '\x3', '\x2', '\x2', '\x2', '\x12F3', '\x12F4', '\x3', '\x2', 
		'\x2', '\x2', '\x12F4', '\x12F9', '\x3', '\x2', '\x2', '\x2', '\x12F5', 
		'\x12F3', '\x3', '\x2', '\x2', '\x2', '\x12F6', '\x12F7', '\a', '\x39', 
		'\x2', '\x2', '\x12F7', '\x12F8', '\a', '\x1C0', '\x2', '\x2', '\x12F8', 
		'\x12FA', '\x5', '\x206', '\x104', '\x2', '\x12F9', '\x12F6', '\x3', '\x2', 
		'\x2', '\x2', '\x12F9', '\x12FA', '\x3', '\x2', '\x2', '\x2', '\x12FA', 
		'\x12FB', '\x3', '\x2', '\x2', '\x2', '\x12FB', '\x12FF', '\a', 'V', '\x2', 
		'\x2', '\x12FC', '\x12FD', '\x5', '\x206', '\x104', '\x2', '\x12FD', '\x12FE', 
		'\a', '\x3B5', '\x2', '\x2', '\x12FE', '\x1300', '\x3', '\x2', '\x2', 
		'\x2', '\x12FF', '\x12FC', '\x3', '\x2', '\x2', '\x2', '\x12FF', '\x1300', 
		'\x3', '\x2', '\x2', '\x2', '\x1300', '\x1301', '\x3', '\x2', '\x2', '\x2', 
		'\x1301', '\x1302', '\x5', '\x206', '\x104', '\x2', '\x1302', '\x130C', 
		'\x3', '\x2', '\x2', '\x2', '\x1303', '\x1304', '\a', '\x87', '\x2', '\x2', 
		'\x1304', '\x1305', '\a', '\x1E7', '\x2', '\x2', '\x1305', '\x1309', '\a', 
		'\x1FB', '\x2', '\x2', '\x1306', '\x1307', '\a', '\x39', '\x2', '\x2', 
		'\x1307', '\x1308', '\a', '\x10D', '\x2', '\x2', '\x1308', '\x130A', '\a', 
		'\x3C2', '\x2', '\x2', '\x1309', '\x1306', '\x3', '\x2', '\x2', '\x2', 
		'\x1309', '\x130A', '\x3', '\x2', '\x2', '\x2', '\x130A', '\x130C', '\x3', 
		'\x2', '\x2', '\x2', '\x130B', '\x1274', '\x3', '\x2', '\x2', '\x2', '\x130B', 
		'\x1277', '\x3', '\x2', '\x2', '\x2', '\x130B', '\x128B', '\x3', '\x2', 
		'\x2', '\x2', '\x130B', '\x1290', '\x3', '\x2', '\x2', '\x2', '\x130B', 
		'\x129E', '\x3', '\x2', '\x2', '\x2', '\x130B', '\x12A5', '\x3', '\x2', 
		'\x2', '\x2', '\x130B', '\x12A9', '\x3', '\x2', '\x2', '\x2', '\x130B', 
		'\x12AD', '\x3', '\x2', '\x2', '\x2', '\x130B', '\x12B2', '\x3', '\x2', 
		'\x2', '\x2', '\x130B', '\x12B4', '\x3', '\x2', '\x2', '\x2', '\x130B', 
		'\x12BD', '\x3', '\x2', '\x2', '\x2', '\x130B', '\x12C3', '\x3', '\x2', 
		'\x2', '\x2', '\x130B', '\x12CC', '\x3', '\x2', '\x2', '\x2', '\x130B', 
		'\x12D0', '\x3', '\x2', '\x2', '\x2', '\x130B', '\x12D6', '\x3', '\x2', 
		'\x2', '\x2', '\x130B', '\x12E2', '\x3', '\x2', '\x2', '\x2', '\x130B', 
		'\x12EC', '\x3', '\x2', '\x2', '\x2', '\x130B', '\x1303', '\x3', '\x2', 
		'\x2', '\x2', '\x130C', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x130D', 
		'\x1318', '\a', '\x3CD', '\x2', '\x2', '\x130E', '\x1318', '\a', '\x3CE', 
		'\x2', '\x2', '\x130F', '\x1310', '\a', '\x3B7', '\x2', '\x2', '\x1310', 
		'\x1312', '\a', '\x3B7', '\x2', '\x2', '\x1311', '\x130F', '\x3', '\x2', 
		'\x2', '\x2', '\x1311', '\x1312', '\x3', '\x2', '\x2', '\x2', '\x1312', 
		'\x1313', '\x3', '\x2', '\x2', '\x2', '\x1313', '\x1315', '\t', '.', '\x2', 
		'\x2', '\x1314', '\x1311', '\x3', '\x2', '\x2', '\x2', '\x1314', '\x1315', 
		'\x3', '\x2', '\x2', '\x2', '\x1315', '\x1316', '\x3', '\x2', '\x2', '\x2', 
		'\x1316', '\x1318', '\x5', '\x200', '\x101', '\x2', '\x1317', '\x130D', 
		'\x3', '\x2', '\x2', '\x2', '\x1317', '\x130E', '\x3', '\x2', '\x2', '\x2', 
		'\x1317', '\x1314', '\x3', '\x2', '\x2', '\x2', '\x1318', '\x1BB', '\x3', 
		'\x2', '\x2', '\x2', '\x1319', '\x131A', '\a', '\x17', '\x2', '\x2', '\x131A', 
		'\x1327', '\a', '\x85', '\x2', '\x2', '\x131B', '\x1327', '\a', '\x296', 
		'\x2', '\x2', '\x131C', '\x1327', '\a', '$', '\x2', '\x2', '\x131D', '\x1327', 
		'\a', '\x83', '\x2', '\x2', '\x131E', '\x131F', '\a', '\x151', '\x2', 
		'\x2', '\x131F', '\x1327', '\a', '\x1FB', '\x2', '\x2', '\x1320', '\x1321', 
		'\a', 'q', '\x2', '\x2', '\x1321', '\x1327', '\a', '\x1FB', '\x2', '\x2', 
		'\x1322', '\x1324', '\t', '.', '\x2', '\x2', '\x1323', '\x1322', '\x3', 
		'\x2', '\x2', '\x2', '\x1323', '\x1324', '\x3', '\x2', '\x2', '\x2', '\x1324', 
		'\x1325', '\x3', '\x2', '\x2', '\x2', '\x1325', '\x1327', '\t', 'G', '\x2', 
		'\x2', '\x1326', '\x1319', '\x3', '\x2', '\x2', '\x2', '\x1326', '\x131B', 
		'\x3', '\x2', '\x2', '\x2', '\x1326', '\x131C', '\x3', '\x2', '\x2', '\x2', 
		'\x1326', '\x131D', '\x3', '\x2', '\x2', '\x2', '\x1326', '\x131E', '\x3', 
		'\x2', '\x2', '\x2', '\x1326', '\x1320', '\x3', '\x2', '\x2', '\x2', '\x1326', 
		'\x1323', '\x3', '\x2', '\x2', '\x2', '\x1327', '\x1BD', '\x3', '\x2', 
		'\x2', '\x2', '\x1328', '\x1329', '\a', 'U', '\x2', '\x2', '\x1329', '\x132D', 
		'\a', '\x3C2', '\x2', '\x2', '\x132A', '\x132B', '\a', '\xA5', '\x2', 
		'\x2', '\x132B', '\x132D', '\x5', '\x24C', '\x127', '\x2', '\x132C', '\x1328', 
		'\x3', '\x2', '\x2', '\x2', '\x132C', '\x132A', '\x3', '\x2', '\x2', '\x2', 
		'\x132D', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x132E', '\x1330', '\a', 
		'\x1FD', '\x2', '\x2', '\x132F', '\x132E', '\x3', '\x2', '\x2', '\x2', 
		'\x132F', '\x1330', '\x3', '\x2', '\x2', '\x2', '\x1330', '\x1331', '\x3', 
		'\x2', '\x2', '\x2', '\x1331', '\x1340', '\a', '\x138', '\x2', '\x2', 
		'\x1332', '\x1333', '\a', '\x175', '\x2', '\x2', '\x1333', '\x1340', '\a', 
		'\x1FB', '\x2', '\x2', '\x1334', '\x1340', '\a', '\x1B6', '\x2', '\x2', 
		'\x1335', '\x1340', '\a', '\x238', '\x2', '\x2', '\x1336', '\x1338', '\a', 
		'\x150', '\x2', '\x2', '\x1337', '\x1336', '\x3', '\x2', '\x2', '\x2', 
		'\x1337', '\x1338', '\x3', '\x2', '\x2', '\x2', '\x1338', '\x1339', '\x3', 
		'\x2', '\x2', '\x2', '\x1339', '\x1340', '\a', '\x1BC', '\x2', '\x2', 
		'\x133A', '\x1340', '\a', '\x1BE', '\x2', '\x2', '\x133B', '\x133C', '\a', 
		'\x1E7', '\x2', '\x2', '\x133C', '\x1340', '\a', '\x15A', '\x2', '\x2', 
		'\x133D', '\x1340', '\a', '\xFD', '\x2', '\x2', '\x133E', '\x1340', '\a', 
		'\x121', '\x2', '\x2', '\x133F', '\x132F', '\x3', '\x2', '\x2', '\x2', 
		'\x133F', '\x1332', '\x3', '\x2', '\x2', '\x2', '\x133F', '\x1334', '\x3', 
		'\x2', '\x2', '\x2', '\x133F', '\x1335', '\x3', '\x2', '\x2', '\x2', '\x133F', 
		'\x1337', '\x3', '\x2', '\x2', '\x2', '\x133F', '\x133A', '\x3', '\x2', 
		'\x2', '\x2', '\x133F', '\x133B', '\x3', '\x2', '\x2', '\x2', '\x133F', 
		'\x133D', '\x3', '\x2', '\x2', '\x2', '\x133F', '\x133E', '\x3', '\x2', 
		'\x2', '\x2', '\x1340', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1341', 
		'\x134A', '\a', '\x13E', '\x2', '\x2', '\x1342', '\x1343', '\a', '\x93', 
		'\x2', '\x2', '\x1343', '\x134A', '\a', '\x1FB', '\x2', '\x2', '\x1344', 
		'\x1346', '\a', '\x150', '\x2', '\x2', '\x1345', '\x1344', '\x3', '\x2', 
		'\x2', '\x2', '\x1345', '\x1346', '\x3', '\x2', '\x2', '\x2', '\x1346', 
		'\x1347', '\x3', '\x2', '\x2', '\x2', '\x1347', '\x134A', '\a', '\x230', 
		'\x2', '\x2', '\x1348', '\x134A', '\a', '\x20B', '\x2', '\x2', '\x1349', 
		'\x1341', '\x3', '\x2', '\x2', '\x2', '\x1349', '\x1342', '\x3', '\x2', 
		'\x2', '\x2', '\x1349', '\x1345', '\x3', '\x2', '\x2', '\x2', '\x1349', 
		'\x1348', '\x3', '\x2', '\x2', '\x2', '\x134A', '\x1C3', '\x3', '\x2', 
		'\x2', '\x2', '\x134B', '\x1358', '\a', '\b', '\x2', '\x2', '\x134C', 
		'\x134D', '\a', '\x105', '\x2', '\x2', '\x134D', '\x1358', '\a', '\x165', 
		'\x2', '\x2', '\x134E', '\x134F', '\a', '\x120', '\x2', '\x2', '\x134F', 
		'\x1358', '\a', '\x204', '\x2', '\x2', '\x1350', '\x1358', '\a', '\x123', 
		'\x2', '\x2', '\x1351', '\x1358', '\a', '\x167', '\x2', '\x2', '\x1352', 
		'\x1358', '\a', '\x266', '\x2', '\x2', '\x1353', '\x1354', '\a', '\x1AD', 
		'\x2', '\x2', '\x1354', '\x1358', '\a', '\x147', '\x2', '\x2', '\x1355', 
		'\x1358', '\a', '\x1EE', '\x2', '\x2', '\x1356', '\x1358', '\a', '\x203', 
		'\x2', '\x2', '\x1357', '\x134B', '\x3', '\x2', '\x2', '\x2', '\x1357', 
		'\x134C', '\x3', '\x2', '\x2', '\x2', '\x1357', '\x134E', '\x3', '\x2', 
		'\x2', '\x2', '\x1357', '\x1350', '\x3', '\x2', '\x2', '\x2', '\x1357', 
		'\x1351', '\x3', '\x2', '\x2', '\x2', '\x1357', '\x1352', '\x3', '\x2', 
		'\x2', '\x2', '\x1357', '\x1353', '\x3', '\x2', '\x2', '\x2', '\x1357', 
		'\x1355', '\x3', '\x2', '\x2', '\x2', '\x1357', '\x1356', '\x3', '\x2', 
		'\x2', '\x2', '\x1358', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1359', 
		'\x135A', '\a', '\x103', '\x2', '\x2', '\x135A', '\x135B', '\a', '\x3C2', 
		'\x2', '\x2', '\x135B', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x135C', 
		'\x135D', '\a', '\x109', '\x2', '\x2', '\x135D', '\x135E', '\a', '\x45', 
		'\x2', '\x2', '\x135E', '\x1363', '\x5', '\x1D4', '\xEB', '\x2', '\x135F', 
		'\x1360', '\a', '\x3B5', '\x2', '\x2', '\x1360', '\x1362', '\x5', '\x1D4', 
		'\xEB', '\x2', '\x1361', '\x135F', '\x3', '\x2', '\x2', '\x2', '\x1362', 
		'\x1365', '\x3', '\x2', '\x2', '\x2', '\x1363', '\x1361', '\x3', '\x2', 
		'\x2', '\x2', '\x1363', '\x1364', '\x3', '\x2', '\x2', '\x2', '\x1364', 
		'\x136D', '\x3', '\x2', '\x2', '\x2', '\x1365', '\x1363', '\x3', '\x2', 
		'\x2', '\x2', '\x1366', '\x1367', '\a', 'o', '\x2', '\x2', '\x1367', '\x136A', 
		'\a', '\x3B3', '\x2', '\x2', '\x1368', '\x136B', '\x5', '\x21E', '\x110', 
		'\x2', '\x1369', '\x136B', '\a', '\b', '\x2', '\x2', '\x136A', '\x1368', 
		'\x3', '\x2', '\x2', '\x2', '\x136A', '\x1369', '\x3', '\x2', '\x2', '\x2', 
		'\x136B', '\x136C', '\x3', '\x2', '\x2', '\x2', '\x136C', '\x136E', '\a', 
		'\x3B4', '\x2', '\x2', '\x136D', '\x1366', '\x3', '\x2', '\x2', '\x2', 
		'\x136D', '\x136E', '\x3', '\x2', '\x2', '\x2', '\x136E', '\x136F', '\x3', 
		'\x2', '\x2', '\x2', '\x136F', '\x1370', '\a', '\x44', '\x2', '\x2', '\x1370', 
		'\x1371', '\x5', '\x200', '\x101', '\x2', '\x1371', '\x1C9', '\x3', '\x2', 
		'\x2', '\x2', '\x1372', '\x1374', '\a', '\x14D', '\x2', '\x2', '\x1373', 
		'\x1375', '\t', '=', '\x2', '\x2', '\x1374', '\x1373', '\x3', '\x2', '\x2', 
		'\x2', '\x1374', '\x1375', '\x3', '\x2', '\x2', '\x2', '\x1375', '\x1376', 
		'\x3', '\x2', '\x2', '\x2', '\x1376', '\x137B', '\x5', '\x1D6', '\xEC', 
		'\x2', '\x1377', '\x1378', '\a', '\x3B5', '\x2', '\x2', '\x1378', '\x137A', 
		'\x5', '\x1D6', '\xEC', '\x2', '\x1379', '\x1377', '\x3', '\x2', '\x2', 
		'\x2', '\x137A', '\x137D', '\x3', '\x2', '\x2', '\x2', '\x137B', '\x1379', 
		'\x3', '\x2', '\x2', '\x2', '\x137B', '\x137C', '\x3', '\x2', '\x2', '\x2', 
		'\x137C', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x137D', '\x137B', '\x3', 
		'\x2', '\x2', '\x2', '\x137E', '\x1380', '\a', 'Q', '\x2', '\x2', '\x137F', 
		'\x1381', '\t', 'H', '\x2', '\x2', '\x1380', '\x137F', '\x3', '\x2', '\x2', 
		'\x2', '\x1380', '\x1381', '\x3', '\x2', '\x2', '\x2', '\x1381', '\x1383', 
		'\x3', '\x2', '\x2', '\x2', '\x1382', '\x1384', '\x5', '\x206', '\x104', 
		'\x2', '\x1383', '\x1382', '\x3', '\x2', '\x2', '\x2', '\x1384', '\x1385', 
		'\x3', '\x2', '\x2', '\x2', '\x1385', '\x1383', '\x3', '\x2', '\x2', '\x2', 
		'\x1385', '\x1386', '\x3', '\x2', '\x2', '\x2', '\x1386', '\x1CD', '\x3', 
		'\x2', '\x2', '\x2', '\x1387', '\x1388', '\a', 'Y', '\x2', '\x2', '\x1388', 
		'\x1389', '\a', '\x45', '\x2', '\x2', '\x1389', '\x138A', '\a', 'K', '\x2', 
		'\x2', '\x138A', '\x138B', '\a', '\x109', '\x2', '\x2', '\x138B', '\x1390', 
		'\x5', '\x1DA', '\xEE', '\x2', '\x138C', '\x138D', '\a', '\x3B5', '\x2', 
		'\x2', '\x138D', '\x138F', '\x5', '\x1DA', '\xEE', '\x2', '\x138E', '\x138C', 
		'\x3', '\x2', '\x2', '\x2', '\x138F', '\x1392', '\x3', '\x2', '\x2', '\x2', 
		'\x1390', '\x138E', '\x3', '\x2', '\x2', '\x2', '\x1390', '\x1391', '\x3', 
		'\x2', '\x2', '\x2', '\x1391', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1392', 
		'\x1390', '\x3', '\x2', '\x2', '\x2', '\x1393', '\x1394', '\a', '\x1D5', 
		'\x2', '\x2', '\x1394', '\x1395', '\a', '\x1C0', '\x2', '\x2', '\x1395', 
		'\x1396', '\a', '\x109', '\x2', '\x2', '\x1396', '\x1D1', '\x3', '\x2', 
		'\x2', '\x2', '\x1397', '\x1398', '\a', '\x236', '\x2', '\x2', '\x1398', 
		'\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1399', '\x13A1', '\x5', '\x1E8', 
		'\xF5', '\x2', '\x139A', '\x139C', '\t', '\x13', '\x2', '\x2', '\x139B', 
		'\x139A', '\x3', '\x2', '\x2', '\x2', '\x139B', '\x139C', '\x3', '\x2', 
		'\x2', '\x2', '\x139C', '\x139D', '\x3', '\x2', '\x2', '\x2', '\x139D', 
		'\x139E', '\a', '\x3B3', '\x2', '\x2', '\x139E', '\x139F', '\x5', '\x21E', 
		'\x110', '\x2', '\x139F', '\x13A0', '\a', '\x3B4', '\x2', '\x2', '\x13A0', 
		'\x13A2', '\x3', '\x2', '\x2', '\x2', '\x13A1', '\x139B', '\x3', '\x2', 
		'\x2', '\x2', '\x13A1', '\x13A2', '\x3', '\x2', '\x2', '\x2', '\x13A2', 
		'\x1D5', '\x3', '\x2', '\x2', '\x2', '\x13A3', '\x13B6', '\a', '\x12A', 
		'\x2', '\x2', '\x13A4', '\x13B6', '\a', '\x15A', '\x2', '\x2', '\x13A5', 
		'\x13A7', '\t', 'I', '\x2', '\x2', '\x13A6', '\x13A5', '\x3', '\x2', '\x2', 
		'\x2', '\x13A6', '\x13A7', '\x3', '\x2', '\x2', '\x2', '\x13A7', '\x13A8', 
		'\x3', '\x2', '\x2', '\x2', '\x13A8', '\x13B6', '\a', '\x174', '\x2', 
		'\x2', '\x13A9', '\x13B6', '\a', '\x1A9', '\x2', '\x2', '\x13AA', '\x13B6', 
		'\a', '\x238', '\x2', '\x2', '\x13AB', '\x13AC', '\a', '\x1C0', '\x2', 
		'\x2', '\x13AC', '\x13B6', '\a', '\x109', '\x2', '\x2', '\x13AD', '\x13B6', 
		'\a', '\x1FB', '\x2', '\x2', '\x13AE', '\x13B6', '\a', '\x216', '\x2', 
		'\x2', '\x13AF', '\x13B3', '\a', '\x230', '\x2', '\x2', '\x13B0', '\x13B1', 
		'\a', '\xA7', '\x2', '\x2', '\x13B1', '\x13B2', '\a', 't', '\x2', '\x2', 
		'\x13B2', '\x13B4', '\a', 'Z', '\x2', '\x2', '\x13B3', '\x13B0', '\x3', 
		'\x2', '\x2', '\x2', '\x13B3', '\x13B4', '\x3', '\x2', '\x2', '\x2', '\x13B4', 
		'\x13B6', '\x3', '\x2', '\x2', '\x2', '\x13B5', '\x13A3', '\x3', '\x2', 
		'\x2', '\x2', '\x13B5', '\x13A4', '\x3', '\x2', '\x2', '\x2', '\x13B5', 
		'\x13A6', '\x3', '\x2', '\x2', '\x2', '\x13B5', '\x13A9', '\x3', '\x2', 
		'\x2', '\x2', '\x13B5', '\x13AA', '\x3', '\x2', '\x2', '\x2', '\x13B5', 
		'\x13AB', '\x3', '\x2', '\x2', '\x2', '\x13B5', '\x13AD', '\x3', '\x2', 
		'\x2', '\x2', '\x13B5', '\x13AE', '\x3', '\x2', '\x2', '\x2', '\x13B5', 
		'\x13AF', '\x3', '\x2', '\x2', '\x2', '\x13B6', '\x13C2', '\x3', '\x2', 
		'\x2', '\x2', '\x13B7', '\x13B8', '\a', '\x1C6', '\x2', '\x2', '\x13B8', 
		'\x13BA', '\a', '\x174', '\x2', '\x2', '\x13B9', '\x13BB', '\x5', '\x138', 
		'\x9D', '\x2', '\x13BA', '\x13B9', '\x3', '\x2', '\x2', '\x2', '\x13BA', 
		'\x13BB', '\x3', '\x2', '\x2', '\x2', '\x13BB', '\x13C2', '\x3', '\x2', 
		'\x2', '\x2', '\x13BC', '\x13BD', '\a', '\x230', '\x2', '\x2', '\x13BD', 
		'\x13BF', '\x5', '\x220', '\x111', '\x2', '\x13BE', '\x13C0', '\x5', '\x1D8', 
		'\xED', '\x2', '\x13BF', '\x13BE', '\x3', '\x2', '\x2', '\x2', '\x13BF', 
		'\x13C0', '\x3', '\x2', '\x2', '\x2', '\x13C0', '\x13C2', '\x3', '\x2', 
		'\x2', '\x2', '\x13C1', '\x13B5', '\x3', '\x2', '\x2', '\x2', '\x13C1', 
		'\x13B7', '\x3', '\x2', '\x2', '\x2', '\x13C1', '\x13BC', '\x3', '\x2', 
		'\x2', '\x2', '\x13C2', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x13C3', 
		'\x13C4', '\a', '\xA7', '\x2', '\x2', '\x13C4', '\x13C5', '\a', 't', '\x2', 
		'\x2', '\x13C5', '\x13C9', '\a', 'Z', '\x2', '\x2', '\x13C6', '\x13C7', 
		'\a', '\x39', '\x2', '\x2', '\x13C7', '\x13C9', '\a', '\x143', '\x2', 
		'\x2', '\x13C8', '\x13C3', '\x3', '\x2', '\x2', '\x2', '\x13C8', '\x13C6', 
		'\x3', '\x2', '\x2', '\x2', '\x13C9', '\x1D9', '\x3', '\x2', '\x2', '\x2', 
		'\x13CA', '\x13D2', '\x5', '\x1E8', '\xF5', '\x2', '\x13CB', '\x13CC', 
		'\a', 'o', '\x2', '\x2', '\x13CC', '\x13CF', '\a', '\x3B3', '\x2', '\x2', 
		'\x13CD', '\x13D0', '\x5', '\x21E', '\x110', '\x2', '\x13CE', '\x13D0', 
		'\a', '\b', '\x2', '\x2', '\x13CF', '\x13CD', '\x3', '\x2', '\x2', '\x2', 
		'\x13CF', '\x13CE', '\x3', '\x2', '\x2', '\x2', '\x13D0', '\x13D1', '\x3', 
		'\x2', '\x2', '\x2', '\x13D1', '\x13D3', '\a', '\x3B4', '\x2', '\x2', 
		'\x13D2', '\x13CB', '\x3', '\x2', '\x2', '\x2', '\x13D2', '\x13D3', '\x3', 
		'\x2', '\x2', '\x2', '\x13D3', '\x13DB', '\x3', '\x2', '\x2', '\x2', '\x13D4', 
		'\x13D6', '\t', '\x13', '\x2', '\x2', '\x13D5', '\x13D4', '\x3', '\x2', 
		'\x2', '\x2', '\x13D5', '\x13D6', '\x3', '\x2', '\x2', '\x2', '\x13D6', 
		'\x13D7', '\x3', '\x2', '\x2', '\x2', '\x13D7', '\x13D8', '\a', '\x3B3', 
		'\x2', '\x2', '\x13D8', '\x13D9', '\x5', '\x21E', '\x110', '\x2', '\x13D9', 
		'\x13DA', '\a', '\x3B4', '\x2', '\x2', '\x13DA', '\x13DC', '\x3', '\x2', 
		'\x2', '\x2', '\x13DB', '\x13D5', '\x3', '\x2', '\x2', '\x2', '\x13DB', 
		'\x13DC', '\x3', '\x2', '\x2', '\x2', '\x13DC', '\x13DF', '\x3', '\x2', 
		'\x2', '\x2', '\x13DD', '\x13DE', '\a', '\x43', '\x2', '\x2', '\x13DE', 
		'\x13E0', '\a', '\x16E', '\x2', '\x2', '\x13DF', '\x13DD', '\x3', '\x2', 
		'\x2', '\x2', '\x13DF', '\x13E0', '\x3', '\x2', '\x2', '\x2', '\x13E0', 
		'\x1DB', '\x3', '\x2', '\x2', '\x2', '\x13E1', '\x13E2', '\t', 'J', '\x2', 
		'\x2', '\x13E2', '\x13E5', '\x5', '\x1E8', '\xF5', '\x2', '\x13E3', '\x13E6', 
		'\x5', '\x200', '\x101', '\x2', '\x13E4', '\x13E6', '\a', '\x3C2', '\x2', 
		'\x2', '\x13E5', '\x13E3', '\x3', '\x2', '\x2', '\x2', '\x13E5', '\x13E4', 
		'\x3', '\x2', '\x2', '\x2', '\x13E5', '\x13E6', '\x3', '\x2', '\x2', '\x2', 
		'\x13E6', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x13E7', '\x13EB', '\t', 
		'J', '\x2', '\x2', '\x13E8', '\x13E9', '\t', 'K', '\x2', '\x2', '\x13E9', 
		'\x13EA', '\a', '\x3AA', '\x2', '\x2', '\x13EA', '\x13EC', '\t', 'L', 
		'\x2', '\x2', '\x13EB', '\x13E8', '\x3', '\x2', '\x2', '\x2', '\x13EB', 
		'\x13EC', '\x3', '\x2', '\x2', '\x2', '\x13EC', '\x13ED', '\x3', '\x2', 
		'\x2', '\x2', '\x13ED', '\x13EE', '\x5', '\x1E4', '\xF3', '\x2', '\x13EE', 
		'\x1DF', '\x3', '\x2', '\x2', '\x2', '\x13EF', '\x13F0', '\a', '\x158', 
		'\x2', '\x2', '\x13F0', '\x13F1', '\a', '\x3C2', '\x2', '\x2', '\x13F1', 
		'\x1E1', '\x3', '\x2', '\x2', '\x2', '\x13F2', '\x13F3', '\a', '\xA1', 
		'\x2', '\x2', '\x13F3', '\x13F4', '\x5', '\x200', '\x101', '\x2', '\x13F4', 
		'\x1E3', '\x3', '\x2', '\x2', '\x2', '\x13F5', '\x13FB', '\x5', '\xB4', 
		'[', '\x2', '\x13F6', '\x13FB', '\x5', '\xA6', 'T', '\x2', '\x13F7', '\x13FB', 
		'\x5', '\xAC', 'W', '\x2', '\x13F8', '\x13FB', '\x5', '\xB2', 'Z', '\x2', 
		'\x13F9', '\x13FB', '\x5', '\xB6', '\\', '\x2', '\x13FA', '\x13F5', '\x3', 
		'\x2', '\x2', '\x2', '\x13FA', '\x13F6', '\x3', '\x2', '\x2', '\x2', '\x13FA', 
		'\x13F7', '\x3', '\x2', '\x2', '\x2', '\x13FA', '\x13F8', '\x3', '\x2', 
		'\x2', '\x2', '\x13FA', '\x13F9', '\x3', '\x2', '\x2', '\x2', '\x13FB', 
		'\x1400', '\x3', '\x2', '\x2', '\x2', '\x13FC', '\x13FD', '\a', '\x39', 
		'\x2', '\x2', '\x13FD', '\x13FE', '\a', '\x11D', '\x2', '\x2', '\x13FE', 
		'\x1400', '\x5', '\x200', '\x101', '\x2', '\x13FF', '\x13FA', '\x3', '\x2', 
		'\x2', '\x2', '\x13FF', '\x13FC', '\x3', '\x2', '\x2', '\x2', '\x1400', 
		'\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1401', '\x1405', '\x5', '\x200', 
		'\x101', '\x2', '\x1402', '\x1406', '\a', '\x3C9', '\x2', '\x2', '\x1403', 
		'\x1404', '\a', '\x3B2', '\x2', '\x2', '\x1404', '\x1406', '\x5', '\x200', 
		'\x101', '\x2', '\x1405', '\x1402', '\x3', '\x2', '\x2', '\x2', '\x1405', 
		'\x1403', '\x3', '\x2', '\x2', '\x2', '\x1405', '\x1406', '\x3', '\x2', 
		'\x2', '\x2', '\x1406', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1407', 
		'\x1408', '\x5', '\x1E6', '\xF4', '\x2', '\x1408', '\x1E9', '\x3', '\x2', 
		'\x2', '\x2', '\x1409', '\x140E', '\x5', '\x200', '\x101', '\x2', '\x140A', 
		'\x140C', '\x5', '\x204', '\x103', '\x2', '\x140B', '\x140D', '\x5', '\x204', 
		'\x103', '\x2', '\x140C', '\x140B', '\x3', '\x2', '\x2', '\x2', '\x140C', 
		'\x140D', '\x3', '\x2', '\x2', '\x2', '\x140D', '\x140F', '\x3', '\x2', 
		'\x2', '\x2', '\x140E', '\x140A', '\x3', '\x2', '\x2', '\x2', '\x140E', 
		'\x140F', '\x3', '\x2', '\x2', '\x2', '\x140F', '\x1EB', '\x3', '\x2', 
		'\x2', '\x2', '\x1410', '\x1415', '\x5', '\x200', '\x101', '\x2', '\x1411', 
		'\x1412', '\a', '\x3B3', '\x2', '\x2', '\x1412', '\x1413', '\x5', '\x206', 
		'\x104', '\x2', '\x1413', '\x1414', '\a', '\x3B4', '\x2', '\x2', '\x1414', 
		'\x1416', '\x3', '\x2', '\x2', '\x2', '\x1415', '\x1411', '\x3', '\x2', 
		'\x2', '\x2', '\x1415', '\x1416', '\x3', '\x2', '\x2', '\x2', '\x1416', 
		'\x1418', '\x3', '\x2', '\x2', '\x2', '\x1417', '\x1419', '\t', '(', '\x2', 
		'\x2', '\x1418', '\x1417', '\x3', '\x2', '\x2', '\x2', '\x1418', '\x1419', 
		'\x3', '\x2', '\x2', '\x2', '\x1419', '\x1ED', '\x3', '\x2', '\x2', '\x2', 
		'\x141A', '\x141B', '\t', 'M', '\x2', '\x2', '\x141B', '\x1EF', '\x3', 
		'\x2', '\x2', '\x2', '\x141C', '\x141D', '\t', 'N', '\x2', '\x2', '\x141D', 
		'\x1F1', '\x3', '\x2', '\x2', '\x2', '\x141E', '\x1423', '\a', '\xBD', 
		'\x2', '\x2', '\x141F', '\x1423', '\x5', '\x25C', '\x12F', '\x2', '\x1420', 
		'\x1423', '\a', '\x3C2', '\x2', '\x2', '\x1421', '\x1423', '\a', '\x3BF', 
		'\x2', '\x2', '\x1422', '\x141E', '\x3', '\x2', '\x2', '\x2', '\x1422', 
		'\x141F', '\x3', '\x2', '\x2', '\x2', '\x1422', '\x1420', '\x3', '\x2', 
		'\x2', '\x2', '\x1422', '\x1421', '\x3', '\x2', '\x2', '\x2', '\x1423', 
		'\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1424', '\x1427', '\x5', '\x200', 
		'\x101', '\x2', '\x1425', '\x1427', '\a', '\x3C2', '\x2', '\x2', '\x1426', 
		'\x1424', '\x3', '\x2', '\x2', '\x2', '\x1426', '\x1425', '\x3', '\x2', 
		'\x2', '\x2', '\x1427', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1428', 
		'\x1429', '\t', 'O', '\x2', '\x2', '\x1429', '\x1F7', '\x3', '\x2', '\x2', 
		'\x2', '\x142A', '\x142B', '\x5', '\x206', '\x104', '\x2', '\x142B', '\x142C', 
		'\a', '\x3A7', '\x2', '\x2', '\x142C', '\x142D', '\x5', '\x206', '\x104', 
		'\x2', '\x142D', '\x142E', '\a', '\x3A7', '\x2', '\x2', '\x142E', '\x142F', 
		'\x5', '\x206', '\x104', '\x2', '\x142F', '\x1430', '\a', '\x3A7', '\x2', 
		'\x2', '\x1430', '\x1431', '\x5', '\x206', '\x104', '\x2', '\x1431', '\x1432', 
		'\a', '\x3A7', '\x2', '\x2', '\x1432', '\x1438', '\x5', '\x206', '\x104', 
		'\x2', '\x1433', '\x1434', '\a', '\x3BE', '\x2', '\x2', '\x1434', '\x1435', 
		'\x5', '\x206', '\x104', '\x2', '\x1435', '\x1436', '\a', '\x3A7', '\x2', 
		'\x2', '\x1436', '\x1437', '\x5', '\x206', '\x104', '\x2', '\x1437', '\x1439', 
		'\x3', '\x2', '\x2', '\x2', '\x1438', '\x1433', '\x3', '\x2', '\x2', '\x2', 
		'\x1439', '\x143A', '\x3', '\x2', '\x2', '\x2', '\x143A', '\x1438', '\x3', 
		'\x2', '\x2', '\x2', '\x143A', '\x143B', '\x3', '\x2', '\x2', '\x2', '\x143B', 
		'\x1F9', '\x3', '\x2', '\x2', '\x2', '\x143C', '\x1443', '\x5', '\x1FC', 
		'\xFF', '\x2', '\x143D', '\x143E', '\a', '\x3B5', '\x2', '\x2', '\x143E', 
		'\x1441', '\x5', '\x1FC', '\xFF', '\x2', '\x143F', '\x1440', '\a', '\x3B5', 
		'\x2', '\x2', '\x1440', '\x1442', '\x5', '\x206', '\x104', '\x2', '\x1441', 
		'\x143F', '\x3', '\x2', '\x2', '\x2', '\x1441', '\x1442', '\x3', '\x2', 
		'\x2', '\x2', '\x1442', '\x1444', '\x3', '\x2', '\x2', '\x2', '\x1443', 
		'\x143D', '\x3', '\x2', '\x2', '\x2', '\x1443', '\x1444', '\x3', '\x2', 
		'\x2', '\x2', '\x1444', '\x1FB', '\x3', '\x2', '\x2', '\x2', '\x1445', 
		'\x144D', '\a', '\x3C2', '\x2', '\x2', '\x1446', '\x144D', '\a', '\x3C7', 
		'\x2', '\x2', '\x1447', '\x1449', '\a', '\x3C4', '\x2', '\x2', '\x1448', 
		'\x1447', '\x3', '\x2', '\x2', '\x2', '\x1449', '\x144A', '\x3', '\x2', 
		'\x2', '\x2', '\x144A', '\x1448', '\x3', '\x2', '\x2', '\x2', '\x144A', 
		'\x144B', '\x3', '\x2', '\x2', '\x2', '\x144B', '\x144D', '\x3', '\x2', 
		'\x2', '\x2', '\x144C', '\x1445', '\x3', '\x2', '\x2', '\x2', '\x144C', 
		'\x1446', '\x3', '\x2', '\x2', '\x2', '\x144C', '\x1448', '\x3', '\x2', 
		'\x2', '\x2', '\x144D', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x144E', 
		'\x1451', '\x5', '\x200', '\x101', '\x2', '\x144F', '\x1451', '\a', '\x3C2', 
		'\x2', '\x2', '\x1450', '\x144E', '\x3', '\x2', '\x2', '\x2', '\x1450', 
		'\x144F', '\x3', '\x2', '\x2', '\x2', '\x1451', '\x1FF', '\x3', '\x2', 
		'\x2', '\x2', '\x1452', '\x1456', '\x5', '\x202', '\x102', '\x2', '\x1453', 
		'\x1456', '\a', '\x3CB', '\x2', '\x2', '\x1454', '\x1456', '\a', '\x3BF', 
		'\x2', '\x2', '\x1455', '\x1452', '\x3', '\x2', '\x2', '\x2', '\x1455', 
		'\x1453', '\x3', '\x2', '\x2', '\x2', '\x1455', '\x1454', '\x3', '\x2', 
		'\x2', '\x2', '\x1456', '\x201', '\x3', '\x2', '\x2', '\x2', '\x1457', 
		'\x1461', '\a', '\x3CA', '\x2', '\x2', '\x1458', '\x1461', '\x5', '\x25C', 
		'\x12F', '\x2', '\x1459', '\x1461', '\x5', '\x25E', '\x130', '\x2', '\x145A', 
		'\x1461', '\x5', '\x1F6', '\xFC', '\x2', '\x145B', '\x1461', '\x5', '\x260', 
		'\x131', '\x2', '\x145C', '\x1461', '\x5', '\x262', '\x132', '\x2', '\x145D', 
		'\x1461', '\x5', '\x264', '\x133', '\x2', '\x145E', '\x1461', '\x5', '\x266', 
		'\x134', '\x2', '\x145F', '\x1461', '\x5', '\x268', '\x135', '\x2', '\x1460', 
		'\x1457', '\x3', '\x2', '\x2', '\x2', '\x1460', '\x1458', '\x3', '\x2', 
		'\x2', '\x2', '\x1460', '\x1459', '\x3', '\x2', '\x2', '\x2', '\x1460', 
		'\x145A', '\x3', '\x2', '\x2', '\x2', '\x1460', '\x145B', '\x3', '\x2', 
		'\x2', '\x2', '\x1460', '\x145C', '\x3', '\x2', '\x2', '\x2', '\x1460', 
		'\x145D', '\x3', '\x2', '\x2', '\x2', '\x1460', '\x145E', '\x3', '\x2', 
		'\x2', '\x2', '\x1460', '\x145F', '\x3', '\x2', '\x2', '\x2', '\x1461', 
		'\x203', '\x3', '\x2', '\x2', '\x2', '\x1462', '\x1466', '\a', '\x3C9', 
		'\x2', '\x2', '\x1463', '\x1464', '\a', '\x3B2', '\x2', '\x2', '\x1464', 
		'\x1466', '\x5', '\x200', '\x101', '\x2', '\x1465', '\x1462', '\x3', '\x2', 
		'\x2', '\x2', '\x1465', '\x1463', '\x3', '\x2', '\x2', '\x2', '\x1466', 
		'\x205', '\x3', '\x2', '\x2', '\x2', '\x1467', '\x1468', '\t', 'P', '\x2', 
		'\x2', '\x1468', '\x207', '\x3', '\x2', '\x2', '\x2', '\x1469', '\x146C', 
		'\a', '\x3C0', '\x2', '\x2', '\x146A', '\x146C', '\x5', '\x206', '\x104', 
		'\x2', '\x146B', '\x1469', '\x3', '\x2', '\x2', '\x2', '\x146B', '\x146A', 
		'\x3', '\x2', '\x2', '\x2', '\x146C', '\x209', '\x3', '\x2', '\x2', '\x2', 
		'\x146D', '\x146F', '\a', '\x3C8', '\x2', '\x2', '\x146E', '\x146D', '\x3', 
		'\x2', '\x2', '\x2', '\x146E', '\x146F', '\x3', '\x2', '\x2', '\x2', '\x146F', 
		'\x1470', '\x3', '\x2', '\x2', '\x2', '\x1470', '\x1473', '\a', '\x3C2', 
		'\x2', '\x2', '\x1471', '\x1473', '\a', '\x3C1', '\x2', '\x2', '\x1472', 
		'\x146E', '\x3', '\x2', '\x2', '\x2', '\x1472', '\x1471', '\x3', '\x2', 
		'\x2', '\x2', '\x1473', '\x1475', '\x3', '\x2', '\x2', '\x2', '\x1474', 
		'\x1476', '\a', '\x3C2', '\x2', '\x2', '\x1475', '\x1474', '\x3', '\x2', 
		'\x2', '\x2', '\x1476', '\x1477', '\x3', '\x2', '\x2', '\x2', '\x1477', 
		'\x1475', '\x3', '\x2', '\x2', '\x2', '\x1477', '\x1478', '\x3', '\x2', 
		'\x2', '\x2', '\x1478', '\x1485', '\x3', '\x2', '\x2', '\x2', '\x1479', 
		'\x147B', '\a', '\x3C8', '\x2', '\x2', '\x147A', '\x1479', '\x3', '\x2', 
		'\x2', '\x2', '\x147A', '\x147B', '\x3', '\x2', '\x2', '\x2', '\x147B', 
		'\x147C', '\x3', '\x2', '\x2', '\x2', '\x147C', '\x147F', '\a', '\x3C2', 
		'\x2', '\x2', '\x147D', '\x147F', '\a', '\x3C1', '\x2', '\x2', '\x147E', 
		'\x147A', '\x3', '\x2', '\x2', '\x2', '\x147E', '\x147D', '\x3', '\x2', 
		'\x2', '\x2', '\x147F', '\x1482', '\x3', '\x2', '\x2', '\x2', '\x1480', 
		'\x1481', '\a', '\x19', '\x2', '\x2', '\x1481', '\x1483', '\x5', '\x1F4', 
		'\xFB', '\x2', '\x1482', '\x1480', '\x3', '\x2', '\x2', '\x2', '\x1482', 
		'\x1483', '\x3', '\x2', '\x2', '\x2', '\x1483', '\x1485', '\x3', '\x2', 
		'\x2', '\x2', '\x1484', '\x1472', '\x3', '\x2', '\x2', '\x2', '\x1484', 
		'\x147E', '\x3', '\x2', '\x2', '\x2', '\x1485', '\x20B', '\x3', '\x2', 
		'\x2', '\x2', '\x1486', '\x1487', '\t', 'Q', '\x2', '\x2', '\x1487', '\x20D', 
		'\x3', '\x2', '\x2', '\x2', '\x1488', '\x148A', '\a', '\x3C8', '\x2', 
		'\x2', '\x1489', '\x1488', '\x3', '\x2', '\x2', '\x2', '\x1489', '\x148A', 
		'\x3', '\x2', '\x2', '\x2', '\x148A', '\x148B', '\x3', '\x2', '\x2', '\x2', 
		'\x148B', '\x148C', '\a', '\x3C4', '\x2', '\x2', '\x148C', '\x20F', '\x3', 
		'\x2', '\x2', '\x2', '\x148D', '\x148F', '\a', '\x63', '\x2', '\x2', '\x148E', 
		'\x148D', '\x3', '\x2', '\x2', '\x2', '\x148E', '\x148F', '\x3', '\x2', 
		'\x2', '\x2', '\x148F', '\x1490', '\x3', '\x2', '\x2', '\x2', '\x1490', 
		'\x1491', '\t', 'R', '\x2', '\x2', '\x1491', '\x211', '\x3', '\x2', '\x2', 
		'\x2', '\x1492', '\x149F', '\x5', '\x20A', '\x106', '\x2', '\x1493', '\x149F', 
		'\x5', '\x206', '\x104', '\x2', '\x1494', '\x1495', '\a', '\x3A7', '\x2', 
		'\x2', '\x1495', '\x149F', '\x5', '\x206', '\x104', '\x2', '\x1496', '\x149F', 
		'\x5', '\x20E', '\x108', '\x2', '\x1497', '\x149F', '\x5', '\x20C', '\x107', 
		'\x2', '\x1498', '\x149F', '\a', '\x3C5', '\x2', '\x2', '\x1499', '\x149F', 
		'\a', '\x3C7', '\x2', '\x2', '\x149A', '\x149C', '\a', '\x63', '\x2', 
		'\x2', '\x149B', '\x149A', '\x3', '\x2', '\x2', '\x2', '\x149B', '\x149C', 
		'\x3', '\x2', '\x2', '\x2', '\x149C', '\x149D', '\x3', '\x2', '\x2', '\x2', 
		'\x149D', '\x149F', '\t', 'R', '\x2', '\x2', '\x149E', '\x1492', '\x3', 
		'\x2', '\x2', '\x2', '\x149E', '\x1493', '\x3', '\x2', '\x2', '\x2', '\x149E', 
		'\x1494', '\x3', '\x2', '\x2', '\x2', '\x149E', '\x1496', '\x3', '\x2', 
		'\x2', '\x2', '\x149E', '\x1497', '\x3', '\x2', '\x2', '\x2', '\x149E', 
		'\x1498', '\x3', '\x2', '\x2', '\x2', '\x149E', '\x1499', '\x3', '\x2', 
		'\x2', '\x2', '\x149E', '\x149B', '\x3', '\x2', '\x2', '\x2', '\x149F', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\x14A0', '\x14A2', '\t', 'S', '\x2', 
		'\x2', '\x14A1', '\x14A3', '\x5', '\x218', '\x10D', '\x2', '\x14A2', '\x14A1', 
		'\x3', '\x2', '\x2', '\x2', '\x14A2', '\x14A3', '\x3', '\x2', '\x2', '\x2', 
		'\x14A3', '\x14A5', '\x3', '\x2', '\x2', '\x2', '\x14A4', '\x14A6', '\a', 
		'\xBD', '\x2', '\x2', '\x14A5', '\x14A4', '\x3', '\x2', '\x2', '\x2', 
		'\x14A5', '\x14A6', '\x3', '\x2', '\x2', '\x2', '\x14A6', '\x14AA', '\x3', 
		'\x2', '\x2', '\x2', '\x14A7', '\x14A8', '\a', '\x17', '\x2', '\x2', '\x14A8', 
		'\x14A9', '\a', '\x85', '\x2', '\x2', '\x14A9', '\x14AB', '\x5', '\x1F2', 
		'\xFA', '\x2', '\x14AA', '\x14A7', '\x3', '\x2', '\x2', '\x2', '\x14AA', 
		'\x14AB', '\x3', '\x2', '\x2', '\x2', '\x14AB', '\x14AE', '\x3', '\x2', 
		'\x2', '\x2', '\x14AC', '\x14AD', '\a', '\x19', '\x2', '\x2', '\x14AD', 
		'\x14AF', '\x5', '\x1F4', '\xFB', '\x2', '\x14AE', '\x14AC', '\x3', '\x2', 
		'\x2', '\x2', '\x14AE', '\x14AF', '\x3', '\x2', '\x2', '\x2', '\x14AF', 
		'\x14EC', '\x3', '\x2', '\x2', '\x2', '\x14B0', '\x14B2', '\t', 'T', '\x2', 
		'\x2', '\x14B1', '\x14B3', '\x5', '\x218', '\x10D', '\x2', '\x14B2', '\x14B1', 
		'\x3', '\x2', '\x2', '\x2', '\x14B2', '\x14B3', '\x3', '\x2', '\x2', '\x2', 
		'\x14B3', '\x14B5', '\x3', '\x2', '\x2', '\x2', '\x14B4', '\x14B6', '\a', 
		'\x9E', '\x2', '\x2', '\x14B5', '\x14B4', '\x3', '\x2', '\x2', '\x2', 
		'\x14B5', '\x14B6', '\x3', '\x2', '\x2', '\x2', '\x14B6', '\x14B8', '\x3', 
		'\x2', '\x2', '\x2', '\x14B7', '\x14B9', '\a', '\xAA', '\x2', '\x2', '\x14B8', 
		'\x14B7', '\x3', '\x2', '\x2', '\x2', '\x14B8', '\x14B9', '\x3', '\x2', 
		'\x2', '\x2', '\x14B9', '\x14EC', '\x3', '\x2', '\x2', '\x2', '\x14BA', 
		'\x14BC', '\t', 'U', '\x2', '\x2', '\x14BB', '\x14BD', '\x5', '\x21A', 
		'\x10E', '\x2', '\x14BC', '\x14BB', '\x3', '\x2', '\x2', '\x2', '\x14BC', 
		'\x14BD', '\x3', '\x2', '\x2', '\x2', '\x14BD', '\x14BF', '\x3', '\x2', 
		'\x2', '\x2', '\x14BE', '\x14C0', '\a', '\x9E', '\x2', '\x2', '\x14BF', 
		'\x14BE', '\x3', '\x2', '\x2', '\x2', '\x14BF', '\x14C0', '\x3', '\x2', 
		'\x2', '\x2', '\x14C0', '\x14C2', '\x3', '\x2', '\x2', '\x2', '\x14C1', 
		'\x14C3', '\a', '\xAA', '\x2', '\x2', '\x14C2', '\x14C1', '\x3', '\x2', 
		'\x2', '\x2', '\x14C2', '\x14C3', '\x3', '\x2', '\x2', '\x2', '\x14C3', 
		'\x14EC', '\x3', '\x2', '\x2', '\x2', '\x14C4', '\x14C6', '\t', 'V', '\x2', 
		'\x2', '\x14C5', '\x14C7', '\x5', '\x21C', '\x10F', '\x2', '\x14C6', '\x14C5', 
		'\x3', '\x2', '\x2', '\x2', '\x14C6', '\x14C7', '\x3', '\x2', '\x2', '\x2', 
		'\x14C7', '\x14C9', '\x3', '\x2', '\x2', '\x2', '\x14C8', '\x14CA', '\a', 
		'\x9E', '\x2', '\x2', '\x14C9', '\x14C8', '\x3', '\x2', '\x2', '\x2', 
		'\x14C9', '\x14CA', '\x3', '\x2', '\x2', '\x2', '\x14CA', '\x14CC', '\x3', 
		'\x2', '\x2', '\x2', '\x14CB', '\x14CD', '\a', '\xAA', '\x2', '\x2', '\x14CC', 
		'\x14CB', '\x3', '\x2', '\x2', '\x2', '\x14CC', '\x14CD', '\x3', '\x2', 
		'\x2', '\x2', '\x14CD', '\x14EC', '\x3', '\x2', '\x2', '\x2', '\x14CE', 
		'\x14EC', '\t', 'W', '\x2', '\x2', '\x14CF', '\x14D1', '\t', 'X', '\x2', 
		'\x2', '\x14D0', '\x14D2', '\x5', '\x218', '\x10D', '\x2', '\x14D1', '\x14D0', 
		'\x3', '\x2', '\x2', '\x2', '\x14D1', '\x14D2', '\x3', '\x2', '\x2', '\x2', 
		'\x14D2', '\x14EC', '\x3', '\x2', '\x2', '\x2', '\x14D3', '\x14D4', '\t', 
		'Y', '\x2', '\x2', '\x14D4', '\x14D5', '\a', '\x3B3', '\x2', '\x2', '\x14D5', 
		'\x14DA', '\a', '\x3C2', '\x2', '\x2', '\x14D6', '\x14D7', '\a', '\x3B5', 
		'\x2', '\x2', '\x14D7', '\x14D9', '\a', '\x3C2', '\x2', '\x2', '\x14D8', 
		'\x14D6', '\x3', '\x2', '\x2', '\x2', '\x14D9', '\x14DC', '\x3', '\x2', 
		'\x2', '\x2', '\x14DA', '\x14D8', '\x3', '\x2', '\x2', '\x2', '\x14DA', 
		'\x14DB', '\x3', '\x2', '\x2', '\x2', '\x14DB', '\x14DD', '\x3', '\x2', 
		'\x2', '\x2', '\x14DC', '\x14DA', '\x3', '\x2', '\x2', '\x2', '\x14DD', 
		'\x14DF', '\a', '\x3B4', '\x2', '\x2', '\x14DE', '\x14E0', '\a', '\xBD', 
		'\x2', '\x2', '\x14DF', '\x14DE', '\x3', '\x2', '\x2', '\x2', '\x14DF', 
		'\x14E0', '\x3', '\x2', '\x2', '\x2', '\x14E0', '\x14E4', '\x3', '\x2', 
		'\x2', '\x2', '\x14E1', '\x14E2', '\a', '\x17', '\x2', '\x2', '\x14E2', 
		'\x14E3', '\a', '\x85', '\x2', '\x2', '\x14E3', '\x14E5', '\x5', '\x1F2', 
		'\xFA', '\x2', '\x14E4', '\x14E1', '\x3', '\x2', '\x2', '\x2', '\x14E4', 
		'\x14E5', '\x3', '\x2', '\x2', '\x2', '\x14E5', '\x14E8', '\x3', '\x2', 
		'\x2', '\x2', '\x14E6', '\x14E7', '\a', '\x19', '\x2', '\x2', '\x14E7', 
		'\x14E9', '\x5', '\x1F4', '\xFB', '\x2', '\x14E8', '\x14E6', '\x3', '\x2', 
		'\x2', '\x2', '\x14E8', '\x14E9', '\x3', '\x2', '\x2', '\x2', '\x14E9', 
		'\x14EC', '\x3', '\x2', '\x2', '\x2', '\x14EA', '\x14EC', '\t', 'Z', '\x2', 
		'\x2', '\x14EB', '\x14A0', '\x3', '\x2', '\x2', '\x2', '\x14EB', '\x14B0', 
		'\x3', '\x2', '\x2', '\x2', '\x14EB', '\x14BA', '\x3', '\x2', '\x2', '\x2', 
		'\x14EB', '\x14C4', '\x3', '\x2', '\x2', '\x2', '\x14EB', '\x14CE', '\x3', 
		'\x2', '\x2', '\x2', '\x14EB', '\x14CF', '\x3', '\x2', '\x2', '\x2', '\x14EB', 
		'\x14D3', '\x3', '\x2', '\x2', '\x2', '\x14EB', '\x14EA', '\x3', '\x2', 
		'\x2', '\x2', '\x14EC', '\x215', '\x3', '\x2', '\x2', '\x2', '\x14ED', 
		'\x14EF', '\t', '[', '\x2', '\x2', '\x14EE', '\x14F0', '\x5', '\x218', 
		'\x10D', '\x2', '\x14EF', '\x14EE', '\x3', '\x2', '\x2', '\x2', '\x14EF', 
		'\x14F0', '\x3', '\x2', '\x2', '\x2', '\x14F0', '\x1504', '\x3', '\x2', 
		'\x2', '\x2', '\x14F1', '\x14F3', '\a', '\xBB', '\x2', '\x2', '\x14F2', 
		'\x14F4', '\x5', '\x218', '\x10D', '\x2', '\x14F3', '\x14F2', '\x3', '\x2', 
		'\x2', '\x2', '\x14F3', '\x14F4', '\x3', '\x2', '\x2', '\x2', '\x14F4', 
		'\x14F8', '\x3', '\x2', '\x2', '\x2', '\x14F5', '\x14F6', '\a', '\x17', 
		'\x2', '\x2', '\x14F6', '\x14F7', '\a', '\x85', '\x2', '\x2', '\x14F7', 
		'\x14F9', '\x5', '\x1F2', '\xFA', '\x2', '\x14F8', '\x14F5', '\x3', '\x2', 
		'\x2', '\x2', '\x14F8', '\x14F9', '\x3', '\x2', '\x2', '\x2', '\x14F9', 
		'\x1504', '\x3', '\x2', '\x2', '\x2', '\x14FA', '\x1504', '\t', '\\', 
		'\x2', '\x2', '\x14FB', '\x14FD', '\a', '\xB4', '\x2', '\x2', '\x14FC', 
		'\x14FE', '\x5', '\x21A', '\x10E', '\x2', '\x14FD', '\x14FC', '\x3', '\x2', 
		'\x2', '\x2', '\x14FD', '\x14FE', '\x3', '\x2', '\x2', '\x2', '\x14FE', 
		'\x1504', '\x3', '\x2', '\x2', '\x2', '\x14FF', '\x1501', '\t', ']', '\x2', 
		'\x2', '\x1500', '\x1502', '\a', '\xAF', '\x2', '\x2', '\x1501', '\x1500', 
		'\x3', '\x2', '\x2', '\x2', '\x1501', '\x1502', '\x3', '\x2', '\x2', '\x2', 
		'\x1502', '\x1504', '\x3', '\x2', '\x2', '\x2', '\x1503', '\x14ED', '\x3', 
		'\x2', '\x2', '\x2', '\x1503', '\x14F1', '\x3', '\x2', '\x2', '\x2', '\x1503', 
		'\x14FA', '\x3', '\x2', '\x2', '\x2', '\x1503', '\x14FB', '\x3', '\x2', 
		'\x2', '\x2', '\x1503', '\x14FF', '\x3', '\x2', '\x2', '\x2', '\x1504', 
		'\x217', '\x3', '\x2', '\x2', '\x2', '\x1505', '\x1506', '\a', '\x3B3', 
		'\x2', '\x2', '\x1506', '\x1507', '\x5', '\x206', '\x104', '\x2', '\x1507', 
		'\x1508', '\a', '\x3B4', '\x2', '\x2', '\x1508', '\x219', '\x3', '\x2', 
		'\x2', '\x2', '\x1509', '\x150A', '\a', '\x3B3', '\x2', '\x2', '\x150A', 
		'\x150B', '\x5', '\x206', '\x104', '\x2', '\x150B', '\x150C', '\a', '\x3B5', 
		'\x2', '\x2', '\x150C', '\x150D', '\x5', '\x206', '\x104', '\x2', '\x150D', 
		'\x150E', '\a', '\x3B4', '\x2', '\x2', '\x150E', '\x21B', '\x3', '\x2', 
		'\x2', '\x2', '\x150F', '\x1510', '\a', '\x3B3', '\x2', '\x2', '\x1510', 
		'\x1513', '\x5', '\x206', '\x104', '\x2', '\x1511', '\x1512', '\a', '\x3B5', 
		'\x2', '\x2', '\x1512', '\x1514', '\x5', '\x206', '\x104', '\x2', '\x1513', 
		'\x1511', '\x3', '\x2', '\x2', '\x2', '\x1513', '\x1514', '\x3', '\x2', 
		'\x2', '\x2', '\x1514', '\x1515', '\x3', '\x2', '\x2', '\x2', '\x1515', 
		'\x1516', '\a', '\x3B4', '\x2', '\x2', '\x1516', '\x21D', '\x3', '\x2', 
		'\x2', '\x2', '\x1517', '\x151C', '\x5', '\x200', '\x101', '\x2', '\x1518', 
		'\x1519', '\a', '\x3B5', '\x2', '\x2', '\x1519', '\x151B', '\x5', '\x200', 
		'\x101', '\x2', '\x151A', '\x1518', '\x3', '\x2', '\x2', '\x2', '\x151B', 
		'\x151E', '\x3', '\x2', '\x2', '\x2', '\x151C', '\x151A', '\x3', '\x2', 
		'\x2', '\x2', '\x151C', '\x151D', '\x3', '\x2', '\x2', '\x2', '\x151D', 
		'\x21F', '\x3', '\x2', '\x2', '\x2', '\x151E', '\x151C', '\x3', '\x2', 
		'\x2', '\x2', '\x151F', '\x1524', '\x5', '\x1E8', '\xF5', '\x2', '\x1520', 
		'\x1521', '\a', '\x3B5', '\x2', '\x2', '\x1521', '\x1523', '\x5', '\x1E8', 
		'\xF5', '\x2', '\x1522', '\x1520', '\x3', '\x2', '\x2', '\x2', '\x1523', 
		'\x1526', '\x3', '\x2', '\x2', '\x2', '\x1524', '\x1522', '\x3', '\x2', 
		'\x2', '\x2', '\x1524', '\x1525', '\x3', '\x2', '\x2', '\x2', '\x1525', 
		'\x221', '\x3', '\x2', '\x2', '\x2', '\x1526', '\x1524', '\x3', '\x2', 
		'\x2', '\x2', '\x1527', '\x1528', '\a', '\x3B3', '\x2', '\x2', '\x1528', 
		'\x152D', '\x5', '\x1EC', '\xF7', '\x2', '\x1529', '\x152A', '\a', '\x3B5', 
		'\x2', '\x2', '\x152A', '\x152C', '\x5', '\x1EC', '\xF7', '\x2', '\x152B', 
		'\x1529', '\x3', '\x2', '\x2', '\x2', '\x152C', '\x152F', '\x3', '\x2', 
		'\x2', '\x2', '\x152D', '\x152B', '\x3', '\x2', '\x2', '\x2', '\x152D', 
		'\x152E', '\x3', '\x2', '\x2', '\x2', '\x152E', '\x1530', '\x3', '\x2', 
		'\x2', '\x2', '\x152F', '\x152D', '\x3', '\x2', '\x2', '\x2', '\x1530', 
		'\x1531', '\a', '\x3B4', '\x2', '\x2', '\x1531', '\x223', '\x3', '\x2', 
		'\x2', '\x2', '\x1532', '\x1537', '\x5', '\x24C', '\x127', '\x2', '\x1533', 
		'\x1534', '\a', '\x3B5', '\x2', '\x2', '\x1534', '\x1536', '\x5', '\x24C', 
		'\x127', '\x2', '\x1535', '\x1533', '\x3', '\x2', '\x2', '\x2', '\x1536', 
		'\x1539', '\x3', '\x2', '\x2', '\x2', '\x1537', '\x1535', '\x3', '\x2', 
		'\x2', '\x2', '\x1537', '\x1538', '\x3', '\x2', '\x2', '\x2', '\x1538', 
		'\x225', '\x3', '\x2', '\x2', '\x2', '\x1539', '\x1537', '\x3', '\x2', 
		'\x2', '\x2', '\x153A', '\x153F', '\x5', '\x232', '\x11A', '\x2', '\x153B', 
		'\x153C', '\a', '\x3B5', '\x2', '\x2', '\x153C', '\x153E', '\x5', '\x232', 
		'\x11A', '\x2', '\x153D', '\x153B', '\x3', '\x2', '\x2', '\x2', '\x153E', 
		'\x1541', '\x3', '\x2', '\x2', '\x2', '\x153F', '\x153D', '\x3', '\x2', 
		'\x2', '\x2', '\x153F', '\x1540', '\x3', '\x2', '\x2', '\x2', '\x1540', 
		'\x227', '\x3', '\x2', '\x2', '\x2', '\x1541', '\x153F', '\x3', '\x2', 
		'\x2', '\x2', '\x1542', '\x1547', '\x5', '\x212', '\x10A', '\x2', '\x1543', 
		'\x1544', '\a', '\x3B5', '\x2', '\x2', '\x1544', '\x1546', '\x5', '\x212', 
		'\x10A', '\x2', '\x1545', '\x1543', '\x3', '\x2', '\x2', '\x2', '\x1546', 
		'\x1549', '\x3', '\x2', '\x2', '\x2', '\x1547', '\x1545', '\x3', '\x2', 
		'\x2', '\x2', '\x1547', '\x1548', '\x3', '\x2', '\x2', '\x2', '\x1548', 
		'\x229', '\x3', '\x2', '\x2', '\x2', '\x1549', '\x1547', '\x3', '\x2', 
		'\x2', '\x2', '\x154A', '\x154F', '\a', '\x3C2', '\x2', '\x2', '\x154B', 
		'\x154C', '\a', '\x3B5', '\x2', '\x2', '\x154C', '\x154E', '\a', '\x3C2', 
		'\x2', '\x2', '\x154D', '\x154B', '\x3', '\x2', '\x2', '\x2', '\x154E', 
		'\x1551', '\x3', '\x2', '\x2', '\x2', '\x154F', '\x154D', '\x3', '\x2', 
		'\x2', '\x2', '\x154F', '\x1550', '\x3', '\x2', '\x2', '\x2', '\x1550', 
		'\x22B', '\x3', '\x2', '\x2', '\x2', '\x1551', '\x154F', '\x3', '\x2', 
		'\x2', '\x2', '\x1552', '\x1557', '\a', '\x3CD', '\x2', '\x2', '\x1553', 
		'\x1554', '\a', '\x3B5', '\x2', '\x2', '\x1554', '\x1556', '\a', '\x3CD', 
		'\x2', '\x2', '\x1555', '\x1553', '\x3', '\x2', '\x2', '\x2', '\x1556', 
		'\x1559', '\x3', '\x2', '\x2', '\x2', '\x1557', '\x1555', '\x3', '\x2', 
		'\x2', '\x2', '\x1557', '\x1558', '\x3', '\x2', '\x2', '\x2', '\x1558', 
		'\x22D', '\x3', '\x2', '\x2', '\x2', '\x1559', '\x1557', '\x3', '\x2', 
		'\x2', '\x2', '\x155A', '\x1563', '\a', '\x65', '\x2', '\x2', '\x155B', 
		'\x1563', '\x5', '\x212', '\x10A', '\x2', '\x155C', '\x1560', '\x5', '\x230', 
		'\x119', '\x2', '\x155D', '\x155E', '\a', '\x66', '\x2', '\x2', '\x155E', 
		'\x155F', '\a', '\x9F', '\x2', '\x2', '\x155F', '\x1561', '\x5', '\x230', 
		'\x119', '\x2', '\x1560', '\x155D', '\x3', '\x2', '\x2', '\x2', '\x1560', 
		'\x1561', '\x3', '\x2', '\x2', '\x2', '\x1561', '\x1563', '\x3', '\x2', 
		'\x2', '\x2', '\x1562', '\x155A', '\x3', '\x2', '\x2', '\x2', '\x1562', 
		'\x155B', '\x3', '\x2', '\x2', '\x2', '\x1562', '\x155C', '\x3', '\x2', 
		'\x2', '\x2', '\x1563', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x1564', 
		'\x156A', '\t', '^', '\x2', '\x2', '\x1565', '\x1567', '\a', '\x3B3', 
		'\x2', '\x2', '\x1566', '\x1568', '\x5', '\x206', '\x104', '\x2', '\x1567', 
		'\x1566', '\x3', '\x2', '\x2', '\x2', '\x1567', '\x1568', '\x3', '\x2', 
		'\x2', '\x2', '\x1568', '\x1569', '\x3', '\x2', '\x2', '\x2', '\x1569', 
		'\x156B', '\a', '\x3B4', '\x2', '\x2', '\x156A', '\x1565', '\x3', '\x2', 
		'\x2', '\x2', '\x156A', '\x156B', '\x3', '\x2', '\x2', '\x2', '\x156B', 
		'\x1573', '\x3', '\x2', '\x2', '\x2', '\x156C', '\x156D', '\a', '\xED', 
		'\x2', '\x2', '\x156D', '\x156F', '\a', '\x3B3', '\x2', '\x2', '\x156E', 
		'\x1570', '\x5', '\x206', '\x104', '\x2', '\x156F', '\x156E', '\x3', '\x2', 
		'\x2', '\x2', '\x156F', '\x1570', '\x3', '\x2', '\x2', '\x2', '\x1570', 
		'\x1571', '\x3', '\x2', '\x2', '\x2', '\x1571', '\x1573', '\a', '\x3B4', 
		'\x2', '\x2', '\x1572', '\x1564', '\x3', '\x2', '\x2', '\x2', '\x1572', 
		'\x156C', '\x3', '\x2', '\x2', '\x2', '\x1573', '\x231', '\x3', '\x2', 
		'\x2', '\x2', '\x1574', '\x1577', '\x5', '\x24C', '\x127', '\x2', '\x1575', 
		'\x1577', '\a', '&', '\x2', '\x2', '\x1576', '\x1574', '\x3', '\x2', '\x2', 
		'\x2', '\x1576', '\x1575', '\x3', '\x2', '\x2', '\x2', '\x1577', '\x233', 
		'\x3', '\x2', '\x2', '\x2', '\x1578', '\x1579', '\a', '\x42', '\x2', '\x2', 
		'\x1579', '\x157A', '\a', '\x34', '\x2', '\x2', '\x157A', '\x235', '\x3', 
		'\x2', '\x2', '\x2', '\x157B', '\x157C', '\a', '\x42', '\x2', '\x2', '\x157C', 
		'\x157D', '\a', '\x63', '\x2', '\x2', '\x157D', '\x157E', '\a', '\x34', 
		'\x2', '\x2', '\x157E', '\x237', '\x3', '\x2', '\x2', '\x2', '\x157F', 
		'\x1591', '\x5', '\x23A', '\x11E', '\x2', '\x1580', '\x1591', '\x5', '\x242', 
		'\x122', '\x2', '\x1581', '\x1582', '\x5', '\x244', '\x123', '\x2', '\x1582', 
		'\x1584', '\a', '\x3B3', '\x2', '\x2', '\x1583', '\x1585', '\x5', '\x248', 
		'\x125', '\x2', '\x1584', '\x1583', '\x3', '\x2', '\x2', '\x2', '\x1584', 
		'\x1585', '\x3', '\x2', '\x2', '\x2', '\x1585', '\x1586', '\x3', '\x2', 
		'\x2', '\x2', '\x1586', '\x1587', '\a', '\x3B4', '\x2', '\x2', '\x1587', 
		'\x1591', '\x3', '\x2', '\x2', '\x2', '\x1588', '\x1589', '\x5', '\x1E6', 
		'\xF4', '\x2', '\x1589', '\x158B', '\a', '\x3B3', '\x2', '\x2', '\x158A', 
		'\x158C', '\x5', '\x248', '\x125', '\x2', '\x158B', '\x158A', '\x3', '\x2', 
		'\x2', '\x2', '\x158B', '\x158C', '\x3', '\x2', '\x2', '\x2', '\x158C', 
		'\x158D', '\x3', '\x2', '\x2', '\x2', '\x158D', '\x158E', '\a', '\x3B4', 
		'\x2', '\x2', '\x158E', '\x1591', '\x3', '\x2', '\x2', '\x2', '\x158F', 
		'\x1591', '\x5', '\x246', '\x124', '\x2', '\x1590', '\x157F', '\x3', '\x2', 
		'\x2', '\x2', '\x1590', '\x1580', '\x3', '\x2', '\x2', '\x2', '\x1590', 
		'\x1581', '\x3', '\x2', '\x2', '\x2', '\x1590', '\x1588', '\x3', '\x2', 
		'\x2', '\x2', '\x1590', '\x158F', '\x3', '\x2', '\x2', '\x2', '\x1591', 
		'\x239', '\x3', '\x2', '\x2', '\x2', '\x1592', '\x1630', '\t', '_', '\x2', 
		'\x2', '\x1593', '\x1594', '\a', '\x1E', '\x2', '\x2', '\x1594', '\x1595', 
		'\a', '\x3B3', '\x2', '\x2', '\x1595', '\x1596', '\x5', '\x24C', '\x127', 
		'\x2', '\x1596', '\x1597', '\a', '\x3B5', '\x2', '\x2', '\x1597', '\x1598', 
		'\x5', '\x216', '\x10C', '\x2', '\x1598', '\x1599', '\a', '\x3B4', '\x2', 
		'\x2', '\x1599', '\x1630', '\x3', '\x2', '\x2', '\x2', '\x159A', '\x159B', 
		'\a', '\x1E', '\x2', '\x2', '\x159B', '\x159C', '\a', '\x3B3', '\x2', 
		'\x2', '\x159C', '\x159D', '\x5', '\x24C', '\x127', '\x2', '\x159D', '\x159E', 
		'\a', '\xA2', '\x2', '\x2', '\x159E', '\x159F', '\x5', '\x1F2', '\xFA', 
		'\x2', '\x159F', '\x15A0', '\a', '\x3B4', '\x2', '\x2', '\x15A0', '\x1630', 
		'\x3', '\x2', '\x2', '\x2', '\x15A1', '\x15A2', '\a', '\x15', '\x2', '\x2', 
		'\x15A2', '\x15A3', '\a', '\x3B3', '\x2', '\x2', '\x15A3', '\x15A4', '\x5', 
		'\x24C', '\x127', '\x2', '\x15A4', '\x15A5', '\a', '\f', '\x2', '\x2', 
		'\x15A5', '\x15A6', '\x5', '\x216', '\x10C', '\x2', '\x15A6', '\x15A7', 
		'\a', '\x3B4', '\x2', '\x2', '\x15A7', '\x1630', '\x3', '\x2', '\x2', 
		'\x2', '\x15A8', '\x15A9', '\a', '\xA3', '\x2', '\x2', '\x15A9', '\x15AA', 
		'\a', '\x3B3', '\x2', '\x2', '\x15AA', '\x15AB', '\x5', '\x1EA', '\xF6', 
		'\x2', '\x15AB', '\x15AC', '\a', '\x3B4', '\x2', '\x2', '\x15AC', '\x1630', 
		'\x3', '\x2', '\x2', '\x2', '\x15AD', '\x15AE', '\a', '\x14', '\x2', '\x2', 
		'\x15AE', '\x15B0', '\x5', '\x24C', '\x127', '\x2', '\x15AF', '\x15B1', 
		'\x5', '\x23C', '\x11F', '\x2', '\x15B0', '\x15AF', '\x3', '\x2', '\x2', 
		'\x2', '\x15B1', '\x15B2', '\x3', '\x2', '\x2', '\x2', '\x15B2', '\x15B0', 
		'\x3', '\x2', '\x2', '\x2', '\x15B2', '\x15B3', '\x3', '\x2', '\x2', '\x2', 
		'\x15B3', '\x15B6', '\x3', '\x2', '\x2', '\x2', '\x15B4', '\x15B5', '\a', 
		'\x30', '\x2', '\x2', '\x15B5', '\x15B7', '\x5', '\x24A', '\x126', '\x2', 
		'\x15B6', '\x15B4', '\x3', '\x2', '\x2', '\x2', '\x15B6', '\x15B7', '\x3', 
		'\x2', '\x2', '\x2', '\x15B7', '\x15B8', '\x3', '\x2', '\x2', '\x2', '\x15B8', 
		'\x15B9', '\a', '\x135', '\x2', '\x2', '\x15B9', '\x1630', '\x3', '\x2', 
		'\x2', '\x2', '\x15BA', '\x15BC', '\a', '\x14', '\x2', '\x2', '\x15BB', 
		'\x15BD', '\x5', '\x23C', '\x11F', '\x2', '\x15BC', '\x15BB', '\x3', '\x2', 
		'\x2', '\x2', '\x15BD', '\x15BE', '\x3', '\x2', '\x2', '\x2', '\x15BE', 
		'\x15BC', '\x3', '\x2', '\x2', '\x2', '\x15BE', '\x15BF', '\x3', '\x2', 
		'\x2', '\x2', '\x15BF', '\x15C2', '\x3', '\x2', '\x2', '\x2', '\x15C0', 
		'\x15C1', '\a', '\x30', '\x2', '\x2', '\x15C1', '\x15C3', '\x5', '\x24A', 
		'\x126', '\x2', '\x15C2', '\x15C0', '\x3', '\x2', '\x2', '\x2', '\x15C2', 
		'\x15C3', '\x3', '\x2', '\x2', '\x2', '\x15C3', '\x15C4', '\x3', '\x2', 
		'\x2', '\x2', '\x15C4', '\x15C5', '\a', '\x135', '\x2', '\x2', '\x15C5', 
		'\x1630', '\x3', '\x2', '\x2', '\x2', '\x15C6', '\x15C7', '\a', '\xBB', 
		'\x2', '\x2', '\x15C7', '\x15C8', '\a', '\x3B3', '\x2', '\x2', '\x15C8', 
		'\x15CB', '\x5', '\x248', '\x125', '\x2', '\x15C9', '\x15CA', '\a', '\xA2', 
		'\x2', '\x2', '\x15CA', '\x15CC', '\x5', '\x1F2', '\xFA', '\x2', '\x15CB', 
		'\x15C9', '\x3', '\x2', '\x2', '\x2', '\x15CB', '\x15CC', '\x3', '\x2', 
		'\x2', '\x2', '\x15CC', '\x15CD', '\x3', '\x2', '\x2', '\x2', '\x15CD', 
		'\x15CE', '\a', '\x3B4', '\x2', '\x2', '\x15CE', '\x1630', '\x3', '\x2', 
		'\x2', '\x2', '\x15CF', '\x15D0', '\a', '\xEE', '\x2', '\x2', '\x15D0', 
		'\x15D3', '\a', '\x3B3', '\x2', '\x2', '\x15D1', '\x15D4', '\x5', '\x20A', 
		'\x106', '\x2', '\x15D2', '\x15D4', '\x5', '\x24C', '\x127', '\x2', '\x15D3', 
		'\x15D1', '\x3', '\x2', '\x2', '\x2', '\x15D3', '\x15D2', '\x3', '\x2', 
		'\x2', '\x2', '\x15D4', '\x15D5', '\x3', '\x2', '\x2', '\x2', '\x15D5', 
		'\x15D8', '\a', '\x44', '\x2', '\x2', '\x15D6', '\x15D9', '\x5', '\x20A', 
		'\x106', '\x2', '\x15D7', '\x15D9', '\x5', '\x24C', '\x127', '\x2', '\x15D8', 
		'\x15D6', '\x3', '\x2', '\x2', '\x2', '\x15D8', '\x15D7', '\x3', '\x2', 
		'\x2', '\x2', '\x15D9', '\x15DA', '\x3', '\x2', '\x2', '\x2', '\x15DA', 
		'\x15DB', '\a', '\x3B4', '\x2', '\x2', '\x15DB', '\x1630', '\x3', '\x2', 
		'\x2', '\x2', '\x15DC', '\x15DD', '\t', '`', '\x2', '\x2', '\x15DD', '\x15E0', 
		'\a', '\x3B3', '\x2', '\x2', '\x15DE', '\x15E1', '\x5', '\x20A', '\x106', 
		'\x2', '\x15DF', '\x15E1', '\x5', '\x24C', '\x127', '\x2', '\x15E0', '\x15DE', 
		'\x3', '\x2', '\x2', '\x2', '\x15E0', '\x15DF', '\x3', '\x2', '\x2', '\x2', 
		'\x15E1', '\x15E2', '\x3', '\x2', '\x2', '\x2', '\x15E2', '\x15E5', '\a', 
		'<', '\x2', '\x2', '\x15E3', '\x15E6', '\x5', '\x206', '\x104', '\x2', 
		'\x15E4', '\x15E6', '\x5', '\x24C', '\x127', '\x2', '\x15E5', '\x15E3', 
		'\x3', '\x2', '\x2', '\x2', '\x15E5', '\x15E4', '\x3', '\x2', '\x2', '\x2', 
		'\x15E6', '\x15EC', '\x3', '\x2', '\x2', '\x2', '\x15E7', '\x15EA', '\a', 
		'\x39', '\x2', '\x2', '\x15E8', '\x15EB', '\x5', '\x206', '\x104', '\x2', 
		'\x15E9', '\x15EB', '\x5', '\x24C', '\x127', '\x2', '\x15EA', '\x15E8', 
		'\x3', '\x2', '\x2', '\x2', '\x15EA', '\x15E9', '\x3', '\x2', '\x2', '\x2', 
		'\x15EB', '\x15ED', '\x3', '\x2', '\x2', '\x2', '\x15EC', '\x15E7', '\x3', 
		'\x2', '\x2', '\x2', '\x15EC', '\x15ED', '\x3', '\x2', '\x2', '\x2', '\x15ED', 
		'\x15EE', '\x3', '\x2', '\x2', '\x2', '\x15EE', '\x15EF', '\a', '\x3B4', 
		'\x2', '\x2', '\x15EF', '\x1630', '\x3', '\x2', '\x2', '\x2', '\x15F0', 
		'\x15F1', '\a', '\xF2', '\x2', '\x2', '\x15F1', '\x15F2', '\a', '\x3B3', 
		'\x2', '\x2', '\x15F2', '\x15F5', '\t', '\x61', '\x2', '\x2', '\x15F3', 
		'\x15F6', '\x5', '\x20A', '\x106', '\x2', '\x15F4', '\x15F6', '\x5', '\x24C', 
		'\x127', '\x2', '\x15F5', '\x15F3', '\x3', '\x2', '\x2', '\x2', '\x15F5', 
		'\x15F4', '\x3', '\x2', '\x2', '\x2', '\x15F5', '\x15F6', '\x3', '\x2', 
		'\x2', '\x2', '\x15F6', '\x15F7', '\x3', '\x2', '\x2', '\x2', '\x15F7', 
		'\x15FA', '\a', '<', '\x2', '\x2', '\x15F8', '\x15FB', '\x5', '\x20A', 
		'\x106', '\x2', '\x15F9', '\x15FB', '\x5', '\x24C', '\x127', '\x2', '\x15FA', 
		'\x15F8', '\x3', '\x2', '\x2', '\x2', '\x15FA', '\x15F9', '\x3', '\x2', 
		'\x2', '\x2', '\x15FB', '\x15FC', '\x3', '\x2', '\x2', '\x2', '\x15FC', 
		'\x15FD', '\a', '\x3B4', '\x2', '\x2', '\x15FD', '\x1630', '\x3', '\x2', 
		'\x2', '\x2', '\x15FE', '\x15FF', '\a', '\xF2', '\x2', '\x2', '\x15FF', 
		'\x1602', '\a', '\x3B3', '\x2', '\x2', '\x1600', '\x1603', '\x5', '\x20A', 
		'\x106', '\x2', '\x1601', '\x1603', '\x5', '\x24C', '\x127', '\x2', '\x1602', 
		'\x1600', '\x3', '\x2', '\x2', '\x2', '\x1602', '\x1601', '\x3', '\x2', 
		'\x2', '\x2', '\x1603', '\x1604', '\x3', '\x2', '\x2', '\x2', '\x1604', 
		'\x1607', '\a', '<', '\x2', '\x2', '\x1605', '\x1608', '\x5', '\x20A', 
		'\x106', '\x2', '\x1606', '\x1608', '\x5', '\x24C', '\x127', '\x2', '\x1607', 
		'\x1605', '\x3', '\x2', '\x2', '\x2', '\x1607', '\x1606', '\x3', '\x2', 
		'\x2', '\x2', '\x1608', '\x1609', '\x3', '\x2', '\x2', '\x2', '\x1609', 
		'\x160A', '\a', '\x3B4', '\x2', '\x2', '\x160A', '\x1630', '\x3', '\x2', 
		'\x2', '\x2', '\x160B', '\x160C', '\a', '\x394', '\x2', '\x2', '\x160C', 
		'\x160F', '\a', '\x3B3', '\x2', '\x2', '\x160D', '\x1610', '\x5', '\x20A', 
		'\x106', '\x2', '\x160E', '\x1610', '\x5', '\x24C', '\x127', '\x2', '\x160F', 
		'\x160D', '\x3', '\x2', '\x2', '\x2', '\x160F', '\x160E', '\x3', '\x2', 
		'\x2', '\x2', '\x1610', '\x1617', '\x3', '\x2', '\x2', '\x2', '\x1611', 
		'\x1612', '\a', '\f', '\x2', '\x2', '\x1612', '\x1613', '\t', '\x62', 
		'\x2', '\x2', '\x1613', '\x1614', '\a', '\x3B3', '\x2', '\x2', '\x1614', 
		'\x1615', '\x5', '\x206', '\x104', '\x2', '\x1615', '\x1616', '\a', '\x3B4', 
		'\x2', '\x2', '\x1616', '\x1618', '\x3', '\x2', '\x2', '\x2', '\x1617', 
		'\x1611', '\x3', '\x2', '\x2', '\x2', '\x1617', '\x1618', '\x3', '\x2', 
		'\x2', '\x2', '\x1618', '\x161A', '\x3', '\x2', '\x2', '\x2', '\x1619', 
		'\x161B', '\x5', '\x23E', '\x120', '\x2', '\x161A', '\x1619', '\x3', '\x2', 
		'\x2', '\x2', '\x161A', '\x161B', '\x3', '\x2', '\x2', '\x2', '\x161B', 
		'\x161C', '\x3', '\x2', '\x2', '\x2', '\x161C', '\x161D', '\a', '\x3B4', 
		'\x2', '\x2', '\x161D', '\x1630', '\x3', '\x2', '\x2', '\x2', '\x161E', 
		'\x161F', '\a', '\xEB', '\x2', '\x2', '\x161F', '\x1620', '\a', '\x3B3', 
		'\x2', '\x2', '\x1620', '\x1621', '\x5', '<', '\x1F', '\x2', '\x1621', 
		'\x1624', '\a', '<', '\x2', '\x2', '\x1622', '\x1625', '\x5', '\x20A', 
		'\x106', '\x2', '\x1623', '\x1625', '\x5', '\x24C', '\x127', '\x2', '\x1624', 
		'\x1622', '\x3', '\x2', '\x2', '\x2', '\x1624', '\x1623', '\x3', '\x2', 
		'\x2', '\x2', '\x1625', '\x1626', '\x3', '\x2', '\x2', '\x2', '\x1626', 
		'\x1627', '\a', '\x3B4', '\x2', '\x2', '\x1627', '\x1630', '\x3', '\x2', 
		'\x2', '\x2', '\x1628', '\x1629', '\a', '\x2CD', '\x2', '\x2', '\x1629', 
		'\x162A', '\a', '\x3B3', '\x2', '\x2', '\x162A', '\x162B', '\t', '\\', 
		'\x2', '\x2', '\x162B', '\x162C', '\a', '\x3B5', '\x2', '\x2', '\x162C', 
		'\x162D', '\x5', '\x20A', '\x106', '\x2', '\x162D', '\x162E', '\a', '\x3B4', 
		'\x2', '\x2', '\x162E', '\x1630', '\x3', '\x2', '\x2', '\x2', '\x162F', 
		'\x1592', '\x3', '\x2', '\x2', '\x2', '\x162F', '\x1593', '\x3', '\x2', 
		'\x2', '\x2', '\x162F', '\x159A', '\x3', '\x2', '\x2', '\x2', '\x162F', 
		'\x15A1', '\x3', '\x2', '\x2', '\x2', '\x162F', '\x15A8', '\x3', '\x2', 
		'\x2', '\x2', '\x162F', '\x15AD', '\x3', '\x2', '\x2', '\x2', '\x162F', 
		'\x15BA', '\x3', '\x2', '\x2', '\x2', '\x162F', '\x15C6', '\x3', '\x2', 
		'\x2', '\x2', '\x162F', '\x15CF', '\x3', '\x2', '\x2', '\x2', '\x162F', 
		'\x15DC', '\x3', '\x2', '\x2', '\x2', '\x162F', '\x15F0', '\x3', '\x2', 
		'\x2', '\x2', '\x162F', '\x15FE', '\x3', '\x2', '\x2', '\x2', '\x162F', 
		'\x160B', '\x3', '\x2', '\x2', '\x2', '\x162F', '\x161E', '\x3', '\x2', 
		'\x2', '\x2', '\x162F', '\x1628', '\x3', '\x2', '\x2', '\x2', '\x1630', 
		'\x23B', '\x3', '\x2', '\x2', '\x2', '\x1631', '\x1632', '\a', '\xA4', 
		'\x2', '\x2', '\x1632', '\x1633', '\x5', '\x24A', '\x126', '\x2', '\x1633', 
		'\x1634', '\a', '\x95', '\x2', '\x2', '\x1634', '\x1635', '\x5', '\x24A', 
		'\x126', '\x2', '\x1635', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x1636', 
		'\x1637', '\a', '\x170', '\x2', '\x2', '\x1637', '\x163C', '\x5', '\x240', 
		'\x121', '\x2', '\x1638', '\x1639', '\a', '\x3B5', '\x2', '\x2', '\x1639', 
		'\x163B', '\x5', '\x240', '\x121', '\x2', '\x163A', '\x1638', '\x3', '\x2', 
		'\x2', '\x2', '\x163B', '\x163E', '\x3', '\x2', '\x2', '\x2', '\x163C', 
		'\x163A', '\x3', '\x2', '\x2', '\x2', '\x163C', '\x163D', '\x3', '\x2', 
		'\x2', '\x2', '\x163D', '\x1645', '\x3', '\x2', '\x2', '\x2', '\x163E', 
		'\x163C', '\x3', '\x2', '\x2', '\x2', '\x163F', '\x1640', '\a', '\x170', 
		'\x2', '\x2', '\x1640', '\x1641', '\x5', '\x206', '\x104', '\x2', '\x1641', 
		'\x1642', '\a', '\x3A7', '\x2', '\x2', '\x1642', '\x1643', '\x5', '\x206', 
		'\x104', '\x2', '\x1643', '\x1645', '\x3', '\x2', '\x2', '\x2', '\x1644', 
		'\x1636', '\x3', '\x2', '\x2', '\x2', '\x1644', '\x163F', '\x3', '\x2', 
		'\x2', '\x2', '\x1645', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x1646', 
		'\x1648', '\x5', '\x206', '\x104', '\x2', '\x1647', '\x1649', '\t', '\x63', 
		'\x2', '\x2', '\x1648', '\x1647', '\x3', '\x2', '\x2', '\x2', '\x1648', 
		'\x1649', '\x3', '\x2', '\x2', '\x2', '\x1649', '\x241', '\x3', '\x2', 
		'\x2', '\x2', '\x164A', '\x164B', '\t', '\x64', '\x2', '\x2', '\x164B', 
		'\x164D', '\a', '\x3B3', '\x2', '\x2', '\x164C', '\x164E', '\t', '$', 
		'\x2', '\x2', '\x164D', '\x164C', '\x3', '\x2', '\x2', '\x2', '\x164D', 
		'\x164E', '\x3', '\x2', '\x2', '\x2', '\x164E', '\x164F', '\x3', '\x2', 
		'\x2', '\x2', '\x164F', '\x1650', '\x5', '\x24A', '\x126', '\x2', '\x1650', 
		'\x1651', '\a', '\x3B4', '\x2', '\x2', '\x1651', '\x1683', '\x3', '\x2', 
		'\x2', '\x2', '\x1652', '\x1653', '\a', '\xD7', '\x2', '\x2', '\x1653', 
		'\x1659', '\a', '\x3B3', '\x2', '\x2', '\x1654', '\x165A', '\a', '\x3A2', 
		'\x2', '\x2', '\x1655', '\x1657', '\a', '\b', '\x2', '\x2', '\x1656', 
		'\x1655', '\x3', '\x2', '\x2', '\x2', '\x1656', '\x1657', '\x3', '\x2', 
		'\x2', '\x2', '\x1657', '\x1658', '\x3', '\x2', '\x2', '\x2', '\x1658', 
		'\x165A', '\x5', '\x24A', '\x126', '\x2', '\x1659', '\x1654', '\x3', '\x2', 
		'\x2', '\x2', '\x1659', '\x1656', '\x3', '\x2', '\x2', '\x2', '\x165A', 
		'\x165B', '\x3', '\x2', '\x2', '\x2', '\x165B', '\x1683', '\a', '\x3B4', 
		'\x2', '\x2', '\x165C', '\x165D', '\a', '\xD7', '\x2', '\x2', '\x165D', 
		'\x165E', '\a', '\x3B3', '\x2', '\x2', '\x165E', '\x165F', '\a', ',', 
		'\x2', '\x2', '\x165F', '\x1660', '\x5', '\x248', '\x125', '\x2', '\x1660', 
		'\x1661', '\a', '\x3B4', '\x2', '\x2', '\x1661', '\x1683', '\x3', '\x2', 
		'\x2', '\x2', '\x1662', '\x1663', '\t', '\x65', '\x2', '\x2', '\x1663', 
		'\x1665', '\a', '\x3B3', '\x2', '\x2', '\x1664', '\x1666', '\a', '\b', 
		'\x2', '\x2', '\x1665', '\x1664', '\x3', '\x2', '\x2', '\x2', '\x1665', 
		'\x1666', '\x3', '\x2', '\x2', '\x2', '\x1666', '\x1667', '\x3', '\x2', 
		'\x2', '\x2', '\x1667', '\x1668', '\x5', '\x24A', '\x126', '\x2', '\x1668', 
		'\x1669', '\a', '\x3B4', '\x2', '\x2', '\x1669', '\x1683', '\x3', '\x2', 
		'\x2', '\x2', '\x166A', '\x166B', '\a', '\xD8', '\x2', '\x2', '\x166B', 
		'\x166D', '\a', '\x3B3', '\x2', '\x2', '\x166C', '\x166E', '\a', ',', 
		'\x2', '\x2', '\x166D', '\x166C', '\x3', '\x2', '\x2', '\x2', '\x166D', 
		'\x166E', '\x3', '\x2', '\x2', '\x2', '\x166E', '\x166F', '\x3', '\x2', 
		'\x2', '\x2', '\x166F', '\x167A', '\x5', '\x248', '\x125', '\x2', '\x1670', 
		'\x1671', '\a', 'k', '\x2', '\x2', '\x1671', '\x1672', '\a', '\x11', '\x2', 
		'\x2', '\x1672', '\x1677', '\x5', '\xD2', 'j', '\x2', '\x1673', '\x1674', 
		'\a', '\x3B5', '\x2', '\x2', '\x1674', '\x1676', '\x5', '\xD2', 'j', '\x2', 
		'\x1675', '\x1673', '\x3', '\x2', '\x2', '\x2', '\x1676', '\x1679', '\x3', 
		'\x2', '\x2', '\x2', '\x1677', '\x1675', '\x3', '\x2', '\x2', '\x2', '\x1677', 
		'\x1678', '\x3', '\x2', '\x2', '\x2', '\x1678', '\x167B', '\x3', '\x2', 
		'\x2', '\x2', '\x1679', '\x1677', '\x3', '\x2', '\x2', '\x2', '\x167A', 
		'\x1670', '\x3', '\x2', '\x2', '\x2', '\x167A', '\x167B', '\x3', '\x2', 
		'\x2', '\x2', '\x167B', '\x167E', '\x3', '\x2', '\x2', '\x2', '\x167C', 
		'\x167D', '\a', '\x86', '\x2', '\x2', '\x167D', '\x167F', '\a', '\x3C2', 
		'\x2', '\x2', '\x167E', '\x167C', '\x3', '\x2', '\x2', '\x2', '\x167E', 
		'\x167F', '\x3', '\x2', '\x2', '\x2', '\x167F', '\x1680', '\x3', '\x2', 
		'\x2', '\x2', '\x1680', '\x1681', '\a', '\x3B4', '\x2', '\x2', '\x1681', 
		'\x1683', '\x3', '\x2', '\x2', '\x2', '\x1682', '\x164A', '\x3', '\x2', 
		'\x2', '\x2', '\x1682', '\x1652', '\x3', '\x2', '\x2', '\x2', '\x1682', 
		'\x165C', '\x3', '\x2', '\x2', '\x2', '\x1682', '\x1662', '\x3', '\x2', 
		'\x2', '\x2', '\x1682', '\x166A', '\x3', '\x2', '\x2', '\x2', '\x1683', 
		'\x243', '\x3', '\x2', '\x2', '\x2', '\x1684', '\x169C', '\x5', '\x268', 
		'\x135', '\x2', '\x1685', '\x169C', '\a', '\x23A', '\x2', '\x2', '\x1686', 
		'\x169C', '\a', '\xE7', '\x2', '\x2', '\x1687', '\x169C', '\a', '\xE3', 
		'\x2', '\x2', '\x1688', '\x169C', '\a', '\xE4', '\x2', '\x2', '\x1689', 
		'\x169C', '\a', '\xE5', '\x2', '\x2', '\x168A', '\x169C', '\a', '\xE8', 
		'\x2', '\x2', '\x168B', '\x169C', '\a', '\xE9', '\x2', '\x2', '\x168C', 
		'\x169C', '\a', '\xEA', '\x2', '\x2', '\x168D', '\x169C', '\a', '\x42', 
		'\x2', '\x2', '\x168E', '\x169C', '\a', 'I', '\x2', '\x2', '\x168F', '\x169C', 
		'\a', '\xE6', '\x2', '\x2', '\x1690', '\x169C', '\a', '\xEC', '\x2', '\x2', 
		'\x1691', '\x169C', '\a', '\x192', '\x2', '\x2', '\x1692', '\x169C', '\a', 
		'\xED', '\x2', '\x2', '\x1693', '\x169C', '\a', '{', '\x2', '\x2', '\x1694', 
		'\x169C', '\a', '\xEF', '\x2', '\x2', '\x1695', '\x169C', '\a', '\xF0', 
		'\x2', '\x2', '\x1696', '\x169C', '\a', '\xF1', '\x2', '\x2', '\x1697', 
		'\x169C', '\a', '\xF2', '\x2', '\x2', '\x1698', '\x169C', '\a', '\xF3', 
		'\x2', '\x2', '\x1699', '\x169C', '\a', '\xF4', '\x2', '\x2', '\x169A', 
		'\x169C', '\a', '\xF5', '\x2', '\x2', '\x169B', '\x1684', '\x3', '\x2', 
		'\x2', '\x2', '\x169B', '\x1685', '\x3', '\x2', '\x2', '\x2', '\x169B', 
		'\x1686', '\x3', '\x2', '\x2', '\x2', '\x169B', '\x1687', '\x3', '\x2', 
		'\x2', '\x2', '\x169B', '\x1688', '\x3', '\x2', '\x2', '\x2', '\x169B', 
		'\x1689', '\x3', '\x2', '\x2', '\x2', '\x169B', '\x168A', '\x3', '\x2', 
		'\x2', '\x2', '\x169B', '\x168B', '\x3', '\x2', '\x2', '\x2', '\x169B', 
		'\x168C', '\x3', '\x2', '\x2', '\x2', '\x169B', '\x168D', '\x3', '\x2', 
		'\x2', '\x2', '\x169B', '\x168E', '\x3', '\x2', '\x2', '\x2', '\x169B', 
		'\x168F', '\x3', '\x2', '\x2', '\x2', '\x169B', '\x1690', '\x3', '\x2', 
		'\x2', '\x2', '\x169B', '\x1691', '\x3', '\x2', '\x2', '\x2', '\x169B', 
		'\x1692', '\x3', '\x2', '\x2', '\x2', '\x169B', '\x1693', '\x3', '\x2', 
		'\x2', '\x2', '\x169B', '\x1694', '\x3', '\x2', '\x2', '\x2', '\x169B', 
		'\x1695', '\x3', '\x2', '\x2', '\x2', '\x169B', '\x1696', '\x3', '\x2', 
		'\x2', '\x2', '\x169B', '\x1697', '\x3', '\x2', '\x2', '\x2', '\x169B', 
		'\x1698', '\x3', '\x2', '\x2', '\x2', '\x169B', '\x1699', '\x3', '\x2', 
		'\x2', '\x2', '\x169B', '\x169A', '\x3', '\x2', '\x2', '\x2', '\x169C', 
		'\x245', '\x3', '\x2', '\x2', '\x2', '\x169D', '\x169E', '\t', '\x66', 
		'\x2', '\x2', '\x169E', '\x169F', '\a', '\x3B3', '\x2', '\x2', '\x169F', 
		'\x16A0', '\x5', '\x24A', '\x126', '\x2', '\x16A0', '\x16A1', '\a', '\x3B4', 
		'\x2', '\x2', '\x16A1', '\x247', '\x3', '\x2', '\x2', '\x2', '\x16A2', 
		'\x16A7', '\x5', '\x212', '\x10A', '\x2', '\x16A3', '\x16A7', '\x5', '\x1EA', 
		'\xF6', '\x2', '\x16A4', '\x16A7', '\x5', '\x238', '\x11D', '\x2', '\x16A5', 
		'\x16A7', '\x5', '\x24C', '\x127', '\x2', '\x16A6', '\x16A2', '\x3', '\x2', 
		'\x2', '\x2', '\x16A6', '\x16A3', '\x3', '\x2', '\x2', '\x2', '\x16A6', 
		'\x16A4', '\x3', '\x2', '\x2', '\x2', '\x16A6', '\x16A5', '\x3', '\x2', 
		'\x2', '\x2', '\x16A7', '\x16B1', '\x3', '\x2', '\x2', '\x2', '\x16A8', 
		'\x16AD', '\a', '\x3B5', '\x2', '\x2', '\x16A9', '\x16AE', '\x5', '\x212', 
		'\x10A', '\x2', '\x16AA', '\x16AE', '\x5', '\x1EA', '\xF6', '\x2', '\x16AB', 
		'\x16AE', '\x5', '\x238', '\x11D', '\x2', '\x16AC', '\x16AE', '\x5', '\x24C', 
		'\x127', '\x2', '\x16AD', '\x16A9', '\x3', '\x2', '\x2', '\x2', '\x16AD', 
		'\x16AA', '\x3', '\x2', '\x2', '\x2', '\x16AD', '\x16AB', '\x3', '\x2', 
		'\x2', '\x2', '\x16AD', '\x16AC', '\x3', '\x2', '\x2', '\x2', '\x16AE', 
		'\x16B0', '\x3', '\x2', '\x2', '\x2', '\x16AF', '\x16A8', '\x3', '\x2', 
		'\x2', '\x2', '\x16B0', '\x16B3', '\x3', '\x2', '\x2', '\x2', '\x16B1', 
		'\x16AF', '\x3', '\x2', '\x2', '\x2', '\x16B1', '\x16B2', '\x3', '\x2', 
		'\x2', '\x2', '\x16B2', '\x249', '\x3', '\x2', '\x2', '\x2', '\x16B3', 
		'\x16B1', '\x3', '\x2', '\x2', '\x2', '\x16B4', '\x16B9', '\x5', '\x212', 
		'\x10A', '\x2', '\x16B5', '\x16B9', '\x5', '\x1EA', '\xF6', '\x2', '\x16B6', 
		'\x16B9', '\x5', '\x238', '\x11D', '\x2', '\x16B7', '\x16B9', '\x5', '\x24C', 
		'\x127', '\x2', '\x16B8', '\x16B4', '\x3', '\x2', '\x2', '\x2', '\x16B8', 
		'\x16B5', '\x3', '\x2', '\x2', '\x2', '\x16B8', '\x16B6', '\x3', '\x2', 
		'\x2', '\x2', '\x16B8', '\x16B7', '\x3', '\x2', '\x2', '\x2', '\x16B9', 
		'\x24B', '\x3', '\x2', '\x2', '\x2', '\x16BA', '\x16BB', '\b', '\x127', 
		'\x1', '\x2', '\x16BB', '\x16BC', '\t', 'g', '\x2', '\x2', '\x16BC', '\x16C6', 
		'\x5', '\x24C', '\x127', '\x6', '\x16BD', '\x16BE', '\x5', '\x24E', '\x128', 
		'\x2', '\x16BE', '\x16C0', '\a', 'L', '\x2', '\x2', '\x16BF', '\x16C1', 
		'\a', '\x63', '\x2', '\x2', '\x16C0', '\x16BF', '\x3', '\x2', '\x2', '\x2', 
		'\x16C0', '\x16C1', '\x3', '\x2', '\x2', '\x2', '\x16C1', '\x16C2', '\x3', 
		'\x2', '\x2', '\x2', '\x16C2', '\x16C3', '\t', 'h', '\x2', '\x2', '\x16C3', 
		'\x16C6', '\x3', '\x2', '\x2', '\x2', '\x16C4', '\x16C6', '\x5', '\x24E', 
		'\x128', '\x2', '\x16C5', '\x16BA', '\x3', '\x2', '\x2', '\x2', '\x16C5', 
		'\x16BD', '\x3', '\x2', '\x2', '\x2', '\x16C5', '\x16C4', '\x3', '\x2', 
		'\x2', '\x2', '\x16C6', '\x16CD', '\x3', '\x2', '\x2', '\x2', '\x16C7', 
		'\x16C8', '\f', '\x5', '\x2', '\x2', '\x16C8', '\x16C9', '\x5', '\x256', 
		'\x12C', '\x2', '\x16C9', '\x16CA', '\x5', '\x24C', '\x127', '\x6', '\x16CA', 
		'\x16CC', '\x3', '\x2', '\x2', '\x2', '\x16CB', '\x16C7', '\x3', '\x2', 
		'\x2', '\x2', '\x16CC', '\x16CF', '\x3', '\x2', '\x2', '\x2', '\x16CD', 
		'\x16CB', '\x3', '\x2', '\x2', '\x2', '\x16CD', '\x16CE', '\x3', '\x2', 
		'\x2', '\x2', '\x16CE', '\x24D', '\x3', '\x2', '\x2', '\x2', '\x16CF', 
		'\x16CD', '\x3', '\x2', '\x2', '\x2', '\x16D0', '\x16D3', '\b', '\x128', 
		'\x1', '\x2', '\x16D1', '\x16D2', '\a', '\x3CD', '\x2', '\x2', '\x16D2', 
		'\x16D4', '\a', '\x399', '\x2', '\x2', '\x16D3', '\x16D1', '\x3', '\x2', 
		'\x2', '\x2', '\x16D3', '\x16D4', '\x3', '\x2', '\x2', '\x2', '\x16D4', 
		'\x16D5', '\x3', '\x2', '\x2', '\x2', '\x16D5', '\x16D6', '\x5', '\x250', 
		'\x129', '\x2', '\x16D6', '\x1710', '\x3', '\x2', '\x2', '\x2', '\x16D7', 
		'\x16D8', '\f', '\t', '\x2', '\x2', '\x16D8', '\x16D9', '\x5', '\x254', 
		'\x12B', '\x2', '\x16D9', '\x16DA', '\x5', '\x24E', '\x128', '\n', '\x16DA', 
		'\x170F', '\x3', '\x2', '\x2', '\x2', '\x16DB', '\x16DD', '\f', '\a', 
		'\x2', '\x2', '\x16DC', '\x16DE', '\a', '\x63', '\x2', '\x2', '\x16DD', 
		'\x16DC', '\x3', '\x2', '\x2', '\x2', '\x16DD', '\x16DE', '\x3', '\x2', 
		'\x2', '\x2', '\x16DE', '\x16DF', '\x3', '\x2', '\x2', '\x2', '\x16DF', 
		'\x16E0', '\a', '\xF', '\x2', '\x2', '\x16E0', '\x16E1', '\x5', '\x24E', 
		'\x128', '\x2', '\x16E1', '\x16E2', '\a', '\v', '\x2', '\x2', '\x16E2', 
		'\x16E3', '\x5', '\x24E', '\x128', '\b', '\x16E3', '\x170F', '\x3', '\x2', 
		'\x2', '\x2', '\x16E4', '\x16E5', '\f', '\x6', '\x2', '\x2', '\x16E5', 
		'\x16E6', '\a', '\x1ED', '\x2', '\x2', '\x16E6', '\x16E7', '\a', 'U', 
		'\x2', '\x2', '\x16E7', '\x170F', '\x5', '\x24E', '\x128', '\a', '\x16E8', 
		'\x16EA', '\f', '\x4', '\x2', '\x2', '\x16E9', '\x16EB', '\a', '\x63', 
		'\x2', '\x2', '\x16EA', '\x16E9', '\x3', '\x2', '\x2', '\x2', '\x16EA', 
		'\x16EB', '\x3', '\x2', '\x2', '\x2', '\x16EB', '\x16EC', '\x3', '\x2', 
		'\x2', '\x2', '\x16EC', '\x16ED', '\t', 'i', '\x2', '\x2', '\x16ED', '\x170F', 
		'\x5', '\x24E', '\x128', '\x5', '\x16EE', '\x16F0', '\f', '\v', '\x2', 
		'\x2', '\x16EF', '\x16F1', '\a', '\x63', '\x2', '\x2', '\x16F0', '\x16EF', 
		'\x3', '\x2', '\x2', '\x2', '\x16F0', '\x16F1', '\x3', '\x2', '\x2', '\x2', 
		'\x16F1', '\x16F2', '\x3', '\x2', '\x2', '\x2', '\x16F2', '\x16F3', '\a', 
		'\x44', '\x2', '\x2', '\x16F3', '\x16F6', '\a', '\x3B3', '\x2', '\x2', 
		'\x16F4', '\x16F7', '\x5', '\xB4', '[', '\x2', '\x16F5', '\x16F7', '\x5', 
		'\x224', '\x113', '\x2', '\x16F6', '\x16F4', '\x3', '\x2', '\x2', '\x2', 
		'\x16F6', '\x16F5', '\x3', '\x2', '\x2', '\x2', '\x16F7', '\x16F8', '\x3', 
		'\x2', '\x2', '\x2', '\x16F8', '\x16F9', '\a', '\x3B4', '\x2', '\x2', 
		'\x16F9', '\x170F', '\x3', '\x2', '\x2', '\x2', '\x16FA', '\x16FB', '\f', 
		'\n', '\x2', '\x2', '\x16FB', '\x16FC', '\a', 'L', '\x2', '\x2', '\x16FC', 
		'\x170F', '\x5', '\x210', '\x109', '\x2', '\x16FD', '\x16FE', '\f', '\b', 
		'\x2', '\x2', '\x16FE', '\x16FF', '\x5', '\x254', '\x12B', '\x2', '\x16FF', 
		'\x1700', '\t', 'j', '\x2', '\x2', '\x1700', '\x1701', '\a', '\x3B3', 
		'\x2', '\x2', '\x1701', '\x1702', '\x5', '\xB4', '[', '\x2', '\x1702', 
		'\x1703', '\a', '\x3B4', '\x2', '\x2', '\x1703', '\x170F', '\x3', '\x2', 
		'\x2', '\x2', '\x1704', '\x1706', '\f', '\x5', '\x2', '\x2', '\x1705', 
		'\x1707', '\a', '\x63', '\x2', '\x2', '\x1706', '\x1705', '\x3', '\x2', 
		'\x2', '\x2', '\x1706', '\x1707', '\x3', '\x2', '\x2', '\x2', '\x1707', 
		'\x1708', '\x3', '\x2', '\x2', '\x2', '\x1708', '\x1709', '\a', 'U', '\x2', 
		'\x2', '\x1709', '\x170C', '\x5', '\x24E', '\x128', '\x2', '\x170A', '\x170B', 
		'\a', '\x13B', '\x2', '\x2', '\x170B', '\x170D', '\a', '\x3C2', '\x2', 
		'\x2', '\x170C', '\x170A', '\x3', '\x2', '\x2', '\x2', '\x170C', '\x170D', 
		'\x3', '\x2', '\x2', '\x2', '\x170D', '\x170F', '\x3', '\x2', '\x2', '\x2', 
		'\x170E', '\x16D7', '\x3', '\x2', '\x2', '\x2', '\x170E', '\x16DB', '\x3', 
		'\x2', '\x2', '\x2', '\x170E', '\x16E4', '\x3', '\x2', '\x2', '\x2', '\x170E', 
		'\x16E8', '\x3', '\x2', '\x2', '\x2', '\x170E', '\x16EE', '\x3', '\x2', 
		'\x2', '\x2', '\x170E', '\x16FA', '\x3', '\x2', '\x2', '\x2', '\x170E', 
		'\x16FD', '\x3', '\x2', '\x2', '\x2', '\x170E', '\x1704', '\x3', '\x2', 
		'\x2', '\x2', '\x170F', '\x1712', '\x3', '\x2', '\x2', '\x2', '\x1710', 
		'\x170E', '\x3', '\x2', '\x2', '\x2', '\x1710', '\x1711', '\x3', '\x2', 
		'\x2', '\x2', '\x1711', '\x24F', '\x3', '\x2', '\x2', '\x2', '\x1712', 
		'\x1710', '\x3', '\x2', '\x2', '\x2', '\x1713', '\x1714', '\b', '\x129', 
		'\x1', '\x2', '\x1714', '\x1741', '\x5', '\x212', '\x10A', '\x2', '\x1715', 
		'\x1741', '\x5', '\x1EA', '\xF6', '\x2', '\x1716', '\x1741', '\x5', '\x238', 
		'\x11D', '\x2', '\x1717', '\x1741', '\x5', '\x1F0', '\xF9', '\x2', '\x1718', 
		'\x1719', '\x5', '\x252', '\x12A', '\x2', '\x1719', '\x171A', '\x5', '\x250', 
		'\x129', '\v', '\x171A', '\x1741', '\x3', '\x2', '\x2', '\x2', '\x171B', 
		'\x171C', '\a', '\xBD', '\x2', '\x2', '\x171C', '\x1741', '\x5', '\x250', 
		'\x129', '\n', '\x171D', '\x171E', '\a', '\x3B3', '\x2', '\x2', '\x171E', 
		'\x1723', '\x5', '\x24C', '\x127', '\x2', '\x171F', '\x1720', '\a', '\x3B5', 
		'\x2', '\x2', '\x1720', '\x1722', '\x5', '\x24C', '\x127', '\x2', '\x1721', 
		'\x171F', '\x3', '\x2', '\x2', '\x2', '\x1722', '\x1725', '\x3', '\x2', 
		'\x2', '\x2', '\x1723', '\x1721', '\x3', '\x2', '\x2', '\x2', '\x1723', 
		'\x1724', '\x3', '\x2', '\x2', '\x2', '\x1724', '\x1726', '\x3', '\x2', 
		'\x2', '\x2', '\x1725', '\x1723', '\x3', '\x2', '\x2', '\x2', '\x1726', 
		'\x1727', '\a', '\x3B4', '\x2', '\x2', '\x1727', '\x1741', '\x3', '\x2', 
		'\x2', '\x2', '\x1728', '\x1729', '\a', '\x1DB', '\x2', '\x2', '\x1729', 
		'\x172A', '\a', '\x3B3', '\x2', '\x2', '\x172A', '\x172D', '\x5', '\x24C', 
		'\x127', '\x2', '\x172B', '\x172C', '\a', '\x3B5', '\x2', '\x2', '\x172C', 
		'\x172E', '\x5', '\x24C', '\x127', '\x2', '\x172D', '\x172B', '\x3', '\x2', 
		'\x2', '\x2', '\x172E', '\x172F', '\x3', '\x2', '\x2', '\x2', '\x172F', 
		'\x172D', '\x3', '\x2', '\x2', '\x2', '\x172F', '\x1730', '\x3', '\x2', 
		'\x2', '\x2', '\x1730', '\x1731', '\x3', '\x2', '\x2', '\x2', '\x1731', 
		'\x1732', '\a', '\x3B4', '\x2', '\x2', '\x1732', '\x1741', '\x3', '\x2', 
		'\x2', '\x2', '\x1733', '\x1734', '\a', '\x34', '\x2', '\x2', '\x1734', 
		'\x1735', '\a', '\x3B3', '\x2', '\x2', '\x1735', '\x1736', '\x5', '\xB4', 
		'[', '\x2', '\x1736', '\x1737', '\a', '\x3B4', '\x2', '\x2', '\x1737', 
		'\x1741', '\x3', '\x2', '\x2', '\x2', '\x1738', '\x1739', '\a', '\x3B3', 
		'\x2', '\x2', '\x1739', '\x173A', '\x5', '\xB4', '[', '\x2', '\x173A', 
		'\x173B', '\a', '\x3B4', '\x2', '\x2', '\x173B', '\x1741', '\x3', '\x2', 
		'\x2', '\x2', '\x173C', '\x173D', '\a', 'J', '\x2', '\x2', '\x173D', '\x173E', 
		'\x5', '\x24C', '\x127', '\x2', '\x173E', '\x173F', '\x5', '<', '\x1F', 
		'\x2', '\x173F', '\x1741', '\x3', '\x2', '\x2', '\x2', '\x1740', '\x1713', 
		'\x3', '\x2', '\x2', '\x2', '\x1740', '\x1715', '\x3', '\x2', '\x2', '\x2', 
		'\x1740', '\x1716', '\x3', '\x2', '\x2', '\x2', '\x1740', '\x1717', '\x3', 
		'\x2', '\x2', '\x2', '\x1740', '\x1718', '\x3', '\x2', '\x2', '\x2', '\x1740', 
		'\x171B', '\x3', '\x2', '\x2', '\x2', '\x1740', '\x171D', '\x3', '\x2', 
		'\x2', '\x2', '\x1740', '\x1728', '\x3', '\x2', '\x2', '\x2', '\x1740', 
		'\x1733', '\x3', '\x2', '\x2', '\x2', '\x1740', '\x1738', '\x3', '\x2', 
		'\x2', '\x2', '\x1740', '\x173C', '\x3', '\x2', '\x2', '\x2', '\x1741', 
		'\x174F', '\x3', '\x2', '\x2', '\x2', '\x1742', '\x1743', '\f', '\x4', 
		'\x2', '\x2', '\x1743', '\x1744', '\x5', '\x258', '\x12D', '\x2', '\x1744', 
		'\x1745', '\x5', '\x250', '\x129', '\x5', '\x1745', '\x174E', '\x3', '\x2', 
		'\x2', '\x2', '\x1746', '\x1747', '\f', '\x3', '\x2', '\x2', '\x1747', 
		'\x1748', '\x5', '\x25A', '\x12E', '\x2', '\x1748', '\x1749', '\x5', '\x250', 
		'\x129', '\x4', '\x1749', '\x174E', '\x3', '\x2', '\x2', '\x2', '\x174A', 
		'\x174B', '\f', '\r', '\x2', '\x2', '\x174B', '\x174C', '\a', '\x19', 
		'\x2', '\x2', '\x174C', '\x174E', '\x5', '\x1F4', '\xFB', '\x2', '\x174D', 
		'\x1742', '\x3', '\x2', '\x2', '\x2', '\x174D', '\x1746', '\x3', '\x2', 
		'\x2', '\x2', '\x174D', '\x174A', '\x3', '\x2', '\x2', '\x2', '\x174E', 
		'\x1751', '\x3', '\x2', '\x2', '\x2', '\x174F', '\x174D', '\x3', '\x2', 
		'\x2', '\x2', '\x174F', '\x1750', '\x3', '\x2', '\x2', '\x2', '\x1750', 
		'\x251', '\x3', '\x2', '\x2', '\x2', '\x1751', '\x174F', '\x3', '\x2', 
		'\x2', '\x2', '\x1752', '\x1753', '\t', 'k', '\x2', '\x2', '\x1753', '\x253', 
		'\x3', '\x2', '\x2', '\x2', '\x1754', '\x1763', '\a', '\x3AA', '\x2', 
		'\x2', '\x1755', '\x1763', '\a', '\x3AB', '\x2', '\x2', '\x1756', '\x1763', 
		'\a', '\x3AC', '\x2', '\x2', '\x1757', '\x1758', '\a', '\x3AC', '\x2', 
		'\x2', '\x1758', '\x1763', '\a', '\x3AA', '\x2', '\x2', '\x1759', '\x175A', 
		'\a', '\x3AB', '\x2', '\x2', '\x175A', '\x1763', '\a', '\x3AA', '\x2', 
		'\x2', '\x175B', '\x175C', '\a', '\x3AC', '\x2', '\x2', '\x175C', '\x1763', 
		'\a', '\x3AB', '\x2', '\x2', '\x175D', '\x175E', '\a', '\x3AD', '\x2', 
		'\x2', '\x175E', '\x1763', '\a', '\x3AA', '\x2', '\x2', '\x175F', '\x1760', 
		'\a', '\x3AC', '\x2', '\x2', '\x1760', '\x1761', '\a', '\x3AA', '\x2', 
		'\x2', '\x1761', '\x1763', '\a', '\x3AB', '\x2', '\x2', '\x1762', '\x1754', 
		'\x3', '\x2', '\x2', '\x2', '\x1762', '\x1755', '\x3', '\x2', '\x2', '\x2', 
		'\x1762', '\x1756', '\x3', '\x2', '\x2', '\x2', '\x1762', '\x1757', '\x3', 
		'\x2', '\x2', '\x2', '\x1762', '\x1759', '\x3', '\x2', '\x2', '\x2', '\x1762', 
		'\x175B', '\x3', '\x2', '\x2', '\x2', '\x1762', '\x175D', '\x3', '\x2', 
		'\x2', '\x2', '\x1762', '\x175F', '\x3', '\x2', '\x2', '\x2', '\x1763', 
		'\x255', '\x3', '\x2', '\x2', '\x2', '\x1764', '\x176C', '\a', '\v', '\x2', 
		'\x2', '\x1765', '\x1766', '\a', '\x3B0', '\x2', '\x2', '\x1766', '\x176C', 
		'\a', '\x3B0', '\x2', '\x2', '\x1767', '\x176C', '\a', '\xA9', '\x2', 
		'\x2', '\x1768', '\x176C', '\a', 'j', '\x2', '\x2', '\x1769', '\x176A', 
		'\a', '\x3AF', '\x2', '\x2', '\x176A', '\x176C', '\a', '\x3AF', '\x2', 
		'\x2', '\x176B', '\x1764', '\x3', '\x2', '\x2', '\x2', '\x176B', '\x1765', 
		'\x3', '\x2', '\x2', '\x2', '\x176B', '\x1767', '\x3', '\x2', '\x2', '\x2', 
		'\x176B', '\x1768', '\x3', '\x2', '\x2', '\x2', '\x176B', '\x1769', '\x3', 
		'\x2', '\x2', '\x2', '\x176C', '\x257', '\x3', '\x2', '\x2', '\x2', '\x176D', 
		'\x176E', '\a', '\x3AC', '\x2', '\x2', '\x176E', '\x1775', '\a', '\x3AC', 
		'\x2', '\x2', '\x176F', '\x1770', '\a', '\x3AB', '\x2', '\x2', '\x1770', 
		'\x1775', '\a', '\x3AB', '\x2', '\x2', '\x1771', '\x1775', '\a', '\x3B0', 
		'\x2', '\x2', '\x1772', '\x1775', '\a', '\x3B1', '\x2', '\x2', '\x1773', 
		'\x1775', '\a', '\x3AF', '\x2', '\x2', '\x1774', '\x176D', '\x3', '\x2', 
		'\x2', '\x2', '\x1774', '\x176F', '\x3', '\x2', '\x2', '\x2', '\x1774', 
		'\x1771', '\x3', '\x2', '\x2', '\x2', '\x1774', '\x1772', '\x3', '\x2', 
		'\x2', '\x2', '\x1774', '\x1773', '\x3', '\x2', '\x2', '\x2', '\x1775', 
		'\x259', '\x3', '\x2', '\x2', '\x2', '\x1776', '\x1777', '\t', 'l', '\x2', 
		'\x2', '\x1777', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x1778', '\x1779', 
		'\t', 'm', '\x2', '\x2', '\x1779', '\x25D', '\x3', '\x2', '\x2', '\x2', 
		'\x177A', '\x177B', '\t', 'n', '\x2', '\x2', '\x177B', '\x25F', '\x3', 
		'\x2', '\x2', '\x2', '\x177C', '\x177D', '\t', 'o', '\x2', '\x2', '\x177D', 
		'\x261', '\x3', '\x2', '\x2', '\x2', '\x177E', '\x177F', '\t', 'p', '\x2', 
		'\x2', '\x177F', '\x263', '\x3', '\x2', '\x2', '\x2', '\x1780', '\x1781', 
		'\t', 'q', '\x2', '\x2', '\x1781', '\x265', '\x3', '\x2', '\x2', '\x2', 
		'\x1782', '\x1783', '\t', 'r', '\x2', '\x2', '\x1783', '\x267', '\x3', 
		'\x2', '\x2', '\x2', '\x1784', '\x1785', '\t', 's', '\x2', '\x2', '\x1785', 
		'\x269', '\x3', '\x2', '\x2', '\x2', '\x364', '\x26B', '\x26E', '\x274', 
		'\x279', '\x27B', '\x280', '\x283', '\x286', '\x28F', '\x2B6', '\x2C2', 
		'\x2CD', '\x2DE', '\x2E3', '\x2EF', '\x30A', '\x310', '\x315', '\x31B', 
		'\x320', '\x324', '\x32D', '\x330', '\x333', '\x337', '\x33E', '\x341', 
		'\x346', '\x34E', '\x353', '\x358', '\x35B', '\x366', '\x369', '\x36D', 
		'\x370', '\x374', '\x377', '\x37B', '\x37E', '\x381', '\x385', '\x388', 
		'\x38C', '\x392', '\x398', '\x39E', '\x3A5', '\x3AC', '\x3B2', '\x3B8', 
		'\x3C1', '\x3D4', '\x3DB', '\x3DF', '\x3E9', '\x3ED', '\x3F1', '\x3F5', 
		'\x3F9', '\x3FE', '\x401', '\x404', '\x407', '\x40A', '\x410', '\x414', 
		'\x41A', '\x41F', '\x422', '\x425', '\x427', '\x432', '\x436', '\x439', 
		'\x447', '\x44A', '\x44E', '\x451', '\x455', '\x458', '\x45C', '\x45F', 
		'\x463', '\x466', '\x469', '\x46D', '\x470', '\x474', '\x47A', '\x487', 
		'\x48E', '\x493', '\x496', '\x49B', '\x4A3', '\x4A9', '\x4AD', '\x4B0', 
		'\x4B5', '\x4B8', '\x4BC', '\x4C0', '\x4C3', '\x4CB', '\x4CD', '\x4D4', 
		'\x4DA', '\x4E2', '\x4E5', '\x4EC', '\x4EF', '\x4F1', '\x4F7', '\x4FD', 
		'\x50E', '\x515', '\x51C', '\x525', '\x533', '\x540', '\x545', '\x555', 
		'\x55D', '\x567', '\x56D', '\x575', '\x57A', '\x583', '\x587', '\x589', 
		'\x58E', '\x594', '\x599', '\x59B', '\x59F', '\x5A2', '\x5A5', '\x5AB', 
		'\x5B0', '\x5B2', '\x5B7', '\x5BE', '\x5C0', '\x5C7', '\x5CE', '\x5D1', 
		'\x5D9', '\x5E1', '\x5E3', '\x5EB', '\x5EF', '\x5F2', '\x5F8', '\x5FD', 
		'\x600', '\x606', '\x609', '\x60D', '\x612', '\x617', '\x61B', '\x620', 
		'\x623', '\x628', '\x62C', '\x630', '\x635', '\x63A', '\x63F', '\x645', 
		'\x64A', '\x64F', '\x655', '\x65A', '\x65F', '\x664', '\x669', '\x66E', 
		'\x673', '\x678', '\x67D', '\x682', '\x687', '\x68D', '\x691', '\x697', 
		'\x6A1', '\x6A8', '\x6AA', '\x6B2', '\x6B7', '\x6BA', '\x6C2', '\x6C8', 
		'\x6D8', '\x6E4', '\x6E6', '\x6E9', '\x6F1', '\x6F7', '\x6FD', '\x70A', 
		'\x711', '\x719', '\x71C', '\x728', '\x72F', '\x737', '\x73A', '\x746', 
		'\x74D', '\x755', '\x758', '\x75F', '\x767', '\x76A', '\x76C', '\x771', 
		'\x779', '\x782', '\x786', '\x78A', '\x78F', '\x795', '\x79B', '\x7A0', 
		'\x7A5', '\x7AA', '\x7AF', '\x7B2', '\x7B7', '\x7BC', '\x7C6', '\x7CA', 
		'\x7D1', '\x7D6', '\x7D9', '\x7DE', '\x7E1', '\x7E5', '\x7E9', '\x7F1', 
		'\x804', '\x807', '\x80A', '\x80E', '\x818', '\x825', '\x82C', '\x82F', 
		'\x838', '\x83C', '\x847', '\x84A', '\x84E', '\x856', '\x859', '\x85E', 
		'\x866', '\x86C', '\x870', '\x875', '\x87C', '\x880', '\x88B', '\x893', 
		'\x896', '\x89C', '\x8A2', '\x8A4', '\x8A9', '\x8AF', '\x8B5', '\x8B7', 
		'\x8BB', '\x8BE', '\x8C1', '\x8C7', '\x8CD', '\x8D0', '\x8D6', '\x8DC', 
		'\x8DE', '\x8E3', '\x8EB', '\x8ED', '\x8F6', '\x8FB', '\x903', '\x907', 
		'\x90F', '\x913', '\x918', '\x91F', '\x923', '\x936', '\x943', '\x946', 
		'\x94F', '\x962', '\x969', '\x970', '\x97F', '\x98C', '\x992', '\x998', 
		'\x99E', '\x9A4', '\x9AA', '\x9B0', '\x9B5', '\x9BC', '\x9C3', '\x9CA', 
		'\x9CD', '\x9D1', '\x9D4', '\x9E1', '\x9E8', '\x9EF', '\x9F5', '\x9F9', 
		'\x9FD', '\xA04', '\xA07', '\xA0C', '\xA13', '\xA1A', '\xA1E', '\xA27', 
		'\xA30', '\xA39', '\xA3C', '\xA40', '\xA49', '\xA4D', '\xA50', '\xA53', 
		'\xA5B', '\xA61', '\xA6A', '\xA6D', '\xA78', '\xA7B', '\xA80', '\xA83', 
		'\xA88', '\xA92', '\xA97', '\xA9D', '\xA9F', '\xAA5', '\xAA7', '\xAAD', 
		'\xAB5', '\xABA', '\xAC2', '\xAC5', '\xACA', '\xACD', '\xAD2', '\xADA', 
		'\xAE2', '\xAE8', '\xAF0', '\xAF5', '\xAFD', '\xB00', '\xB04', '\xB07', 
		'\xB0F', '\xB15', '\xB1E', '\xB21', '\xB25', '\xB29', '\xB2F', '\xB33', 
		'\xB37', '\xB39', '\xB3C', '\xB3F', '\xB42', '\xB48', '\xB4C', '\xB4F', 
		'\xB52', '\xB55', '\xB58', '\xB5A', '\xB5E', '\xB6C', '\xB6F', '\xB75', 
		'\xB79', '\xB81', '\xB85', '\xB88', '\xB8B', '\xB94', '\xB98', '\xB9B', 
		'\xB9F', '\xBA3', '\xBA6', '\xBA9', '\xBAE', '\xBB4', '\xBB8', '\xBC2', 
		'\xBC8', '\xBCC', '\xBD2', '\xBD6', '\xBDC', '\xBDF', '\xBEB', '\xBEF', 
		'\xBF3', '\xBFB', '\xBFF', '\xC07', '\xC0A', '\xC0E', '\xC11', '\xC19', 
		'\xC1E', '\xC21', '\xC24', '\xC28', '\xC2B', '\xC34', '\xC39', '\xC42', 
		'\xC47', '\xC4E', '\xC55', '\xC5D', '\xC62', '\xC6A', '\xC6D', '\xC70', 
		'\xC77', '\xC7A', '\xC81', '\xC84', '\xC8C', '\xC92', '\xC9D', '\xCA0', 
		'\xCAB', '\xCB1', '\xCB5', '\xCC0', '\xCC5', '\xCC7', '\xCCB', '\xCD5', 
		'\xCDF', '\xCE5', '\xCEA', '\xCED', '\xCF0', '\xCF3', '\xCF9', '\xCFE', 
		'\xD01', '\xD04', '\xD07', '\xD09', '\xD0F', '\xD14', '\xD17', '\xD1A', 
		'\xD1E', '\xD24', '\xD28', '\xD32', '\xD36', '\xD3C', '\xD45', '\xD48', 
		'\xD4C', '\xD4F', '\xD53', '\xD57', '\xD5A', '\xD5C', '\xD64', '\xD70', 
		'\xD76', '\xD78', '\xD7E', '\xD80', '\xD82', '\xD88', '\xD90', '\xD98', 
		'\xD9E', '\xDA7', '\xDAC', '\xDAE', '\xDB2', '\xDB6', '\xDBC', '\xDC3', 
		'\xDCC', '\xDCF', '\xDD3', '\xDD7', '\xDDB', '\xDDE', '\xDE1', '\xDE4', 
		'\xDE8', '\xDEC', '\xDEF', '\xDF2', '\xDF5', '\xDFC', '\xE00', '\xE0F', 
		'\xE1C', '\xE24', '\xE2E', '\xE32', '\xE35', '\xE3B', '\xE3E', '\xE41', 
		'\xE4A', '\xE53', '\xE5D', '\xE61', '\xE6B', '\xE75', '\xE7D', '\xE80', 
		'\xE89', '\xE8C', '\xE90', '\xE95', '\xE99', '\xEA2', '\xEA5', '\xEC4', 
		'\xEC7', '\xECA', '\xF02', '\xF07', '\xF23', '\xF31', '\xF38', '\xF3C', 
		'\xF42', '\xF4A', '\xF4C', '\xF57', '\xF61', '\xF68', '\xF6E', '\xF76', 
		'\xF7B', '\xF83', '\xF8B', '\xF93', '\xF9B', '\xFA1', '\xFA3', '\xFA7', 
		'\xFAC', '\xFB1', '\xFB7', '\xFB9', '\xFC4', '\xFC9', '\xFD0', '\xFD2', 
		'\xFE0', '\xFE6', '\xFEB', '\xFF0', '\xFF6', '\xFFD', '\x1005', '\x100D', 
		'\x1012', '\x1018', '\x101B', '\x1023', '\x102A', '\x1033', '\x1036', 
		'\x1047', '\x104F', '\x1057', '\x105B', '\x1062', '\x1068', '\x1070', 
		'\x1079', '\x107F', '\x1086', '\x108D', '\x1092', '\x1095', '\x1097', 
		'\x109D', '\x109F', '\x10A3', '\x10A5', '\x10A8', '\x10B1', '\x10B7', 
		'\x10BE', '\x10C5', '\x10CA', '\x10CD', '\x10CF', '\x10D5', '\x10D7', 
		'\x10DB', '\x10DD', '\x10E0', '\x10E5', '\x10EC', '\x10F5', '\x10FA', 
		'\x1103', '\x110A', '\x110F', '\x1112', '\x1114', '\x111A', '\x111C', 
		'\x111F', '\x112B', '\x1131', '\x113A', '\x1143', '\x1148', '\x1151', 
		'\x1157', '\x1162', '\x1165', '\x1171', '\x1178', '\x117D', '\x118C', 
		'\x1197', '\x119A', '\x11A4', '\x11AE', '\x11B8', '\x11C2', '\x11C6', 
		'\x11CA', '\x11D3', '\x11EE', '\x11FD', '\x1205', '\x1210', '\x1217', 
		'\x121B', '\x1222', '\x1227', '\x122A', '\x122D', '\x1236', '\x123A', 
		'\x1258', '\x125F', '\x1263', '\x126A', '\x126D', '\x1272', '\x127C', 
		'\x1280', '\x1286', '\x1289', '\x128E', '\x1292', '\x1299', '\x129C', 
		'\x12A2', '\x12BA', '\x12C7', '\x12CA', '\x12D4', '\x12DC', '\x12E0', 
		'\x12E7', '\x12EA', '\x12F3', '\x12F9', '\x12FF', '\x1309', '\x130B', 
		'\x1311', '\x1314', '\x1317', '\x1323', '\x1326', '\x132C', '\x132F', 
		'\x1337', '\x133F', '\x1345', '\x1349', '\x1357', '\x1363', '\x136A', 
		'\x136D', '\x1374', '\x137B', '\x1380', '\x1385', '\x1390', '\x139B', 
		'\x13A1', '\x13A6', '\x13B3', '\x13B5', '\x13BA', '\x13BF', '\x13C1', 
		'\x13C8', '\x13CF', '\x13D2', '\x13D5', '\x13DB', '\x13DF', '\x13E5', 
		'\x13EB', '\x13FA', '\x13FF', '\x1405', '\x140C', '\x140E', '\x1415', 
		'\x1418', '\x1422', '\x1426', '\x143A', '\x1441', '\x1443', '\x144A', 
		'\x144C', '\x1450', '\x1455', '\x1460', '\x1465', '\x146B', '\x146E', 
		'\x1472', '\x1477', '\x147A', '\x147E', '\x1482', '\x1484', '\x1489', 
		'\x148E', '\x149B', '\x149E', '\x14A2', '\x14A5', '\x14AA', '\x14AE', 
		'\x14B2', '\x14B5', '\x14B8', '\x14BC', '\x14BF', '\x14C2', '\x14C6', 
		'\x14C9', '\x14CC', '\x14D1', '\x14DA', '\x14DF', '\x14E4', '\x14E8', 
		'\x14EB', '\x14EF', '\x14F3', '\x14F8', '\x14FD', '\x1501', '\x1503', 
		'\x1513', '\x151C', '\x1524', '\x152D', '\x1537', '\x153F', '\x1547', 
		'\x154F', '\x1557', '\x1560', '\x1562', '\x1567', '\x156A', '\x156F', 
		'\x1572', '\x1576', '\x1584', '\x158B', '\x1590', '\x15B2', '\x15B6', 
		'\x15BE', '\x15C2', '\x15CB', '\x15D3', '\x15D8', '\x15E0', '\x15E5', 
		'\x15EA', '\x15EC', '\x15F5', '\x15FA', '\x1602', '\x1607', '\x160F', 
		'\x1617', '\x161A', '\x1624', '\x162F', '\x163C', '\x1644', '\x1648', 
		'\x164D', '\x1656', '\x1659', '\x1665', '\x166D', '\x1677', '\x167A', 
		'\x167E', '\x1682', '\x169B', '\x16A6', '\x16AD', '\x16B1', '\x16B8', 
		'\x16C0', '\x16C5', '\x16CD', '\x16D3', '\x16DD', '\x16EA', '\x16F0', 
		'\x16F6', '\x1706', '\x170C', '\x170E', '\x1710', '\x1723', '\x172F', 
		'\x1740', '\x174D', '\x174F', '\x1762', '\x176B', '\x1774',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
